/*! For license information please see main.ecc6.js.LICENSE.txt */
(()=>{var t={3099:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},6077:(t,e,n)=>{var r=n(111);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},1223:(t,e,n)=>{var r=n(5112),o=n(30),i=n(3070),a=r("unscopables"),s=Array.prototype;null==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),t.exports=function(t){s[a][t]=!0}},1530:(t,e,n)=>{"use strict";var r=n(8710).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},5787:t=>{t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},9670:(t,e,n)=>{var r=n(111);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},4019:t=>{t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},260:(t,e,n)=>{"use strict";var r,o,i,a=n(4019),s=n(9781),c=n(7854),u=n(111),l=n(6656),f=n(648),p=n(8880),d=n(1320),h=n(3070).f,v=n(9518),g=n(7674),b=n(5112),m=n(9711),y=c.Int8Array,x=y&&y.prototype,_=c.Uint8ClampedArray,w=_&&_.prototype,A=y&&v(y),C=x&&v(x),S=Object.prototype,k=S.isPrototypeOf,O=b("toStringTag"),E=m("TYPED_ARRAY_TAG"),I=m("TYPED_ARRAY_CONSTRUCTOR"),M=a&&!!g&&"Opera"!==f(c.opera),T=!1,j={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},R={BigInt64Array:8,BigUint64Array:8},P=function(t){if(!u(t))return!1;var e=f(t);return l(j,e)||l(R,e)};for(r in j)(i=(o=c[r])&&o.prototype)?p(i,I,o):M=!1;for(r in R)(i=(o=c[r])&&o.prototype)&&p(i,I,o);if((!M||"function"!=typeof A||A===Function.prototype)&&(A=function(){throw TypeError("Incorrect invocation")},M))for(r in j)c[r]&&g(c[r],A);if((!M||!C||C===S)&&(C=A.prototype,M))for(r in j)c[r]&&g(c[r].prototype,C);if(M&&v(w)!==C&&g(w,C),s&&!l(C,O))for(r in T=!0,h(C,O,{get:function(){return u(this)?this[E]:void 0}}),j)c[r]&&p(c[r],E,r);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:M,TYPED_ARRAY_CONSTRUCTOR:I,TYPED_ARRAY_TAG:T&&E,aTypedArray:function(t){if(P(t))return t;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(t){if(g&&!k.call(A,t))throw TypeError("Target is not a typed array constructor");return t},exportTypedArrayMethod:function(t,e,n){if(s){if(n)for(var r in j){var o=c[r];if(o&&l(o.prototype,t))try{delete o.prototype[t]}catch(t){}}C[t]&&!n||d(C,t,n?e:M&&x[t]||e)}},exportTypedArrayStaticMethod:function(t,e,n){var r,o;if(s){if(g){if(n)for(r in j)if((o=c[r])&&l(o,t))try{delete o[t]}catch(t){}if(A[t]&&!n)return;try{return d(A,t,n?e:M&&A[t]||e)}catch(t){}}for(r in j)!(o=c[r])||o[t]&&!n||d(o,t,e)}},isView:function(t){if(!u(t))return!1;var e=f(t);return"DataView"===e||l(j,e)||l(R,e)},isTypedArray:P,TypedArray:A,TypedArrayPrototype:C}},3331:(t,e,n)=>{"use strict";var r=n(7854),o=n(9781),i=n(4019),a=n(8880),s=n(2248),c=n(7293),u=n(5787),l=n(9958),f=n(7466),p=n(7067),d=n(1179),h=n(9518),v=n(7674),g=n(8006).f,b=n(3070).f,m=n(1285),y=n(8003),x=n(9909),_=x.get,w=x.set,A="ArrayBuffer",C="DataView",S="Wrong index",k=r.ArrayBuffer,O=k,E=r.DataView,I=E&&E.prototype,M=Object.prototype,T=r.RangeError,j=d.pack,R=d.unpack,P=function(t){return[255&t]},B=function(t){return[255&t,t>>8&255]},$=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},F=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},L=function(t){return j(t,23,4)},N=function(t){return j(t,52,8)},D=function(t,e){b(t.prototype,e,{get:function(){return _(this)[e]}})},U=function(t,e,n,r){var o=p(n),i=_(t);if(o+e>i.byteLength)throw T(S);var a=_(i.buffer).bytes,s=o+i.byteOffset,c=a.slice(s,s+e);return r?c:c.reverse()},z=function(t,e,n,r,o,i){var a=p(n),s=_(t);if(a+e>s.byteLength)throw T(S);for(var c=_(s.buffer).bytes,u=a+s.byteOffset,l=r(+o),f=0;f<e;f++)c[u+f]=l[i?f:e-f-1]};if(i){if(!c((function(){k(1)}))||!c((function(){new k(-1)}))||c((function(){return new k,new k(1.5),new k(NaN),k.name!=A}))){for(var H,G=(O=function(t){return u(this,O),new k(p(t))}).prototype=k.prototype,W=g(k),V=0;W.length>V;)(H=W[V++])in O||a(O,H,k[H]);G.constructor=O}v&&h(I)!==M&&v(I,M);var q=new E(new O(2)),Y=I.setInt8;q.setInt8(0,2147483648),q.setInt8(1,2147483649),!q.getInt8(0)&&q.getInt8(1)||s(I,{setInt8:function(t,e){Y.call(this,t,e<<24>>24)},setUint8:function(t,e){Y.call(this,t,e<<24>>24)}},{unsafe:!0})}else O=function(t){u(this,O,A);var e=p(t);w(this,{bytes:m.call(new Array(e),0),byteLength:e}),o||(this.byteLength=e)},E=function(t,e,n){u(this,E,C),u(t,O,C);var r=_(t).byteLength,i=l(e);if(i<0||i>r)throw T("Wrong offset");if(i+(n=void 0===n?r-i:f(n))>r)throw T("Wrong length");w(this,{buffer:t,byteLength:n,byteOffset:i}),o||(this.buffer=t,this.byteLength=n,this.byteOffset=i)},o&&(D(O,"byteLength"),D(E,"buffer"),D(E,"byteLength"),D(E,"byteOffset")),s(E.prototype,{getInt8:function(t){return U(this,1,t)[0]<<24>>24},getUint8:function(t){return U(this,1,t)[0]},getInt16:function(t){var e=U(this,2,t,arguments.length>1?arguments[1]:void 0);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=U(this,2,t,arguments.length>1?arguments[1]:void 0);return e[1]<<8|e[0]},getInt32:function(t){return F(U(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return F(U(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return R(U(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return R(U(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,e){z(this,1,t,P,e)},setUint8:function(t,e){z(this,1,t,P,e)},setInt16:function(t,e){z(this,2,t,B,e,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,e){z(this,2,t,B,e,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,e){z(this,4,t,$,e,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,e){z(this,4,t,$,e,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,e){z(this,4,t,L,e,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,e){z(this,8,t,N,e,arguments.length>2?arguments[2]:void 0)}});y(O,A),y(E,C),t.exports={ArrayBuffer:O,DataView:E}},1048:(t,e,n)=>{"use strict";var r=n(7908),o=n(1400),i=n(7466),a=Math.min;t.exports=[].copyWithin||function(t,e){var n=r(this),s=i(n.length),c=o(t,s),u=o(e,s),l=arguments.length>2?arguments[2]:void 0,f=a((void 0===l?s:o(l,s))-u,s-c),p=1;for(u<c&&c<u+f&&(p=-1,u+=f-1,c+=f-1);f-- >0;)u in n?n[c]=n[u]:delete n[c],c+=p,u+=p;return n}},1285:(t,e,n)=>{"use strict";var r=n(7908),o=n(1400),i=n(7466);t.exports=function(t){for(var e=r(this),n=i(e.length),a=arguments.length,s=o(a>1?arguments[1]:void 0,n),c=a>2?arguments[2]:void 0,u=void 0===c?n:o(c,n);u>s;)e[s++]=t;return e}},8533:(t,e,n)=>{"use strict";var r=n(2092).forEach,o=n(2133)("forEach");t.exports=o?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},7745:t=>{t.exports=function(t,e){for(var n=0,r=e.length,o=new t(r);r>n;)o[n]=e[n++];return o}},8457:(t,e,n)=>{"use strict";var r=n(9974),o=n(7908),i=n(3411),a=n(7659),s=n(7466),c=n(6135),u=n(8554),l=n(1246);t.exports=function(t){var e,n,f,p,d,h,v=o(t),g="function"==typeof this?this:Array,b=arguments.length,m=b>1?arguments[1]:void 0,y=void 0!==m,x=l(v),_=0;if(y&&(m=r(m,b>2?arguments[2]:void 0,2)),null==x||g==Array&&a(x))for(n=new g(e=s(v.length));e>_;_++)h=y?m(v[_],_):v[_],c(n,_,h);else for(d=(p=u(v,x)).next,n=new g;!(f=d.call(p)).done;_++)h=y?i(p,m,[f.value,_],!0):f.value,c(n,_,h);return n.length=_,n}},1318:(t,e,n)=>{var r=n(5656),o=n(7466),i=n(1400),a=function(t){return function(e,n,a){var s,c=r(e),u=o(c.length),l=i(a,u);if(t&&n!=n){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((t||l in c)&&c[l]===n)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:(t,e,n)=>{var r=n(9974),o=n(8361),i=n(7908),a=n(7466),s=n(5417),c=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,l=4==t,f=6==t,p=7==t,d=5==t||f;return function(h,v,g,b){for(var m,y,x=i(h),_=o(x),w=r(v,g,3),A=a(_.length),C=0,S=b||s,k=e?S(h,A):n||p?S(h,0):void 0;A>C;C++)if((d||C in _)&&(y=w(m=_[C],C,x),t))if(e)k[C]=y;else if(y)switch(t){case 3:return!0;case 5:return m;case 6:return C;case 2:c.call(k,m)}else switch(t){case 4:return!1;case 7:c.call(k,m)}return f?-1:u||l?l:k}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},6583:(t,e,n)=>{"use strict";var r=n(5656),o=n(9958),i=n(7466),a=n(2133),s=Math.min,c=[].lastIndexOf,u=!!c&&1/[1].lastIndexOf(1,-0)<0,l=a("lastIndexOf"),f=u||!l;t.exports=f?function(t){if(u)return c.apply(this,arguments)||0;var e=r(this),n=i(e.length),a=n-1;for(arguments.length>1&&(a=s(a,o(arguments[1]))),a<0&&(a=n+a);a>=0;a--)if(a in e&&e[a]===t)return a||0;return-1}:c},1194:(t,e,n)=>{var r=n(7293),o=n(5112),i=n(7392),a=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2133:(t,e,n)=>{"use strict";var r=n(7293);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},3671:(t,e,n)=>{var r=n(3099),o=n(7908),i=n(8361),a=n(7466),s=function(t){return function(e,n,s,c){r(n);var u=o(e),l=i(u),f=a(u.length),p=t?f-1:0,d=t?-1:1;if(s<2)for(;;){if(p in l){c=l[p],p+=d;break}if(p+=d,t?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;t?p>=0:f>p;p+=d)p in l&&(c=n(c,l[p],p,u));return c}};t.exports={left:s(!1),right:s(!0)}},4362:t=>{var e=Math.floor,n=function(t,i){var a=t.length,s=e(a/2);return a<8?r(t,i):o(n(t.slice(0,s),i),n(t.slice(s),i),i)},r=function(t,e){for(var n,r,o=t.length,i=1;i<o;){for(r=i,n=t[i];r&&e(t[r-1],n)>0;)t[r]=t[--r];r!==i++&&(t[r]=n)}return t},o=function(t,e,n){for(var r=t.length,o=e.length,i=0,a=0,s=[];i<r||a<o;)i<r&&a<o?s.push(n(t[i],e[a])<=0?t[i++]:e[a++]):s.push(i<r?t[i++]:e[a++]);return s};t.exports=n},7475:(t,e,n)=>{var r=n(111),o=n(3157),i=n(5112)("species");t.exports=function(t){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)?r(e)&&null===(e=e[i])&&(e=void 0):e=void 0),void 0===e?Array:e}},5417:(t,e,n)=>{var r=n(7475);t.exports=function(t,e){return new(r(t))(0===e?0:e)}},3411:(t,e,n)=>{var r=n(9670),o=n(9212);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){o(t,"throw",e)}}},7072:(t,e,n)=>{var r=n(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},4326:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},648:(t,e,n)=>{var r=n(1694),o=n(4326),i=n(5112)("toStringTag"),a="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:a?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},1501:(t,e,n)=>{"use strict";var r=n(9670),o=n(3099);t.exports=function(){for(var t=r(this),e=o(t.add),n=0,i=arguments.length;n<i;n++)e.call(t,arguments[n]);return t}},4092:(t,e,n)=>{"use strict";var r=n(9670),o=n(3099);t.exports=function(){for(var t,e=r(this),n=o(e.delete),i=!0,a=0,s=arguments.length;a<s;a++)t=n.call(e,arguments[a]),i=i&&t;return!!i}},7296:(t,e,n)=>{"use strict";var r=n(3099),o=n(9974),i=n(408);t.exports=function(t){var e,n,a,s,c=arguments.length,u=c>1?arguments[1]:void 0;return r(this),(e=void 0!==u)&&r(u),null==t?new this:(n=[],e?(a=0,s=o(u,c>2?arguments[2]:void 0,2),i(t,(function(t){n.push(s(t,a++))}))):i(t,n.push,{that:n}),new this(n))}},2044:t=>{"use strict";t.exports=function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}},5631:(t,e,n)=>{"use strict";var r=n(3070).f,o=n(30),i=n(2248),a=n(9974),s=n(5787),c=n(408),u=n(654),l=n(6340),f=n(9781),p=n(2423).fastKey,d=n(9909),h=d.set,v=d.getterFor;t.exports={getConstructor:function(t,e,n,u){var l=t((function(t,r){s(t,l,e),h(t,{type:e,index:o(null),first:void 0,last:void 0,size:0}),f||(t.size=0),null!=r&&c(r,t[u],{that:t,AS_ENTRIES:n})})),d=v(e),g=function(t,e,n){var r,o,i=d(t),a=b(t,e);return a?a.value=n:(i.last=a={index:o=p(e,!0),key:e,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=a),r&&(r.next=a),f?i.size++:t.size++,"F"!==o&&(i.index[o]=a)),t},b=function(t,e){var n,r=d(t),o=p(e);if("F"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key==e)return n};return i(l.prototype,{clear:function(){for(var t=d(this),e=t.index,n=t.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete e[n.index],n=n.next;t.first=t.last=void 0,f?t.size=0:this.size=0},delete:function(t){var e=this,n=d(e),r=b(e,t);if(r){var o=r.next,i=r.previous;delete n.index[r.index],r.removed=!0,i&&(i.next=o),o&&(o.previous=i),n.first==r&&(n.first=o),n.last==r&&(n.last=i),f?n.size--:e.size--}return!!r},forEach:function(t){for(var e,n=d(this),r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.next:n.first;)for(r(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!b(this,t)}}),i(l.prototype,n?{get:function(t){var e=b(this,t);return e&&e.value},set:function(t,e){return g(this,0===t?0:t,e)}}:{add:function(t){return g(this,t=0===t?0:t,t)}}),f&&r(l.prototype,"size",{get:function(){return d(this).size}}),l},setStrong:function(t,e,n){var r=e+" Iterator",o=v(e),i=v(r);u(t,e,(function(t,e){h(this,{type:r,target:t,state:o(t),kind:e,last:void 0})}),(function(){for(var t=i(this),e=t.kind,n=t.last;n&&n.removed;)n=n.previous;return t.target&&(t.last=n=n?n.next:t.state.first)?"keys"==e?{value:n.key,done:!1}:"values"==e?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),l(e)}}},9320:(t,e,n)=>{"use strict";var r=n(2248),o=n(2423).getWeakData,i=n(9670),a=n(111),s=n(5787),c=n(408),u=n(2092),l=n(6656),f=n(9909),p=f.set,d=f.getterFor,h=u.find,v=u.findIndex,g=0,b=function(t){return t.frozen||(t.frozen=new m)},m=function(){this.entries=[]},y=function(t,e){return h(t.entries,(function(t){return t[0]===e}))};m.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var n=y(this,t);n?n[1]=e:this.entries.push([t,e])},delete:function(t){var e=v(this.entries,(function(e){return e[0]===t}));return~e&&this.entries.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,u){var f=t((function(t,r){s(t,f,e),p(t,{type:e,id:g++,frozen:void 0}),null!=r&&c(r,t[u],{that:t,AS_ENTRIES:n})})),h=d(e),v=function(t,e,n){var r=h(t),a=o(i(e),!0);return!0===a?b(r).set(e,n):a[r.id]=n,t};return r(f.prototype,{delete:function(t){var e=h(this);if(!a(t))return!1;var n=o(t);return!0===n?b(e).delete(t):n&&l(n,e.id)&&delete n[e.id]},has:function(t){var e=h(this);if(!a(t))return!1;var n=o(t);return!0===n?b(e).has(t):n&&l(n,e.id)}}),r(f.prototype,n?{get:function(t){var e=h(this);if(a(t)){var n=o(t);return!0===n?b(e).get(t):n?n[e.id]:void 0}},set:function(t,e){return v(this,t,e)}}:{add:function(t){return v(this,t,!0)}}),f}}},7710:(t,e,n)=>{"use strict";var r=n(2109),o=n(7854),i=n(4705),a=n(1320),s=n(2423),c=n(408),u=n(5787),l=n(111),f=n(7293),p=n(7072),d=n(8003),h=n(9587);t.exports=function(t,e,n){var v=-1!==t.indexOf("Map"),g=-1!==t.indexOf("Weak"),b=v?"set":"add",m=o[t],y=m&&m.prototype,x=m,_={},w=function(t){var e=y[t];a(y,t,"add"==t?function(t){return e.call(this,0===t?0:t),this}:"delete"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!l(t)?void 0:e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:function(t,n){return e.call(this,0===t?0:t,n),this})};if(i(t,"function"!=typeof m||!(g||y.forEach&&!f((function(){(new m).entries().next()})))))x=n.getConstructor(e,t,v,b),s.enable();else if(i(t,!0)){var A=new x,C=A[b](g?{}:-0,1)!=A,S=f((function(){A.has(1)})),k=p((function(t){new m(t)})),O=!g&&f((function(){for(var t=new m,e=5;e--;)t[b](e,e);return!t.has(-0)}));k||((x=e((function(e,n){u(e,x,t);var r=h(new m,e,x);return null!=n&&c(n,r[b],{that:r,AS_ENTRIES:v}),r}))).prototype=y,y.constructor=x),(S||O)&&(w("delete"),w("has"),v&&w("get")),(O||C)&&w(b),g&&y.clear&&delete y.clear}return _[t]=x,r({global:!0,forced:x!=m},_),d(x,t),g||n.setStrong(x,t,v),x}},313:(t,e,n)=>{var r=n(1532),o=n(4129),i=n(30),a=n(111),s=function(){this.object=null,this.symbol=null,this.primitives=null,this.objectsByIndex=i(null)};s.prototype.get=function(t,e){return this[t]||(this[t]=e())},s.prototype.next=function(t,e,n){var i=n?this.objectsByIndex[t]||(this.objectsByIndex[t]=new o):this.primitives||(this.primitives=new r),a=i.get(e);return a||i.set(e,a=new s),a};var c=new s;t.exports=function(){var t,e,n=c,r=arguments.length;for(t=0;t<r;t++)a(e=arguments[t])&&(n=n.next(t,e,!0));if(this===Object&&n===c)throw TypeError("Composite keys must contain a non-primitive component");for(t=0;t<r;t++)a(e=arguments[t])||(n=n.next(t,e,!1));return n}},9920:(t,e,n)=>{var r=n(6656),o=n(3887),i=n(1236),a=n(3070);t.exports=function(t,e){for(var n=o(e),s=a.f,c=i.f,u=0;u<n.length;u++){var l=n[u];r(t,l)||s(t,l,c(e,l))}}},4964:(t,e,n)=>{var r=n(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,"/./"[t](e)}catch(t){}}return!1}},8544:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4230:(t,e,n)=>{var r=n(4488),o=n(1340),i=/"/g;t.exports=function(t,e,n,a){var s=o(r(t)),c="<"+e;return""!==n&&(c+=" "+n+'="'+o(a).replace(i,"&quot;")+'"'),c+">"+s+"</"+e+">"}},4994:(t,e,n)=>{"use strict";var r=n(3383).IteratorPrototype,o=n(30),i=n(9114),a=n(8003),s=n(7497),c=function(){return this};t.exports=function(t,e,n){var u=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),a(t,u,!1,!0),s[u]=c,t}},8880:(t,e,n)=>{var r=n(9781),o=n(3070),i=n(9114);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},9114:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},6135:(t,e,n)=>{"use strict";var r=n(4948),o=n(3070),i=n(9114);t.exports=function(t,e,n){var a=r(e);a in t?o.f(t,a,i(0,n)):t[a]=n}},8709:(t,e,n)=>{"use strict";var r=n(9670),o=n(2140);t.exports=function(t){if(r(this),"string"===t||"default"===t)t="string";else if("number"!==t)throw TypeError("Incorrect hint");return o(this,t)}},654:(t,e,n)=>{"use strict";var r=n(2109),o=n(4994),i=n(9518),a=n(7674),s=n(8003),c=n(8880),u=n(1320),l=n(5112),f=n(1913),p=n(7497),d=n(3383),h=d.IteratorPrototype,v=d.BUGGY_SAFARI_ITERATORS,g=l("iterator"),b="keys",m="values",y="entries",x=function(){return this};t.exports=function(t,e,n,l,d,_,w){o(n,e,l);var A,C,S,k=function(t){if(t===d&&T)return T;if(!v&&t in I)return I[t];switch(t){case b:case m:case y:return function(){return new n(this,t)}}return function(){return new n(this)}},O=e+" Iterator",E=!1,I=t.prototype,M=I[g]||I["@@iterator"]||d&&I[d],T=!v&&M||k(d),j="Array"==e&&I.entries||M;if(j&&(A=i(j.call(new t)))!==Object.prototype&&A.next&&(f||i(A)===h||(a?a(A,h):"function"!=typeof A[g]&&c(A,g,x)),s(A,O,!0,!0),f&&(p[O]=x)),d==m&&M&&M.name!==m&&(E=!0,T=function(){return M.call(this)}),f&&!w||I[g]===T||c(I,g,T),p[e]=T,d)if(C={values:k(m),keys:_?T:k(b),entries:k(y)},w)for(S in C)(v||E||!(S in I))&&u(I,S,C[S]);else r({target:e,proto:!0,forced:v||E},C);return C}},7235:(t,e,n)=>{var r=n(857),o=n(6656),i=n(6061),a=n(3070).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||a(e,t,{value:i.f(t)})}},9781:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,e,n)=>{var r=n(7854),o=n(111),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(t,e,n)=>{var r=n(317)("span").classList,o=r&&r.constructor&&r.constructor.prototype;t.exports=o===Object.prototype?void 0:o},8886:(t,e,n)=>{var r=n(8113).match(/firefox\/(\d+)/i);t.exports=!!r&&+r[1]},7871:t=>{t.exports="object"==typeof window},256:(t,e,n)=>{var r=n(8113);t.exports=/MSIE|Trident/.test(r)},1528:(t,e,n)=>{var r=n(8113),o=n(7854);t.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==o.Pebble},8334:(t,e,n)=>{var r=n(8113);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},5268:(t,e,n)=>{var r=n(4326),o=n(7854);t.exports="process"==r(o.process)},1036:(t,e,n)=>{var r=n(8113);t.exports=/web0s(?!.*chrome)/i.test(r)},8113:(t,e,n)=>{var r=n(5005);t.exports=r("navigator","userAgent")||""},7392:(t,e,n)=>{var r,o,i=n(7854),a=n(8113),s=i.process,c=i.Deno,u=s&&s.versions||c&&c.version,l=u&&u.v8;l?o=(r=l.split("."))[0]<4?1:r[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},8008:(t,e,n)=>{var r=n(8113).match(/AppleWebKit\/(\d+)\./);t.exports=!!r&&+r[1]},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,e,n)=>{var r=n(7854),o=n(1236).f,i=n(8880),a=n(1320),s=n(3505),c=n(9920),u=n(4705);t.exports=function(t,e){var n,l,f,p,d,h=t.target,v=t.global,g=t.stat;if(n=v?r:g?r[h]||s(h,{}):(r[h]||{}).prototype)for(l in e){if(p=e[l],f=t.noTargetGet?(d=o(n,l))&&d.value:n[l],!u(v?l:h+(g?".":"#")+l,t.forced)&&void 0!==f){if(typeof p==typeof f)continue;c(p,f)}(t.sham||f&&f.sham)&&i(p,"sham",!0),a(n,l,p,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:(t,e,n)=>{"use strict";n(4916);var r=n(1320),o=n(2261),i=n(7293),a=n(5112),s=n(8880),c=a("species"),u=RegExp.prototype;t.exports=function(t,e,n,l){var f=a(t),p=!i((function(){var e={};return e[f]=function(){return 7},7!=""[t](e)})),d=p&&!i((function(){var e=!1,n=/a/;return"split"===t&&((n={}).constructor={},n.constructor[c]=function(){return n},n.flags="",n[f]=/./[f]),n.exec=function(){return e=!0,null},n[f](""),!e}));if(!p||!d||n){var h=/./[f],v=e(f,""[t],(function(t,e,n,r,i){var a=e.exec;return a===o||a===u.exec?p&&!i?{done:!0,value:h.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}));r(String.prototype,t,v[0]),r(u,f,v[1])}l&&s(u[f],"sham",!0)}},6790:(t,e,n)=>{"use strict";var r=n(3157),o=n(7466),i=n(9974),a=function(t,e,n,s,c,u,l,f){for(var p,d=c,h=0,v=!!l&&i(l,f,3);h<s;){if(h in n){if(p=v?v(n[h],h,e):n[h],u>0&&r(p))d=a(t,e,p,o(p.length),d,u-1)-1;else{if(d>=9007199254740991)throw TypeError("Exceed the acceptable array length");t[d]=p}d++}h++}return d};t.exports=a},6677:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:(t,e,n)=>{var r=n(3099);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},7065:(t,e,n)=>{"use strict";var r=n(3099),o=n(111),i=[].slice,a={},s=function(t,e,n){if(!(e in a)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";a[e]=Function("C,a","return new C("+r.join(",")+")")}return a[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=i.call(arguments,1),a=function(){var r=n.concat(i.call(arguments));return this instanceof a?s(e,r.length,r):e.apply(t,r)};return o(e.prototype)&&(a.prototype=e.prototype),a}},5005:(t,e,n)=>{var r=n(7854),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(r[t]):r[t]&&r[t][e]}},1246:(t,e,n)=>{var r=n(648),o=n(7497),i=n(5112)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},8554:(t,e,n)=>{var r=n(9670),o=n(1246);t.exports=function(t,e){var n=arguments.length<2?o(t):e;if("function"!=typeof n)throw TypeError(String(t)+" is not iterable");return r(n.call(t))}},4647:t=>{t.exports=function(t){return Map.prototype.entries.call(t)}},7571:(t,e,n)=>{var r=n(3099);t.exports=function(t){return null==t?void 0:r(t)}},6767:t=>{t.exports=function(t){return Set.prototype.values.call(t)}},647:(t,e,n)=>{var r=n(7908),o=Math.floor,i="".replace,a=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,s=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,n,c,u,l){var f=n+t.length,p=c.length,d=s;return void 0!==u&&(u=r(u),d=a),i.call(l,d,(function(r,i){var a;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(f);case"<":a=u[i.slice(1,-1)];break;default:var s=+i;if(0===s)return r;if(s>p){var l=o(s/10);return 0===l?r:l<=p?void 0===c[l-1]?i.charAt(1):c[l-1]+i.charAt(1):r}a=c[s-1]}return void 0===a?"":a}))}},7854:(t,e,n)=>{var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},6656:(t,e,n)=>{var r=n(7908),o={}.hasOwnProperty;t.exports=Object.hasOwn||function(t,e){return o.call(r(t),e)}},3501:t=>{t.exports={}},842:(t,e,n)=>{var r=n(7854);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},490:(t,e,n)=>{var r=n(5005);t.exports=r("document","documentElement")},4664:(t,e,n)=>{var r=n(9781),o=n(7293),i=n(317);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},1179:t=>{var e=Math.abs,n=Math.pow,r=Math.floor,o=Math.log,i=Math.LN2;t.exports={pack:function(t,a,s){var c,u,l,f=new Array(s),p=8*s-a-1,d=(1<<p)-1,h=d>>1,v=23===a?n(2,-24)-n(2,-77):0,g=t<0||0===t&&1/t<0?1:0,b=0;for((t=e(t))!=t||t===1/0?(u=t!=t?1:0,c=d):(c=r(o(t)/i),t*(l=n(2,-c))<1&&(c--,l*=2),(t+=c+h>=1?v/l:v*n(2,1-h))*l>=2&&(c++,l/=2),c+h>=d?(u=0,c=d):c+h>=1?(u=(t*l-1)*n(2,a),c+=h):(u=t*n(2,h-1)*n(2,a),c=0));a>=8;f[b++]=255&u,u/=256,a-=8);for(c=c<<a|u,p+=a;p>0;f[b++]=255&c,c/=256,p-=8);return f[--b]|=128*g,f},unpack:function(t,e){var r,o=t.length,i=8*o-e-1,a=(1<<i)-1,s=a>>1,c=i-7,u=o-1,l=t[u--],f=127&l;for(l>>=7;c>0;f=256*f+t[u],u--,c-=8);for(r=f&(1<<-c)-1,f>>=-c,c+=e;c>0;r=256*r+t[u],u--,c-=8);if(0===f)f=1-s;else{if(f===a)return r?NaN:l?-1/0:1/0;r+=n(2,e),f-=s}return(l?-1:1)*r*n(2,f-e)}}},8361:(t,e,n)=>{var r=n(7293),o=n(4326),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},9587:(t,e,n)=>{var r=n(111),o=n(7674);t.exports=function(t,e,n){var i,a;return o&&"function"==typeof(i=e.constructor)&&i!==n&&r(a=i.prototype)&&a!==n.prototype&&o(t,a),t}},2788:(t,e,n)=>{var r=n(5465),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},2423:(t,e,n)=>{var r=n(2109),o=n(3501),i=n(111),a=n(6656),s=n(3070).f,c=n(8006),u=n(1156),l=n(9711),f=n(6677),p=!1,d=l("meta"),h=0,v=Object.isExtensible||function(){return!0},g=function(t){s(t,d,{value:{objectID:"O"+h++,weakData:{}}})},b=t.exports={enable:function(){b.enable=function(){},p=!0;var t=c.f,e=[].splice,n={};n[d]=1,t(n).length&&(c.f=function(n){for(var r=t(n),o=0,i=r.length;o<i;o++)if(r[o]===d){e.call(r,o,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:u.f}))},fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,d)){if(!v(t))return"F";if(!e)return"E";g(t)}return t[d].objectID},getWeakData:function(t,e){if(!a(t,d)){if(!v(t))return!0;if(!e)return!1;g(t)}return t[d].weakData},onFreeze:function(t){return f&&p&&v(t)&&!a(t,d)&&g(t),t}};o[d]=!0},9909:(t,e,n)=>{var r,o,i,a=n(8536),s=n(7854),c=n(111),u=n(8880),l=n(6656),f=n(5465),p=n(6200),d=n(3501),h="Object already initialized",v=s.WeakMap;if(a||f.state){var g=f.state||(f.state=new v),b=g.get,m=g.has,y=g.set;r=function(t,e){if(m.call(g,t))throw new TypeError(h);return e.facade=t,y.call(g,t,e),e},o=function(t){return b.call(g,t)||{}},i=function(t){return m.call(g,t)}}else{var x=p("state");d[x]=!0,r=function(t,e){if(l(t,x))throw new TypeError(h);return e.facade=t,u(t,x,e),e},o=function(t){return l(t,x)?t[x]:{}},i=function(t){return l(t,x)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!c(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},7659:(t,e,n)=>{var r=n(5112),o=n(7497),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},3157:(t,e,n)=>{var r=n(4326);t.exports=Array.isArray||function(t){return"Array"==r(t)}},5032:(t,e,n)=>{var r=n(6656);t.exports=function(t){return void 0!==t&&(r(t,"value")||r(t,"writable"))}},4705:(t,e,n)=>{var r=n(7293),o=/#|\.prototype\./,i=function(t,e){var n=s[a(t)];return n==u||n!=c&&("function"==typeof e?r(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},s=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";t.exports=i},8730:(t,e,n)=>{var r=n(111),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},111:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:t=>{t.exports=!1},7850:(t,e,n)=>{var r=n(111),o=n(4326),i=n(5112)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},2190:(t,e,n)=>{var r=n(5005),o=n(3307);t.exports=o?function(t){return"symbol"==typeof t}:function(t){var e=r("Symbol");return"function"==typeof e&&Object(t)instanceof e}},408:(t,e,n)=>{var r=n(9670),o=n(7659),i=n(7466),a=n(9974),s=n(8554),c=n(1246),u=n(9212),l=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var f,p,d,h,v,g,b,m=n&&n.that,y=!(!n||!n.AS_ENTRIES),x=!(!n||!n.IS_ITERATOR),_=!(!n||!n.INTERRUPTED),w=a(e,m,1+y+_),A=function(t){return f&&u(f,"normal",t),new l(!0,t)},C=function(t){return y?(r(t),_?w(t[0],t[1],A):w(t[0],t[1])):_?w(t,A):w(t)};if(x)f=t;else{if("function"!=typeof(p=c(t)))throw TypeError("Target is not iterable");if(o(p)){for(d=0,h=i(t.length);h>d;d++)if((v=C(t[d]))&&v instanceof l)return v;return new l(!1)}f=s(t,p)}for(g=f.next;!(b=g.call(f)).done;){try{v=C(b.value)}catch(t){u(f,"throw",t)}if("object"==typeof v&&v&&v instanceof l)return v}return new l(!1)}},9212:(t,e,n)=>{var r=n(9670);t.exports=function(t,e,n){var o,i;r(t);try{if(void 0===(o=t.return)){if("throw"===e)throw n;return n}o=o.call(t)}catch(t){i=!0,o=t}if("throw"===e)throw n;if(i)throw o;return r(o),n}},3383:(t,e,n)=>{"use strict";var r,o,i,a=n(7293),s=n(30),c=n(9518),u=n(8880),l=n(5112),f=n(1913),p=l("iterator"),d=!1;[].keys&&("next"in(i=[].keys())?(o=c(c(i)))!==Object.prototype&&(r=o):d=!0),null==r||a((function(){var t={};return r[p].call(t)!==t}))?r={}:f&&(r=s(r)),"function"!=typeof r[p]&&u(r,p,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},7497:t=>{t.exports={}},6736:t=>{var e=Math.expm1,n=Math.exp;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:n(t)-1}:e},6130:(t,e,n)=>{var r=n(4310),o=Math.abs,i=Math.pow,a=i(2,-52),s=i(2,-23),c=i(2,127)*(2-s),u=i(2,-126);t.exports=Math.fround||function(t){var e,n,i=o(t),l=r(t);return i<u?l*(i/u/s+1/a-1/a)*u*s:(n=(e=(1+s/a)*i)-(e-i))>c||n!=n?l*(1/0):l*n}},6513:t=>{var e=Math.log;t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:e(1+t)}},7103:t=>{t.exports=Math.scale||function(t,e,n,r,o){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||o!=o?NaN:t===1/0||t===-1/0?t:(t-e)*(o-r)/(n-e)+r}},4310:t=>{t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},5948:(t,e,n)=>{var r,o,i,a,s,c,u,l,f=n(7854),p=n(1236).f,d=n(261).set,h=n(8334),v=n(1528),g=n(1036),b=n(5268),m=f.MutationObserver||f.WebKitMutationObserver,y=f.document,x=f.process,_=f.Promise,w=p(f,"queueMicrotask"),A=w&&w.value;A||(r=function(){var t,e;for(b&&(t=x.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},h||b||g||!m||!y?!v&&_&&_.resolve?((u=_.resolve(void 0)).constructor=_,l=u.then,a=function(){l.call(u,r)}):a=b?function(){x.nextTick(r)}:function(){d.call(f,r)}:(s=!0,c=y.createTextNode(""),new m(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),t.exports=A||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},3366:(t,e,n)=>{var r=n(7854);t.exports=r.Promise},133:(t,e,n)=>{var r=n(7392),o=n(7293);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},590:(t,e,n)=>{var r=n(7293),o=n(5112),i=n(1913),a=o("iterator");t.exports=!r((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,n="";return t.pathname="c%20d",e.forEach((function(t,r){e.delete("b"),n+=r+t})),i&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==n||"x"!==new URL("http://x",void 0).host}))},8536:(t,e,n)=>{var r=n(7854),o=n(2788),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},8523:(t,e,n)=>{"use strict";var r=n(3099),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},3929:(t,e,n)=>{var r=n(7850);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},7023:(t,e,n)=>{var r=n(7854).isFinite;t.exports=Number.isFinite||function(t){return"number"==typeof t&&r(t)}},2814:(t,e,n)=>{var r=n(7854),o=n(1340),i=n(3111).trim,a=n(1361),s=r.parseFloat,c=1/s(a+"-0")!=-1/0;t.exports=c?function(t){var e=i(o(t)),n=s(e);return 0===n&&"-"==e.charAt(0)?-0:n}:s},3009:(t,e,n)=>{var r=n(7854),o=n(1340),i=n(3111).trim,a=n(1361),s=r.parseInt,c=/^[+-]?0[Xx]/,u=8!==s(a+"08")||22!==s(a+"0x16");t.exports=u?function(t,e){var n=i(o(t));return s(n,e>>>0||(c.test(n)?16:10))}:s},1574:(t,e,n)=>{"use strict";var r=n(9781),o=n(7293),i=n(1956),a=n(5181),s=n(5296),c=n(7908),u=n(8361),l=Object.assign,f=Object.defineProperty;t.exports=!l||o((function(){if(r&&1!==l({b:1},l(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),o="abcdefghijklmnopqrst";return t[n]=7,o.split("").forEach((function(t){e[t]=t})),7!=l({},t)[n]||i(l({},e)).join("")!=o}))?function(t,e){for(var n=c(t),o=arguments.length,l=1,f=a.f,p=s.f;o>l;)for(var d,h=u(arguments[l++]),v=f?i(h).concat(f(h)):i(h),g=v.length,b=0;g>b;)d=v[b++],r&&!p.call(h,d)||(n[d]=h[d]);return n}:l},30:(t,e,n)=>{var r,o=n(9670),i=n(6048),a=n(748),s=n(3501),c=n(490),u=n(317),l=n(6200)("IE_PROTO"),f=function(){},p=function(t){return"<script>"+t+"<\/script>"},d=function(t){t.write(p("")),t.close();var e=t.parentWindow.Object;return t=null,e},h=function(){try{r=new ActiveXObject("htmlfile")}catch(t){}var t,e;h="undefined"!=typeof document?document.domain&&r?d(r):((e=u("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F):d(r);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};s[l]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(f.prototype=o(t),n=new f,f.prototype=null,n[l]=t):n=h(),void 0===e?n:i(n,e)}},6048:(t,e,n)=>{var r=n(9781),o=n(3070),i=n(9670),a=n(1956);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=a(e),s=r.length,c=0;s>c;)o.f(t,n=r[c++],e[n]);return t}},3070:(t,e,n)=>{var r=n(9781),o=n(4664),i=n(9670),a=n(4948),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(i(t),e=a(e),i(n),o)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},1236:(t,e,n)=>{var r=n(9781),o=n(5296),i=n(9114),a=n(5656),s=n(4948),c=n(6656),u=n(4664),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=a(t),e=s(e),u)try{return l(t,e)}catch(t){}if(c(t,e))return i(!o.f.call(t,e),t[e])}},1156:(t,e,n)=>{var r=n(5656),o=n(8006).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},8006:(t,e,n)=>{var r=n(6324),o=n(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},5181:(t,e)=>{e.f=Object.getOwnPropertySymbols},9518:(t,e,n)=>{var r=n(6656),o=n(7908),i=n(6200),a=n(8544),s=i("IE_PROTO"),c=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},6324:(t,e,n)=>{var r=n(6656),o=n(5656),i=n(1318).indexOf,a=n(3501);t.exports=function(t,e){var n,s=o(t),c=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);for(;e.length>c;)r(s,n=e[c++])&&(~i(u,n)||u.push(n));return u}},1956:(t,e,n)=>{var r=n(6324),o=n(748);t.exports=Object.keys||function(t){return r(t,o)}},5296:(t,e)=>{"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);e.f=o?function(t){var e=r(this,t);return!!e&&e.enumerable}:n},9026:(t,e,n)=>{"use strict";var r=n(1913),o=n(7854),i=n(7293),a=n(8008);t.exports=r||!i((function(){if(!(a&&a<535)){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete o[t]}}))},7674:(t,e,n)=>{var r=n(9670),o=n(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},4699:(t,e,n)=>{var r=n(9781),o=n(1956),i=n(5656),a=n(5296).f,s=function(t){return function(e){for(var n,s=i(e),c=o(s),u=c.length,l=0,f=[];u>l;)n=c[l++],r&&!a.call(s,n)||f.push(t?[n,s[n]]:s[n]);return f}};t.exports={entries:s(!0),values:s(!1)}},288:(t,e,n)=>{"use strict";var r=n(1694),o=n(648);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},2140:(t,e,n)=>{var r=n(111);t.exports=function(t,e){var n,o;if("string"===e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if("string"!==e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},3887:(t,e,n)=>{var r=n(5005),o=n(8006),i=n(5181),a=n(9670);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},857:(t,e,n)=>{var r=n(7854);t.exports=r},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,e,n)=>{var r=n(9670),o=n(111),i=n(8523);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},2248:(t,e,n)=>{var r=n(1320);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},1320:(t,e,n)=>{var r=n(7854),o=n(8880),i=n(6656),a=n(3505),s=n(2788),c=n(9909),u=c.get,l=c.enforce,f=String(String).split("String");(t.exports=function(t,e,n,s){var c,u=!!s&&!!s.unsafe,p=!!s&&!!s.enumerable,d=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),(c=l(n)).source||(c.source=f.join("string"==typeof e?e:""))),t!==r?(u?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=n:o(t,e,n)):p?t[e]=n:a(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},8845:(t,e,n)=>{var r=n(1532),o=n(4129),i=n(2309)("metadata"),a=i.store||(i.store=new o),s=function(t,e,n){var o=a.get(t);if(!o){if(!n)return;a.set(t,o=new r)}var i=o.get(e);if(!i){if(!n)return;o.set(e,i=new r)}return i};t.exports={store:a,getMap:s,has:function(t,e,n){var r=s(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=s(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){s(n,r,!0).set(t,e)},keys:function(t,e){var n=s(t,e,!1),r=[];return n&&n.forEach((function(t,e){r.push(e)})),r},toKey:function(t){return void 0===t||"symbol"==typeof t?t:String(t)}}},7651:(t,e,n)=>{var r=n(4326),o=n(2261);t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var i=n.call(t,e);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},2261:(t,e,n)=>{"use strict";var r,o,i=n(1340),a=n(7066),s=n(2999),c=n(2309),u=n(30),l=n(9909).get,f=n(9441),p=n(8173),d=RegExp.prototype.exec,h=c("native-string-replace",String.prototype.replace),v=d,g=(r=/a/,o=/b*/g,d.call(r,"a"),d.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),b=s.UNSUPPORTED_Y||s.BROKEN_CARET,m=void 0!==/()??/.exec("")[1];(g||m||b||f||p)&&(v=function(t){var e,n,r,o,s,c,f,p=this,y=l(p),x=i(t),_=y.raw;if(_)return _.lastIndex=p.lastIndex,e=v.call(_,x),p.lastIndex=_.lastIndex,e;var w=y.groups,A=b&&p.sticky,C=a.call(p),S=p.source,k=0,O=x;if(A&&(-1===(C=C.replace("y","")).indexOf("g")&&(C+="g"),O=x.slice(p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==x.charAt(p.lastIndex-1))&&(S="(?: "+S+")",O=" "+O,k++),n=new RegExp("^(?:"+S+")",C)),m&&(n=new RegExp("^"+S+"$(?!\\s)",C)),g&&(r=p.lastIndex),o=d.call(A?n:p,O),A?o?(o.input=o.input.slice(k),o[0]=o[0].slice(k),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:g&&o&&(p.lastIndex=p.global?o.index+o[0].length:r),m&&o&&o.length>1&&h.call(o[0],n,(function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(o[s]=void 0)})),o&&w)for(o.groups=c=u(null),s=0;s<w.length;s++)c[(f=w[s])[0]]=o[f[1]];return o}),t.exports=v},7066:(t,e,n)=>{"use strict";var r=n(9670);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:(t,e,n)=>{var r=n(7293),o=n(7854).RegExp;e.UNSUPPORTED_Y=r((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=r((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},9441:(t,e,n)=>{var r=n(7293),o=n(7854).RegExp;t.exports=r((function(){var t=o(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},8173:(t,e,n)=>{var r=n(7293),o=n(7854).RegExp;t.exports=r((function(){var t=o("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},6465:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},1150:t=>{t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},3505:(t,e,n)=>{var r=n(7854);t.exports=function(t,e){try{Object.defineProperty(r,t,{value:e,configurable:!0,writable:!0})}catch(n){r[t]=e}return e}},6340:(t,e,n)=>{"use strict";var r=n(5005),o=n(3070),i=n(5112),a=n(9781),s=i("species");t.exports=function(t){var e=r(t),n=o.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},8003:(t,e,n)=>{var r=n(3070).f,o=n(6656),i=n(5112)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},6200:(t,e,n)=>{var r=n(2309),o=n(9711),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:(t,e,n)=>{var r=n(7854),o=n(3505),i="__core-js_shared__",a=r[i]||o(i,{});t.exports=a},2309:(t,e,n)=>{var r=n(1913),o=n(5465);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.17.3",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(t,e,n)=>{var r=n(9670),o=n(3099),i=n(5112)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[i])?e:o(n)}},3429:(t,e,n)=>{var r=n(7293);t.exports=function(t){return r((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},8710:(t,e,n)=>{var r=n(9958),o=n(1340),i=n(4488),a=function(t){return function(e,n){var a,s,c=o(i(e)),u=r(n),l=c.length;return u<0||u>=l?t?"":void 0:(a=c.charCodeAt(u))<55296||a>56319||u+1===l||(s=c.charCodeAt(u+1))<56320||s>57343?t?c.charAt(u):a:t?c.slice(u,u+2):s-56320+(a-55296<<10)+65536}};t.exports={codeAt:a(!1),charAt:a(!0)}},7061:(t,e,n)=>{var r=n(8113);t.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},6650:(t,e,n)=>{var r=n(7466),o=n(1340),i=n(8415),a=n(4488),s=Math.ceil,c=function(t){return function(e,n,c){var u,l,f=o(a(e)),p=f.length,d=void 0===c?" ":o(c),h=r(n);return h<=p||""==d?f:(u=h-p,(l=i.call(d,s(u/d.length))).length>u&&(l=l.slice(0,u)),t?f+l:l+f)}};t.exports={start:c(!1),end:c(!0)}},3197:t=>{"use strict";var e=2147483647,n=/[^\0-\u007E]/,r=/[.\u3002\uFF0E\uFF61]/g,o="Overflow: input needs wider integers to process",i=Math.floor,a=String.fromCharCode,s=function(t){return t+22+75*(t<26)},c=function(t,e,n){var r=0;for(t=n?i(t/700):t>>1,t+=i(t/e);t>455;r+=36)t=i(t/35);return i(r+36*t/(t+38))},u=function(t){var n=[];t=function(t){for(var e=[],n=0,r=t.length;n<r;){var o=t.charCodeAt(n++);if(o>=55296&&o<=56319&&n<r){var i=t.charCodeAt(n++);56320==(64512&i)?e.push(((1023&o)<<10)+(1023&i)+65536):(e.push(o),n--)}else e.push(o)}return e}(t);var r,u,l=t.length,f=128,p=0,d=72;for(r=0;r<t.length;r++)(u=t[r])<128&&n.push(a(u));var h=n.length,v=h;for(h&&n.push("-");v<l;){var g=e;for(r=0;r<t.length;r++)(u=t[r])>=f&&u<g&&(g=u);var b=v+1;if(g-f>i((e-p)/b))throw RangeError(o);for(p+=(g-f)*b,f=g,r=0;r<t.length;r++){if((u=t[r])<f&&++p>e)throw RangeError(o);if(u==f){for(var m=p,y=36;;y+=36){var x=y<=d?1:y>=d+26?26:y-d;if(m<x)break;var _=m-x,w=36-x;n.push(a(s(x+_%w))),m=i(_/w)}n.push(a(s(m))),d=c(p,b,v==h),p=0,++v}}++p,++f}return n.join("")};t.exports=function(t){var e,o,i=[],a=t.toLowerCase().replace(r,".").split(".");for(e=0;e<a.length;e++)o=a[e],i.push(n.test(o)?"xn--"+u(o):o);return i.join(".")}},8415:(t,e,n)=>{"use strict";var r=n(9958),o=n(1340),i=n(4488);t.exports=function(t){var e=o(i(this)),n="",a=r(t);if(a<0||a==1/0)throw RangeError("Wrong number of repetitions");for(;a>0;(a>>>=1)&&(e+=e))1&a&&(n+=e);return n}},6091:(t,e,n)=>{var r=n(7293),o=n(1361);t.exports=function(t){return r((function(){return!!o[t]()||"​᠎"!="​᠎"[t]()||o[t].name!==t}))}},3111:(t,e,n)=>{var r=n(4488),o=n(1340),i="["+n(1361)+"]",a=RegExp("^"+i+i+"*"),s=RegExp(i+i+"*$"),c=function(t){return function(e){var n=o(r(e));return 1&t&&(n=n.replace(a,"")),2&t&&(n=n.replace(s,"")),n}};t.exports={start:c(1),end:c(2),trim:c(3)}},261:(t,e,n)=>{var r,o,i,a,s=n(7854),c=n(7293),u=n(9974),l=n(490),f=n(317),p=n(8334),d=n(5268),h=s.setImmediate,v=s.clearImmediate,g=s.process,b=s.MessageChannel,m=s.Dispatch,y=0,x={};try{r=s.location}catch(t){}var _=function(t){if(x.hasOwnProperty(t)){var e=x[t];delete x[t],e()}},w=function(t){return function(){_(t)}},A=function(t){_(t.data)},C=function(t){s.postMessage(String(t),r.protocol+"//"+r.host)};h&&v||(h=function(t){for(var e=[],n=arguments.length,r=1;n>r;)e.push(arguments[r++]);return x[++y]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},o(y),y},v=function(t){delete x[t]},d?o=function(t){g.nextTick(w(t))}:m&&m.now?o=function(t){m.now(w(t))}:b&&!p?(a=(i=new b).port2,i.port1.onmessage=A,o=u(a.postMessage,a,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts&&r&&"file:"!==r.protocol&&!c(C)?(o=C,s.addEventListener("message",A,!1)):o="onreadystatechange"in f("script")?function(t){l.appendChild(f("script")).onreadystatechange=function(){l.removeChild(this),_(t)}}:function(t){setTimeout(w(t),0)}),t.exports={set:h,clear:v}},863:t=>{var e=1..valueOf;t.exports=function(t){return e.call(t)}},1400:(t,e,n)=>{var r=n(9958),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},7067:(t,e,n)=>{var r=n(9958),o=n(7466);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=o(e);if(e!==n)throw RangeError("Wrong length or index");return n}},5656:(t,e,n)=>{var r=n(8361),o=n(4488);t.exports=function(t){return r(o(t))}},9958:t=>{var e=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:e)(t)}},7466:(t,e,n)=>{var r=n(9958),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},7908:(t,e,n)=>{var r=n(4488);t.exports=function(t){return Object(r(t))}},4590:(t,e,n)=>{var r=n(3002);t.exports=function(t,e){var n=r(t);if(n%e)throw RangeError("Wrong offset");return n}},3002:(t,e,n)=>{var r=n(9958);t.exports=function(t){var e=r(t);if(e<0)throw RangeError("The argument can't be less than 0");return e}},7593:(t,e,n)=>{var r=n(111),o=n(2190),i=n(2140),a=n(5112)("toPrimitive");t.exports=function(t,e){if(!r(t)||o(t))return t;var n,s=t[a];if(void 0!==s){if(void 0===e&&(e="default"),n=s.call(t,e),!r(n)||o(n))return n;throw TypeError("Can't convert object to primitive value")}return void 0===e&&(e="number"),i(t,e)}},4948:(t,e,n)=>{var r=n(7593),o=n(2190);t.exports=function(t){var e=r(t,"string");return o(e)?e:String(e)}},1694:(t,e,n)=>{var r={};r[n(5112)("toStringTag")]="z",t.exports="[object z]"===String(r)},1340:(t,e,n)=>{var r=n(2190);t.exports=function(t){if(r(t))throw TypeError("Cannot convert a Symbol value to a string");return String(t)}},9843:(t,e,n)=>{"use strict";var r=n(2109),o=n(7854),i=n(9781),a=n(3832),s=n(260),c=n(3331),u=n(5787),l=n(9114),f=n(8880),p=n(8730),d=n(7466),h=n(7067),v=n(4590),g=n(4948),b=n(6656),m=n(648),y=n(111),x=n(2190),_=n(30),w=n(7674),A=n(8006).f,C=n(7321),S=n(2092).forEach,k=n(6340),O=n(3070),E=n(1236),I=n(9909),M=n(9587),T=I.get,j=I.set,R=O.f,P=E.f,B=Math.round,$=o.RangeError,F=c.ArrayBuffer,L=c.DataView,N=s.NATIVE_ARRAY_BUFFER_VIEWS,D=s.TYPED_ARRAY_CONSTRUCTOR,U=s.TYPED_ARRAY_TAG,z=s.TypedArray,H=s.TypedArrayPrototype,G=s.aTypedArrayConstructor,W=s.isTypedArray,V="BYTES_PER_ELEMENT",q="Wrong length",Y=function(t,e){for(var n=0,r=e.length,o=new(G(t))(r);r>n;)o[n]=e[n++];return o},K=function(t,e){R(t,e,{get:function(){return T(this)[e]}})},X=function(t){var e;return t instanceof F||"ArrayBuffer"==(e=m(t))||"SharedArrayBuffer"==e},Z=function(t,e){return W(t)&&!x(e)&&e in t&&p(+e)&&e>=0},J=function(t,e){return e=g(e),Z(t,e)?l(2,t[e]):P(t,e)},Q=function(t,e,n){return e=g(e),!(Z(t,e)&&y(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?R(t,e,n):(t[e]=n.value,t)};i?(N||(E.f=J,O.f=Q,K(H,"buffer"),K(H,"byteOffset"),K(H,"byteLength"),K(H,"length")),r({target:"Object",stat:!0,forced:!N},{getOwnPropertyDescriptor:J,defineProperty:Q}),t.exports=function(t,e,n){var i=t.match(/\d+$/)[0]/8,s=t+(n?"Clamped":"")+"Array",c="get"+t,l="set"+t,p=o[s],g=p,b=g&&g.prototype,m={},x=function(t,e){R(t,e,{get:function(){return function(t,e){var n=T(t);return n.view[c](e*i+n.byteOffset,!0)}(this,e)},set:function(t){return function(t,e,r){var o=T(t);n&&(r=(r=B(r))<0?0:r>255?255:255&r),o.view[l](e*i+o.byteOffset,r,!0)}(this,e,t)},enumerable:!0})};N?a&&(g=e((function(t,e,n,r){return u(t,g,s),M(y(e)?X(e)?void 0!==r?new p(e,v(n,i),r):void 0!==n?new p(e,v(n,i)):new p(e):W(e)?Y(g,e):C.call(g,e):new p(h(e)),t,g)})),w&&w(g,z),S(A(p),(function(t){t in g||f(g,t,p[t])})),g.prototype=b):(g=e((function(t,e,n,r){u(t,g,s);var o,a,c,l=0,f=0;if(y(e)){if(!X(e))return W(e)?Y(g,e):C.call(g,e);o=e,f=v(n,i);var p=e.byteLength;if(void 0===r){if(p%i)throw $(q);if((a=p-f)<0)throw $(q)}else if((a=d(r)*i)+f>p)throw $(q);c=a/i}else c=h(e),o=new F(a=c*i);for(j(t,{buffer:o,byteOffset:f,byteLength:a,length:c,view:new L(o)});l<c;)x(t,l++)})),w&&w(g,z),b=g.prototype=_(H)),b.constructor!==g&&f(b,"constructor",g),f(b,D,g),U&&f(b,U,s),m[s]=g,r({global:!0,forced:g!=p,sham:!N},m),V in g||f(g,V,i),V in b||f(b,V,i),k(s)}):t.exports=function(){}},3832:(t,e,n)=>{var r=n(7854),o=n(7293),i=n(7072),a=n(260).NATIVE_ARRAY_BUFFER_VIEWS,s=r.ArrayBuffer,c=r.Int8Array;t.exports=!a||!o((function(){c(1)}))||!o((function(){new c(-1)}))||!i((function(t){new c,new c(null),new c(1.5),new c(t)}),!0)||o((function(){return 1!==new c(new s(2),1,void 0).length}))},3074:(t,e,n)=>{var r=n(7745),o=n(6304);t.exports=function(t,e){return r(o(t),e)}},7321:(t,e,n)=>{var r=n(7908),o=n(7466),i=n(8554),a=n(1246),s=n(7659),c=n(9974),u=n(260).aTypedArrayConstructor;t.exports=function(t){var e,n,l,f,p,d,h=r(t),v=arguments.length,g=v>1?arguments[1]:void 0,b=void 0!==g,m=a(h);if(null!=m&&!s(m))for(d=(p=i(h,m)).next,h=[];!(f=d.call(p)).done;)h.push(f.value);for(b&&v>2&&(g=c(g,arguments[2],2)),n=o(h.length),l=new(u(this))(n),e=0;n>e;e++)l[e]=b?g(h[e],e):h[e];return l}},6304:(t,e,n)=>{var r=n(260),o=n(6707),i=r.TYPED_ARRAY_CONSTRUCTOR,a=r.aTypedArrayConstructor;t.exports=function(t){return a(o(t,t[i]))}},9711:t=>{var e=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+n).toString(36)}},3307:(t,e,n)=>{var r=n(133);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:(t,e,n)=>{var r=n(5112);e.f=r},5112:(t,e,n)=>{var r=n(7854),o=n(2309),i=n(6656),a=n(9711),s=n(133),c=n(3307),u=o("wks"),l=r.Symbol,f=c?l:l&&l.withoutSetter||a;t.exports=function(t){return i(u,t)&&(s||"string"==typeof u[t])||(s&&i(l,t)?u[t]=l[t]:u[t]=f("Symbol."+t)),u[t]}},1361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},9170:(t,e,n)=>{"use strict";var r=n(2109),o=n(9518),i=n(7674),a=n(30),s=n(8880),c=n(9114),u=n(408),l=n(1340),f=function(t,e){var n=this;if(!(n instanceof f))return new f(t,e);i&&(n=i(new Error(void 0),o(n))),void 0!==e&&s(n,"message",l(e));var r=[];return u(t,r.push,{that:r}),s(n,"errors",r),n};f.prototype=a(Error.prototype,{constructor:c(5,f),message:c(5,""),name:c(5,"AggregateError")}),r({global:!0},{AggregateError:f})},8264:(t,e,n)=>{"use strict";var r=n(2109),o=n(7854),i=n(3331),a=n(6340),s=i.ArrayBuffer;r({global:!0,forced:o.ArrayBuffer!==s},{ArrayBuffer:s}),a("ArrayBuffer")},2222:(t,e,n)=>{"use strict";var r=n(2109),o=n(7293),i=n(3157),a=n(111),s=n(7908),c=n(7466),u=n(6135),l=n(5417),f=n(1194),p=n(5112),d=n(7392),h=p("isConcatSpreadable"),v=9007199254740991,g="Maximum allowed index exceeded",b=d>=51||!o((function(){var t=[];return t[h]=!1,t.concat()[0]!==t})),m=f("concat"),y=function(t){if(!a(t))return!1;var e=t[h];return void 0!==e?!!e:i(t)};r({target:"Array",proto:!0,forced:!b||!m},{concat:function(t){var e,n,r,o,i,a=s(this),f=l(a,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(y(i=-1===e?a:arguments[e])){if(p+(o=c(i.length))>v)throw TypeError(g);for(n=0;n<o;n++,p++)n in i&&u(f,p,i[n])}else{if(p>=v)throw TypeError(g);u(f,p++,i)}return f.length=p,f}})},545:(t,e,n)=>{var r=n(2109),o=n(1048),i=n(1223);r({target:"Array",proto:!0},{copyWithin:o}),i("copyWithin")},3290:(t,e,n)=>{var r=n(2109),o=n(1285),i=n(1223);r({target:"Array",proto:!0},{fill:o}),i("fill")},7327:(t,e,n)=>{"use strict";var r=n(2109),o=n(2092).filter;r({target:"Array",proto:!0,forced:!n(1194)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},4553:(t,e,n)=>{"use strict";var r=n(2109),o=n(2092).findIndex,i=n(1223),a="findIndex",s=!0;a in[]&&Array(1).findIndex((function(){s=!1})),r({target:"Array",proto:!0,forced:s},{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i(a)},9826:(t,e,n)=>{"use strict";var r=n(2109),o=n(2092).find,i=n(1223),a="find",s=!0;a in[]&&Array(1).find((function(){s=!1})),r({target:"Array",proto:!0,forced:s},{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i(a)},6535:(t,e,n)=>{"use strict";var r=n(2109),o=n(6790),i=n(7908),a=n(7466),s=n(3099),c=n(5417);r({target:"Array",proto:!0},{flatMap:function(t){var e,n=i(this),r=a(n.length);return s(t),(e=c(n,0)).length=o(e,n,n,r,0,1,t,arguments.length>1?arguments[1]:void 0),e}})},4944:(t,e,n)=>{"use strict";var r=n(2109),o=n(6790),i=n(7908),a=n(7466),s=n(9958),c=n(5417);r({target:"Array",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,e=i(this),n=a(e.length),r=c(e,0);return r.length=o(r,e,e,n,0,void 0===t?1:s(t)),r}})},1038:(t,e,n)=>{var r=n(2109),o=n(8457);r({target:"Array",stat:!0,forced:!n(7072)((function(t){Array.from(t)}))},{from:o})},6699:(t,e,n)=>{"use strict";var r=n(2109),o=n(1318).includes,i=n(1223);r({target:"Array",proto:!0},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},2772:(t,e,n)=>{"use strict";var r=n(2109),o=n(1318).indexOf,i=n(2133),a=[].indexOf,s=!!a&&1/[1].indexOf(1,-0)<0,c=i("indexOf");r({target:"Array",proto:!0,forced:s||!c},{indexOf:function(t){return s?a.apply(this,arguments)||0:o(this,t,arguments.length>1?arguments[1]:void 0)}})},6992:(t,e,n)=>{"use strict";var r=n(5656),o=n(1223),i=n(7497),a=n(9909),s=n(654),c="Array Iterator",u=a.set,l=a.getterFor(c);t.exports=s(Array,"Array",(function(t,e){u(this,{type:c,target:r(t),index:0,kind:e})}),(function(){var t=l(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},9600:(t,e,n)=>{"use strict";var r=n(2109),o=n(8361),i=n(5656),a=n(2133),s=[].join,c=o!=Object,u=a("join",",");r({target:"Array",proto:!0,forced:c||!u},{join:function(t){return s.call(i(this),void 0===t?",":t)}})},4986:(t,e,n)=>{var r=n(2109),o=n(6583);r({target:"Array",proto:!0,forced:o!==[].lastIndexOf},{lastIndexOf:o})},1249:(t,e,n)=>{"use strict";var r=n(2109),o=n(2092).map;r({target:"Array",proto:!0,forced:!n(1194)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},6572:(t,e,n)=>{"use strict";var r=n(2109),o=n(7293),i=n(6135);r({target:"Array",stat:!0,forced:o((function(){function t(){}return!(Array.of.call(t)instanceof t)}))},{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)i(n,t,arguments[t++]);return n.length=e,n}})},6644:(t,e,n)=>{"use strict";var r=n(2109),o=n(3671).right,i=n(2133),a=n(7392),s=n(5268);r({target:"Array",proto:!0,forced:!i("reduceRight")||!s&&a>79&&a<83},{reduceRight:function(t){return o(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:(t,e,n)=>{"use strict";var r=n(2109),o=n(3671).left,i=n(2133),a=n(7392),s=n(5268);r({target:"Array",proto:!0,forced:!i("reduce")||!s&&a>79&&a<83},{reduce:function(t){return o(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},7042:(t,e,n)=>{"use strict";var r=n(2109),o=n(111),i=n(3157),a=n(1400),s=n(7466),c=n(5656),u=n(6135),l=n(5112),f=n(1194)("slice"),p=l("species"),d=[].slice,h=Math.max;r({target:"Array",proto:!0,forced:!f},{slice:function(t,e){var n,r,l,f=c(this),v=s(f.length),g=a(t,v),b=a(void 0===e?v:e,v);if(i(f)&&("function"!=typeof(n=f.constructor)||n!==Array&&!i(n.prototype)?o(n)&&null===(n=n[p])&&(n=void 0):n=void 0,n===Array||void 0===n))return d.call(f,g,b);for(r=new(void 0===n?Array:n)(h(b-g,0)),l=0;g<b;g++,l++)g in f&&u(r,l,f[g]);return r.length=l,r}})},2707:(t,e,n)=>{"use strict";var r=n(2109),o=n(3099),i=n(7908),a=n(7466),s=n(1340),c=n(7293),u=n(4362),l=n(2133),f=n(8886),p=n(256),d=n(7392),h=n(8008),v=[],g=v.sort,b=c((function(){v.sort(void 0)})),m=c((function(){v.sort(null)})),y=l("sort"),x=!c((function(){if(d)return d<70;if(!(f&&f>3)){if(p)return!0;if(h)return h<603;var t,e,n,r,o="";for(t=65;t<76;t++){switch(e=String.fromCharCode(t),t){case 66:case 69:case 70:case 72:n=3;break;case 68:case 71:n=4;break;default:n=2}for(r=0;r<47;r++)v.push({k:e+r,v:n})}for(v.sort((function(t,e){return e.v-t.v})),r=0;r<v.length;r++)e=v[r].k.charAt(0),o.charAt(o.length-1)!==e&&(o+=e);return"DGBEFHACIJK"!==o}}));r({target:"Array",proto:!0,forced:b||!m||!y||!x},{sort:function(t){void 0!==t&&o(t);var e=i(this);if(x)return void 0===t?g.call(e):g.call(e,t);var n,r,c=[],l=a(e.length);for(r=0;r<l;r++)r in e&&c.push(e[r]);for(c=u(c,function(t){return function(e,n){return void 0===n?-1:void 0===e?1:void 0!==t?+t(e,n)||0:s(e)>s(n)?1:-1}}(t)),n=c.length,r=0;r<n;)e[r]=c[r++];for(;r<l;)delete e[r++];return e}})},8706:(t,e,n)=>{n(6340)("Array")},561:(t,e,n)=>{"use strict";var r=n(2109),o=n(1400),i=n(9958),a=n(7466),s=n(7908),c=n(5417),u=n(6135),l=n(1194)("splice"),f=Math.max,p=Math.min,d=9007199254740991,h="Maximum allowed length exceeded";r({target:"Array",proto:!0,forced:!l},{splice:function(t,e){var n,r,l,v,g,b,m=s(this),y=a(m.length),x=o(t,y),_=arguments.length;if(0===_?n=r=0:1===_?(n=0,r=y-x):(n=_-2,r=p(f(i(e),0),y-x)),y+n-r>d)throw TypeError(h);for(l=c(m,r),v=0;v<r;v++)(g=x+v)in m&&u(l,v,m[g]);if(l.length=r,n<r){for(v=x;v<y-r;v++)b=v+n,(g=v+r)in m?m[b]=m[g]:delete m[b];for(v=y;v>y-r+n;v--)delete m[v-1]}else if(n>r)for(v=y-r;v>x;v--)b=v+n-1,(g=v+r-1)in m?m[b]=m[g]:delete m[b];for(v=0;v<n;v++)m[v+x]=arguments[v+2];return m.length=y-r+n,l}})},9244:(t,e,n)=>{n(1223)("flatMap")},3792:(t,e,n)=>{n(1223)("flat")},6078:(t,e,n)=>{var r=n(8880),o=n(8709),i=n(5112)("toPrimitive"),a=Date.prototype;i in a||r(a,i,o)},4855:(t,e,n)=>{"use strict";var r=n(111),o=n(3070),i=n(9518),a=n(5112)("hasInstance"),s=Function.prototype;a in s||o.f(s,a,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},8309:(t,e,n)=>{var r=n(9781),o=n(3070).f,i=Function.prototype,a=i.toString,s=/^\s*function ([^ (]*)/,c="name";r&&!(c in i)&&o(i,c,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return""}}})},5837:(t,e,n)=>{n(2109)({global:!0},{globalThis:n(7854)})},3706:(t,e,n)=>{var r=n(7854);n(8003)(r.JSON,"JSON",!0)},1532:(t,e,n)=>{"use strict";var r=n(7710),o=n(5631);t.exports=r("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),o)},9752:(t,e,n)=>{var r=n(2109),o=n(6513),i=Math.acosh,a=Math.log,s=Math.sqrt,c=Math.LN2;r({target:"Math",stat:!0,forced:!i||710!=Math.floor(i(Number.MAX_VALUE))||i(1/0)!=1/0},{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?a(t)+c:o(t-1+s(t-1)*s(t+1))}})},2376:(t,e,n)=>{var r=n(2109),o=Math.asinh,i=Math.log,a=Math.sqrt;r({target:"Math",stat:!0,forced:!(o&&1/o(0)>0)},{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):i(e+a(e*e+1)):e}})},3181:(t,e,n)=>{var r=n(2109),o=Math.atanh,i=Math.log;r({target:"Math",stat:!0,forced:!(o&&1/o(-0)<0)},{atanh:function(t){return 0==(t=+t)?t:i((1+t)/(1-t))/2}})},3484:(t,e,n)=>{var r=n(2109),o=n(4310),i=Math.abs,a=Math.pow;r({target:"Math",stat:!0},{cbrt:function(t){return o(t=+t)*a(i(t),1/3)}})},2388:(t,e,n)=>{var r=n(2109),o=Math.floor,i=Math.log,a=Math.LOG2E;r({target:"Math",stat:!0},{clz32:function(t){return(t>>>=0)?31-o(i(t+.5)*a):32}})},8621:(t,e,n)=>{var r=n(2109),o=n(6736),i=Math.cosh,a=Math.abs,s=Math.E;r({target:"Math",stat:!0,forced:!i||i(710)===1/0},{cosh:function(t){var e=o(a(t)-1)+1;return(e+1/(e*s*s))*(s/2)}})},403:(t,e,n)=>{var r=n(2109),o=n(6736);r({target:"Math",stat:!0,forced:o!=Math.expm1},{expm1:o})},4755:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{fround:n(6130)})},5438:(t,e,n)=>{var r=n(2109),o=Math.hypot,i=Math.abs,a=Math.sqrt;r({target:"Math",stat:!0,forced:!!o&&o(1/0,NaN)!==1/0},{hypot:function(t,e){for(var n,r,o=0,s=0,c=arguments.length,u=0;s<c;)u<(n=i(arguments[s++]))?(o=o*(r=u/n)*r+1,u=n):o+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*a(o)}})},332:(t,e,n)=>{var r=n(2109),o=n(7293),i=Math.imul;r({target:"Math",stat:!0,forced:o((function(){return-5!=i(4294967295,5)||2!=i.length}))},{imul:function(t,e){var n=65535,r=+t,o=+e,i=n&r,a=n&o;return 0|i*a+((n&r>>>16)*a+i*(n&o>>>16)<<16>>>0)}})},658:(t,e,n)=>{var r=n(2109),o=Math.log,i=Math.LOG10E;r({target:"Math",stat:!0},{log10:function(t){return o(t)*i}})},197:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{log1p:n(6513)})},4914:(t,e,n)=>{var r=n(2109),o=Math.log,i=Math.LN2;r({target:"Math",stat:!0},{log2:function(t){return o(t)/i}})},2420:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{sign:n(4310)})},160:(t,e,n)=>{var r=n(2109),o=n(7293),i=n(6736),a=Math.abs,s=Math.exp,c=Math.E;r({target:"Math",stat:!0,forced:o((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(t){return a(t=+t)<1?(i(t)-i(-t))/2:(s(t-1)-s(-t-1))*(c/2)}})},970:(t,e,n)=>{var r=n(2109),o=n(6736),i=Math.exp;r({target:"Math",stat:!0},{tanh:function(t){var e=o(t=+t),n=o(-t);return e==1/0?1:n==1/0?-1:(e-n)/(i(t)+i(-t))}})},2703:(t,e,n)=>{n(8003)(Math,"Math",!0)},3689:(t,e,n)=>{var r=n(2109),o=Math.ceil,i=Math.floor;r({target:"Math",stat:!0},{trunc:function(t){return(t>0?i:o)(t)}})},9653:(t,e,n)=>{"use strict";var r=n(9781),o=n(7854),i=n(4705),a=n(1320),s=n(6656),c=n(4326),u=n(9587),l=n(2190),f=n(7593),p=n(7293),d=n(30),h=n(8006).f,v=n(1236).f,g=n(3070).f,b=n(3111).trim,m="Number",y=o.Number,x=y.prototype,_=c(d(x))==m,w=function(t){if(l(t))throw TypeError("Cannot convert a Symbol value to a number");var e,n,r,o,i,a,s,c,u=f(t,"number");if("string"==typeof u&&u.length>2)if(43===(e=(u=b(u)).charCodeAt(0))||45===e){if(88===(n=u.charCodeAt(2))||120===n)return NaN}else if(48===e){switch(u.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+u}for(a=(i=u.slice(2)).length,s=0;s<a;s++)if((c=i.charCodeAt(s))<48||c>o)return NaN;return parseInt(i,r)}return+u};if(i(m,!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var A,C=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof C&&(_?p((function(){x.valueOf.call(n)})):c(n)!=m)?u(new y(w(e)),n,C):w(e)},S=r?h(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),k=0;S.length>k;k++)s(y,A=S[k])&&!s(C,A)&&g(C,A,v(y,A));C.prototype=x,x.constructor=C,a(o,m,C)}},3299:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},5192:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isFinite:n(7023)})},3161:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isInteger:n(8730)})},4048:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}})},8285:(t,e,n)=>{var r=n(2109),o=n(8730),i=Math.abs;r({target:"Number",stat:!0},{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},4363:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},5994:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},1874:(t,e,n)=>{var r=n(2109),o=n(2814);r({target:"Number",stat:!0,forced:Number.parseFloat!=o},{parseFloat:o})},9494:(t,e,n)=>{var r=n(2109),o=n(3009);r({target:"Number",stat:!0,forced:Number.parseInt!=o},{parseInt:o})},6977:(t,e,n)=>{"use strict";var r=n(2109),o=n(9958),i=n(863),a=n(8415),s=n(7293),c=1..toFixed,u=Math.floor,l=function(t,e,n){return 0===e?n:e%2==1?l(t,e-1,n*t):l(t*t,e/2,n)},f=function(t,e,n){for(var r=-1,o=n;++r<6;)o+=e*t[r],t[r]=o%1e7,o=u(o/1e7)},p=function(t,e){for(var n=6,r=0;--n>=0;)r+=t[n],t[n]=u(r/e),r=r%e*1e7},d=function(t){for(var e=6,n="";--e>=0;)if(""!==n||0===e||0!==t[e]){var r=String(t[e]);n=""===n?r:n+a.call("0",7-r.length)+r}return n};r({target:"Number",proto:!0,forced:c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!s((function(){c.call({})}))},{toFixed:function(t){var e,n,r,s,c=i(this),u=o(t),h=[0,0,0,0,0,0],v="",g="0";if(u<0||u>20)throw RangeError("Incorrect fraction digits");if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(c*l(2,69,1))-69)<0?c*l(2,-e,1):c/l(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(h,0,n),r=u;r>=7;)f(h,1e7,0),r-=7;for(f(h,l(10,r,1),0),r=e-1;r>=23;)p(h,1<<23),r-=23;p(h,1<<r),f(h,1,1),p(h,2),g=d(h)}else f(h,0,n),f(h,1<<-e,0),g=d(h)+a.call("0",u);return u>0?v+((s=g.length)<=u?"0."+a.call("0",u-s)+g:g.slice(0,s-u)+"."+g.slice(s-u)):v+g}})},9601:(t,e,n)=>{var r=n(2109),o=n(1574);r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},9595:(t,e,n)=>{"use strict";var r=n(2109),o=n(9781),i=n(9026),a=n(7908),s=n(3099),c=n(3070);o&&r({target:"Object",proto:!0,forced:i},{__defineGetter__:function(t,e){c.f(a(this),t,{get:s(e),enumerable:!0,configurable:!0})}})},5500:(t,e,n)=>{"use strict";var r=n(2109),o=n(9781),i=n(9026),a=n(7908),s=n(3099),c=n(3070);o&&r({target:"Object",proto:!0,forced:i},{__defineSetter__:function(t,e){c.f(a(this),t,{set:s(e),enumerable:!0,configurable:!0})}})},9720:(t,e,n)=>{var r=n(2109),o=n(4699).entries;r({target:"Object",stat:!0},{entries:function(t){return o(t)}})},3371:(t,e,n)=>{var r=n(2109),o=n(6677),i=n(7293),a=n(111),s=n(2423).onFreeze,c=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){c(1)})),sham:!o},{freeze:function(t){return c&&a(t)?c(s(t)):t}})},8559:(t,e,n)=>{var r=n(2109),o=n(408),i=n(6135);r({target:"Object",stat:!0},{fromEntries:function(t){var e={};return o(t,(function(t,n){i(e,t,n)}),{AS_ENTRIES:!0}),e}})},5003:(t,e,n)=>{var r=n(2109),o=n(7293),i=n(5656),a=n(1236).f,s=n(9781),c=o((function(){a(1)}));r({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(t,e){return a(i(t),e)}})},9337:(t,e,n)=>{var r=n(2109),o=n(9781),i=n(3887),a=n(5656),s=n(1236),c=n(6135);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var e,n,r=a(t),o=s.f,u=i(r),l={},f=0;u.length>f;)void 0!==(n=o(r,e=u[f++]))&&c(l,e,n);return l}})},6210:(t,e,n)=>{var r=n(2109),o=n(7293),i=n(1156).f;r({target:"Object",stat:!0,forced:o((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:i})},489:(t,e,n)=>{var r=n(2109),o=n(7293),i=n(7908),a=n(9518),s=n(8544);r({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!s},{getPrototypeOf:function(t){return a(i(t))}})},1825:(t,e,n)=>{var r=n(2109),o=n(7293),i=n(111),a=Object.isExtensible;r({target:"Object",stat:!0,forced:o((function(){a(1)}))},{isExtensible:function(t){return!!i(t)&&(!a||a(t))}})},8410:(t,e,n)=>{var r=n(2109),o=n(7293),i=n(111),a=Object.isFrozen;r({target:"Object",stat:!0,forced:o((function(){a(1)}))},{isFrozen:function(t){return!i(t)||!!a&&a(t)}})},2200:(t,e,n)=>{var r=n(2109),o=n(7293),i=n(111),a=Object.isSealed;r({target:"Object",stat:!0,forced:o((function(){a(1)}))},{isSealed:function(t){return!i(t)||!!a&&a(t)}})},3304:(t,e,n)=>{n(2109)({target:"Object",stat:!0},{is:n(1150)})},7941:(t,e,n)=>{var r=n(2109),o=n(7908),i=n(1956);r({target:"Object",stat:!0,forced:n(7293)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},4869:(t,e,n)=>{"use strict";var r=n(2109),o=n(9781),i=n(9026),a=n(7908),s=n(4948),c=n(9518),u=n(1236).f;o&&r({target:"Object",proto:!0,forced:i},{__lookupGetter__:function(t){var e,n=a(this),r=s(t);do{if(e=u(n,r))return e.get}while(n=c(n))}})},3952:(t,e,n)=>{"use strict";var r=n(2109),o=n(9781),i=n(9026),a=n(7908),s=n(4948),c=n(9518),u=n(1236).f;o&&r({target:"Object",proto:!0,forced:i},{__lookupSetter__:function(t){var e,n=a(this),r=s(t);do{if(e=u(n,r))return e.set}while(n=c(n))}})},7227:(t,e,n)=>{var r=n(2109),o=n(111),i=n(2423).onFreeze,a=n(6677),s=n(7293),c=Object.preventExtensions;r({target:"Object",stat:!0,forced:s((function(){c(1)})),sham:!a},{preventExtensions:function(t){return c&&o(t)?c(i(t)):t}})},514:(t,e,n)=>{var r=n(2109),o=n(111),i=n(2423).onFreeze,a=n(6677),s=n(7293),c=Object.seal;r({target:"Object",stat:!0,forced:s((function(){c(1)})),sham:!a},{seal:function(t){return c&&o(t)?c(i(t)):t}})},8304:(t,e,n)=>{n(2109)({target:"Object",stat:!0},{setPrototypeOf:n(7674)})},1539:(t,e,n)=>{var r=n(1694),o=n(1320),i=n(288);r||o(Object.prototype,"toString",i,{unsafe:!0})},6833:(t,e,n)=>{var r=n(2109),o=n(4699).values;r({target:"Object",stat:!0},{values:function(t){return o(t)}})},4678:(t,e,n)=>{var r=n(2109),o=n(2814);r({global:!0,forced:parseFloat!=o},{parseFloat:o})},1058:(t,e,n)=>{var r=n(2109),o=n(3009);r({global:!0,forced:parseInt!=o},{parseInt:o})},7922:(t,e,n)=>{"use strict";var r=n(2109),o=n(3099),i=n(8523),a=n(2534),s=n(408);r({target:"Promise",stat:!0},{allSettled:function(t){var e=this,n=i.f(e),r=n.resolve,c=n.reject,u=a((function(){var n=o(e.resolve),i=[],a=0,c=1;s(t,(function(t){var o=a++,s=!1;i.push(void 0),c++,n.call(e,t).then((function(t){s||(s=!0,i[o]={status:"fulfilled",value:t},--c||r(i))}),(function(t){s||(s=!0,i[o]={status:"rejected",reason:t},--c||r(i))}))})),--c||r(i)}));return u.error&&c(u.value),n.promise}})},4668:(t,e,n)=>{"use strict";var r=n(2109),o=n(3099),i=n(5005),a=n(8523),s=n(2534),c=n(408),u="No one promise resolved";r({target:"Promise",stat:!0},{any:function(t){var e=this,n=a.f(e),r=n.resolve,l=n.reject,f=s((function(){var n=o(e.resolve),a=[],s=0,f=1,p=!1;c(t,(function(t){var o=s++,c=!1;a.push(void 0),f++,n.call(e,t).then((function(t){c||p||(p=!0,r(t))}),(function(t){c||p||(c=!0,a[o]=t,--f||l(new(i("AggregateError"))(a,u)))}))})),--f||l(new(i("AggregateError"))(a,u))}));return f.error&&l(f.value),n.promise}})},7727:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(3366),a=n(7293),s=n(5005),c=n(6707),u=n(9478),l=n(1320);if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=c(this,s("Promise")),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),!o&&"function"==typeof i){var f=s("Promise").prototype.finally;i.prototype.finally!==f&&l(i.prototype,"finally",f,{unsafe:!0})}},8674:(t,e,n)=>{"use strict";var r,o,i,a,s=n(2109),c=n(1913),u=n(7854),l=n(5005),f=n(3366),p=n(1320),d=n(2248),h=n(7674),v=n(8003),g=n(6340),b=n(111),m=n(3099),y=n(5787),x=n(2788),_=n(408),w=n(7072),A=n(6707),C=n(261).set,S=n(5948),k=n(9478),O=n(842),E=n(8523),I=n(2534),M=n(9909),T=n(4705),j=n(5112),R=n(7871),P=n(5268),B=n(7392),$=j("species"),F="Promise",L=M.get,N=M.set,D=M.getterFor(F),U=f&&f.prototype,z=f,H=U,G=u.TypeError,W=u.document,V=u.process,q=E.f,Y=q,K=!!(W&&W.createEvent&&u.dispatchEvent),X="function"==typeof PromiseRejectionEvent,Z="unhandledrejection",J=!1,Q=T(F,(function(){var t=x(z),e=t!==String(z);if(!e&&66===B)return!0;if(c&&!H.finally)return!0;if(B>=51&&/native code/.test(t))return!1;var n=new z((function(t){t(1)})),r=function(t){t((function(){}),(function(){}))};return(n.constructor={})[$]=r,!(J=n.then((function(){}))instanceof r)||!e&&R&&!X})),tt=Q||!w((function(t){z.all(t).catch((function(){}))})),et=function(t){var e;return!(!b(t)||"function"!=typeof(e=t.then))&&e},nt=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;S((function(){for(var r=t.value,o=1==t.state,i=0;n.length>i;){var a,s,c,u=n[i++],l=o?u.ok:u.fail,f=u.resolve,p=u.reject,d=u.domain;try{l?(o||(2===t.rejection&&at(t),t.rejection=1),!0===l?a=r:(d&&d.enter(),a=l(r),d&&(d.exit(),c=!0)),a===u.promise?p(G("Promise-chain cycle")):(s=et(a))?s.call(a,f,p):f(a)):p(r)}catch(t){d&&!c&&d.exit(),p(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&ot(t)}))}},rt=function(t,e,n){var r,o;K?((r=W.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},!X&&(o=u["on"+t])?o(r):t===Z&&O("Unhandled promise rejection",n)},ot=function(t){C.call(u,(function(){var e,n=t.facade,r=t.value;if(it(t)&&(e=I((function(){P?V.emit("unhandledRejection",r,n):rt(Z,n,r)})),t.rejection=P||it(t)?2:1,e.error))throw e.value}))},it=function(t){return 1!==t.rejection&&!t.parent},at=function(t){C.call(u,(function(){var e=t.facade;P?V.emit("rejectionHandled",e):rt("rejectionhandled",e,t.value)}))},st=function(t,e,n){return function(r){t(e,r,n)}},ct=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=2,nt(t,!0))},ut=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw G("Promise can't be resolved itself");var r=et(e);r?S((function(){var n={done:!1};try{r.call(e,st(ut,n,t),st(ct,n,t))}catch(e){ct(n,e,t)}})):(t.value=e,t.state=1,nt(t,!1))}catch(e){ct({done:!1},e,t)}}};if(Q&&(H=(z=function(t){y(this,z,F),m(t),r.call(this);var e=L(this);try{t(st(ut,e),st(ct,e))}catch(t){ct(e,t)}}).prototype,(r=function(t){N(this,{type:F,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=d(H,{then:function(t,e){var n=D(this),r=q(A(this,z));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=P?V.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&nt(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=L(t);this.promise=t,this.resolve=st(ut,e),this.reject=st(ct,e)},E.f=q=function(t){return t===z||t===i?new o(t):Y(t)},!c&&"function"==typeof f&&U!==Object.prototype)){a=U.then,J||(p(U,"then",(function(t,e){var n=this;return new z((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),p(U,"catch",H.catch,{unsafe:!0}));try{delete U.constructor}catch(t){}h&&h(U,H)}s({global:!0,wrap:!0,forced:Q},{Promise:z}),v(z,F,!1,!0),g(F),i=l(F),s({target:F,stat:!0,forced:Q},{reject:function(t){var e=q(this);return e.reject.call(void 0,t),e.promise}}),s({target:F,stat:!0,forced:c||Q},{resolve:function(t){return k(c&&this===i?z:this,t)}}),s({target:F,stat:!0,forced:tt},{all:function(t){var e=this,n=q(e),r=n.resolve,o=n.reject,i=I((function(){var n=m(e.resolve),i=[],a=0,s=1;_(t,(function(t){var c=a++,u=!1;i.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,i[c]=t,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=q(e),r=n.reject,o=I((function(){var o=m(e.resolve);_(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},224:(t,e,n)=>{var r=n(2109),o=n(5005),i=n(3099),a=n(9670),s=n(7293),c=o("Reflect","apply"),u=Function.apply;r({target:"Reflect",stat:!0,forced:!s((function(){c((function(){}))}))},{apply:function(t,e,n){return i(t),a(n),c?c(t,e,n):u.call(t,e,n)}})},2419:(t,e,n)=>{var r=n(2109),o=n(5005),i=n(3099),a=n(9670),s=n(111),c=n(30),u=n(7065),l=n(7293),f=o("Reflect","construct"),p=l((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),d=!l((function(){f((function(){}))})),h=p||d;r({target:"Reflect",stat:!0,forced:h,sham:h},{construct:function(t,e){i(t),a(e);var n=arguments.length<3?t:i(arguments[2]);if(d&&!p)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(u.apply(t,r))}var o=n.prototype,l=c(s(o)?o:Object.prototype),h=Function.apply.call(t,l,e);return s(h)?h:l}})},9596:(t,e,n)=>{var r=n(2109),o=n(9781),i=n(9670),a=n(4948),s=n(3070);r({target:"Reflect",stat:!0,forced:n(7293)((function(){Reflect.defineProperty(s.f({},1,{value:1}),1,{value:2})})),sham:!o},{defineProperty:function(t,e,n){i(t);var r=a(e);i(n);try{return s.f(t,r,n),!0}catch(t){return!1}}})},2586:(t,e,n)=>{var r=n(2109),o=n(9670),i=n(1236).f;r({target:"Reflect",stat:!0},{deleteProperty:function(t,e){var n=i(o(t),e);return!(n&&!n.configurable)&&delete t[e]}})},5683:(t,e,n)=>{var r=n(2109),o=n(9781),i=n(9670),a=n(1236);r({target:"Reflect",stat:!0,sham:!o},{getOwnPropertyDescriptor:function(t,e){return a.f(i(t),e)}})},9361:(t,e,n)=>{var r=n(2109),o=n(9670),i=n(9518);r({target:"Reflect",stat:!0,sham:!n(8544)},{getPrototypeOf:function(t){return i(o(t))}})},4819:(t,e,n)=>{var r=n(2109),o=n(111),i=n(9670),a=n(5032),s=n(1236),c=n(9518);r({target:"Reflect",stat:!0},{get:function t(e,n){var r,u,l=arguments.length<3?e:arguments[2];return i(e)===l?e[n]:(r=s.f(e,n))?a(r)?r.value:void 0===r.get?void 0:r.get.call(l):o(u=c(e))?t(u,n,l):void 0}})},1037:(t,e,n)=>{n(2109)({target:"Reflect",stat:!0},{has:function(t,e){return e in t}})},5898:(t,e,n)=>{var r=n(2109),o=n(9670),i=Object.isExtensible;r({target:"Reflect",stat:!0},{isExtensible:function(t){return o(t),!i||i(t)}})},7556:(t,e,n)=>{n(2109)({target:"Reflect",stat:!0},{ownKeys:n(3887)})},4361:(t,e,n)=>{var r=n(2109),o=n(5005),i=n(9670);r({target:"Reflect",stat:!0,sham:!n(6677)},{preventExtensions:function(t){i(t);try{var e=o("Object","preventExtensions");return e&&e(t),!0}catch(t){return!1}}})},9532:(t,e,n)=>{var r=n(2109),o=n(9670),i=n(6077),a=n(7674);a&&r({target:"Reflect",stat:!0},{setPrototypeOf:function(t,e){o(t),i(e);try{return a(t,e),!0}catch(t){return!1}}})},3593:(t,e,n)=>{var r=n(2109),o=n(9670),i=n(111),a=n(5032),s=n(7293),c=n(3070),u=n(1236),l=n(9518),f=n(9114);r({target:"Reflect",stat:!0,forced:s((function(){var t=function(){},e=c.f(new t,"a",{configurable:!0});return!1!==Reflect.set(t.prototype,"a",1,e)}))},{set:function t(e,n,r){var s,p,d,h=arguments.length<4?e:arguments[3],v=u.f(o(e),n);if(!v){if(i(p=l(e)))return t(p,n,r,h);v=f(0)}if(a(v)){if(!1===v.writable||!i(h))return!1;if(s=u.f(h,n)){if(s.get||s.set||!1===s.writable)return!1;s.value=r,c.f(h,n,s)}else c.f(h,n,f(0,r))}else{if(void 0===(d=v.set))return!1;d.call(h,r)}return!0}})},4603:(t,e,n)=>{var r=n(9781),o=n(7854),i=n(4705),a=n(9587),s=n(8880),c=n(3070).f,u=n(8006).f,l=n(7850),f=n(1340),p=n(7066),d=n(2999),h=n(1320),v=n(7293),g=n(6656),b=n(9909).enforce,m=n(6340),y=n(5112),x=n(9441),_=n(8173),w=y("match"),A=o.RegExp,C=A.prototype,S=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,k=/a/g,O=/a/g,E=new A(k)!==k,I=d.UNSUPPORTED_Y;if(i("RegExp",r&&(!E||I||x||_||v((function(){return O[w]=!1,A(k)!=k||A(O)==O||"/a/i"!=A(k,"i")}))))){for(var M=function(t,e){var n,r,o,i,c,u,d=this instanceof M,h=l(t),v=void 0===e,m=[],y=t;if(!d&&h&&v&&t.constructor===M)return t;if((h||t instanceof M)&&(t=t.source,v&&(e="flags"in y?y.flags:p.call(y))),t=void 0===t?"":f(t),e=void 0===e?"":f(e),y=t,x&&"dotAll"in k&&(r=!!e&&e.indexOf("s")>-1)&&(e=e.replace(/s/g,"")),n=e,I&&"sticky"in k&&(o=!!e&&e.indexOf("y")>-1)&&(e=e.replace(/y/g,"")),_&&(i=function(t){for(var e,n=t.length,r=0,o="",i=[],a={},s=!1,c=!1,u=0,l="";r<=n;r++){if("\\"===(e=t.charAt(r)))e+=t.charAt(++r);else if("]"===e)s=!1;else if(!s)switch(!0){case"["===e:s=!0;break;case"("===e:S.test(t.slice(r+1))&&(r+=2,c=!0),o+=e,u++;continue;case">"===e&&c:if(""===l||g(a,l))throw new SyntaxError("Invalid capture group name");a[l]=!0,i.push([l,u]),c=!1,l="";continue}c?l+=e:o+=e}return[o,i]}(t),t=i[0],m=i[1]),c=a(A(t,e),d?this:C,M),(r||o||m.length)&&(u=b(c),r&&(u.dotAll=!0,u.raw=M(function(t){for(var e,n=t.length,r=0,o="",i=!1;r<=n;r++)"\\"!==(e=t.charAt(r))?i||"."!==e?("["===e?i=!0:"]"===e&&(i=!1),o+=e):o+="[\\s\\S]":o+=e+t.charAt(++r);return o}(t),n)),o&&(u.sticky=!0),m.length&&(u.groups=m)),t!==y)try{s(c,"source",""===y?"(?:)":y)}catch(t){}return c},T=function(t){t in M||c(M,t,{configurable:!0,get:function(){return A[t]},set:function(e){A[t]=e}})},j=u(A),R=0;j.length>R;)T(j[R++]);C.constructor=M,M.prototype=C,h(o,"RegExp",M)}m("RegExp")},4916:(t,e,n)=>{"use strict";var r=n(2109),o=n(2261);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},2087:(t,e,n)=>{var r=n(9781),o=n(3070),i=n(7066),a=n(7293);r&&a((function(){return"sy"!==Object.getOwnPropertyDescriptor(RegExp.prototype,"flags").get.call({dotAll:!0,sticky:!0})}))&&o.f(RegExp.prototype,"flags",{configurable:!0,get:i})},9714:(t,e,n)=>{"use strict";var r=n(1320),o=n(9670),i=n(1340),a=n(7293),s=n(7066),c="toString",u=RegExp.prototype,l=u.toString,f=a((function(){return"/a/b"!=l.call({source:"a",flags:"b"})})),p=l.name!=c;(f||p)&&r(RegExp.prototype,c,(function(){var t=o(this),e=i(t.source),n=t.flags;return"/"+e+"/"+i(void 0===n&&t instanceof RegExp&&!("flags"in u)?s.call(t):n)}),{unsafe:!0})},189:(t,e,n)=>{"use strict";var r=n(7710),o=n(5631);t.exports=r("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),o)},5218:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("anchor")},{anchor:function(t){return o(this,"a","name",t)}})},4475:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("big")},{big:function(){return o(this,"big","","")}})},7929:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("blink")},{blink:function(){return o(this,"blink","","")}})},915:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("bold")},{bold:function(){return o(this,"b","","")}})},9841:(t,e,n)=>{"use strict";var r=n(2109),o=n(8710).codeAt;r({target:"String",proto:!0},{codePointAt:function(t){return o(this,t)}})},7852:(t,e,n)=>{"use strict";var r,o=n(2109),i=n(1236).f,a=n(7466),s=n(1340),c=n(3929),u=n(4488),l=n(4964),f=n(1913),p="".endsWith,d=Math.min,h=l("endsWith");o({target:"String",proto:!0,forced:!(!f&&!h&&(r=i(String.prototype,"endsWith"),r&&!r.writable)||h)},{endsWith:function(t){var e=s(u(this));c(t);var n=arguments.length>1?arguments[1]:void 0,r=a(e.length),o=void 0===n?r:d(a(n),r),i=s(t);return p?p.call(e,i,o):e.slice(o-i.length,o)===i}})},9253:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("fixed")},{fixed:function(){return o(this,"tt","","")}})},2125:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontcolor")},{fontcolor:function(t){return o(this,"font","color",t)}})},8830:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontsize")},{fontsize:function(t){return o(this,"font","size",t)}})},4953:(t,e,n)=>{var r=n(2109),o=n(1400),i=String.fromCharCode,a=String.fromCodePoint;r({target:"String",stat:!0,forced:!!a&&1!=a.length},{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],o(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},2023:(t,e,n)=>{"use strict";var r=n(2109),o=n(3929),i=n(4488),a=n(1340);r({target:"String",proto:!0,forced:!n(4964)("includes")},{includes:function(t){return!!~a(i(this)).indexOf(a(o(t)),arguments.length>1?arguments[1]:void 0)}})},8734:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("italics")},{italics:function(){return o(this,"i","","")}})},8783:(t,e,n)=>{"use strict";var r=n(8710).charAt,o=n(1340),i=n(9909),a=n(654),s="String Iterator",c=i.set,u=i.getterFor(s);a(String,"String",(function(t){c(this,{type:s,string:o(t),index:0})}),(function(){var t,e=u(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},9254:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("link")},{link:function(t){return o(this,"a","href",t)}})},6373:(t,e,n)=>{"use strict";var r=n(2109),o=n(4994),i=n(4488),a=n(7466),s=n(1340),c=n(3099),u=n(9670),l=n(4326),f=n(7850),p=n(7066),d=n(8880),h=n(7293),v=n(5112),g=n(6707),b=n(1530),m=n(9909),y=n(1913),x=v("matchAll"),_="RegExp String Iterator",w=m.set,A=m.getterFor(_),C=RegExp.prototype,S=C.exec,k="".matchAll,O=!!k&&!h((function(){"a".matchAll(/./)})),E=o((function(t,e,n,r){w(this,{type:_,regexp:t,string:e,global:n,unicode:r,done:!1})}),"RegExp String",(function(){var t=A(this);if(t.done)return{value:void 0,done:!0};var e=t.regexp,n=t.string,r=function(t,e){var n,r=t.exec;if("function"==typeof r){if("object"!=typeof(n=r.call(t,e)))throw TypeError("Incorrect exec result");return n}return S.call(t,e)}(e,n);return null===r?{value:void 0,done:t.done=!0}:t.global?(""===s(r[0])&&(e.lastIndex=b(n,a(e.lastIndex),t.unicode)),{value:r,done:!1}):(t.done=!0,{value:r,done:!1})})),I=function(t){var e,n,r,o,i,c,l=u(this),f=s(t);return e=g(l,RegExp),void 0===(n=l.flags)&&l instanceof RegExp&&!("flags"in C)&&(n=p.call(l)),r=void 0===n?"":s(n),o=new e(e===RegExp?l.source:l,r),i=!!~r.indexOf("g"),c=!!~r.indexOf("u"),o.lastIndex=a(l.lastIndex),new E(o,f,i,c)};r({target:"String",proto:!0,forced:O},{matchAll:function(t){var e,n,r,o=i(this);if(null!=t){if(f(t)&&!~s(i("flags"in C?t.flags:p.call(t))).indexOf("g"))throw TypeError("`.matchAll` does not allow non-global regexes");if(O)return k.apply(o,arguments);if(void 0===(n=t[x])&&y&&"RegExp"==l(t)&&(n=I),null!=n)return c(n).call(t,o)}else if(O)return k.apply(o,arguments);return e=s(o),r=new RegExp(t,"g"),y?I.call(r,e):r[x](e)}}),y||x in C||d(C,x,I)},4723:(t,e,n)=>{"use strict";var r=n(7007),o=n(9670),i=n(7466),a=n(1340),s=n(4488),c=n(1530),u=n(7651);r("match",(function(t,e,n){return[function(e){var n=s(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](a(n))},function(t){var r=o(this),s=a(t),l=n(e,r,s);if(l.done)return l.value;if(!r.global)return u(r,s);var f=r.unicode;r.lastIndex=0;for(var p,d=[],h=0;null!==(p=u(r,s));){var v=a(p[0]);d[h]=v,""===v&&(r.lastIndex=c(s,i(r.lastIndex),f)),h++}return 0===h?null:d}]}))},6528:(t,e,n)=>{"use strict";var r=n(2109),o=n(6650).end;r({target:"String",proto:!0,forced:n(7061)},{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},3112:(t,e,n)=>{"use strict";var r=n(2109),o=n(6650).start;r({target:"String",proto:!0,forced:n(7061)},{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},8992:(t,e,n)=>{var r=n(2109),o=n(5656),i=n(7466),a=n(1340);r({target:"String",stat:!0},{raw:function(t){for(var e=o(t.raw),n=i(e.length),r=arguments.length,s=[],c=0;n>c;)s.push(a(e[c++])),c<r&&s.push(a(arguments[c]));return s.join("")}})},2481:(t,e,n)=>{n(2109)({target:"String",proto:!0},{repeat:n(8415)})},8757:(t,e,n)=>{"use strict";var r=n(2109),o=n(4488),i=n(7850),a=n(1340),s=n(7066),c=n(647),u=n(5112),l=n(1913),f=u("replace"),p=RegExp.prototype,d=Math.max,h=function(t,e,n){return n>t.length?-1:""===e?n:t.indexOf(e,n)};r({target:"String",proto:!0},{replaceAll:function(t,e){var n,r,u,v,g,b,m,y,x=o(this),_=0,w=0,A="";if(null!=t){if((n=i(t))&&!~a(o("flags"in p?t.flags:s.call(t))).indexOf("g"))throw TypeError("`.replaceAll` does not allow non-global regexes");if(void 0!==(r=t[f]))return r.call(t,x,e);if(l&&n)return a(x).replace(t,e)}for(u=a(x),v=a(t),(g="function"==typeof e)||(e=a(e)),b=v.length,m=d(1,b),_=h(u,v,0);-1!==_;)y=g?a(e(v,_,u)):c(v,u,_,[],void 0,e),A+=u.slice(w,_)+y,w=_+b,_=h(u,v,_+m);return w<u.length&&(A+=u.slice(w)),A}})},5306:(t,e,n)=>{"use strict";var r=n(7007),o=n(7293),i=n(9670),a=n(9958),s=n(7466),c=n(1340),u=n(4488),l=n(1530),f=n(647),p=n(7651),d=n(5112)("replace"),h=Math.max,v=Math.min,g="$0"==="a".replace(/./,"$0"),b=!!/./[d]&&""===/./[d]("a","$0");r("replace",(function(t,e,n){var r=b?"$":"$0";return[function(t,n){var r=u(this),o=null==t?void 0:t[d];return void 0!==o?o.call(t,r,n):e.call(c(r),t,n)},function(t,o){var u=i(this),d=c(t);if("string"==typeof o&&-1===o.indexOf(r)&&-1===o.indexOf("$<")){var g=n(e,u,d,o);if(g.done)return g.value}var b="function"==typeof o;b||(o=c(o));var m=u.global;if(m){var y=u.unicode;u.lastIndex=0}for(var x=[];;){var _=p(u,d);if(null===_)break;if(x.push(_),!m)break;""===c(_[0])&&(u.lastIndex=l(d,s(u.lastIndex),y))}for(var w,A="",C=0,S=0;S<x.length;S++){_=x[S];for(var k=c(_[0]),O=h(v(a(_.index),d.length),0),E=[],I=1;I<_.length;I++)E.push(void 0===(w=_[I])?w:String(w));var M=_.groups;if(b){var T=[k].concat(E,O,d);void 0!==M&&T.push(M);var j=c(o.apply(void 0,T))}else j=f(k,d,O,E,M,o);O>=C&&(A+=d.slice(C,O)+j,C=O+k.length)}return A+d.slice(C)}]}),!!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!g||b)},4765:(t,e,n)=>{"use strict";var r=n(7007),o=n(9670),i=n(4488),a=n(1150),s=n(1340),c=n(7651);r("search",(function(t,e,n){return[function(e){var n=i(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](s(n))},function(t){var r=o(this),i=s(t),u=n(e,r,i);if(u.done)return u.value;var l=r.lastIndex;a(l,0)||(r.lastIndex=0);var f=c(r,i);return a(r.lastIndex,l)||(r.lastIndex=l),null===f?-1:f.index}]}))},7268:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("small")},{small:function(){return o(this,"small","","")}})},3123:(t,e,n)=>{"use strict";var r=n(7007),o=n(7850),i=n(9670),a=n(4488),s=n(6707),c=n(1530),u=n(7466),l=n(1340),f=n(7651),p=n(2261),d=n(2999),h=n(7293),v=d.UNSUPPORTED_Y,g=[].push,b=Math.min,m=4294967295;r("split",(function(t,e,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var r=l(a(this)),i=void 0===n?m:n>>>0;if(0===i)return[];if(void 0===t)return[r];if(!o(t))return e.call(r,t,i);for(var s,c,u,f=[],d=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),h=0,v=new RegExp(t.source,d+"g");(s=p.call(v,r))&&!((c=v.lastIndex)>h&&(f.push(r.slice(h,s.index)),s.length>1&&s.index<r.length&&g.apply(f,s.slice(1)),u=s[0].length,h=c,f.length>=i));)v.lastIndex===s.index&&v.lastIndex++;return h===r.length?!u&&v.test("")||f.push(""):f.push(r.slice(h)),f.length>i?f.slice(0,i):f}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,n){var o=a(this),i=null==e?void 0:e[t];return void 0!==i?i.call(e,o,n):r.call(l(o),e,n)},function(t,o){var a=i(this),p=l(t),d=n(r,a,p,o,r!==e);if(d.done)return d.value;var h=s(a,RegExp),g=a.unicode,y=(a.ignoreCase?"i":"")+(a.multiline?"m":"")+(a.unicode?"u":"")+(v?"g":"y"),x=new h(v?"^(?:"+a.source+")":a,y),_=void 0===o?m:o>>>0;if(0===_)return[];if(0===p.length)return null===f(x,p)?[p]:[];for(var w=0,A=0,C=[];A<p.length;){x.lastIndex=v?0:A;var S,k=f(x,v?p.slice(A):p);if(null===k||(S=b(u(x.lastIndex+(v?A:0)),p.length))===w)A=c(p,A,g);else{if(C.push(p.slice(w,A)),C.length===_)return C;for(var O=1;O<=k.length-1;O++)if(C.push(k[O]),C.length===_)return C;A=w=S}}return C.push(p.slice(w)),C}]}),!!h((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),v)},6755:(t,e,n)=>{"use strict";var r,o=n(2109),i=n(1236).f,a=n(7466),s=n(1340),c=n(3929),u=n(4488),l=n(4964),f=n(1913),p="".startsWith,d=Math.min,h=l("startsWith");o({target:"String",proto:!0,forced:!(!f&&!h&&(r=i(String.prototype,"startsWith"),r&&!r.writable)||h)},{startsWith:function(t){var e=s(u(this));c(t);var n=a(d(arguments.length>1?arguments[1]:void 0,e.length)),r=s(t);return p?p.call(e,r,n):e.slice(n,n+r.length)===r}})},7397:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("strike")},{strike:function(){return o(this,"strike","","")}})},86:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("sub")},{sub:function(){return o(this,"sub","","")}})},623:(t,e,n)=>{"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("sup")},{sup:function(){return o(this,"sup","","")}})},8702:(t,e,n)=>{"use strict";var r=n(2109),o=n(3111).end,i=n(6091)("trimEnd"),a=i?function(){return o(this)}:"".trimEnd;r({target:"String",proto:!0,forced:i},{trimEnd:a,trimRight:a})},5674:(t,e,n)=>{"use strict";var r=n(2109),o=n(3111).start,i=n(6091)("trimStart"),a=i?function(){return o(this)}:"".trimStart;r({target:"String",proto:!0,forced:i},{trimStart:a,trimLeft:a})},3210:(t,e,n)=>{"use strict";var r=n(2109),o=n(3111).trim;r({target:"String",proto:!0,forced:n(6091)("trim")},{trim:function(){return o(this)}})},2443:(t,e,n)=>{n(7235)("asyncIterator")},1817:(t,e,n)=>{"use strict";var r=n(2109),o=n(9781),i=n(7854),a=n(6656),s=n(111),c=n(3070).f,u=n(9920),l=i.Symbol;if(o&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var f={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new l(t):void 0===t?l():l(t);return""===t&&(f[e]=!0),e};u(p,l);var d=p.prototype=l.prototype;d.constructor=p;var h=d.toString,v="Symbol(test)"==String(l("test")),g=/^Symbol\((.*)\)[^)]+$/;c(d,"description",{configurable:!0,get:function(){var t=s(this)?this.valueOf():this,e=h.call(t);if(a(f,t))return"";var n=v?e.slice(7,-1):e.replace(g,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:p})}},2401:(t,e,n)=>{n(7235)("hasInstance")},8722:(t,e,n)=>{n(7235)("isConcatSpreadable")},2165:(t,e,n)=>{n(7235)("iterator")},2526:(t,e,n)=>{"use strict";var r=n(2109),o=n(7854),i=n(5005),a=n(1913),s=n(9781),c=n(133),u=n(7293),l=n(6656),f=n(3157),p=n(111),d=n(2190),h=n(9670),v=n(7908),g=n(5656),b=n(4948),m=n(1340),y=n(9114),x=n(30),_=n(1956),w=n(8006),A=n(1156),C=n(5181),S=n(1236),k=n(3070),O=n(5296),E=n(8880),I=n(1320),M=n(2309),T=n(6200),j=n(3501),R=n(9711),P=n(5112),B=n(6061),$=n(7235),F=n(8003),L=n(9909),N=n(2092).forEach,D=T("hidden"),U="Symbol",z=P("toPrimitive"),H=L.set,G=L.getterFor(U),W=Object.prototype,V=o.Symbol,q=i("JSON","stringify"),Y=S.f,K=k.f,X=A.f,Z=O.f,J=M("symbols"),Q=M("op-symbols"),tt=M("string-to-symbol-registry"),et=M("symbol-to-string-registry"),nt=M("wks"),rt=o.QObject,ot=!rt||!rt.prototype||!rt.prototype.findChild,it=s&&u((function(){return 7!=x(K({},"a",{get:function(){return K(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=Y(W,e);r&&delete W[e],K(t,e,n),r&&t!==W&&K(W,e,r)}:K,at=function(t,e){var n=J[t]=x(V.prototype);return H(n,{type:U,tag:t,description:e}),s||(n.description=e),n},st=function(t,e,n){t===W&&st(Q,e,n),h(t);var r=b(e);return h(n),l(J,r)?(n.enumerable?(l(t,D)&&t[D][r]&&(t[D][r]=!1),n=x(n,{enumerable:y(0,!1)})):(l(t,D)||K(t,D,y(1,{})),t[D][r]=!0),it(t,r,n)):K(t,r,n)},ct=function(t,e){h(t);var n=g(e),r=_(n).concat(pt(n));return N(r,(function(e){s&&!ut.call(n,e)||st(t,e,n[e])})),t},ut=function(t){var e=b(t),n=Z.call(this,e);return!(this===W&&l(J,e)&&!l(Q,e))&&(!(n||!l(this,e)||!l(J,e)||l(this,D)&&this[D][e])||n)},lt=function(t,e){var n=g(t),r=b(e);if(n!==W||!l(J,r)||l(Q,r)){var o=Y(n,r);return!o||!l(J,r)||l(n,D)&&n[D][r]||(o.enumerable=!0),o}},ft=function(t){var e=X(g(t)),n=[];return N(e,(function(t){l(J,t)||l(j,t)||n.push(t)})),n},pt=function(t){var e=t===W,n=X(e?Q:g(t)),r=[];return N(n,(function(t){!l(J,t)||e&&!l(W,t)||r.push(J[t])})),r};c||(I((V=function(){if(this instanceof V)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?m(arguments[0]):void 0,e=R(t),n=function(t){this===W&&n.call(Q,t),l(this,D)&&l(this[D],e)&&(this[D][e]=!1),it(this,e,y(1,t))};return s&&ot&&it(W,e,{configurable:!0,set:n}),at(e,t)}).prototype,"toString",(function(){return G(this).tag})),I(V,"withoutSetter",(function(t){return at(R(t),t)})),O.f=ut,k.f=st,S.f=lt,w.f=A.f=ft,C.f=pt,B.f=function(t){return at(P(t),t)},s&&(K(V.prototype,"description",{configurable:!0,get:function(){return G(this).description}}),a||I(W,"propertyIsEnumerable",ut,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:V}),N(_(nt),(function(t){$(t)})),r({target:U,stat:!0,forced:!c},{for:function(t){var e=m(t);if(l(tt,e))return tt[e];var n=V(e);return tt[e]=n,et[n]=e,n},keyFor:function(t){if(!d(t))throw TypeError(t+" is not a symbol");if(l(et,t))return et[t]},useSetter:function(){ot=!0},useSimple:function(){ot=!1}}),r({target:"Object",stat:!0,forced:!c,sham:!s},{create:function(t,e){return void 0===e?x(t):ct(x(t),e)},defineProperty:st,defineProperties:ct,getOwnPropertyDescriptor:lt}),r({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:ft,getOwnPropertySymbols:pt}),r({target:"Object",stat:!0,forced:u((function(){C.f(1)}))},{getOwnPropertySymbols:function(t){return C.f(v(t))}}),q&&r({target:"JSON",stat:!0,forced:!c||u((function(){var t=V();return"[null]"!=q([t])||"{}"!=q({a:t})||"{}"!=q(Object(t))}))},{stringify:function(t,e,n){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=e,(p(e)||void 0!==t)&&!d(t))return f(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!d(e))return e}),o[1]=e,q.apply(null,o)}}),V.prototype[z]||E(V.prototype,z,V.prototype.valueOf),F(V,U),j[D]=!0},9007:(t,e,n)=>{n(7235)("match")},3510:(t,e,n)=>{n(7235)("replace")},1840:(t,e,n)=>{n(7235)("search")},6982:(t,e,n)=>{n(7235)("species")},2159:(t,e,n)=>{n(7235)("split")},6649:(t,e,n)=>{n(7235)("toPrimitive")},9341:(t,e,n)=>{n(7235)("toStringTag")},543:(t,e,n)=>{n(7235)("unscopables")},2990:(t,e,n)=>{"use strict";var r=n(260),o=n(1048),i=r.aTypedArray;(0,r.exportTypedArrayMethod)("copyWithin",(function(t,e){return o.call(i(this),t,e,arguments.length>2?arguments[2]:void 0)}))},8927:(t,e,n)=>{"use strict";var r=n(260),o=n(2092).every,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("every",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},3105:(t,e,n)=>{"use strict";var r=n(260),o=n(1285),i=r.aTypedArray;(0,r.exportTypedArrayMethod)("fill",(function(t){return o.apply(i(this),arguments)}))},5035:(t,e,n)=>{"use strict";var r=n(260),o=n(2092).filter,i=n(3074),a=r.aTypedArray;(0,r.exportTypedArrayMethod)("filter",(function(t){var e=o(a(this),t,arguments.length>1?arguments[1]:void 0);return i(this,e)}))},7174:(t,e,n)=>{"use strict";var r=n(260),o=n(2092).findIndex,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("findIndex",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},4345:(t,e,n)=>{"use strict";var r=n(260),o=n(2092).find,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("find",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},4197:(t,e,n)=>{n(9843)("Float32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},6495:(t,e,n)=>{n(9843)("Float64",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},2846:(t,e,n)=>{"use strict";var r=n(260),o=n(2092).forEach,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("forEach",(function(t){o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},8145:(t,e,n)=>{"use strict";var r=n(3832);(0,n(260).exportTypedArrayStaticMethod)("from",n(7321),r)},4731:(t,e,n)=>{"use strict";var r=n(260),o=n(1318).includes,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("includes",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},7209:(t,e,n)=>{"use strict";var r=n(260),o=n(1318).indexOf,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("indexOf",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},5109:(t,e,n)=>{n(9843)("Int16",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},5125:(t,e,n)=>{n(9843)("Int32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},7145:(t,e,n)=>{n(9843)("Int8",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},6319:(t,e,n)=>{"use strict";var r=n(7854),o=n(260),i=n(6992),a=n(5112)("iterator"),s=r.Uint8Array,c=i.values,u=i.keys,l=i.entries,f=o.aTypedArray,p=o.exportTypedArrayMethod,d=s&&s.prototype[a],h=!!d&&("values"==d.name||null==d.name),v=function(){return c.call(f(this))};p("entries",(function(){return l.call(f(this))})),p("keys",(function(){return u.call(f(this))})),p("values",v,!h),p(a,v,!h)},8867:(t,e,n)=>{"use strict";var r=n(260),o=r.aTypedArray,i=r.exportTypedArrayMethod,a=[].join;i("join",(function(t){return a.apply(o(this),arguments)}))},7789:(t,e,n)=>{"use strict";var r=n(260),o=n(6583),i=r.aTypedArray;(0,r.exportTypedArrayMethod)("lastIndexOf",(function(t){return o.apply(i(this),arguments)}))},3739:(t,e,n)=>{"use strict";var r=n(260),o=n(2092).map,i=n(6304),a=r.aTypedArray;(0,r.exportTypedArrayMethod)("map",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0,(function(t,e){return new(i(t))(e)}))}))},5206:(t,e,n)=>{"use strict";var r=n(260),o=n(3832),i=r.aTypedArrayConstructor;(0,r.exportTypedArrayStaticMethod)("of",(function(){for(var t=0,e=arguments.length,n=new(i(this))(e);e>t;)n[t]=arguments[t++];return n}),o)},4483:(t,e,n)=>{"use strict";var r=n(260),o=n(3671).right,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduceRight",(function(t){return o(i(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},9368:(t,e,n)=>{"use strict";var r=n(260),o=n(3671).left,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduce",(function(t){return o(i(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},2056:(t,e,n)=>{"use strict";var r=n(260),o=r.aTypedArray,i=r.exportTypedArrayMethod,a=Math.floor;i("reverse",(function(){for(var t,e=this,n=o(e).length,r=a(n/2),i=0;i<r;)t=e[i],e[i++]=e[--n],e[n]=t;return e}))},3462:(t,e,n)=>{"use strict";var r=n(260),o=n(7466),i=n(4590),a=n(7908),s=n(7293),c=r.aTypedArray;(0,r.exportTypedArrayMethod)("set",(function(t){c(this);var e=i(arguments.length>1?arguments[1]:void 0,1),n=this.length,r=a(t),s=o(r.length),u=0;if(s+e>n)throw RangeError("Wrong length");for(;u<s;)this[e+u]=r[u++]}),s((function(){new Int8Array(1).set({})})))},678:(t,e,n)=>{"use strict";var r=n(260),o=n(6304),i=n(7293),a=r.aTypedArray,s=r.exportTypedArrayMethod,c=[].slice;s("slice",(function(t,e){for(var n=c.call(a(this),t,e),r=o(this),i=0,s=n.length,u=new r(s);s>i;)u[i]=n[i++];return u}),i((function(){new Int8Array(1).slice()})))},7462:(t,e,n)=>{"use strict";var r=n(260),o=n(2092).some,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("some",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},3824:(t,e,n)=>{"use strict";var r=n(260),o=n(7854),i=n(7293),a=n(3099),s=n(7466),c=n(4362),u=n(8886),l=n(256),f=n(7392),p=n(8008),d=r.aTypedArray,h=r.exportTypedArrayMethod,v=o.Uint16Array,g=v&&v.prototype.sort,b=!!g&&!i((function(){var t=new v(2);t.sort(null),t.sort({})})),m=!!g&&!i((function(){if(f)return f<74;if(u)return u<67;if(l)return!0;if(p)return p<602;var t,e,n=new v(516),r=Array(516);for(t=0;t<516;t++)e=t%4,n[t]=515-t,r[t]=t-2*e+3;for(n.sort((function(t,e){return(t/4|0)-(e/4|0)})),t=0;t<516;t++)if(n[t]!==r[t])return!0}));h("sort",(function(t){var e=this;if(void 0!==t&&a(t),m)return g.call(e,t);d(e);var n,r=s(e.length),o=Array(r);for(n=0;n<r;n++)o[n]=e[n];for(o=c(e,function(t){return function(e,n){return void 0!==t?+t(e,n)||0:n!=n?-1:e!=e?1:0===e&&0===n?1/e>0&&1/n<0?1:-1:e>n}}(t)),n=0;n<r;n++)e[n]=o[n];return e}),!m||b)},5021:(t,e,n)=>{"use strict";var r=n(260),o=n(7466),i=n(1400),a=n(6304),s=r.aTypedArray;(0,r.exportTypedArrayMethod)("subarray",(function(t,e){var n=s(this),r=n.length,c=i(t,r);return new(a(n))(n.buffer,n.byteOffset+c*n.BYTES_PER_ELEMENT,o((void 0===e?r:i(e,r))-c))}))},2974:(t,e,n)=>{"use strict";var r=n(7854),o=n(260),i=n(7293),a=r.Int8Array,s=o.aTypedArray,c=o.exportTypedArrayMethod,u=[].toLocaleString,l=[].slice,f=!!a&&i((function(){u.call(new a(1))}));c("toLocaleString",(function(){return u.apply(f?l.call(s(this)):s(this),arguments)}),i((function(){return[1,2].toLocaleString()!=new a([1,2]).toLocaleString()}))||!i((function(){a.prototype.toLocaleString.call([1,2])})))},5016:(t,e,n)=>{"use strict";var r=n(260).exportTypedArrayMethod,o=n(7293),i=n(7854).Uint8Array,a=i&&i.prototype||{},s=[].toString,c=[].join;o((function(){s.call({})}))&&(s=function(){return c.call(this)});var u=a.toString!=s;r("toString",s,u)},8255:(t,e,n)=>{n(9843)("Uint16",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},9135:(t,e,n)=>{n(9843)("Uint32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},2472:(t,e,n)=>{n(9843)("Uint8",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},9743:(t,e,n)=>{n(9843)("Uint8",(function(t){return function(e,n,r){return t(this,e,n,r)}}),!0)},4129:(t,e,n)=>{"use strict";var r,o=n(7854),i=n(2248),a=n(2423),s=n(7710),c=n(9320),u=n(111),l=n(9909).enforce,f=n(8536),p=!o.ActiveXObject&&"ActiveXObject"in o,d=Object.isExtensible,h=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},v=t.exports=s("WeakMap",h,c);if(f&&p){r=c.getConstructor(h,"WeakMap",!0),a.enable();var g=v.prototype,b=g.delete,m=g.has,y=g.get,x=g.set;i(g,{delete:function(t){if(u(t)&&!d(t)){var e=l(this);return e.frozen||(e.frozen=new r),b.call(this,t)||e.frozen.delete(t)}return b.call(this,t)},has:function(t){if(u(t)&&!d(t)){var e=l(this);return e.frozen||(e.frozen=new r),m.call(this,t)||e.frozen.has(t)}return m.call(this,t)},get:function(t){if(u(t)&&!d(t)){var e=l(this);return e.frozen||(e.frozen=new r),m.call(this,t)?y.call(this,t):e.frozen.get(t)}return y.call(this,t)},set:function(t,e){if(u(t)&&!d(t)){var n=l(this);n.frozen||(n.frozen=new r),m.call(this,t)?x.call(this,t,e):n.frozen.set(t,e)}else x.call(this,t,e);return this}})}},8478:(t,e,n)=>{"use strict";n(7710)("WeakSet",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),n(9320))},8628:(t,e,n)=>{n(9170)},3475:(t,e,n)=>{"use strict";var r=n(9781),o=n(1223),i=n(7908),a=n(7466),s=n(3070).f;r&&!("lastIndex"in[])&&(s(Array.prototype,"lastIndex",{configurable:!0,get:function(){var t=i(this),e=a(t.length);return 0==e?0:e-1}}),o("lastIndex"))},6273:(t,e,n)=>{"use strict";var r=n(9781),o=n(1223),i=n(7908),a=n(7466),s=n(3070).f;r&&!("lastItem"in[])&&(s(Array.prototype,"lastItem",{configurable:!0,get:function(){var t=i(this),e=a(t.length);return 0==e?void 0:t[e-1]},set:function(t){var e=i(this),n=a(e.length);return e[0==n?0:n-1]=t}}),o("lastItem"))},1568:(t,e,n)=>{var r=n(2109),o=n(313),i=n(5005),a=n(30),s=function(){var t=i("Object","freeze");return t?t(a(null)):a(null)};r({global:!0},{compositeKey:function(){return o.apply(Object,arguments).get("object",s)}})},6349:(t,e,n)=>{var r=n(2109),o=n(313),i=n(5005);r({global:!0},{compositeSymbol:function(){return 1===arguments.length&&"string"==typeof arguments[0]?i("Symbol").for(arguments[0]):o.apply(null,arguments).get("symbol",i("Symbol"))}})},5743:(t,e,n)=>{n(5837)},72:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(4092);r({target:"Map",proto:!0,real:!0,forced:o},{deleteAll:function(){return i.apply(this,arguments)}})},9137:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(9974),s=n(4647),c=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{every:function(t){var e=i(this),n=s(e),r=a(t,arguments.length>1?arguments[1]:void 0,3);return!c(n,(function(t,n,o){if(!r(n,t,e))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},1957:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(9974),u=n(6707),l=n(4647),f=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{filter:function(t){var e=a(this),n=l(e),r=c(t,arguments.length>1?arguments[1]:void 0,3),o=new(u(e,i("Map"))),p=s(o.set);return f(n,(function(t,n){r(n,t,e)&&p.call(o,t,n)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},103:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(9974),s=n(4647),c=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{findKey:function(t){var e=i(this),n=s(e),r=a(t,arguments.length>1?arguments[1]:void 0,3);return c(n,(function(t,n,o){if(r(n,t,e))return o(t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},6306:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(9974),s=n(4647),c=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{find:function(t){var e=i(this),n=s(e),r=a(t,arguments.length>1?arguments[1]:void 0,3);return c(n,(function(t,n,o){if(r(n,t,e))return o(n)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},8582:(t,e,n)=>{n(2109)({target:"Map",stat:!0},{from:n(7296)})},618:(t,e,n)=>{"use strict";var r=n(2109),o=n(408),i=n(3099);r({target:"Map",stat:!0},{groupBy:function(t,e){var n=new this;i(e);var r=i(n.has),a=i(n.get),s=i(n.set);return o(t,(function(t){var o=e(t);r.call(n,o)?a.call(n,o).push(t):s.call(n,o,[t])})),n}})},4592:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(4647),s=n(6465),c=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{includes:function(t){return c(a(i(this)),(function(e,n,r){if(s(n,t))return r()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},8440:(t,e,n)=>{"use strict";var r=n(2109),o=n(408),i=n(3099);r({target:"Map",stat:!0},{keyBy:function(t,e){var n=new this;i(e);var r=i(n.set);return o(t,(function(t){r.call(n,e(t),t)})),n}})},8276:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(4647),s=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{keyOf:function(t){return s(a(i(this)),(function(e,n,r){if(n===t)return r(e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},5082:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(9974),u=n(6707),l=n(4647),f=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{mapKeys:function(t){var e=a(this),n=l(e),r=c(t,arguments.length>1?arguments[1]:void 0,3),o=new(u(e,i("Map"))),p=s(o.set);return f(n,(function(t,n){p.call(o,r(n,t,e),n)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},2813:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(9974),u=n(6707),l=n(4647),f=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{mapValues:function(t){var e=a(this),n=l(e),r=c(t,arguments.length>1?arguments[1]:void 0,3),o=new(u(e,i("Map"))),p=s(o.set);return f(n,(function(t,n){p.call(o,t,r(n,t,e))}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},8222:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(3099),s=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{merge:function(t){for(var e=i(this),n=a(e.set),r=arguments.length,o=0;o<r;)s(arguments[o++],n,{that:e,AS_ENTRIES:!0});return e}})},4838:(t,e,n)=>{n(2109)({target:"Map",stat:!0},{of:n(2044)})},8563:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(3099),s=n(4647),c=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{reduce:function(t){var e=i(this),n=s(e),r=arguments.length<2,o=r?void 0:arguments[1];if(a(t),c(n,(function(n,i){r?(r=!1,o=i):o=t(o,i,n,e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),r)throw TypeError("Reduce of empty map with no initial value");return o}})},336:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(9974),s=n(4647),c=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{some:function(t){var e=i(this),n=s(e),r=a(t,arguments.length>1?arguments[1]:void 0,3);return c(n,(function(t,n,o){if(r(n,t,e))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},7512:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(3099);r({target:"Map",proto:!0,real:!0,forced:o},{update:function(t,e){var n=i(this),r=arguments.length;a(e);var o=n.has(t);if(!o&&r<3)throw TypeError("Updating absent value");var s=o?n.get(t):a(r>2?arguments[2]:void 0)(t,n);return n.set(t,e(s,t,n)),n}})},6603:(t,e,n)=>{var r=n(2109),o=Math.min,i=Math.max;r({target:"Math",stat:!0},{clamp:function(t,e,n){return o(n,i(e,t))}})},100:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{DEG_PER_RAD:Math.PI/180})},6429:(t,e,n)=>{var r=n(2109),o=180/Math.PI;r({target:"Math",stat:!0},{degrees:function(t){return t*o}})},3187:(t,e,n)=>{var r=n(2109),o=n(7103),i=n(6130);r({target:"Math",stat:!0},{fscale:function(t,e,n,r,a){return i(o(t,e,n,r,a))}})},92:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{iaddh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},9041:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{imulh:function(t,e){var n=65535,r=+t,o=+e,i=r&n,a=o&n,s=r>>16,c=o>>16,u=(s*a>>>0)+(i*a>>>16);return s*c+(u>>16)+((i*c>>>0)+(u&n)>>16)}})},666:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{isubh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},1638:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{RAD_PER_DEG:180/Math.PI})},2975:(t,e,n)=>{var r=n(2109),o=Math.PI/180;r({target:"Math",stat:!0},{radians:function(t){return t*o}})},5728:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{scale:n(7103)})},6056:(t,e,n)=>{var r=n(2109),o=n(9670),i=n(7023),a=n(4994),s=n(9909),c="Seeded Random Generator",u=s.set,l=s.getterFor(c),f=a((function(t){u(this,{type:c,seed:t%2147483647})}),"Seeded Random",(function(){var t=l(this);return{value:(1073741823&(t.seed=(1103515245*t.seed+12345)%2147483647))/1073741823,done:!1}}));r({target:"Math",stat:!0,forced:!0},{seededPRNG:function(t){var e=o(t).seed;if(!i(e))throw TypeError('Math.seededPRNG() argument should have a "seed" field with a finite value.');return new f(e)}})},4299:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{signbit:function(t){return(t=+t)==t&&0==t?1/t==-1/0:t<0}})},5162:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{umulh:function(t,e){var n=65535,r=+t,o=+e,i=r&n,a=o&n,s=r>>>16,c=o>>>16,u=(s*a>>>0)+(i*a>>>16);return s*c+(u>>>16)+((i*c>>>0)+(u&n)>>>16)}})},292:(t,e,n)=>{"use strict";var r=n(2109),o=n(9958),i=n(3009),a="Invalid number representation",s=/^[\da-z]+$/;r({target:"Number",stat:!0},{fromString:function(t,e){var n,r,c=1;if("string"!=typeof t)throw TypeError(a);if(!t.length)throw SyntaxError(a);if("-"==t.charAt(0)&&(c=-1,!(t=t.slice(1)).length))throw SyntaxError(a);if((n=void 0===e?10:o(e))<2||n>36)throw RangeError("Invalid radix");if(!s.test(t)||(r=i(t,n)).toString(n)!==t)throw SyntaxError(a);return c*r}})},1025:(t,e,n)=>{"use strict";var r=n(2109),o=n(9781),i=n(6340),a=n(3099),s=n(9670),c=n(111),u=n(5787),l=n(3070).f,f=n(8880),p=n(2248),d=n(8554),h=n(7571),v=n(408),g=n(842),b=n(5112),m=n(9909),y=b("observable"),x=m.get,_=m.set,w=function(t){var e=t.cleanup;if(e){t.cleanup=void 0;try{e()}catch(t){g(t)}}},A=function(t){return void 0===t.observer},C=function(t){var e=t.facade;if(!o){e.closed=!0;var n=t.subscriptionObserver;n&&(n.closed=!0)}t.observer=void 0},S=function(t,e){var n,r=_(this,{cleanup:void 0,observer:s(t),subscriptionObserver:void 0});o||(this.closed=!1);try{(n=h(t.start))&&n.call(t,this)}catch(t){g(t)}if(!A(r)){var i=r.subscriptionObserver=new k(this);try{var c=e(i),u=c;null!=c&&(r.cleanup="function"==typeof c.unsubscribe?function(){u.unsubscribe()}:a(c))}catch(t){return void i.error(t)}A(r)&&w(r)}};S.prototype=p({},{unsubscribe:function(){var t=x(this);A(t)||(C(t),w(t))}}),o&&l(S.prototype,"closed",{configurable:!0,get:function(){return A(x(this))}});var k=function(t){_(this,{subscription:t}),o||(this.closed=!1)};k.prototype=p({},{next:function(t){var e=x(x(this).subscription);if(!A(e)){var n=e.observer;try{var r=h(n.next);r&&r.call(n,t)}catch(t){g(t)}}},error:function(t){var e=x(x(this).subscription);if(!A(e)){var n=e.observer;C(e);try{var r=h(n.error);r?r.call(n,t):g(t)}catch(t){g(t)}w(e)}},complete:function(){var t=x(x(this).subscription);if(!A(t)){var e=t.observer;C(t);try{var n=h(e.complete);n&&n.call(e)}catch(t){g(t)}w(t)}}}),o&&l(k.prototype,"closed",{configurable:!0,get:function(){return A(x(x(this).subscription))}});var O=function(t){u(this,O,"Observable"),_(this,{subscriber:a(t)})};p(O.prototype,{subscribe:function(t){var e=arguments.length;return new S("function"==typeof t?{next:t,error:e>1?arguments[1]:void 0,complete:e>2?arguments[2]:void 0}:c(t)?t:{},x(this).subscriber)}}),p(O,{from:function(t){var e="function"==typeof this?this:O,n=h(s(t)[y]);if(n){var r=s(n.call(t));return r.constructor===e?r:new e((function(t){return r.subscribe(t)}))}var o=d(t);return new e((function(t){v(o,(function(e,n){if(t.next(e),t.closed)return n()}),{IS_ITERATOR:!0,INTERRUPTED:!0}),t.complete()}))},of:function(){for(var t="function"==typeof this?this:O,e=arguments.length,n=new Array(e),r=0;r<e;)n[r]=arguments[r++];return new t((function(t){for(var r=0;r<e;r++)if(t.next(n[r]),t.closed)return;t.complete()}))}}),f(O.prototype,y,(function(){return this})),r({global:!0},{Observable:O}),i("Observable")},7314:(t,e,n)=>{n(7922)},6290:(t,e,n)=>{n(4668)},7479:(t,e,n)=>{"use strict";var r=n(2109),o=n(8523),i=n(2534);r({target:"Promise",stat:!0},{try:function(t){var e=o.f(this),n=i(t);return(n.error?e.reject:e.resolve)(n.value),e.promise}})},4582:(t,e,n)=>{var r=n(2109),o=n(8845),i=n(9670),a=o.toKey,s=o.set;r({target:"Reflect",stat:!0},{defineMetadata:function(t,e,n){var r=arguments.length<4?void 0:a(arguments[3]);s(t,e,i(n),r)}})},7896:(t,e,n)=>{var r=n(2109),o=n(8845),i=n(9670),a=o.toKey,s=o.getMap,c=o.store;r({target:"Reflect",stat:!0},{deleteMetadata:function(t,e){var n=arguments.length<3?void 0:a(arguments[2]),r=s(i(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var o=c.get(e);return o.delete(n),!!o.size||c.delete(e)}})},8558:(t,e,n)=>{var r=n(2109),o=n(189),i=n(8845),a=n(9670),s=n(9518),c=n(408),u=i.keys,l=i.toKey,f=function(t,e){var n=u(t,e),r=s(t);if(null===r)return n;var i,a,l=f(r,e);return l.length?n.length?(i=new o(n.concat(l)),c(i,(a=[]).push,{that:a}),a):l:n};r({target:"Reflect",stat:!0},{getMetadataKeys:function(t){var e=arguments.length<2?void 0:l(arguments[1]);return f(a(t),e)}})},2647:(t,e,n)=>{var r=n(2109),o=n(8845),i=n(9670),a=n(9518),s=o.has,c=o.get,u=o.toKey,l=function(t,e,n){if(s(t,e,n))return c(t,e,n);var r=a(e);return null!==r?l(t,r,n):void 0};r({target:"Reflect",stat:!0},{getMetadata:function(t,e){var n=arguments.length<3?void 0:u(arguments[2]);return l(t,i(e),n)}})},7507:(t,e,n)=>{var r=n(2109),o=n(8845),i=n(9670),a=o.keys,s=o.toKey;r({target:"Reflect",stat:!0},{getOwnMetadataKeys:function(t){var e=arguments.length<2?void 0:s(arguments[1]);return a(i(t),e)}})},4018:(t,e,n)=>{var r=n(2109),o=n(8845),i=n(9670),a=o.get,s=o.toKey;r({target:"Reflect",stat:!0},{getOwnMetadata:function(t,e){var n=arguments.length<3?void 0:s(arguments[2]);return a(t,i(e),n)}})},1605:(t,e,n)=>{var r=n(2109),o=n(8845),i=n(9670),a=n(9518),s=o.has,c=o.toKey,u=function(t,e,n){if(s(t,e,n))return!0;var r=a(e);return null!==r&&u(t,r,n)};r({target:"Reflect",stat:!0},{hasMetadata:function(t,e){var n=arguments.length<3?void 0:c(arguments[2]);return u(t,i(e),n)}})},9076:(t,e,n)=>{var r=n(2109),o=n(8845),i=n(9670),a=o.has,s=o.toKey;r({target:"Reflect",stat:!0},{hasOwnMetadata:function(t,e){var n=arguments.length<3?void 0:s(arguments[2]);return a(t,i(e),n)}})},4999:(t,e,n)=>{var r=n(2109),o=n(8845),i=n(9670),a=o.toKey,s=o.set;r({target:"Reflect",stat:!0},{metadata:function(t,e){return function(n,r){s(t,e,i(n),a(r))}}})},8921:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(1501);r({target:"Set",proto:!0,real:!0,forced:o},{addAll:function(){return i.apply(this,arguments)}})},6248:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(4092);r({target:"Set",proto:!0,real:!0,forced:o},{deleteAll:function(){return i.apply(this,arguments)}})},3599:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(6707),u=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{difference:function(t){var e=a(this),n=new(c(e,i("Set")))(e),r=s(n.delete);return u(t,(function(t){r.call(n,t)})),n}})},1477:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(9974),s=n(6767),c=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{every:function(t){var e=i(this),n=s(e),r=a(t,arguments.length>1?arguments[1]:void 0,3);return!c(n,(function(t,n){if(!r(t,t,e))return n()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},3066:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(9974),u=n(6707),l=n(6767),f=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{filter:function(t){var e=a(this),n=l(e),r=c(t,arguments.length>1?arguments[1]:void 0,3),o=new(u(e,i("Set"))),p=s(o.add);return f(n,(function(t){r(t,t,e)&&p.call(o,t)}),{IS_ITERATOR:!0}),o}})},5389:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(9974),s=n(6767),c=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{find:function(t){var e=i(this),n=s(e),r=a(t,arguments.length>1?arguments[1]:void 0,3);return c(n,(function(t,n){if(r(t,t,e))return n(t)}),{IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},6006:(t,e,n)=>{n(2109)({target:"Set",stat:!0},{from:n(7296)})},401:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(6707),u=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{intersection:function(t){var e=a(this),n=new(c(e,i("Set"))),r=s(e.has),o=s(n.add);return u(t,(function(t){r.call(e,t)&&o.call(n,t)})),n}})},5164:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(3099),s=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{isDisjointFrom:function(t){var e=i(this),n=a(e.has);return!s(t,(function(t,r){if(!0===n.call(e,t))return r()}),{INTERRUPTED:!0}).stopped}})},1238:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(8554),u=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{isSubsetOf:function(t){var e=c(this),n=a(t),r=n.has;return"function"!=typeof r&&(n=new(i("Set"))(t),r=s(n.has)),!u(e,(function(t,e){if(!1===r.call(n,t))return e()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},4837:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(3099),s=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{isSupersetOf:function(t){var e=i(this),n=a(e.has);return!s(t,(function(t,r){if(!1===n.call(e,t))return r()}),{INTERRUPTED:!0}).stopped}})},7485:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(6767),s=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{join:function(t){var e=i(this),n=a(e),r=void 0===t?",":String(t),o=[];return s(n,o.push,{that:o,IS_ITERATOR:!0}),o.join(r)}})},465:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(9974),u=n(6707),l=n(6767),f=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{map:function(t){var e=a(this),n=l(e),r=c(t,arguments.length>1?arguments[1]:void 0,3),o=new(u(e,i("Set"))),p=s(o.add);return f(n,(function(t){p.call(o,r(t,t,e))}),{IS_ITERATOR:!0}),o}})},9916:(t,e,n)=>{n(2109)({target:"Set",stat:!0},{of:n(2044)})},6651:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(3099),s=n(6767),c=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{reduce:function(t){var e=i(this),n=s(e),r=arguments.length<2,o=r?void 0:arguments[1];if(a(t),c(n,(function(n){r?(r=!1,o=n):o=t(o,n,n,e)}),{IS_ITERATOR:!0}),r)throw TypeError("Reduce of empty set with no initial value");return o}})},1437:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(9670),a=n(9974),s=n(6767),c=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{some:function(t){var e=i(this),n=s(e),r=a(t,arguments.length>1?arguments[1]:void 0,3);return c(n,(function(t,n){if(r(t,t,e))return n()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},5285:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(6707),u=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{symmetricDifference:function(t){var e=a(this),n=new(c(e,i("Set")))(e),r=s(n.delete),o=s(n.add);return u(t,(function(t){r.call(n,t)||o.call(n,t)})),n}})},9865:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(5005),a=n(9670),s=n(3099),c=n(6707),u=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{union:function(t){var e=a(this),n=new(c(e,i("Set")))(e);return u(t,s(n.add),{that:n}),n}})},6035:(t,e,n)=>{"use strict";var r=n(2109),o=n(8710).charAt;r({target:"String",proto:!0,forced:n(7293)((function(){return"𠮷"!=="𠮷".at(0)}))},{at:function(t){return o(this,t)}})},7501:(t,e,n)=>{"use strict";var r=n(2109),o=n(4994),i=n(4488),a=n(1340),s=n(9909),c=n(8710),u=c.codeAt,l=c.charAt,f="String Iterator",p=s.set,d=s.getterFor(f),h=o((function(t){p(this,{type:f,string:t,index:0})}),"String",(function(){var t,e=d(this),n=e.string,r=e.index;return r>=n.length?{value:void 0,done:!0}:(t=l(n,r),e.index+=t.length,{value:{codePoint:u(t,0),position:r},done:!1})}));r({target:"String",proto:!0},{codePoints:function(){return new h(a(i(this)))}})},3728:(t,e,n)=>{n(6373)},7207:(t,e,n)=>{n(8757)},5849:(t,e,n)=>{n(7235)("dispose")},8824:(t,e,n)=>{n(7235)("observable")},4130:(t,e,n)=>{n(7235)("patternMatch")},8206:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(4092);r({target:"WeakMap",proto:!0,real:!0,forced:o},{deleteAll:function(){return i.apply(this,arguments)}})},6478:(t,e,n)=>{n(2109)({target:"WeakMap",stat:!0},{from:n(7296)})},9715:(t,e,n)=>{n(2109)({target:"WeakMap",stat:!0},{of:n(2044)})},3561:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(1501);r({target:"WeakSet",proto:!0,real:!0,forced:o},{addAll:function(){return i.apply(this,arguments)}})},2049:(t,e,n)=>{"use strict";var r=n(2109),o=n(1913),i=n(4092);r({target:"WeakSet",proto:!0,real:!0,forced:o},{deleteAll:function(){return i.apply(this,arguments)}})},6020:(t,e,n)=>{n(2109)({target:"WeakSet",stat:!0},{from:n(7296)})},6585:(t,e,n)=>{n(2109)({target:"WeakSet",stat:!0},{of:n(2044)})},4747:(t,e,n)=>{var r=n(7854),o=n(8324),i=n(8509),a=n(8533),s=n(8880),c=function(t){if(t&&t.forEach!==a)try{s(t,"forEach",a)}catch(e){t.forEach=a}};for(var u in o)c(r[u]&&r[u].prototype);c(i)},3948:(t,e,n)=>{var r=n(7854),o=n(8324),i=n(8509),a=n(6992),s=n(8880),c=n(5112),u=c("iterator"),l=c("toStringTag"),f=a.values,p=function(t,e){if(t){if(t[u]!==f)try{s(t,u,f)}catch(e){t[u]=f}if(t[l]||s(t,l,e),o[e])for(var n in a)if(t[n]!==a[n])try{s(t,n,a[n])}catch(e){t[n]=a[n]}}};for(var d in o)p(r[d]&&r[d].prototype,d);p(i,"DOMTokenList")},4633:(t,e,n)=>{var r=n(2109),o=n(7854),i=n(261);r({global:!0,bind:!0,enumerable:!0,forced:!o.setImmediate||!o.clearImmediate},{setImmediate:i.set,clearImmediate:i.clear})},5844:(t,e,n)=>{var r=n(2109),o=n(7854),i=n(5948),a=n(5268),s=o.process;r({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(t){var e=a&&s.domain;i(e?e.bind(t):t)}})},1637:(t,e,n)=>{"use strict";n(6992);var r=n(2109),o=n(5005),i=n(590),a=n(1320),s=n(2248),c=n(8003),u=n(4994),l=n(9909),f=n(5787),p=n(6656),d=n(9974),h=n(648),v=n(9670),g=n(111),b=n(1340),m=n(30),y=n(9114),x=n(8554),_=n(1246),w=n(5112),A=o("fetch"),C=o("Request"),S=C&&C.prototype,k=o("Headers"),O=w("iterator"),E="URLSearchParams",I="URLSearchParamsIterator",M=l.set,T=l.getterFor(E),j=l.getterFor(I),R=/\+/g,P=Array(4),B=function(t){return P[t-1]||(P[t-1]=RegExp("((?:%[\\da-f]{2}){"+t+"})","gi"))},$=function(t){try{return decodeURIComponent(t)}catch(e){return t}},F=function(t){var e=t.replace(R," "),n=4;try{return decodeURIComponent(e)}catch(t){for(;n;)e=e.replace(B(n--),$);return e}},L=/[!'()~]|%20/g,N={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},D=function(t){return N[t]},U=function(t){return encodeURIComponent(t).replace(L,D)},z=function(t,e){if(e)for(var n,r,o=e.split("&"),i=0;i<o.length;)(n=o[i++]).length&&(r=n.split("="),t.push({key:F(r.shift()),value:F(r.join("="))}))},H=function(t){this.entries.length=0,z(this.entries,t)},G=function(t,e){if(t<e)throw TypeError("Not enough arguments")},W=u((function(t,e){M(this,{type:I,iterator:x(T(t).entries),kind:e})}),"Iterator",(function(){var t=j(this),e=t.kind,n=t.iterator.next(),r=n.value;return n.done||(n.value="keys"===e?r.key:"values"===e?r.value:[r.key,r.value]),n})),V=function(){f(this,V,E);var t,e,n,r,o,i,a,s,c,u=arguments.length>0?arguments[0]:void 0,l=this,d=[];if(M(l,{type:E,entries:d,updateURL:function(){},updateSearchParams:H}),void 0!==u)if(g(u))if("function"==typeof(t=_(u)))for(n=(e=x(u,t)).next;!(r=n.call(e)).done;){if((a=(i=(o=x(v(r.value))).next).call(o)).done||(s=i.call(o)).done||!i.call(o).done)throw TypeError("Expected sequence with length 2");d.push({key:b(a.value),value:b(s.value)})}else for(c in u)p(u,c)&&d.push({key:c,value:b(u[c])});else z(d,"string"==typeof u?"?"===u.charAt(0)?u.slice(1):u:b(u))},q=V.prototype;if(s(q,{append:function(t,e){G(arguments.length,2);var n=T(this);n.entries.push({key:b(t),value:b(e)}),n.updateURL()},delete:function(t){G(arguments.length,1);for(var e=T(this),n=e.entries,r=b(t),o=0;o<n.length;)n[o].key===r?n.splice(o,1):o++;e.updateURL()},get:function(t){G(arguments.length,1);for(var e=T(this).entries,n=b(t),r=0;r<e.length;r++)if(e[r].key===n)return e[r].value;return null},getAll:function(t){G(arguments.length,1);for(var e=T(this).entries,n=b(t),r=[],o=0;o<e.length;o++)e[o].key===n&&r.push(e[o].value);return r},has:function(t){G(arguments.length,1);for(var e=T(this).entries,n=b(t),r=0;r<e.length;)if(e[r++].key===n)return!0;return!1},set:function(t,e){G(arguments.length,1);for(var n,r=T(this),o=r.entries,i=!1,a=b(t),s=b(e),c=0;c<o.length;c++)(n=o[c]).key===a&&(i?o.splice(c--,1):(i=!0,n.value=s));i||o.push({key:a,value:s}),r.updateURL()},sort:function(){var t,e,n,r=T(this),o=r.entries,i=o.slice();for(o.length=0,n=0;n<i.length;n++){for(t=i[n],e=0;e<n;e++)if(o[e].key>t.key){o.splice(e,0,t);break}e===n&&o.push(t)}r.updateURL()},forEach:function(t){for(var e,n=T(this).entries,r=d(t,arguments.length>1?arguments[1]:void 0,3),o=0;o<n.length;)r((e=n[o++]).value,e.key,this)},keys:function(){return new W(this,"keys")},values:function(){return new W(this,"values")},entries:function(){return new W(this,"entries")}},{enumerable:!0}),a(q,O,q.entries),a(q,"toString",(function(){for(var t,e=T(this).entries,n=[],r=0;r<e.length;)t=e[r++],n.push(U(t.key)+"="+U(t.value));return n.join("&")}),{enumerable:!0}),c(V,E),r({global:!0,forced:!i},{URLSearchParams:V}),!i&&"function"==typeof k){var Y=function(t){if(g(t)){var e,n=t.body;if(h(n)===E)return(e=t.headers?new k(t.headers):new k).has("content-type")||e.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),m(t,{body:y(0,String(n)),headers:y(0,e)})}return t};if("function"==typeof A&&r({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return A(t,arguments.length>1?Y(arguments[1]):{})}}),"function"==typeof C){var K=function(t){return f(this,K,"Request"),new C(t,arguments.length>1?Y(arguments[1]):{})};S.constructor=K,K.prototype=S,r({global:!0,forced:!0},{Request:K})}}t.exports={URLSearchParams:V,getState:T}},285:(t,e,n)=>{"use strict";n(8783);var r,o=n(2109),i=n(9781),a=n(590),s=n(7854),c=n(6048),u=n(1320),l=n(5787),f=n(6656),p=n(1574),d=n(8457),h=n(8710).codeAt,v=n(3197),g=n(1340),b=n(8003),m=n(1637),y=n(9909),x=s.URL,_=m.URLSearchParams,w=m.getState,A=y.set,C=y.getterFor("URL"),S=Math.floor,k=Math.pow,O="Invalid scheme",E="Invalid host",I="Invalid port",M=/[A-Za-z]/,T=/[\d+-.A-Za-z]/,j=/\d/,R=/^0x/i,P=/^[0-7]+$/,B=/^\d+$/,$=/^[\dA-Fa-f]+$/,F=/[\0\t\n\r #%/:<>?@[\\\]^|]/,L=/[\0\t\n\r #/:<>?@[\\\]^|]/,N=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,D=/[\t\n\r]/g,U=function(t,e){var n,r,o;if("["==e.charAt(0)){if("]"!=e.charAt(e.length-1))return E;if(!(n=H(e.slice(1,-1))))return E;t.host=n}else if(Z(t)){if(e=v(e),F.test(e))return E;if(null===(n=z(e)))return E;t.host=n}else{if(L.test(e))return E;for(n="",r=d(e),o=0;o<r.length;o++)n+=K(r[o],W);t.host=n}},z=function(t){var e,n,r,o,i,a,s,c=t.split(".");if(c.length&&""==c[c.length-1]&&c.pop(),(e=c.length)>4)return t;for(n=[],r=0;r<e;r++){if(""==(o=c[r]))return t;if(i=10,o.length>1&&"0"==o.charAt(0)&&(i=R.test(o)?16:8,o=o.slice(8==i?1:2)),""===o)a=0;else{if(!(10==i?B:8==i?P:$).test(o))return t;a=parseInt(o,i)}n.push(a)}for(r=0;r<e;r++)if(a=n[r],r==e-1){if(a>=k(256,5-e))return null}else if(a>255)return null;for(s=n.pop(),r=0;r<n.length;r++)s+=n[r]*k(256,3-r);return s},H=function(t){var e,n,r,o,i,a,s,c=[0,0,0,0,0,0,0,0],u=0,l=null,f=0,p=function(){return t.charAt(f)};if(":"==p()){if(":"!=t.charAt(1))return;f+=2,l=++u}for(;p();){if(8==u)return;if(":"!=p()){for(e=n=0;n<4&&$.test(p());)e=16*e+parseInt(p(),16),f++,n++;if("."==p()){if(0==n)return;if(f-=n,u>6)return;for(r=0;p();){if(o=null,r>0){if(!("."==p()&&r<4))return;f++}if(!j.test(p()))return;for(;j.test(p());){if(i=parseInt(p(),10),null===o)o=i;else{if(0==o)return;o=10*o+i}if(o>255)return;f++}c[u]=256*c[u]+o,2!=++r&&4!=r||u++}if(4!=r)return;break}if(":"==p()){if(f++,!p())return}else if(p())return;c[u++]=e}else{if(null!==l)return;f++,l=++u}}if(null!==l)for(a=u-l,u=7;0!=u&&a>0;)s=c[u],c[u--]=c[l+a-1],c[l+--a]=s;else if(8!=u)return;return c},G=function(t){var e,n,r,o;if("number"==typeof t){for(e=[],n=0;n<4;n++)e.unshift(t%256),t=S(t/256);return e.join(".")}if("object"==typeof t){for(e="",r=function(t){for(var e=null,n=1,r=null,o=0,i=0;i<8;i++)0!==t[i]?(o>n&&(e=r,n=o),r=null,o=0):(null===r&&(r=i),++o);return o>n&&(e=r,n=o),e}(t),n=0;n<8;n++)o&&0===t[n]||(o&&(o=!1),r===n?(e+=n?":":"::",o=!0):(e+=t[n].toString(16),n<7&&(e+=":")));return"["+e+"]"}return t},W={},V=p({},W,{" ":1,'"':1,"<":1,">":1,"`":1}),q=p({},V,{"#":1,"?":1,"{":1,"}":1}),Y=p({},q,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),K=function(t,e){var n=h(t,0);return n>32&&n<127&&!f(e,t)?t:encodeURIComponent(t)},X={ftp:21,file:null,http:80,https:443,ws:80,wss:443},Z=function(t){return f(X,t.scheme)},J=function(t){return""!=t.username||""!=t.password},Q=function(t){return!t.host||t.cannotBeABaseURL||"file"==t.scheme},tt=function(t,e){var n;return 2==t.length&&M.test(t.charAt(0))&&(":"==(n=t.charAt(1))||!e&&"|"==n)},et=function(t){var e;return t.length>1&&tt(t.slice(0,2))&&(2==t.length||"/"===(e=t.charAt(2))||"\\"===e||"?"===e||"#"===e)},nt=function(t){var e=t.path,n=e.length;!n||"file"==t.scheme&&1==n&&tt(e[0],!0)||e.pop()},rt=function(t){return"."===t||"%2e"===t.toLowerCase()},ot={},it={},at={},st={},ct={},ut={},lt={},ft={},pt={},dt={},ht={},vt={},gt={},bt={},mt={},yt={},xt={},_t={},wt={},At={},Ct={},St=function(t,e,n,o){var i,a,s,c,u,l=n||ot,p=0,h="",v=!1,g=!1,b=!1;for(n||(t.scheme="",t.username="",t.password="",t.host=null,t.port=null,t.path=[],t.query=null,t.fragment=null,t.cannotBeABaseURL=!1,e=e.replace(N,"")),e=e.replace(D,""),i=d(e);p<=i.length;){switch(a=i[p],l){case ot:if(!a||!M.test(a)){if(n)return O;l=at;continue}h+=a.toLowerCase(),l=it;break;case it:if(a&&(T.test(a)||"+"==a||"-"==a||"."==a))h+=a.toLowerCase();else{if(":"!=a){if(n)return O;h="",l=at,p=0;continue}if(n&&(Z(t)!=f(X,h)||"file"==h&&(J(t)||null!==t.port)||"file"==t.scheme&&!t.host))return;if(t.scheme=h,n)return void(Z(t)&&X[t.scheme]==t.port&&(t.port=null));h="","file"==t.scheme?l=bt:Z(t)&&o&&o.scheme==t.scheme?l=st:Z(t)?l=ft:"/"==i[p+1]?(l=ct,p++):(t.cannotBeABaseURL=!0,t.path.push(""),l=wt)}break;case at:if(!o||o.cannotBeABaseURL&&"#"!=a)return O;if(o.cannotBeABaseURL&&"#"==a){t.scheme=o.scheme,t.path=o.path.slice(),t.query=o.query,t.fragment="",t.cannotBeABaseURL=!0,l=Ct;break}l="file"==o.scheme?bt:ut;continue;case st:if("/"!=a||"/"!=i[p+1]){l=ut;continue}l=pt,p++;break;case ct:if("/"==a){l=dt;break}l=_t;continue;case ut:if(t.scheme=o.scheme,a==r)t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.query=o.query;else if("/"==a||"\\"==a&&Z(t))l=lt;else if("?"==a)t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.query="",l=At;else{if("#"!=a){t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.path.pop(),l=_t;continue}t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.query=o.query,t.fragment="",l=Ct}break;case lt:if(!Z(t)||"/"!=a&&"\\"!=a){if("/"!=a){t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,l=_t;continue}l=dt}else l=pt;break;case ft:if(l=pt,"/"!=a||"/"!=h.charAt(p+1))continue;p++;break;case pt:if("/"!=a&&"\\"!=a){l=dt;continue}break;case dt:if("@"==a){v&&(h="%40"+h),v=!0,s=d(h);for(var m=0;m<s.length;m++){var y=s[m];if(":"!=y||b){var x=K(y,Y);b?t.password+=x:t.username+=x}else b=!0}h=""}else if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&Z(t)){if(v&&""==h)return"Invalid authority";p-=d(h).length+1,h="",l=ht}else h+=a;break;case ht:case vt:if(n&&"file"==t.scheme){l=yt;continue}if(":"!=a||g){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&Z(t)){if(Z(t)&&""==h)return E;if(n&&""==h&&(J(t)||null!==t.port))return;if(c=U(t,h))return c;if(h="",l=xt,n)return;continue}"["==a?g=!0:"]"==a&&(g=!1),h+=a}else{if(""==h)return E;if(c=U(t,h))return c;if(h="",l=gt,n==vt)return}break;case gt:if(!j.test(a)){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&Z(t)||n){if(""!=h){var _=parseInt(h,10);if(_>65535)return I;t.port=Z(t)&&_===X[t.scheme]?null:_,h=""}if(n)return;l=xt;continue}return I}h+=a;break;case bt:if(t.scheme="file","/"==a||"\\"==a)l=mt;else{if(!o||"file"!=o.scheme){l=_t;continue}if(a==r)t.host=o.host,t.path=o.path.slice(),t.query=o.query;else if("?"==a)t.host=o.host,t.path=o.path.slice(),t.query="",l=At;else{if("#"!=a){et(i.slice(p).join(""))||(t.host=o.host,t.path=o.path.slice(),nt(t)),l=_t;continue}t.host=o.host,t.path=o.path.slice(),t.query=o.query,t.fragment="",l=Ct}}break;case mt:if("/"==a||"\\"==a){l=yt;break}o&&"file"==o.scheme&&!et(i.slice(p).join(""))&&(tt(o.path[0],!0)?t.path.push(o.path[0]):t.host=o.host),l=_t;continue;case yt:if(a==r||"/"==a||"\\"==a||"?"==a||"#"==a){if(!n&&tt(h))l=_t;else if(""==h){if(t.host="",n)return;l=xt}else{if(c=U(t,h))return c;if("localhost"==t.host&&(t.host=""),n)return;h="",l=xt}continue}h+=a;break;case xt:if(Z(t)){if(l=_t,"/"!=a&&"\\"!=a)continue}else if(n||"?"!=a)if(n||"#"!=a){if(a!=r&&(l=_t,"/"!=a))continue}else t.fragment="",l=Ct;else t.query="",l=At;break;case _t:if(a==r||"/"==a||"\\"==a&&Z(t)||!n&&("?"==a||"#"==a)){if(".."===(u=(u=h).toLowerCase())||"%2e."===u||".%2e"===u||"%2e%2e"===u?(nt(t),"/"==a||"\\"==a&&Z(t)||t.path.push("")):rt(h)?"/"==a||"\\"==a&&Z(t)||t.path.push(""):("file"==t.scheme&&!t.path.length&&tt(h)&&(t.host&&(t.host=""),h=h.charAt(0)+":"),t.path.push(h)),h="","file"==t.scheme&&(a==r||"?"==a||"#"==a))for(;t.path.length>1&&""===t.path[0];)t.path.shift();"?"==a?(t.query="",l=At):"#"==a&&(t.fragment="",l=Ct)}else h+=K(a,q);break;case wt:"?"==a?(t.query="",l=At):"#"==a?(t.fragment="",l=Ct):a!=r&&(t.path[0]+=K(a,W));break;case At:n||"#"!=a?a!=r&&("'"==a&&Z(t)?t.query+="%27":t.query+="#"==a?"%23":K(a,W)):(t.fragment="",l=Ct);break;case Ct:a!=r&&(t.fragment+=K(a,V))}p++}},kt=function(t){var e,n,r=l(this,kt,"URL"),o=arguments.length>1?arguments[1]:void 0,a=g(t),s=A(r,{type:"URL"});if(void 0!==o)if(o instanceof kt)e=C(o);else if(n=St(e={},g(o)))throw TypeError(n);if(n=St(s,a,null,e))throw TypeError(n);var c=s.searchParams=new _,u=w(c);u.updateSearchParams(s.query),u.updateURL=function(){s.query=String(c)||null},i||(r.href=Et.call(r),r.origin=It.call(r),r.protocol=Mt.call(r),r.username=Tt.call(r),r.password=jt.call(r),r.host=Rt.call(r),r.hostname=Pt.call(r),r.port=Bt.call(r),r.pathname=$t.call(r),r.search=Ft.call(r),r.searchParams=Lt.call(r),r.hash=Nt.call(r))},Ot=kt.prototype,Et=function(){var t=C(this),e=t.scheme,n=t.username,r=t.password,o=t.host,i=t.port,a=t.path,s=t.query,c=t.fragment,u=e+":";return null!==o?(u+="//",J(t)&&(u+=n+(r?":"+r:"")+"@"),u+=G(o),null!==i&&(u+=":"+i)):"file"==e&&(u+="//"),u+=t.cannotBeABaseURL?a[0]:a.length?"/"+a.join("/"):"",null!==s&&(u+="?"+s),null!==c&&(u+="#"+c),u},It=function(){var t=C(this),e=t.scheme,n=t.port;if("blob"==e)try{return new kt(e.path[0]).origin}catch(t){return"null"}return"file"!=e&&Z(t)?e+"://"+G(t.host)+(null!==n?":"+n:""):"null"},Mt=function(){return C(this).scheme+":"},Tt=function(){return C(this).username},jt=function(){return C(this).password},Rt=function(){var t=C(this),e=t.host,n=t.port;return null===e?"":null===n?G(e):G(e)+":"+n},Pt=function(){var t=C(this).host;return null===t?"":G(t)},Bt=function(){var t=C(this).port;return null===t?"":String(t)},$t=function(){var t=C(this),e=t.path;return t.cannotBeABaseURL?e[0]:e.length?"/"+e.join("/"):""},Ft=function(){var t=C(this).query;return t?"?"+t:""},Lt=function(){return C(this).searchParams},Nt=function(){var t=C(this).fragment;return t?"#"+t:""},Dt=function(t,e){return{get:t,set:e,configurable:!0,enumerable:!0}};if(i&&c(Ot,{href:Dt(Et,(function(t){var e=C(this),n=g(t),r=St(e,n);if(r)throw TypeError(r);w(e.searchParams).updateSearchParams(e.query)})),origin:Dt(It),protocol:Dt(Mt,(function(t){var e=C(this);St(e,g(t)+":",ot)})),username:Dt(Tt,(function(t){var e=C(this),n=d(g(t));if(!Q(e)){e.username="";for(var r=0;r<n.length;r++)e.username+=K(n[r],Y)}})),password:Dt(jt,(function(t){var e=C(this),n=d(g(t));if(!Q(e)){e.password="";for(var r=0;r<n.length;r++)e.password+=K(n[r],Y)}})),host:Dt(Rt,(function(t){var e=C(this);e.cannotBeABaseURL||St(e,g(t),ht)})),hostname:Dt(Pt,(function(t){var e=C(this);e.cannotBeABaseURL||St(e,g(t),vt)})),port:Dt(Bt,(function(t){var e=C(this);Q(e)||(""==(t=g(t))?e.port=null:St(e,t,gt))})),pathname:Dt($t,(function(t){var e=C(this);e.cannotBeABaseURL||(e.path=[],St(e,g(t),xt))})),search:Dt(Ft,(function(t){var e=C(this);""==(t=g(t))?e.query=null:("?"==t.charAt(0)&&(t=t.slice(1)),e.query="",St(e,t,At)),w(e.searchParams).updateSearchParams(e.query)})),searchParams:Dt(Lt),hash:Dt(Nt,(function(t){var e=C(this);""!=(t=g(t))?("#"==t.charAt(0)&&(t=t.slice(1)),e.fragment="",St(e,t,Ct)):e.fragment=null}))}),u(Ot,"toJSON",(function(){return Et.call(this)}),{enumerable:!0}),u(Ot,"toString",(function(){return Et.call(this)}),{enumerable:!0}),x){var Ut=x.createObjectURL,zt=x.revokeObjectURL;Ut&&u(kt,"createObjectURL",(function(t){return Ut.apply(x,arguments)})),zt&&u(kt,"revokeObjectURL",(function(t){return zt.apply(x,arguments)}))}b(kt,"URL"),o({global:!0,forced:!a,sham:!i},{URL:kt})},3753:(t,e,n)=>{"use strict";n(2109)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},1545:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,"\n.btn-color-picker .text[data-v-531a026a]{\n    display: inline-block;\n    min-width: 60px;\n}\n.btn-color-picker .swatch[data-v-531a026a]{\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    border-radius: 8px;\n    border: 1px solid grey;\n}\n.popup[data-v-531a026a]{\n  position: fixed;\n  z-index: 100;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.popup-inner[data-v-531a026a]{\n    position: absolute;\n    z-index: 100;\n}\n","",{version:3,sources:["webpack://./src/js/components/ButtonColorPicker.vue"],names:[],mappings:";AAmEA;IACA,qBAAA;IACA,eAAA;AACA;AAEA;IACA,qBAAA;IACA,WAAA;IACA,YAAA;IACA,kBAAA;IACA,sBAAA;AACA;AAEA;EACA,eAAA;EACA,YAAA;EACA,MAAA;EACA,OAAA;EACA,QAAA;EACA,SAAA;EACA,oCAAA;AACA;AAEA;IACA,kBAAA;IACA,YAAA;AACA",sourcesContent:['<template>\n    <div class="inline-container">\n        <button class="btn btn-color-picker" @click="open = true" ref="button">\n            <span class="swatch" :style="{backgroundColor: value}"/>\n            <span class="text">{{value}}</span>\n        </button>\n        <div v-show="open" class="popup">\n            <div class="popup-inner" :style="{top: `${y}px`, left:`${x}px`}">\n                \n                <Photoshop \n                    :value="color"\n                    @cancel="cancel"\n                    @input="color = $event.hex"\n                    @ok="choose"\n                    :head="popupTitle"\n                />\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { Photoshop } from \'vue-color\';\nexport default {\n    props: {\n        value: {\n            type: String,\n            required: true,\n        },\n        popupTitle: {\n            type: String,\n            required: true,\n        }\n    },\n    data() {\n        return {\n            open: false,\n            color: this.value,\n            x: 0,\n            y: 0,\n        }\n    },\n    components: {\n        Photoshop,\n    },\n    methods: {\n        cancel() {\n            this.color = this.value;\n            this.open = false;\n        },\n        choose() {\n            this.open = false;\n            this.$emit(\'change\', this.color);\n        }\n    },\n    watch: {\n        open(value) {\n            if (value) {\n                this.x = this.$refs.button.getBoundingClientRect().left;\n                this.y = this.$refs.button.getBoundingClientRect().top - this.$refs.button.clientHeight;\n            }\n        },\n    },\n}\n<\/script>\n\n<style scoped>\n  .btn-color-picker .text{\n      display: inline-block;\n      min-width: 60px;\n  }\n\n  .btn-color-picker .swatch{\n      display: inline-block;\n      width: 12px;\n      height: 12px;\n      border-radius: 8px;\n      border: 1px solid grey;\n  }\n\n  .popup{\n    position: fixed;\n    z-index: 100;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.4);\n  }\n\n  .popup-inner{\n      position: absolute;\n      z-index: 100;\n  }\n</style>\n'],sourceRoot:""}]);const s=a},6489:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,"\n.hamburger-menu[data-v-426338b8] {\n    margin: 12px auto;\n}\n","",{version:3,sources:["webpack://./src/js/components/MainApp.vue"],names:[],mappings:";AAuSA;IACA,iBAAA;AACA",sourcesContent:['<template>\n    <div id="container">\n\n        <header id="header">\n            <h1>Abelian Sandpile</h1>\n        </header>\n\n        <aside id="controls">\n            <div>\n                <ButtonToggle \n                    activeText="Play"\n                    inactiveText="Pause"\n                    inactiveIcon="&#9208;"\n                    activeIcon="&#9654;"\n                    @toggle="doLoop = !doLoop"\n                />\n                <button class="btn" @click.prevent="reset">\n                    <span v-html="\'&#8634;\'"></span> Restart\n                </button>\n            </div>\n        \n            <MenuCollapsible class="display-sm hamburger-menu">\n                <ControlGroupSand @clear="clear" />\n                <ControlGroupCanvas />\n            </MenuCollapsible>\n\n            <div class="display-md">\n                <ControlGroupSand @clear="clear" />\n                <ControlGroupHeatmap />\n                <ControlGroupCanvas />\n            </div>\n        </aside>\n\n        <section id="content" ref="content">\n            <CanvasRoot\n                :width="width"\n                :height="height"\n                @mousedown.left="setInteracting(10, $event)"\n                @mouseup.left="interacting = false"\n                @mouselave="interacting = false"\n                @mousemove="updateInteracting($event)"\n            >\n                <CanvasGridHeatMap \n                    :grid="sand"\n                    :height="height"\n                    :width="width"\n                    :resolution="resolution"\n                    :colorStep0="color0"\n                    :colorStep1="color1"\n                    :colorStep2="color2"\n                    :colorStep3="color3"\n                />\n            </CanvasRoot>\n       </section>\n    </div>\n</template>\n\n<script>\nimport ButtonToggle from "./ButtonToggle.vue";\nimport CanvasRoot from "./CanvasRoot.vue";\nimport CanvasGridHeatMap from "./CanvasGridHeatMap.vue";\nimport ControlGroupSand from "./ControlGroupSand.vue";\nimport ControlGroupHeatmap from "./ControlGroupHeatmap.vue";\nimport ControlGroupCanvas from "./ControlGroupCanvas.vue";\nimport MenuCollapsible from "./MenuCollapsible.vue";\nimport { pixelToCoord, coordToPixel } from "../utilities.js";\nimport { mapState, mapGetters, mapMutations } from "vuex";\n\nlet onResizeTimerId = undefined;\n\nexport default {\n  components: {\n    ButtonToggle,\n    CanvasRoot,\n    CanvasGridHeatMap,\n    ControlGroupSand,\n    ControlGroupHeatmap,\n    ControlGroupCanvas,\n    MenuCollapsible,\n  },\n\n  data() {\n    return {\n      interacting: false,\n      interactingX: null,\n      interactingY: null,\n      interactingAmount: 10,\n      doLoop: true,\n      timeout: null\n    };\n  },\n\n  computed: {\n    ...mapState("heatmap", ["color0", "color1", "color2", "color3"]),\n    ...mapState("canvas", ["width", "height", "resolution"]),\n    ...mapGetters("canvas", [\n        "minWidth",\n        "maxWidth",\n        "minHeight",\n        "maxHeight",\n        "minResolution",\n        "maxResolution",\n        "cols",\n        "rows"\n    ]),\n    ...mapState("sand", ["baseSand", "startingSand", "sand"]),\n  },\n  methods: {\n    ...mapMutations("canvas", ["setHeight", "setWidth", "setResolution"]),\n    ...mapMutations("sand", ["setSand", "updateSand"]),\n    constrainCanvas(grow) {\n        const amount = grow ? this.resolution : -this.resolution;\n        const width = Math.max(\n            this.minWidth,\n            Math.min(this.maxWidth, this.width + amount)\n        );\n        const height = Math.max(\n            this.minHeight,\n            Math.min(this.maxHeight, this.height + amount)\n        );\n\n        if (this.cols % 2 === 0 || this.width > this.maxWidth || this.width < this.minHeight) {\n            this.setWidth(width);\n        }\n\n        if (this.rows % 2 === 0 || this.height > this.maxHeight || this.height < this.minHeight) {\n            this.setHeight(height);\n        }\n    },\n    setInteracting(amount, e) {\n      (this.interacting = true), this.updateInteracting(e);\n      this.interactingAmount = amount;\n    },\n    updateInteracting(e) {\n      let x = e.offsetX || e.layerX;\n\n      let y = e.offsetY || e.layerY;\n\n      x = Math.round(x / this.resolution);\n\n      if (x > 0 && x < this.cols) {\n        this.interactingX = x;\n      }\n\n      y = Math.round(y / this.resolution);\n\n      if (y > 0 && y < this.rows) {\n        this.interactingY = y;\n      }\n    },\n    clear() {\n      const sand = new Array(this.rows * this.cols);\n      sand.fill(this.baseSand);\n      this.setSand(sand);\n    },\n    reset() {\n      this.clear();\n      let middle = coordToPixel(\n        Math.floor(this.cols / 2),\n        Math.floor(this.rows / 2),\n        this.cols\n      );\n\n      this.updateSand({ idx: middle, amount: this.startingSand });\n    },\n    optimiseCanvas() {\n        const {width, height} = this.$refs.content.getBoundingClientRect();\n\n        const dimension = Math.floor(Math.min(width, height));\n\n        let resolution = Math.round(0.0125 * dimension);\n        resolution = Math.min(resolution, this.maxResolution);\n        resolution = Math.max(resolution, this.minResolution);\n\n        this.setWidth(dimension);\n        this.setHeight(dimension);\n        this.setResolution(resolution);\n    },\n    onResize() {\n        clearTimeout(onResizeTimerId);\n        onResizeTimerId = setTimeout(\n            () => {\n               this.optimiseCanvas()\n            },\n            100\n        );\n    },\n    $_setUp() {\n      window.addEventListener(\'resize\', this.onResize);\n      this.optimiseCanvas();\n      this.reset();\n    },\n    $_update() {\n      if (this.interacting) {\n        const idx = coordToPixel(\n          this.interactingX,\n          this.interactingY,\n          this.cols\n        );\n\n        this.updateSand({\n          idx,\n          amount: (this.sand[idx] += this.interactingAmount)\n        });\n      }\n\n      this.$_topple();\n    },\n    $_topple() {\n      let nextSand = Array.from(this.sand);\n\n      this.sand.forEach((grains, idx) => {\n        if (grains >= 4) {\n          nextSand[idx] = nextSand[idx] - 4;\n\n          let { x, y } = pixelToCoord(idx, this.cols);\n\n          if (x > 0) {\n            let siblingIdx = coordToPixel(x - 1, y, this.cols);\n\n            nextSand[siblingIdx] = nextSand[siblingIdx] + 1;\n          }\n\n          if (x < this.cols - 1) {\n            let siblingIdx = coordToPixel(x + 1, y, this.cols);\n\n            nextSand[siblingIdx] = nextSand[siblingIdx] + 1;\n          }\n\n          if (y > 0) {\n            let siblingIdx = coordToPixel(x, y - 1, this.cols);\n\n            nextSand[siblingIdx] = nextSand[siblingIdx] + 1;\n          }\n\n          if (y < this.rows - 1) {\n            let siblingIdx = coordToPixel(x, y + 1, this.cols);\n\n            nextSand[siblingIdx] = nextSand[siblingIdx] + 1;\n          }\n        }\n      });\n\n      this.setSand(nextSand);\n    },\n    $_loop() {\n      requestAnimationFrame(() => {\n        this.$_update();\n\n        if (this.doLoop) {\n          this.$_loop();\n        }\n      });\n    }\n  },\n  watch: {\n    doLoop(value) {\n      if (value) {\n        this.$_loop();\n      }\n    },\n    resolution(value, oldValue) {\n      value = parseInt(value, 10);\n      oldValue = parseInt(oldValue, 10);\n      this.constrainCanvas(value > oldValue);\n      this.reset();\n    },\n    width(value, oldValue) {\n      value = parseInt(value, 10);\n      oldValue = parseInt(oldValue, 10);\n      this.constrainCanvas(value > oldValue);\n      this.reset();\n    },\n\n    height(value, oldValue) {\n      value = parseInt(value, 10);\n      oldValue = parseInt(oldValue, 10);\n      this.constrainCanvas(value > oldValue);\n      this.reset();\n    }\n  },\n  mounted() {\n    this.$nextTick(function() {\n      this.$_setUp();\n\n      this.$_loop();\n    });\n  },\n  beforeDestroy() {\n      window.removeEventListener(\'resize\', this.onResize);\n  }\n};\n<\/script>\n\n<style scoped>\n    .hamburger-menu {\n        margin: 12px auto;\n    }\n</style>\n'],sourceRoot:""}]);const s=a},5575:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,"\n.hamburger[data-v-729e4cd7] {\n    width: 28px;\n    height: 18px;\n}\n.hamburger .horizontal-bar[data-v-729e4cd7]{\n    width: 75%;\n    height: 2px;\n    background-color: #222;\n    margin: 4px auto;\n    transition: opacity 0.1s, transform 0.25s;\n}\n.hamburger.active .horizontal-bar[data-v-729e4cd7]:first-child {\n    transform: rotate(-45deg) translate(-4px, 4px);\n}\n.hamburger.active .horizontal-bar[data-v-729e4cd7]:nth-child(even) {\n    opacity: 0;\n}\n.hamburger.active .horizontal-bar[data-v-729e4cd7]:last-child {\n    transform: rotate(45deg) translate(-4px, -4px);\n}\n","",{version:3,sources:["webpack://./src/js/components/MenuCollapsible.vue"],names:[],mappings:";AA0BA;IACA,WAAA;IACA,YAAA;AACA;AAEA;IACA,UAAA;IACA,WAAA;IACA,sBAAA;IACA,gBAAA;IACA,yCAAA;AACA;AAEA;IACA,8CAAA;AACA;AAEA;IACA,UAAA;AACA;AAEA;IACA,8CAAA;AACA",sourcesContent:['<template>\n    <div>\n        <button class="btn" @click.prevent="active = !active">\n            <div class="hamburger" :class="{active}">\n                <div class="horizontal-bar"></div>\n                <div class="horizontal-bar"></div>\n                <div class="horizontal-bar"></div>\n            </div>\n        </button>\n        <div v-show="active">\n            <slot />\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            active: false,\n        };\n    }\n}\n<\/script>\n\n<style scoped>\n    .hamburger {\n        width: 28px;\n        height: 18px;\n    }\n\n    .hamburger .horizontal-bar{\n        width: 75%;\n        height: 2px;\n        background-color: #222;\n        margin: 4px auto;\n        transition: opacity 0.1s, transform 0.25s;\n    }\n\n    .hamburger.active .horizontal-bar:first-child {\n        transform: rotate(-45deg) translate(-4px, 4px);\n    }\n\n    .hamburger.active .horizontal-bar:nth-child(even) {\n        opacity: 0;\n    }\n\n    .hamburger.active .horizontal-bar:last-child {\n        transform: rotate(45deg) translate(-4px, -4px);\n    }\n</style>\n'],sourceRoot:""}]);const s=a},2071:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>d});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),s=n(6168),c=n(5805),u=n(9599),l=n(2583),f=n(4911),p=a()(o());p.i(s.Z),p.i(c.Z),p.i(u.Z),p.i(l.Z),p.i(f.Z),p.push([t.id,":root{\n    --brand-primary-hue: 53;\n    --brand-primary-saturation: 90%;\n    --brand-primary-lightness: 49%;\n    --brand-primary: hsl(var(--brand-primary-hue), var(--brand-primary-saturation), var(--brand-primary-lightness));\n\n    --brand-secondary-hue: 251;\n    --brand-secondary-saturation: 5%;\n    --brand-secondary-lightness: 60%;\n    --brand-secondary: hsl(var(--brand-secondary-hue), var(--brand-secondary-saturation), var(--brand-secondary-lightness));\n\n    --brand-tertiary-hue: 0;\n    --brand-tertiary-saturation: 0%;\n    --brand-tertiary-lightness: 13%;\n    --brand-tertiary: hsl(var(--brand-tertiary-hue), var(--brand-tertiary-saturation), var(--brand-tertiary-lightness));\n\n    --text-color-hue: 0;\n    --text-color-saturation: 0%;\n    --text-color-lightness: 93%;\n    --text-color: hsl(var(--text-color-hue), var(--text-color-saturation), var(--text-color-lightness));\n}\n\nbody {\n    background-color: var(--brand-tertiary);\n    font-family: 'Inconsolata', monospace;\n    color: var(--text-color);\n    overflow-y: scroll;\n    overflow-x: auto;\n    margin: 0;\n}\n\n.inline-container {\n    display: inline-block;\n}\n\n@media screen and (min-width: 640px) {\n    body {\n        background-color: var(--brand-secondary);\n    }\n}\n","",{version:3,sources:["webpack://./src/css/app.css"],names:[],mappings:"AAMA;IACI,uBAAuB;IACvB,+BAA+B;IAC/B,8BAA8B;IAC9B,+GAA+G;;IAE/G,0BAA0B;IAC1B,gCAAgC;IAChC,gCAAgC;IAChC,uHAAuH;;IAEvH,uBAAuB;IACvB,+BAA+B;IAC/B,+BAA+B;IAC/B,mHAAmH;;IAEnH,mBAAmB;IACnB,2BAA2B;IAC3B,2BAA2B;IAC3B,mGAAmG;AACvG;;AAEA;IACI,uCAAuC;IACvC,qCAAqC;IACrC,wBAAwB;IACxB,kBAAkB;IAClB,gBAAgB;IAChB,SAAS;AACb;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI;QACI,wCAAwC;IAC5C;AACJ",sourcesContent:["@import 'buttons.css';\n@import 'forms.css';\n@import 'grid.css';\n@import 'responsive.css';\n@import 'typography.css';\n\n:root{\n    --brand-primary-hue: 53;\n    --brand-primary-saturation: 90%;\n    --brand-primary-lightness: 49%;\n    --brand-primary: hsl(var(--brand-primary-hue), var(--brand-primary-saturation), var(--brand-primary-lightness));\n\n    --brand-secondary-hue: 251;\n    --brand-secondary-saturation: 5%;\n    --brand-secondary-lightness: 60%;\n    --brand-secondary: hsl(var(--brand-secondary-hue), var(--brand-secondary-saturation), var(--brand-secondary-lightness));\n\n    --brand-tertiary-hue: 0;\n    --brand-tertiary-saturation: 0%;\n    --brand-tertiary-lightness: 13%;\n    --brand-tertiary: hsl(var(--brand-tertiary-hue), var(--brand-tertiary-saturation), var(--brand-tertiary-lightness));\n\n    --text-color-hue: 0;\n    --text-color-saturation: 0%;\n    --text-color-lightness: 93%;\n    --text-color: hsl(var(--text-color-hue), var(--text-color-saturation), var(--text-color-lightness));\n}\n\nbody {\n    background-color: var(--brand-tertiary);\n    font-family: 'Inconsolata', monospace;\n    color: var(--text-color);\n    overflow-y: scroll;\n    overflow-x: auto;\n    margin: 0;\n}\n\n.inline-container {\n    display: inline-block;\n}\n\n@media screen and (min-width: 640px) {\n    body {\n        background-color: var(--brand-secondary);\n    }\n}\n"],sourceRoot:""}]);const d=p},6168:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,".btn {\n    --btn-bg: hsl(var(--brand-secondary-hue), var(--brand-secondary-saturation), 80%);\n    --btn-bg-hover: var(--brand-secondary);\n    --btn-bg-focus: var(--btn-bg-hover);\n    --btn-fg: var(--brand-tertiary);\n    --btn-fg-hover: var(--brand-primary);\n    --btn-fg-focus: var(--brand-primary);\n    --btn-border: 1px solid var(--brand-secondary);\n    --btn-border-focus: 1px solid var(--brand-primary);\n    --btn-padding: 4px 8px;\n    --btn-margin: 1px 2px;\n    box-sizing: border-box;\n    padding: var(--btn-padding);\n    margin: var(--btn-margin);\n    text-decoration: none;\n    color: var(--btn-fg);\n    background-color: var(--btn-bg);\n    border: var(--btn-border);\n    border-radius: 4px;\n    transition: background-color 0.15s ease-in-out,\n                color 0.15s ease-in-out,\n                border-color 0.15s ease-in-out;\n    user-select: none;\n    cursor: pointer;\n    outline: none;\n}\n\n .btn:hover{\n    background-color: var(--btn-bg-hover);\n    color: var(--btn-fg-hover);\n}\n\n.btn:active, .btn:focus{\n    background-color: var(--btn-bg-focus);\n    color: var(--btn-fg-focus);\n    border: var(--btn-border-focus);\n}\n","",{version:3,sources:["webpack://./src/css/buttons.css"],names:[],mappings:"AAAA;IACI,iFAAiF;IACjF,sCAAsC;IACtC,mCAAmC;IACnC,+BAA+B;IAC/B,oCAAoC;IACpC,oCAAoC;IACpC,8CAA8C;IAC9C,kDAAkD;IAClD,sBAAsB;IACtB,qBAAqB;IACrB,sBAAsB;IACtB,2BAA2B;IAC3B,yBAAyB;IACzB,qBAAqB;IACrB,oBAAoB;IACpB,+BAA+B;IAC/B,yBAAyB;IACzB,kBAAkB;IAClB;;8CAE0C;IAC1C,iBAAiB;IACjB,eAAe;IACf,aAAa;AACjB;;CAEC;IACG,qCAAqC;IACrC,0BAA0B;AAC9B;;AAEA;IACI,qCAAqC;IACrC,0BAA0B;IAC1B,+BAA+B;AACnC",sourcesContent:[".btn {\n    --btn-bg: hsl(var(--brand-secondary-hue), var(--brand-secondary-saturation), 80%);\n    --btn-bg-hover: var(--brand-secondary);\n    --btn-bg-focus: var(--btn-bg-hover);\n    --btn-fg: var(--brand-tertiary);\n    --btn-fg-hover: var(--brand-primary);\n    --btn-fg-focus: var(--brand-primary);\n    --btn-border: 1px solid var(--brand-secondary);\n    --btn-border-focus: 1px solid var(--brand-primary);\n    --btn-padding: 4px 8px;\n    --btn-margin: 1px 2px;\n    box-sizing: border-box;\n    padding: var(--btn-padding);\n    margin: var(--btn-margin);\n    text-decoration: none;\n    color: var(--btn-fg);\n    background-color: var(--btn-bg);\n    border: var(--btn-border);\n    border-radius: 4px;\n    transition: background-color 0.15s ease-in-out,\n                color 0.15s ease-in-out,\n                border-color 0.15s ease-in-out;\n    user-select: none;\n    cursor: pointer;\n    outline: none;\n}\n\n .btn:hover{\n    background-color: var(--btn-bg-hover);\n    color: var(--btn-fg-hover);\n}\n\n.btn:active, .btn:focus{\n    background-color: var(--btn-bg-focus);\n    color: var(--btn-fg-focus);\n    border: var(--btn-border-focus);\n}\n"],sourceRoot:""}]);const s=a},5805:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,"fieldset.control-group{\n    --fieldset-bg: hsl(var(--brand-secondary-hue), var(--brand-secondary-saturation), 70%);\n    --fieldset-border: 1px solid var(--brand-primary);\n    --fieldset-margin: 18px auto;\n\n    background-color: var(--fieldset-bg);\n    color: var(--brand-tertiary);\n    border: var(--fieldset-border);\n    border-radius: 2px;\n    margin: var(--fieldset-margin)\n}\n\nfieldset.control-group legend{\n    color: var(--text-color);\n    text-shadow: 0 0 2px var(--brand-tertiary);\n    font-weight: 600;\n}\n","",{version:3,sources:["webpack://./src/css/forms.css"],names:[],mappings:"AAAA;IACI,sFAAsF;IACtF,iDAAiD;IACjD,4BAA4B;;IAE5B,oCAAoC;IACpC,4BAA4B;IAC5B,8BAA8B;IAC9B,kBAAkB;IAClB;AACJ;;AAEA;IACI,wBAAwB;IACxB,0CAA0C;IAC1C,gBAAgB;AACpB",sourcesContent:["fieldset.control-group{\n    --fieldset-bg: hsl(var(--brand-secondary-hue), var(--brand-secondary-saturation), 70%);\n    --fieldset-border: 1px solid var(--brand-primary);\n    --fieldset-margin: 18px auto;\n\n    background-color: var(--fieldset-bg);\n    color: var(--brand-tertiary);\n    border: var(--fieldset-border);\n    border-radius: 2px;\n    margin: var(--fieldset-margin)\n}\n\nfieldset.control-group legend{\n    color: var(--text-color);\n    text-shadow: 0 0 2px var(--brand-tertiary);\n    font-weight: 600;\n}\n"],sourceRoot:""}]);const s=a},9599:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,"#container{\n    --container-padding: 24px;\n    --container-margin-md: 18px;\n    --controls-width-md: 250px;\n\n    display: grid;\n    grid-template-areas: 'header'\n                         'controls'\n                         'content';\n    grid-template-columns: 100%;\n    grid-template-rows: 2.5em auto 1fr;\n    grid-gap: 2vh 4vw;\n    background-color: var(--brand-tertiary);\n    transition: margin 0.25s ease;\n    padding: var(--container-padding);\n    min-height: calc(100vh - (var(--container-margin-md)*2) - (var(--container-padding)*2));\n}\n\n#header{\n    grid-area: header;\n    transition: none;\n}\n\n#controls{\n    transition: none;\n    grid-area: controls;\n    z-index: 2;\n}\n\n#content{\n    transition: none;\n    grid-area: content;\n    z-index: 1;\n    max-width: calc(90vw - var(--container-padding));\n    height: 100%;\n    margin: 0 auto;\n    box-sizing: border-box;\n    padding: 0 0 12px 0;\n    overflow-x: auto;\n}\n\n@media screen and (min-width: 640px) {\n    #container{\n        grid-template-areas: 'header header'\n                             'controls content';\n        grid-template-columns: var(--controls-width-md) 1fr;\n        margin: var(--container-margin-md);\n        box-shadow: 5px 5px 5px 0px hsl(var(--brand-tertiary-hue), var(--brand-tertiary-saturation), 6%);\n    }\n\n    #content{\n        max-width: calc(100vw - var(--controls-width-md));\n        padding: 0;\n        margin: 0;\n    }\n}\n","",{version:3,sources:["webpack://./src/css/grid.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,2BAA2B;IAC3B,0BAA0B;;IAE1B,aAAa;IACb;;kCAE8B;IAC9B,2BAA2B;IAC3B,kCAAkC;IAClC,iBAAiB;IACjB,uCAAuC;IACvC,6BAA6B;IAC7B,iCAAiC;IACjC,uFAAuF;AAC3F;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,UAAU;AACd;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,UAAU;IACV,gDAAgD;IAChD,YAAY;IACZ,cAAc;IACd,sBAAsB;IACtB,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI;QACI;+CACuC;QACvC,mDAAmD;QACnD,kCAAkC;QAClC,gGAAgG;IACpG;;IAEA;QACI,iDAAiD;QACjD,UAAU;QACV,SAAS;IACb;AACJ",sourcesContent:["#container{\n    --container-padding: 24px;\n    --container-margin-md: 18px;\n    --controls-width-md: 250px;\n\n    display: grid;\n    grid-template-areas: 'header'\n                         'controls'\n                         'content';\n    grid-template-columns: 100%;\n    grid-template-rows: 2.5em auto 1fr;\n    grid-gap: 2vh 4vw;\n    background-color: var(--brand-tertiary);\n    transition: margin 0.25s ease;\n    padding: var(--container-padding);\n    min-height: calc(100vh - (var(--container-margin-md)*2) - (var(--container-padding)*2));\n}\n\n#header{\n    grid-area: header;\n    transition: none;\n}\n\n#controls{\n    transition: none;\n    grid-area: controls;\n    z-index: 2;\n}\n\n#content{\n    transition: none;\n    grid-area: content;\n    z-index: 1;\n    max-width: calc(90vw - var(--container-padding));\n    height: 100%;\n    margin: 0 auto;\n    box-sizing: border-box;\n    padding: 0 0 12px 0;\n    overflow-x: auto;\n}\n\n@media screen and (min-width: 640px) {\n    #container{\n        grid-template-areas: 'header header'\n                             'controls content';\n        grid-template-columns: var(--controls-width-md) 1fr;\n        margin: var(--container-margin-md);\n        box-shadow: 5px 5px 5px 0px hsl(var(--brand-tertiary-hue), var(--brand-tertiary-saturation), 6%);\n    }\n\n    #content{\n        max-width: calc(100vw - var(--controls-width-md));\n        padding: 0;\n        margin: 0;\n    }\n}\n"],sourceRoot:""}]);const s=a},2583:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,".display-sm {\n    display: block;\n}\n\n.display-md {\n    display: none;\n}\n\n@media screen and (min-width: 640px) {\n    .display-sm {\n        display: none;\n    }\n\n    .display-md {\n        display: block;\n    }\n}\n","",{version:3,sources:["webpack://./src/css/responsive.css"],names:[],mappings:"AAAA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI;QACI,aAAa;IACjB;;IAEA;QACI,cAAc;IAClB;AACJ",sourcesContent:[".display-sm {\n    display: block;\n}\n\n.display-md {\n    display: none;\n}\n\n@media screen and (min-width: 640px) {\n    .display-sm {\n        display: none;\n    }\n\n    .display-md {\n        display: block;\n    }\n}\n"],sourceRoot:""}]);const s=a},4911:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,"h1, h2, h3, h4, h5, h6 {\n    margin: 0.25em 0;\n}\n","",{version:3,sources:["webpack://./src/css/typography.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB",sourcesContent:["h1, h2, h3, h4, h5, h6 {\n    margin: 0.25em 0;\n}\n"],sourceRoot:""}]);const s=a},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},4015:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){s=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if(!a)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(l).concat([u]).join("\n")}return[i].join("\n")}},4023:function(t,e,n){"undefined"!=typeof self&&self,t.exports=function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=60)}([function(t,e){function n(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r);return[n].concat(r.sources.map((function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"}))).concat([o]).join("\n")}return[n].join("\n")}t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=n(e,t);return e[2]?"@media "+e[2]+"{"+r+"}":r})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){function r(t){for(var e=0;e<t.length;e++){var n=t[e],r=l[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(i(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var a=[];for(o=0;o<n.parts.length;o++)a.push(i(n.parts[o]));l[n.id]={id:n.id,refs:1,parts:a}}}}function o(){var t=document.createElement("style");return t.type="text/css",f.appendChild(t),t}function i(t){var e,n,r=document.querySelector("style["+b+'~="'+t.id+'"]');if(r){if(h)return v;r.parentNode.removeChild(r)}if(m){var i=d++;r=p||(p=o()),e=a.bind(null,r,i,!1),n=a.bind(null,r,i,!0)}else r=o(),e=s.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap)return;e(t=r)}else n()}}function a(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=y(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function s(t,e){var n=e.css,r=e.media,o=e.sourceMap;if(r&&t.setAttribute("media",r),g.ssrId&&t.setAttribute(b,e.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var c="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!c)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var u=n(64),l={},f=c&&(document.head||document.getElementsByTagName("head")[0]),p=null,d=0,h=!1,v=function(){},g=null,b="data-vue-ssr-id",m="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());t.exports=function(t,e,n,o){h=n,g=o||{};var i=u(t,e);return r(i),function(e){for(var n=[],o=0;o<i.length;o++){var a=i[o];(s=l[a.id]).refs--,n.push(s)}for(e?r(i=u(t,e)):i=[],o=0;o<n.length;o++){var s;if(0===(s=n[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete l[s.id]}}}};var y=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e){t.exports=function(t,e,n,r,o,i){var a,s=t=t||{},c=typeof t.default;"object"!==c&&"function"!==c||(a=t,s=t.default);var u,l="function"==typeof s?s.options:s;if(e&&(l.render=e.render,l.staticRenderFns=e.staticRenderFns,l._compiled=!0),n&&(l.functional=!0),o&&(l._scopeId=o),i?(u=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),r&&r.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(i)},l._ssrRegister=u):r&&(u=r),u){var f=l.functional,p=f?l.render:l.beforeCreate;f?(l._injectStyles=u,l.render=function(t,e){return u.call(e),p(t,e)}):l.beforeCreate=p?[].concat(p,u):[u]}return{esModule:a,exports:s,options:l}}},function(t,e,n){"use strict";function r(t,e){var n,r=t&&t.a;!(n=t&&t.hsl?(0,o.default)(t.hsl):t&&t.hex&&t.hex.length>0?(0,o.default)(t.hex):t&&t.hsv?(0,o.default)(t.hsv):t&&t.rgba?(0,o.default)(t.rgba):t&&t.rgb?(0,o.default)(t.rgb):(0,o.default)(t))||void 0!==n._a&&null!==n._a||n.setAlpha(r||1);var i=n.toHsl(),a=n.toHsv();return 0===i.s&&(a.h=i.h=t.h||t.hsl&&t.hsl.h||e||0),{hsl:i,hex:n.toHexString().toUpperCase(),hex8:n.toHex8String().toUpperCase(),rgba:n.toRgb(),hsv:a,oldHue:t.h||e||i.h,source:t.source,a:t.a||n.getAlpha()}}Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){return t&&t.__esModule?t:{default:t}}(n(65));e.default={props:["value"],data:function(){return{val:r(this.value)}},computed:{colors:{get:function(){return this.val},set:function(t){this.val=t,this.$emit("input",t)}}},watch:{value:function(t){this.val=r(t)}},methods:{colorChange:function(t,e){this.oldHue=this.colors.hsl.h,this.colors=r(t,e||this.oldHue)},isValidHex:function(t){return(0,o.default)(t).isValid()},simpleCheckForValidColor:function(t){for(var e=["r","g","b","a","h","s","l","v"],n=0,r=0,o=0;o<e.length;o++){var i=e[o];t[i]&&(n++,isNaN(t[i])||r++)}if(n===r)return t},paletteUpperCase:function(t){return t.map((function(t){return t.toUpperCase()}))},isTransparent:function(t){return 0===(0,o.default)(t).getAlpha()}}}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(36),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(68),s=!1,c=function(t){s||n(66)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/common/EditableInput.vue",e.default=u.exports},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(8),o=n(18);t.exports=n(9)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(16),o=n(42),i=n(25),a=Object.defineProperty;e.f=n(9)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(17)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(90),o=n(24);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(29)("wks"),o=n(19),i=n(4).Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(51),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(113),s=!1,c=function(t){s||n(111)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/common/Hue.vue",e.default=u.exports},function(t,e){t.exports=!0},function(t,e){var n=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(12);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(54),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(127),s=!1,c=function(t){s||n(123)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/common/Saturation.vue",e.default=u.exports},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(55),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(133),s=!1,c=function(t){s||n(128)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/common/Alpha.vue",e.default=u.exports},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(56),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(132),s=!1,c=function(t){s||n(130)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/common/Checkboard.vue",e.default=u.exports},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(12);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports={}},function(t,e,n){var r=n(46),o=n(30);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(29)("keys"),o=n(19);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(15),o=n(4),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(14)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(8).f,o=n(6),i=n(11)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){e.f=n(11)},function(t,e,n){var r=n(4),o=n(15),i=n(14),a=n(32),s=n(8).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:a.f(t)})}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(3)),i=r(n(5)),a=["#4D4D4D","#999999","#FFFFFF","#F44E3B","#FE9200","#FCDC00","#DBDF00","#A4DD00","#68CCCA","#73D8FF","#AEA1FF","#FDA1FF","#333333","#808080","#CCCCCC","#D33115","#E27300","#FCC400","#B0BC00","#68BC00","#16A5A5","#009CE0","#7B64FF","#FA28FF","#000000","#666666","#B3B3B3","#9F0500","#C45100","#FB9E00","#808900","#194D33","#0C797D","#0062B1","#653294","#AB149E"];e.default={name:"Compact",mixins:[o.default],props:{palette:{type:Array,default:function(){return a}}},components:{"ed-in":i.default},computed:{pick:function(){return this.colors.hex.toUpperCase()}},methods:{handlerClick:function(t){this.colorChange({hex:t,source:"hex"})}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"editableInput",props:{label:String,labelText:String,desc:String,value:[String,Number],max:Number,min:Number,arrowOffset:{type:Number,default:1}},computed:{val:{get:function(){return this.value},set:function(t){if(!(void 0!==this.max&&+t>this.max))return t;this.$refs.input.value=this.max}},labelId:function(){return"input__label__"+this.label+"__"+Math.random().toString().slice(2,5)},labelSpanText:function(){return this.labelText||this.label}},methods:{update:function(t){this.handleChange(t.target.value)},handleChange:function(t){var e={};e[this.label]=t,(void 0===e.hex&&void 0===e["#"]||t.length>5)&&this.$emit("change",e)},handleKeyDown:function(t){var e=this.val,n=Number(e);if(n){var r=this.arrowOffset||1;38===t.keyCode&&(e=n+r,this.handleChange(e),t.preventDefault()),40===t.keyCode&&(e=n-r,this.handleChange(e),t.preventDefault())}}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(3)),o=["#FFFFFF","#F2F2F2","#E6E6E6","#D9D9D9","#CCCCCC","#BFBFBF","#B3B3B3","#A6A6A6","#999999","#8C8C8C","#808080","#737373","#666666","#595959","#4D4D4D","#404040","#333333","#262626","#0D0D0D","#000000"];e.default={name:"Grayscale",mixins:[r.default],props:{palette:{type:Array,default:function(){return o}}},components:{},computed:{pick:function(){return this.colors.hex.toUpperCase()}},methods:{handlerClick:function(t){this.colorChange({hex:t,source:"hex"})}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(5)),i=r(n(3));e.default={name:"Material",mixins:[i.default],components:{"ed-in":o.default},methods:{onChange:function(t){t&&(t.hex?this.isValidHex(t.hex)&&this.colorChange({hex:t.hex,source:"hex"}):(t.r||t.g||t.b)&&this.colorChange({r:t.r||this.colors.rgba.r,g:t.g||this.colors.rgba.g,b:t.b||this.colors.rgba.b,a:t.a||this.colors.rgba.a,source:"rgba"}))}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(81)),i=r(n(3)),a=r(n(13));e.default={name:"Slider",mixins:[i.default],props:{swatches:{type:Array,default:function(){return[{s:.5,l:.8},{s:.5,l:.65},{s:.5,l:.5},{s:.5,l:.35},{s:.5,l:.2}]}}},components:{hue:a.default},computed:{normalizedSwatches:function(){return this.swatches.map((function(t){return"object"!==(void 0===t?"undefined":(0,o.default)(t))?{s:.5,l:t}:t}))}},methods:{isActive:function(t,e){var n=this.colors.hsl;return 1===n.l&&1===t.l||0===n.l&&0===t.l||Math.abs(n.l-t.l)<.01&&Math.abs(n.s-t.s)<.01},hueChange:function(t){this.colorChange(t)},handleSwClick:function(t,e){this.colorChange({h:this.colors.hsl.h,s:e.s,l:e.l,source:"hsl"})}}}},function(t,e,n){"use strict";var r=n(14),o=n(41),i=n(44),a=n(7),s=n(26),c=n(88),u=n(31),l=n(95),f=n(11)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,e,n,h,v,g,b){c(n,e,h);var m,y,x,_=function(t){if(!p&&t in S)return S[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},w=e+" Iterator",A="values"==v,C=!1,S=t.prototype,k=S[f]||S["@@iterator"]||v&&S[v],O=k||_(v),E=v?A?_("entries"):O:void 0,I="Array"==e&&S.entries||k;if(I&&(x=l(I.call(new t)))!==Object.prototype&&x.next&&(u(x,w,!0),r||"function"==typeof x[f]||a(x,f,d)),A&&k&&"values"!==k.name&&(C=!0,O=function(){return k.call(this)}),r&&!b||!p&&!C&&S[f]||a(S,f,O),s[e]=O,s[w]=d,v)if(m={values:A?O:_("values"),keys:g?O:_("keys"),entries:E},b)for(y in m)y in S||i(S,y,m[y]);else o(o.P+o.F*(p||C),e,m);return m}},function(t,e,n){var r=n(4),o=n(15),i=n(86),a=n(7),s=n(6),c=function(t,e,n){var u,l,f,p=t&c.F,d=t&c.G,h=t&c.S,v=t&c.P,g=t&c.B,b=t&c.W,m=d?o:o[e]||(o[e]={}),y=m.prototype,x=d?r:h?r[e]:(r[e]||{}).prototype;for(u in d&&(n=e),n)(l=!p&&x&&void 0!==x[u])&&s(m,u)||(f=l?x[u]:n[u],m[u]=d&&"function"!=typeof x[u]?n[u]:g&&l?i(f,r):b&&x[u]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):v&&"function"==typeof f?i(Function.call,f):f,v&&((m.virtual||(m.virtual={}))[u]=f,t&c.R&&y&&!y[u]&&a(y,u,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,n){t.exports=!n(9)&&!n(17)((function(){return 7!=Object.defineProperty(n(43)("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(12),o=n(4).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){t.exports=n(7)},function(t,e,n){var r=n(16),o=n(89),i=n(30),a=n(28)("IE_PROTO"),s=function(){},c=function(){var t,e=n(43)("iframe"),r=i.length;for(e.style.display="none",n(94).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[a]=t):n=c(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(6),o=n(10),i=n(91)(!1),a=n(28)("IE_PROTO");t.exports=function(t,e){var n,s=o(t),c=0,u=[];for(n in s)n!=a&&r(s,n)&&u.push(n);for(;e.length>c;)r(s,n=e[c++])&&(~i(u,n)||u.push(n));return u}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(24);t.exports=function(t){return Object(r(t))}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(46),o=n(30).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"Hue",props:{value:Object,direction:{type:String,default:"horizontal"}},data:function(){return{oldHue:0,pullDirection:""}},computed:{colors:function(){var t=this.value.hsl.h;return 0!==t&&t-this.oldHue>0&&(this.pullDirection="right"),0!==t&&t-this.oldHue<0&&(this.pullDirection="left"),this.oldHue=t,this.value},directionClass:function(){return{"vc-hue--horizontal":"horizontal"===this.direction,"vc-hue--vertical":"vertical"===this.direction}},pointerTop:function(){return"vertical"===this.direction?0===this.colors.hsl.h&&"right"===this.pullDirection?0:-100*this.colors.hsl.h/360+100+"%":0},pointerLeft:function(){return"vertical"===this.direction?0:0===this.colors.hsl.h&&"right"===this.pullDirection?"100%":100*this.colors.hsl.h/360+"%"}},methods:{handleChange:function(t,e){!e&&t.preventDefault();var n=this.$refs.container;if(n){var r,o=n.clientWidth,i=n.clientHeight,a=n.getBoundingClientRect().left+window.pageXOffset,s=n.getBoundingClientRect().top+window.pageYOffset,c=(t.pageX||(t.touches?t.touches[0].pageX:0))-a,u=(t.pageY||(t.touches?t.touches[0].pageY:0))-s;"vertical"===this.direction?(r=u<0?360:u>i?0:360*(-100*u/i+100)/100,this.colors.hsl.h!==r&&this.$emit("change",{h:r,s:this.colors.hsl.s,l:this.colors.hsl.l,a:this.colors.hsl.a,source:"hsl"})):(r=c<0?0:c>o?360:100*c/o*360/100,this.colors.hsl.h!==r&&this.$emit("change",{h:r,s:this.colors.hsl.s,l:this.colors.hsl.l,a:this.colors.hsl.a,source:"hsl"}))}},handleMouseDown:function(t){this.handleChange(t,!0),window.addEventListener("mousemove",this.handleChange),window.addEventListener("mouseup",this.handleMouseUp)},handleMouseUp:function(t){this.unbindEventListeners()},unbindEventListeners:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(118)),i=r(n(3)),a=["red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","brown","blueGrey","black"],s=["900","700","500","300","100"],c=function(){var t=[];return a.forEach((function(e){var n=[];"black"===e.toLowerCase()||"white"===e.toLowerCase()?n=n.concat(["#000000","#FFFFFF"]):s.forEach((function(t){var r=o.default[e][t];n.push(r.toUpperCase())})),t.push(n)})),t}();e.default={name:"Swatches",mixins:[i.default],props:{palette:{type:Array,default:function(){return c}}},computed:{pick:function(){return this.colors.hex}},methods:{equal:function(t){return t.toLowerCase()===this.colors.hex.toLowerCase()},handlerClick:function(t){this.colorChange({hex:t,source:"hex"})}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(3)),i=r(n(5)),a=r(n(20)),s=r(n(13)),c=r(n(21));e.default={name:"Photoshop",mixins:[o.default],props:{head:{type:String,default:"Color Picker"},disableFields:{type:Boolean,default:!1},hasResetButton:{type:Boolean,default:!1},acceptLabel:{type:String,default:"OK"},cancelLabel:{type:String,default:"Cancel"},resetLabel:{type:String,default:"Reset"},newLabel:{type:String,default:"new"},currentLabel:{type:String,default:"current"}},components:{saturation:a.default,hue:s.default,alpha:c.default,"ed-in":i.default},data:function(){return{currentColor:"#FFF"}},computed:{hsv:function(){var t=this.colors.hsv;return{h:t.h.toFixed(),s:(100*t.s).toFixed(),v:(100*t.v).toFixed()}},hex:function(){var t=this.colors.hex;return t&&t.replace("#","")}},created:function(){this.currentColor=this.colors.hex},methods:{childChange:function(t){this.colorChange(t)},inputChange:function(t){t&&(t["#"]?this.isValidHex(t["#"])&&this.colorChange({hex:t["#"],source:"hex"}):t.r||t.g||t.b||t.a?this.colorChange({r:t.r||this.colors.rgba.r,g:t.g||this.colors.rgba.g,b:t.b||this.colors.rgba.b,a:t.a||this.colors.rgba.a,source:"rgba"}):(t.h||t.s||t.v)&&this.colorChange({h:t.h||this.colors.hsv.h,s:t.s/100||this.colors.hsv.s,v:t.v/100||this.colors.hsv.v,source:"hsv"}))},clickCurrentColor:function(){this.colorChange({hex:this.currentColor,source:"hex"})},handleAccept:function(){this.$emit("ok")},handleCancel:function(){this.$emit("cancel")},handleReset:function(){this.$emit("reset")}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(125)),i=r(n(126));e.default={name:"Saturation",props:{value:Object},computed:{colors:function(){return this.value},bgColor:function(){return"hsl("+this.colors.hsv.h+", 100%, 50%)"},pointerTop:function(){return-100*this.colors.hsv.v+1+100+"%"},pointerLeft:function(){return 100*this.colors.hsv.s+"%"}},methods:{throttle:(0,i.default)((function(t,e){t(e)}),20,{leading:!0,trailing:!1}),handleChange:function(t,e){!e&&t.preventDefault();var n=this.$refs.container;if(n){var r=n.clientWidth,i=n.clientHeight,a=n.getBoundingClientRect().left+window.pageXOffset,s=n.getBoundingClientRect().top+window.pageYOffset,c=t.pageX||(t.touches?t.touches[0].pageX:0),u=t.pageY||(t.touches?t.touches[0].pageY:0),l=(0,o.default)(c-a,0,r),f=(0,o.default)(u-s,0,i),p=l/r,d=(0,o.default)(-f/i+1,0,1);this.throttle(this.onChange,{h:this.colors.hsv.h,s:p,v:d,a:this.colors.hsv.a,source:"hsva"})}},onChange:function(t){this.$emit("change",t)},handleMouseDown:function(t){window.addEventListener("mousemove",this.handleChange),window.addEventListener("mouseup",this.handleChange),window.addEventListener("mouseup",this.handleMouseUp)},handleMouseUp:function(t){this.unbindEventListeners()},unbindEventListeners:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(22));e.default={name:"Alpha",props:{value:Object,onChange:Function},components:{checkboard:r.default},computed:{colors:function(){return this.value},gradientColor:function(){var t=this.colors.rgba,e=[t.r,t.g,t.b].join(",");return"linear-gradient(to right, rgba("+e+", 0) 0%, rgba("+e+", 1) 100%)"}},methods:{handleChange:function(t,e){!e&&t.preventDefault();var n=this.$refs.container;if(n){var r,o=n.clientWidth,i=n.getBoundingClientRect().left+window.pageXOffset,a=(t.pageX||(t.touches?t.touches[0].pageX:0))-i;r=a<0?0:a>o?1:Math.round(100*a/o)/100,this.colors.a!==r&&this.$emit("change",{h:this.colors.hsl.h,s:this.colors.hsl.s,l:this.colors.hsl.l,a:r,source:"rgba"})}},handleMouseDown:function(t){this.handleChange(t,!0),window.addEventListener("mousemove",this.handleChange),window.addEventListener("mouseup",this.handleMouseUp)},handleMouseUp:function(){this.unbindEventListeners()},unbindEventListeners:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}}}},function(t,e,n){"use strict";function r(t,e,n){var r=t+","+e+","+n;if(o[r])return o[r];var i=function(t,e,n){if("undefined"==typeof document)return null;var r=document.createElement("canvas");r.width=r.height=2*n;var o=r.getContext("2d");return o?(o.fillStyle=t,o.fillRect(0,0,r.width,r.height),o.fillStyle=e,o.fillRect(0,0,n,n),o.translate(n,n),o.fillRect(0,0,n,n),r.toDataURL()):null}(t,e,n);return o[r]=i,i}Object.defineProperty(e,"__esModule",{value:!0});var o={};e.default={name:"Checkboard",props:{size:{type:[Number,String],default:8},white:{type:String,default:"#fff"},grey:{type:String,default:"#e6e6e6"}},computed:{bgStyle:function(){return{"background-image":"url("+r(this.white,this.grey,this.size)+")"}}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(3)),i=r(n(5)),a=r(n(20)),s=r(n(13)),c=r(n(21)),u=r(n(22)),l=["#D0021B","#F5A623","#F8E71C","#8B572A","#7ED321","#417505","#BD10E0","#9013FE","#4A90E2","#50E3C2","#B8E986","#000000","#4A4A4A","#9B9B9B","#FFFFFF","rgba(0,0,0,0)"];e.default={name:"Sketch",mixins:[o.default],components:{saturation:a.default,hue:s.default,alpha:c.default,"ed-in":i.default,checkboard:u.default},props:{presetColors:{type:Array,default:function(){return l}},disableAlpha:{type:Boolean,default:!1},disableFields:{type:Boolean,default:!1}},computed:{hex:function(){return(this.colors.a<1?this.colors.hex8:this.colors.hex).replace("#","")},activeColor:function(){var t=this.colors.rgba;return"rgba("+[t.r,t.g,t.b,t.a].join(",")+")"}},methods:{handlePreset:function(t){this.colorChange({hex:t,source:"hex"})},childChange:function(t){this.colorChange(t)},inputChange:function(t){t&&(t.hex?this.isValidHex(t.hex)&&this.colorChange({hex:t.hex,source:"hex"}):(t.r||t.g||t.b||t.a)&&this.colorChange({r:t.r||this.colors.rgba.r,g:t.g||this.colors.rgba.g,b:t.b||this.colors.rgba.b,a:t.a||this.colors.rgba.a,source:"rgba"}))}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(3)),i=r(n(5)),a=r(n(20)),s=r(n(13)),c=r(n(21)),u=r(n(22));e.default={name:"Chrome",mixins:[o.default],props:{disableAlpha:{type:Boolean,default:!1},disableFields:{type:Boolean,default:!1}},components:{saturation:a.default,hue:s.default,alpha:c.default,"ed-in":i.default,checkboard:u.default},data:function(){return{fieldsIndex:0,highlight:!1}},computed:{hsl:function(){var t=this.colors.hsl,e=t.h,n=t.s,r=t.l;return{h:e.toFixed(),s:(100*n).toFixed()+"%",l:(100*r).toFixed()+"%"}},activeColor:function(){var t=this.colors.rgba;return"rgba("+[t.r,t.g,t.b,t.a].join(",")+")"},hasAlpha:function(){return this.colors.a<1}},methods:{childChange:function(t){this.colorChange(t)},inputChange:function(t){if(t)if(t.hex)this.isValidHex(t.hex)&&this.colorChange({hex:t.hex,source:"hex"});else if(t.r||t.g||t.b||t.a)this.colorChange({r:t.r||this.colors.rgba.r,g:t.g||this.colors.rgba.g,b:t.b||this.colors.rgba.b,a:t.a||this.colors.rgba.a,source:"rgba"});else if(t.h||t.s||t.l){var e=t.s?t.s.replace("%","")/100:this.colors.hsl.s,n=t.l?t.l.replace("%","")/100:this.colors.hsl.l;this.colorChange({h:t.h||this.colors.hsl.h,s:e,l:n,source:"hsl"})}},toggleViews:function(){this.fieldsIndex>=2?this.fieldsIndex=0:this.fieldsIndex++},showHighlight:function(){this.highlight=!0},hideHighlight:function(){this.highlight=!1}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(5)),i=r(n(3)),a=["#FF6900","#FCB900","#7BDCB5","#00D084","#8ED1FC","#0693E3","#ABB8C3","#EB144C","#F78DA7","#9900EF"];e.default={name:"Twitter",mixins:[i.default],components:{editableInput:o.default},props:{width:{type:[String,Number],default:276},defaultColors:{type:Array,default:function(){return a}},triangle:{default:"top-left",validator:function(t){return["hide","top-left","top-right"].includes(t)}}},computed:{hsv:function(){var t=this.colors.hsv;return{h:t.h.toFixed(),s:(100*t.s).toFixed(),v:(100*t.v).toFixed()}},hex:function(){var t=this.colors.hex;return t&&t.replace("#","")}},methods:{equal:function(t){return t.toLowerCase()===this.colors.hex.toLowerCase()},handlerClick:function(t){this.colorChange({hex:t,source:"hex"})},inputChange:function(t){t&&(t["#"]?this.isValidHex(t["#"])&&this.colorChange({hex:t["#"],source:"hex"}):t.r||t.g||t.b||t.a?this.colorChange({r:t.r||this.colors.rgba.r,g:t.g||this.colors.rgba.g,b:t.b||this.colors.rgba.b,a:t.a||this.colors.rgba.a,source:"rgba"}):(t.h||t.s||t.v)&&this.colorChange({h:t.h||this.colors.hsv.h,s:t.s/100||this.colors.hsv.s,v:t.v/100||this.colors.hsv.v,source:"hsv"}))}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=r(n(61)),i=r(n(70)),a=r(n(74)),s=r(n(78)),c=r(n(115)),u=r(n(120)),l=r(n(135)),f=r(n(139)),p=r(n(143)),d=r(n(21)),h=r(n(22)),v=r(n(5)),g=r(n(13)),b=r(n(20)),m=r(n(3)),y={version:"2.8.1",Compact:o.default,Grayscale:i.default,Twitter:p.default,Material:a.default,Slider:s.default,Swatches:c.default,Photoshop:u.default,Sketch:l.default,Chrome:f.default,Alpha:d.default,Checkboard:h.default,EditableInput:v.default,Hue:g.default,Saturation:b.default,ColorMixin:m.default};t.exports=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(35),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(69),s=!1,c=function(t){s||n(62)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/Compact.vue",e.default=u.exports},function(t,e,n){var r=n(63);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("6ce8a5a8",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-compact {\n  padding-top: 5px;\n  padding-left: 5px;\n  width: 245px;\n  border-radius: 2px;\n  box-sizing: border-box;\n  box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\n  background-color: #fff;\n}\n.vc-compact-colors {\n  overflow: hidden;\n  padding: 0;\n  margin: 0;\n}\n.vc-compact-color-item {\n  list-style: none;\n  width: 15px;\n  height: 15px;\n  float: left;\n  margin-right: 5px;\n  margin-bottom: 5px;\n  position: relative;\n  cursor: pointer;\n}\n.vc-compact-color-item--white {\n  box-shadow: inset 0 0 0 1px #ddd;\n}\n.vc-compact-color-item--white .vc-compact-dot {\n  background: #000;\n}\n.vc-compact-dot {\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  bottom: 5px;\n  left: 5px;\n  border-radius: 50%;\n  opacity: 1;\n  background: #fff;\n}\n",""])},function(t,e){t.exports=function(t,e){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=i[0],s={id:t+":"+o,css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}},function(t,e,n){var r;!function(o){function i(t,e){if(e=e||{},(t=t||"")instanceof i)return t;if(!(this instanceof i))return new i(t,e);var n=function(t){var e={r:0,g:0,b:0},n=1,r=null,o=null,i=null,a=!1,s=!1;return"string"==typeof t&&(t=function(t){t=t.replace(R,"").replace(P,"").toLowerCase();var e,n=!1;if(D[t])t=D[t],n=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};return(e=z.rgb.exec(t))?{r:e[1],g:e[2],b:e[3]}:(e=z.rgba.exec(t))?{r:e[1],g:e[2],b:e[3],a:e[4]}:(e=z.hsl.exec(t))?{h:e[1],s:e[2],l:e[3]}:(e=z.hsla.exec(t))?{h:e[1],s:e[2],l:e[3],a:e[4]}:(e=z.hsv.exec(t))?{h:e[1],s:e[2],v:e[3]}:(e=z.hsva.exec(t))?{h:e[1],s:e[2],v:e[3],a:e[4]}:(e=z.hex8.exec(t))?{r:O(e[1]),g:O(e[2]),b:O(e[3]),a:T(e[4]),format:n?"name":"hex8"}:(e=z.hex6.exec(t))?{r:O(e[1]),g:O(e[2]),b:O(e[3]),format:n?"name":"hex"}:(e=z.hex4.exec(t))?{r:O(e[1]+""+e[1]),g:O(e[2]+""+e[2]),b:O(e[3]+""+e[3]),a:T(e[4]+""+e[4]),format:n?"name":"hex8"}:!!(e=z.hex3.exec(t))&&{r:O(e[1]+""+e[1]),g:O(e[2]+""+e[2]),b:O(e[3]+""+e[3]),format:n?"name":"hex"}}(t)),"object"==typeof t&&(j(t.r)&&j(t.g)&&j(t.b)?(e=function(t,e,n){return{r:255*S(t,255),g:255*S(e,255),b:255*S(n,255)}}(t.r,t.g,t.b),a=!0,s="%"===String(t.r).substr(-1)?"prgb":"rgb"):j(t.h)&&j(t.s)&&j(t.v)?(r=I(t.s),o=I(t.v),e=c(t.h,r,o),a=!0,s="hsv"):j(t.h)&&j(t.s)&&j(t.l)&&(r=I(t.s),i=I(t.l),e=function(t,e,n){function r(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}var o,i,a;if(t=S(t,360),e=S(e,100),n=S(n,100),0===e)o=i=a=n;else{var s=n<.5?n*(1+e):n+e-n*e,c=2*n-s;o=r(c,s,t+1/3),i=r(c,s,t),a=r(c,s,t-1/3)}return{r:255*o,g:255*i,b:255*a}}(t.h,r,i),a=!0,s="hsl"),t.hasOwnProperty("a")&&(n=t.a)),n=C(n),{ok:a,format:t.format||s,r:F(255,L(e.r,0)),g:F(255,L(e.g,0)),b:F(255,L(e.b,0)),a:n}}(t);this._originalInput=t,this._r=n.r,this._g=n.g,this._b=n.b,this._a=n.a,this._roundA=$(100*this._a)/100,this._format=e.format||n.format,this._gradientType=e.gradientType,this._r<1&&(this._r=$(this._r)),this._g<1&&(this._g=$(this._g)),this._b<1&&(this._b=$(this._b)),this._ok=n.ok,this._tc_id=B++}function a(t,e,n){t=S(t,255),e=S(e,255),n=S(n,255);var r,o,i=L(t,e,n),a=F(t,e,n),s=(i+a)/2;if(i==a)r=o=0;else{var c=i-a;switch(o=s>.5?c/(2-i-a):c/(i+a),i){case t:r=(e-n)/c+(e<n?6:0);break;case e:r=(n-t)/c+2;break;case n:r=(t-e)/c+4}r/=6}return{h:r,s:o,l:s}}function s(t,e,n){t=S(t,255),e=S(e,255),n=S(n,255);var r,o,i=L(t,e,n),a=F(t,e,n),s=i,c=i-a;if(o=0===i?0:c/i,i==a)r=0;else{switch(i){case t:r=(e-n)/c+(e<n?6:0);break;case e:r=(n-t)/c+2;break;case n:r=(t-e)/c+4}r/=6}return{h:r,s:o,v:s}}function c(t,e,n){t=6*S(t,360),e=S(e,100),n=S(n,100);var r=o.floor(t),i=t-r,a=n*(1-e),s=n*(1-i*e),c=n*(1-(1-i)*e),u=r%6;return{r:255*[n,s,a,a,c,n][u],g:255*[c,n,n,s,a,a][u],b:255*[a,a,c,n,n,s][u]}}function u(t,e,n,r){var o=[E($(t).toString(16)),E($(e).toString(16)),E($(n).toString(16))];return r&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function l(t,e,n,r){return[E(M(r)),E($(t).toString(16)),E($(e).toString(16)),E($(n).toString(16))].join("")}function f(t,e){e=0===e?0:e||10;var n=i(t).toHsl();return n.s-=e/100,n.s=k(n.s),i(n)}function p(t,e){e=0===e?0:e||10;var n=i(t).toHsl();return n.s+=e/100,n.s=k(n.s),i(n)}function d(t){return i(t).desaturate(100)}function h(t,e){e=0===e?0:e||10;var n=i(t).toHsl();return n.l+=e/100,n.l=k(n.l),i(n)}function v(t,e){e=0===e?0:e||10;var n=i(t).toRgb();return n.r=L(0,F(255,n.r-$(-e/100*255))),n.g=L(0,F(255,n.g-$(-e/100*255))),n.b=L(0,F(255,n.b-$(-e/100*255))),i(n)}function g(t,e){e=0===e?0:e||10;var n=i(t).toHsl();return n.l-=e/100,n.l=k(n.l),i(n)}function b(t,e){var n=i(t).toHsl(),r=(n.h+e)%360;return n.h=r<0?360+r:r,i(n)}function m(t){var e=i(t).toHsl();return e.h=(e.h+180)%360,i(e)}function y(t){var e=i(t).toHsl(),n=e.h;return[i(t),i({h:(n+120)%360,s:e.s,l:e.l}),i({h:(n+240)%360,s:e.s,l:e.l})]}function x(t){var e=i(t).toHsl(),n=e.h;return[i(t),i({h:(n+90)%360,s:e.s,l:e.l}),i({h:(n+180)%360,s:e.s,l:e.l}),i({h:(n+270)%360,s:e.s,l:e.l})]}function _(t){var e=i(t).toHsl(),n=e.h;return[i(t),i({h:(n+72)%360,s:e.s,l:e.l}),i({h:(n+216)%360,s:e.s,l:e.l})]}function w(t,e,n){e=e||6,n=n||30;var r=i(t).toHsl(),o=360/n,a=[i(t)];for(r.h=(r.h-(o*e>>1)+720)%360;--e;)r.h=(r.h+o)%360,a.push(i(r));return a}function A(t,e){e=e||6;for(var n=i(t).toHsv(),r=n.h,o=n.s,a=n.v,s=[],c=1/e;e--;)s.push(i({h:r,s:o,v:a})),a=(a+c)%1;return s}function C(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function S(t,e){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var n=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=F(e,L(0,parseFloat(t))),n&&(t=parseInt(t*e,10)/100),o.abs(t-e)<1e-6?1:t%e/parseFloat(e)}function k(t){return F(1,L(0,t))}function O(t){return parseInt(t,16)}function E(t){return 1==t.length?"0"+t:""+t}function I(t){return t<=1&&(t=100*t+"%"),t}function M(t){return o.round(255*parseFloat(t)).toString(16)}function T(t){return O(t)/255}function j(t){return!!z.CSS_UNIT.exec(t)}var R=/^\s+/,P=/\s+$/,B=0,$=o.round,F=o.min,L=o.max,N=o.random;i.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,e,n,r=this.toRgb();return t=r.r/255,e=r.g/255,n=r.b/255,.2126*(t<=.03928?t/12.92:o.pow((t+.055)/1.055,2.4))+.7152*(e<=.03928?e/12.92:o.pow((e+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:o.pow((n+.055)/1.055,2.4))},setAlpha:function(t){return this._a=C(t),this._roundA=$(100*this._a)/100,this},toHsv:function(){var t=s(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=s(this._r,this._g,this._b),e=$(360*t.h),n=$(100*t.s),r=$(100*t.v);return 1==this._a?"hsv("+e+", "+n+"%, "+r+"%)":"hsva("+e+", "+n+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var t=a(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=a(this._r,this._g,this._b),e=$(360*t.h),n=$(100*t.s),r=$(100*t.l);return 1==this._a?"hsl("+e+", "+n+"%, "+r+"%)":"hsla("+e+", "+n+"%, "+r+"%, "+this._roundA+")"},toHex:function(t){return u(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,e,n,r,o){var i=[E($(t).toString(16)),E($(e).toString(16)),E($(n).toString(16)),E(M(r))];return o&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)&&i[3].charAt(0)==i[3].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0)+i[3].charAt(0):i.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:$(this._r),g:$(this._g),b:$(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+$(this._r)+", "+$(this._g)+", "+$(this._b)+")":"rgba("+$(this._r)+", "+$(this._g)+", "+$(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:$(100*S(this._r,255))+"%",g:$(100*S(this._g,255))+"%",b:$(100*S(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+$(100*S(this._r,255))+"%, "+$(100*S(this._g,255))+"%, "+$(100*S(this._b,255))+"%)":"rgba("+$(100*S(this._r,255))+"%, "+$(100*S(this._g,255))+"%, "+$(100*S(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(U[u(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var e="#"+l(this._r,this._g,this._b,this._a),n=e,r=this._gradientType?"GradientType = 1, ":"";if(t){var o=i(t);n="#"+l(o._r,o._g,o._b,o._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+e+",endColorstr="+n+")"},toString:function(t){var e=!!t;t=t||this._format;var n=!1,r=this._a<1&&this._a>=0;return e||!r||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(n=this.toRgbString()),"prgb"===t&&(n=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(n=this.toHexString()),"hex3"===t&&(n=this.toHexString(!0)),"hex4"===t&&(n=this.toHex8String(!0)),"hex8"===t&&(n=this.toHex8String()),"name"===t&&(n=this.toName()),"hsl"===t&&(n=this.toHslString()),"hsv"===t&&(n=this.toHsvString()),n||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return i(this.toString())},_applyModification:function(t,e){var n=t.apply(null,[this].concat([].slice.call(e)));return this._r=n._r,this._g=n._g,this._b=n._b,this.setAlpha(n._a),this},lighten:function(){return this._applyModification(h,arguments)},brighten:function(){return this._applyModification(v,arguments)},darken:function(){return this._applyModification(g,arguments)},desaturate:function(){return this._applyModification(f,arguments)},saturate:function(){return this._applyModification(p,arguments)},greyscale:function(){return this._applyModification(d,arguments)},spin:function(){return this._applyModification(b,arguments)},_applyCombination:function(t,e){return t.apply(null,[this].concat([].slice.call(e)))},analogous:function(){return this._applyCombination(w,arguments)},complement:function(){return this._applyCombination(m,arguments)},monochromatic:function(){return this._applyCombination(A,arguments)},splitcomplement:function(){return this._applyCombination(_,arguments)},triad:function(){return this._applyCombination(y,arguments)},tetrad:function(){return this._applyCombination(x,arguments)}},i.fromRatio=function(t,e){if("object"==typeof t){var n={};for(var r in t)t.hasOwnProperty(r)&&(n[r]="a"===r?t[r]:I(t[r]));t=n}return i(t,e)},i.equals=function(t,e){return!(!t||!e)&&i(t).toRgbString()==i(e).toRgbString()},i.random=function(){return i.fromRatio({r:N(),g:N(),b:N()})},i.mix=function(t,e,n){n=0===n?0:n||50;var r=i(t).toRgb(),o=i(e).toRgb(),a=n/100;return i({r:(o.r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b,a:(o.a-r.a)*a+r.a})},i.readability=function(t,e){var n=i(t),r=i(e);return(o.max(n.getLuminance(),r.getLuminance())+.05)/(o.min(n.getLuminance(),r.getLuminance())+.05)},i.isReadable=function(t,e,n){var r,o,a=i.readability(t,e);switch(o=!1,(r=function(t){var e,n;return"AA"!==(e=((t=t||{level:"AA",size:"small"}).level||"AA").toUpperCase())&&"AAA"!==e&&(e="AA"),"small"!==(n=(t.size||"small").toLowerCase())&&"large"!==n&&(n="small"),{level:e,size:n}}(n)).level+r.size){case"AAsmall":case"AAAlarge":o=a>=4.5;break;case"AAlarge":o=a>=3;break;case"AAAsmall":o=a>=7}return o},i.mostReadable=function(t,e,n){var r,o,a,s,c=null,u=0;o=(n=n||{}).includeFallbackColors,a=n.level,s=n.size;for(var l=0;l<e.length;l++)(r=i.readability(t,e[l]))>u&&(u=r,c=i(e[l]));return i.isReadable(t,c,{level:a,size:s})||!o?c:(n.includeFallbackColors=!1,i.mostReadable(t,["#fff","#000"],n))};var D=i.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},U=i.hexNames=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[t[n]]=n);return e}(D),z=function(){var t="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)",e="[\\s|\\(]+("+t+")[,|\\s]+("+t+")[,|\\s]+("+t+")\\s*\\)?",n="[\\s|\\(]+("+t+")[,|\\s]+("+t+")[,|\\s]+("+t+")[,|\\s]+("+t+")\\s*\\)?";return{CSS_UNIT:new RegExp(t),rgb:new RegExp("rgb"+e),rgba:new RegExp("rgba"+n),hsl:new RegExp("hsl"+e),hsla:new RegExp("hsla"+n),hsv:new RegExp("hsv"+e),hsva:new RegExp("hsva"+n),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/}}();void 0!==t&&t.exports?t.exports=i:void 0!==(r=function(){return i}.call(e,n,e,t))&&(t.exports=r)}(Math)},function(t,e,n){var r=n(67);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("0f73e73c",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-editable-input {\n  position: relative;\n}\n.vc-input__input {\n  padding: 0;\n  border: 0;\n  outline: none;\n}\n.vc-input__label {\n  text-transform: capitalize;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-editable-input"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.val,expression:"val"}],ref:"input",staticClass:"vc-input__input",attrs:{"aria-labelledby":t.labelId},domProps:{value:t.val},on:{keydown:t.handleKeyDown,input:[function(e){e.target.composing||(t.val=e.target.value)},t.update]}}),t._v(" "),n("span",{staticClass:"vc-input__label",attrs:{for:t.label,id:t.labelId}},[t._v(t._s(t.labelSpanText))]),t._v(" "),n("span",{staticClass:"vc-input__desc"},[t._v(t._s(t.desc))])])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-compact",attrs:{role:"application","aria-label":"Compact color picker"}},[n("ul",{staticClass:"vc-compact-colors",attrs:{role:"listbox"}},t._l(t.paletteUpperCase(t.palette),(function(e){return n("li",{key:e,staticClass:"vc-compact-color-item",class:{"vc-compact-color-item--white":"#FFFFFF"===e},style:{background:e},attrs:{role:"option","aria-label":"color:"+e,"aria-selected":e===t.pick},on:{click:function(n){return t.handlerClick(e)}}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e===t.pick,expression:"c === pick"}],staticClass:"vc-compact-dot"})])})),0)])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(37),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(73),s=!1,c=function(t){s||n(71)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/Grayscale.vue",e.default=u.exports},function(t,e,n){var r=n(72);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("21ddbb74",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-grayscale {\n  width: 125px;\n  border-radius: 2px;\n  box-shadow: 0 2px 15px rgba(0,0,0,.12), 0 2px 10px rgba(0,0,0,.16);\n  background-color: #fff;\n}\n.vc-grayscale-colors {\n  border-radius: 2px;\n  overflow: hidden;\n  padding: 0;\n  margin: 0;\n}\n.vc-grayscale-color-item {\n  list-style: none;\n  width: 25px;\n  height: 25px;\n  float: left;\n  position: relative;\n  cursor: pointer;\n}\n.vc-grayscale-color-item--white .vc-grayscale-dot {\n  background: #000;\n}\n.vc-grayscale-dot {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 6px;\n  height: 6px;\n  margin: -3px 0 0 -2px;\n  border-radius: 50%;\n  opacity: 1;\n  background: #fff;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-grayscale",attrs:{role:"application","aria-label":"Grayscale color picker"}},[n("ul",{staticClass:"vc-grayscale-colors",attrs:{role:"listbox"}},t._l(t.paletteUpperCase(t.palette),(function(e){return n("li",{key:e,staticClass:"vc-grayscale-color-item",class:{"vc-grayscale-color-item--white":"#FFFFFF"==e},style:{background:e},attrs:{role:"option","aria-label":"Color:"+e,"aria-selected":e===t.pick},on:{click:function(n){return t.handlerClick(e)}}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e===t.pick,expression:"c === pick"}],staticClass:"vc-grayscale-dot"})])})),0)])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(38),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(77),s=!1,c=function(t){s||n(75)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/Material.vue",e.default=u.exports},function(t,e,n){var r=n(76);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("1ff3af73",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,'\n.vc-material {\n  width: 98px;\n  height: 98px;\n  padding: 16px;\n  font-family: "Roboto";\n  position: relative;\n  border-radius: 2px;\n  box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\n  background-color: #fff;\n}\n.vc-material .vc-input__input {\n  width: 100%;\n  margin-top: 12px;\n  font-size: 15px;\n  color: #333;\n  height: 30px;\n}\n.vc-material .vc-input__label {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 11px;\n  color: #999;\n  text-transform: capitalize;\n}\n.vc-material-hex {\n  border-bottom-width: 2px;\n  border-bottom-style: solid;\n}\n.vc-material-split {\n  display: flex;\n  margin-right: -10px;\n  padding-top: 11px;\n}\n.vc-material-third {\n  flex: 1;\n  padding-right: 10px;\n}\n',""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-material",attrs:{role:"application","aria-label":"Material color picker"}},[n("ed-in",{staticClass:"vc-material-hex",style:{borderColor:t.colors.hex},attrs:{label:"hex"},on:{change:t.onChange},model:{value:t.colors.hex,callback:function(e){t.$set(t.colors,"hex",e)},expression:"colors.hex"}}),t._v(" "),n("div",{staticClass:"vc-material-split"},[n("div",{staticClass:"vc-material-third"},[n("ed-in",{attrs:{label:"r"},on:{change:t.onChange},model:{value:t.colors.rgba.r,callback:function(e){t.$set(t.colors.rgba,"r",e)},expression:"colors.rgba.r"}})],1),t._v(" "),n("div",{staticClass:"vc-material-third"},[n("ed-in",{attrs:{label:"g"},on:{change:t.onChange},model:{value:t.colors.rgba.g,callback:function(e){t.$set(t.colors.rgba,"g",e)},expression:"colors.rgba.g"}})],1),t._v(" "),n("div",{staticClass:"vc-material-third"},[n("ed-in",{attrs:{label:"b"},on:{change:t.onChange},model:{value:t.colors.rgba.b,callback:function(e){t.$set(t.colors.rgba,"b",e)},expression:"colors.rgba.b"}})],1)])],1)};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(39),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(114),s=!1,c=function(t){s||n(79)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/Slider.vue",e.default=u.exports},function(t,e,n){var r=n(80);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("7982aa43",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-slider {\n  position: relative;\n  width: 410px;\n}\n.vc-slider-hue-warp {\n  height: 12px;\n  position: relative;\n}\n.vc-slider-hue-warp .vc-hue-picker {\n  width: 14px;\n  height: 14px;\n  border-radius: 6px;\n  transform: translate(-7px, -2px);\n  background-color: rgb(248, 248, 248);\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.37);\n}\n.vc-slider-swatches {\n  display: flex;\n  margin-top: 20px;\n}\n.vc-slider-swatch {\n  margin-right: 1px;\n  flex: 1;\n  width: 20%;\n}\n.vc-slider-swatch:first-child {\n  margin-right: 1px;\n}\n.vc-slider-swatch:first-child .vc-slider-swatch-picker {\n  border-radius: 2px 0px 0px 2px;\n}\n.vc-slider-swatch:last-child {\n  margin-right: 0;\n}\n.vc-slider-swatch:last-child .vc-slider-swatch-picker {\n  border-radius: 0px 2px 2px 0px;\n}\n.vc-slider-swatch-picker {\n  cursor: pointer;\n  height: 12px;\n}\n.vc-slider-swatch:nth-child(n) .vc-slider-swatch-picker.vc-slider-swatch-picker--active {\n  transform: scaleY(1.8);\n  border-radius: 3.6px/2px;\n}\n.vc-slider-swatch-picker--white {\n  box-shadow: inset 0 0 0 1px #ddd;\n}\n.vc-slider-swatch-picker--active.vc-slider-swatch-picker--white {\n  box-shadow: inset 0 0 0 0.6px #ddd;\n}\n",""])},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var o=r(n(82)),i=r(n(100)),a="function"==typeof i.default&&"symbol"==typeof o.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};e.default="function"==typeof i.default&&"symbol"===a(o.default)?function(t){return void 0===t?"undefined":a(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":a(t)}},function(t,e,n){t.exports={default:n(83),__esModule:!0}},function(t,e,n){n(84),n(96),t.exports=n(32).f("iterator")},function(t,e,n){"use strict";var r=n(85)(!0);n(40)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(23),o=n(24);t.exports=function(t){return function(e,n){var i,a,s=String(o(e)),c=r(n),u=s.length;return c<0||c>=u?t?"":void 0:(i=s.charCodeAt(c))<55296||i>56319||c+1===u||(a=s.charCodeAt(c+1))<56320||a>57343?t?s.charAt(c):i:t?s.slice(c,c+2):a-56320+(i-55296<<10)+65536}}},function(t,e,n){var r=n(87);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){"use strict";var r=n(45),o=n(18),i=n(31),a={};n(7)(a,n(11)("iterator"),(function(){return this})),t.exports=function(t,e,n){t.prototype=r(a,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){var r=n(8),o=n(16),i=n(27);t.exports=n(9)?Object.defineProperties:function(t,e){o(t);for(var n,a=i(e),s=a.length,c=0;s>c;)r.f(t,n=a[c++],e[n]);return t}},function(t,e,n){var r=n(47);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){var r=n(10),o=n(92),i=n(93);t.exports=function(t){return function(e,n,a){var s,c=r(e),u=o(c.length),l=i(a,u);if(t&&n!=n){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((t||l in c)&&c[l]===n)return t||l||0;return!t&&-1}}},function(t,e,n){var r=n(23),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(23),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(4).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(6),o=n(48),i=n(28)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){n(97);for(var r=n(4),o=n(7),i=n(26),a=n(11)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),c=0;c<s.length;c++){var u=s[c],l=r[u],f=l&&l.prototype;f&&!f[a]&&o(f,a,u),i[u]=i.Array}},function(t,e,n){"use strict";var r=n(98),o=n(99),i=n(26),a=n(10);t.exports=n(40)(Array,"Array",(function(t,e){this._t=a(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){t.exports={default:n(101),__esModule:!0}},function(t,e,n){n(102),n(108),n(109),n(110),t.exports=n(15).Symbol},function(t,e,n){"use strict";var r=n(4),o=n(6),i=n(9),a=n(41),s=n(44),c=n(103).KEY,u=n(17),l=n(29),f=n(31),p=n(19),d=n(11),h=n(32),v=n(33),g=n(104),b=n(105),m=n(16),y=n(12),x=n(48),_=n(10),w=n(25),A=n(18),C=n(45),S=n(106),k=n(107),O=n(49),E=n(8),I=n(27),M=k.f,T=E.f,j=S.f,R=r.Symbol,P=r.JSON,B=P&&P.stringify,$=d("_hidden"),F=d("toPrimitive"),L={}.propertyIsEnumerable,N=l("symbol-registry"),D=l("symbols"),U=l("op-symbols"),z=Object.prototype,H="function"==typeof R&&!!O.f,G=r.QObject,W=!G||!G.prototype||!G.prototype.findChild,V=i&&u((function(){return 7!=C(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=M(z,e);r&&delete z[e],T(t,e,n),r&&t!==z&&T(z,e,r)}:T,q=function(t){var e=D[t]=C(R.prototype);return e._k=t,e},Y=H&&"symbol"==typeof R.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof R},K=function(t,e,n){return t===z&&K(U,e,n),m(t),e=w(e,!0),m(n),o(D,e)?(n.enumerable?(o(t,$)&&t[$][e]&&(t[$][e]=!1),n=C(n,{enumerable:A(0,!1)})):(o(t,$)||T(t,$,A(1,{})),t[$][e]=!0),V(t,e,n)):T(t,e,n)},X=function(t,e){m(t);for(var n,r=g(e=_(e)),o=0,i=r.length;i>o;)K(t,n=r[o++],e[n]);return t},Z=function(t){var e=L.call(this,t=w(t,!0));return!(this===z&&o(D,t)&&!o(U,t))&&(!(e||!o(this,t)||!o(D,t)||o(this,$)&&this[$][t])||e)},J=function(t,e){if(t=_(t),e=w(e,!0),t!==z||!o(D,e)||o(U,e)){var n=M(t,e);return!n||!o(D,e)||o(t,$)&&t[$][e]||(n.enumerable=!0),n}},Q=function(t){for(var e,n=j(_(t)),r=[],i=0;n.length>i;)o(D,e=n[i++])||e==$||e==c||r.push(e);return r},tt=function(t){for(var e,n=t===z,r=j(n?U:_(t)),i=[],a=0;r.length>a;)!o(D,e=r[a++])||n&&!o(z,e)||i.push(D[e]);return i};H||(R=function(){if(this instanceof R)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===z&&e.call(U,n),o(this,$)&&o(this[$],t)&&(this[$][t]=!1),V(this,t,A(1,n))};return i&&W&&V(z,t,{configurable:!0,set:e}),q(t)},s(R.prototype,"toString",(function(){return this._k})),k.f=J,E.f=K,n(50).f=S.f=Q,n(34).f=Z,O.f=tt,i&&!n(14)&&s(z,"propertyIsEnumerable",Z,!0),h.f=function(t){return q(d(t))}),a(a.G+a.W+a.F*!H,{Symbol:R});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)d(et[nt++]);for(var rt=I(d.store),ot=0;rt.length>ot;)v(rt[ot++]);a(a.S+a.F*!H,"Symbol",{for:function(t){return o(N,t+="")?N[t]:N[t]=R(t)},keyFor:function(t){if(!Y(t))throw TypeError(t+" is not a symbol!");for(var e in N)if(N[e]===t)return e},useSetter:function(){W=!0},useSimple:function(){W=!1}}),a(a.S+a.F*!H,"Object",{create:function(t,e){return void 0===e?C(t):X(C(t),e)},defineProperty:K,defineProperties:X,getOwnPropertyDescriptor:J,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var it=u((function(){O.f(1)}));a(a.S+a.F*it,"Object",{getOwnPropertySymbols:function(t){return O.f(x(t))}}),P&&a(a.S+a.F*(!H||u((function(){var t=R();return"[null]"!=B([t])||"{}"!=B({a:t})||"{}"!=B(Object(t))}))),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(y(e)||void 0!==t)&&!Y(t))return b(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!Y(e))return e}),r[1]=e,B.apply(P,r)}}),R.prototype[F]||n(7)(R.prototype,F,R.prototype.valueOf),f(R,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){var r=n(19)("meta"),o=n(12),i=n(6),a=n(8).f,s=0,c=Object.isExtensible||function(){return!0},u=!n(17)((function(){return c(Object.preventExtensions({}))})),l=function(t){a(t,r,{value:{i:"O"+ ++s,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!e)return"E";l(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!c(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return u&&f.NEED&&c(t)&&!i(t,r)&&l(t),t}}},function(t,e,n){var r=n(27),o=n(49),i=n(34);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var a,s=n(t),c=i.f,u=0;s.length>u;)c.call(t,a=s[u++])&&e.push(a);return e}},function(t,e,n){var r=n(47);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(10),o=n(50).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(34),o=n(18),i=n(10),a=n(25),s=n(6),c=n(42),u=Object.getOwnPropertyDescriptor;e.f=n(9)?u:function(t,e){if(t=i(t),e=a(e,!0),c)try{return u(t,e)}catch(t){}if(s(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(33)("asyncIterator")},function(t,e,n){n(33)("observable")},function(t,e,n){var r=n(112);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("7c5f1a1c",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-hue {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  border-radius: 2px;\n}\n.vc-hue--horizontal {\n  background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n}\n.vc-hue--vertical {\n  background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n}\n.vc-hue-container {\n  cursor: pointer;\n  margin: 0 2px;\n  position: relative;\n  height: 100%;\n}\n.vc-hue-pointer {\n  z-index: 2;\n  position: absolute;\n}\n.vc-hue-picker {\n  cursor: pointer;\n  margin-top: 1px;\n  width: 4px;\n  border-radius: 1px;\n  height: 8px;\n  box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n  background: #fff;\n  transform: translateX(-2px) ;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:["vc-hue",t.directionClass]},[n("div",{ref:"container",staticClass:"vc-hue-container",attrs:{role:"slider","aria-valuenow":t.colors.hsl.h,"aria-valuemin":"0","aria-valuemax":"360"},on:{mousedown:t.handleMouseDown,touchmove:t.handleChange,touchstart:t.handleChange}},[n("div",{staticClass:"vc-hue-pointer",style:{top:t.pointerTop,left:t.pointerLeft},attrs:{role:"presentation"}},[n("div",{staticClass:"vc-hue-picker"})])])])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-slider",attrs:{role:"application","aria-label":"Slider color picker"}},[n("div",{staticClass:"vc-slider-hue-warp"},[n("hue",{on:{change:t.hueChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),n("div",{staticClass:"vc-slider-swatches",attrs:{role:"group"}},t._l(t.normalizedSwatches,(function(e,r){return n("div",{key:r,staticClass:"vc-slider-swatch",attrs:{"data-index":r,"aria-label":"color:"+t.colors.hex,role:"button"},on:{click:function(n){return t.handleSwClick(r,e)}}},[n("div",{staticClass:"vc-slider-swatch-picker",class:{"vc-slider-swatch-picker--active":t.isActive(e,r),"vc-slider-swatch-picker--white":1===e.l},style:{background:"hsl("+t.colors.hsl.h+", "+100*e.s+"%, "+100*e.l+"%)"}})])})),0)])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(52),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(119),s=!1,c=function(t){s||n(116)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/Swatches.vue",e.default=u.exports},function(t,e,n){var r=n(117);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("10f839a2",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-swatches {\n  width: 320px;\n  height: 240px;\n  overflow-y: scroll;\n  background-color: #fff;\n  box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\n}\n.vc-swatches-box {\n  padding: 16px 0 6px 16px;\n  overflow: hidden;\n}\n.vc-swatches-color-group {\n  padding-bottom: 10px;\n  width: 40px;\n  float: left;\n  margin-right: 10px;\n}\n.vc-swatches-color-it {\n  box-sizing: border-box;\n  width: 40px;\n  height: 24px;\n  cursor: pointer;\n  background: #880e4f;\n  margin-bottom: 1px;\n  overflow: hidden;\n  -ms-border-radius: 2px 2px 0 0;\n  -moz-border-radius: 2px 2px 0 0;\n  -o-border-radius: 2px 2px 0 0;\n  -webkit-border-radius: 2px 2px 0 0;\n  border-radius: 2px 2px 0 0;\n}\n.vc-swatches-color--white {\n  border: 1px solid #DDD;\n}\n.vc-swatches-pick {\n  fill: rgb(255, 255, 255);\n  margin-left: 8px;\n  display: block;\n}\n.vc-swatches-color--white .vc-swatches-pick {\n  fill: rgb(51, 51, 51);\n}\n",""])},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n.d(e,"red",(function(){return r})),n.d(e,"pink",(function(){return o})),n.d(e,"purple",(function(){return i})),n.d(e,"deepPurple",(function(){return a})),n.d(e,"indigo",(function(){return s})),n.d(e,"blue",(function(){return c})),n.d(e,"lightBlue",(function(){return u})),n.d(e,"cyan",(function(){return l})),n.d(e,"teal",(function(){return f})),n.d(e,"green",(function(){return p})),n.d(e,"lightGreen",(function(){return d})),n.d(e,"lime",(function(){return h})),n.d(e,"yellow",(function(){return v})),n.d(e,"amber",(function(){return g})),n.d(e,"orange",(function(){return b})),n.d(e,"deepOrange",(function(){return m})),n.d(e,"brown",(function(){return y})),n.d(e,"grey",(function(){return x})),n.d(e,"blueGrey",(function(){return _})),n.d(e,"darkText",(function(){return w})),n.d(e,"lightText",(function(){return A})),n.d(e,"darkIcons",(function(){return C})),n.d(e,"lightIcons",(function(){return S})),n.d(e,"white",(function(){return k})),n.d(e,"black",(function(){return O}));var r={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",a100:"#ff8a80",a200:"#ff5252",a400:"#ff1744",a700:"#d50000"},o={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",a100:"#ff80ab",a200:"#ff4081",a400:"#f50057",a700:"#c51162"},i={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",a100:"#ea80fc",a200:"#e040fb",a400:"#d500f9",a700:"#aa00ff"},a={50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",a100:"#b388ff",a200:"#7c4dff",a400:"#651fff",a700:"#6200ea"},s={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",a100:"#8c9eff",a200:"#536dfe",a400:"#3d5afe",a700:"#304ffe"},c={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",a100:"#82b1ff",a200:"#448aff",a400:"#2979ff",a700:"#2962ff"},u={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",a100:"#80d8ff",a200:"#40c4ff",a400:"#00b0ff",a700:"#0091ea"},l={50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",a100:"#84ffff",a200:"#18ffff",a400:"#00e5ff",a700:"#00b8d4"},f={50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",a100:"#a7ffeb",a200:"#64ffda",a400:"#1de9b6",a700:"#00bfa5"},p={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",a100:"#b9f6ca",a200:"#69f0ae",a400:"#00e676",a700:"#00c853"},d={50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",a100:"#ccff90",a200:"#b2ff59",a400:"#76ff03",a700:"#64dd17"},h={50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",a100:"#f4ff81",a200:"#eeff41",a400:"#c6ff00",a700:"#aeea00"},v={50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",a100:"#ffff8d",a200:"#ffff00",a400:"#ffea00",a700:"#ffd600"},g={50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",a100:"#ffe57f",a200:"#ffd740",a400:"#ffc400",a700:"#ffab00"},b={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",a100:"#ffd180",a200:"#ffab40",a400:"#ff9100",a700:"#ff6d00"},m={50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",a100:"#ff9e80",a200:"#ff6e40",a400:"#ff3d00",a700:"#dd2c00"},y={50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723"},x={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121"},_={50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238"},w={primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",dividers:"rgba(0, 0, 0, 0.12)"},A={primary:"rgba(255, 255, 255, 1)",secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",dividers:"rgba(255, 255, 255, 0.12)"},C={active:"rgba(0, 0, 0, 0.54)",inactive:"rgba(0, 0, 0, 0.38)"},S={active:"rgba(255, 255, 255, 1)",inactive:"rgba(255, 255, 255, 0.5)"},k="#ffffff",O="#000000";e.default={red:r,pink:o,purple:i,deepPurple:a,indigo:s,blue:c,lightBlue:u,cyan:l,teal:f,green:p,lightGreen:d,lime:h,yellow:v,amber:g,orange:b,deepOrange:m,brown:y,grey:x,blueGrey:_,darkText:w,lightText:A,darkIcons:C,lightIcons:S,white:k,black:O}},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-swatches",attrs:{role:"application","aria-label":"Swatches color picker","data-pick":t.pick}},[n("div",{staticClass:"vc-swatches-box",attrs:{role:"listbox"}},t._l(t.palette,(function(e,r){return n("div",{key:r,staticClass:"vc-swatches-color-group"},t._l(e,(function(e){return n("div",{key:e,class:["vc-swatches-color-it",{"vc-swatches-color--white":"#FFFFFF"===e}],style:{background:e},attrs:{role:"option","aria-label":"Color:"+e,"aria-selected":t.equal(e),"data-color":e},on:{click:function(n){return t.handlerClick(e)}}},[n("div",{directives:[{name:"show",rawName:"v-show",value:t.equal(e),expression:"equal(c)"}],staticClass:"vc-swatches-pick"},[n("svg",{staticStyle:{width:"24px",height:"24px"},attrs:{viewBox:"0 0 24 24"}},[n("path",{attrs:{d:"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"}})])])])})),0)})),0)])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(53),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(134),s=!1,c=function(t){s||n(121)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/Photoshop.vue",e.default=u.exports},function(t,e,n){var r=n(122);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("080365d4",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,'\n.vc-photoshop {\n  background: #DCDCDC;\n  border-radius: 4px;\n  box-shadow: 0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15);\n  box-sizing: initial;\n  width: 513px;\n  font-family: Roboto;\n}\n.vc-photoshop__disable-fields {\n  width: 390px;\n}\n.vc-ps-head {\n  background-image: linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%);\n  border-bottom: 1px solid #B1B1B1;\n  box-shadow: inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02);\n  height: 23px;\n  line-height: 24px;\n  border-radius: 4px 4px 0 0;\n  font-size: 13px;\n  color: #4D4D4D;\n  text-align: center;\n}\n.vc-ps-body {\n  padding: 15px;\n  display: flex;\n}\n.vc-ps-saturation-wrap {\n  width: 256px;\n  height: 256px;\n  position: relative;\n  border: 2px solid #B3B3B3;\n  border-bottom: 2px solid #F0F0F0;\n  overflow: hidden;\n}\n.vc-ps-saturation-wrap .vc-saturation-circle {\n  width: 12px;\n  height: 12px;\n}\n.vc-ps-hue-wrap {\n  position: relative;\n  height: 256px;\n  width: 19px;\n  margin-left: 10px;\n  border: 2px solid #B3B3B3;\n  border-bottom: 2px solid #F0F0F0;\n}\n.vc-ps-hue-pointer {\n  position: relative;\n}\n.vc-ps-hue-pointer--left,\n.vc-ps-hue-pointer--right {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 5px 0 5px 8px;\n  border-color: transparent transparent transparent #555;\n}\n.vc-ps-hue-pointer--left:after,\n.vc-ps-hue-pointer--right:after {\n  content: "";\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 4px 0 4px 6px;\n  border-color: transparent transparent transparent #fff;\n  position: absolute;\n  top: 1px;\n  left: 1px;\n  transform: translate(-8px, -5px);\n}\n.vc-ps-hue-pointer--left {\n  transform: translate(-13px, -4px);\n}\n.vc-ps-hue-pointer--right {\n  transform: translate(20px, -4px) rotate(180deg);\n}\n.vc-ps-controls {\n  width: 180px;\n  margin-left: 10px;\n  display: flex;\n}\n.vc-ps-controls__disable-fields {\n  width: auto;\n}\n.vc-ps-actions {\n  margin-left: 20px;\n  flex: 1;\n}\n.vc-ps-ac-btn {\n  cursor: pointer;\n  background-image: linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%);\n  border: 1px solid #878787;\n  border-radius: 2px;\n  height: 20px;\n  box-shadow: 0 1px 0 0 #EAEAEA;\n  font-size: 14px;\n  color: #000;\n  line-height: 20px;\n  text-align: center;\n  margin-bottom: 10px;\n}\n.vc-ps-previews {\n  width: 60px;\n}\n.vc-ps-previews__swatches {\n  border: 1px solid #B3B3B3;\n  border-bottom: 1px solid #F0F0F0;\n  margin-bottom: 2px;\n  margin-top: 1px;\n}\n.vc-ps-previews__pr-color {\n  height: 34px;\n  box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000;\n}\n.vc-ps-previews__label {\n  font-size: 14px;\n  color: #000;\n  text-align: center;\n}\n.vc-ps-fields {\n  padding-top: 5px;\n  padding-bottom: 9px;\n  width: 80px;\n  position: relative;\n}\n.vc-ps-fields .vc-input__input {\n  margin-left: 40%;\n  width: 40%;\n  height: 18px;\n  border: 1px solid #888888;\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC;\n  margin-bottom: 5px;\n  font-size: 13px;\n  padding-left: 3px;\n  margin-right: 10px;\n}\n.vc-ps-fields .vc-input__label, .vc-ps-fields .vc-input__desc {\n  top: 0;\n  text-transform: uppercase;\n  font-size: 13px;\n  height: 18px;\n  line-height: 22px;\n  position: absolute;\n}\n.vc-ps-fields .vc-input__label {\n  left: 0;\n  width: 34px;\n}\n.vc-ps-fields .vc-input__desc {\n  right: 0;\n  width: 0;\n}\n.vc-ps-fields__divider {\n  height: 5px;\n}\n.vc-ps-fields__hex .vc-input__input {\n  margin-left: 20%;\n  width: 80%;\n  height: 18px;\n  border: 1px solid #888888;\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC;\n  margin-bottom: 6px;\n  font-size: 13px;\n  padding-left: 3px;\n}\n.vc-ps-fields__hex .vc-input__label {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 14px;\n  text-transform: uppercase;\n  font-size: 13px;\n  height: 18px;\n  line-height: 22px;\n}\n',""])},function(t,e,n){var r=n(124);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("b5380e52",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-saturation,\n.vc-saturation--white,\n.vc-saturation--black {\n  cursor: pointer;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n.vc-saturation--white {\n  background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n}\n.vc-saturation--black {\n  background: linear-gradient(to top, #000, rgba(0,0,0,0));\n}\n.vc-saturation-pointer {\n  cursor: pointer;\n  position: absolute;\n}\n.vc-saturation-circle {\n  cursor: head;\n  width: 4px;\n  height: 4px;\n  box-shadow: 0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3), 0 0 1px 2px rgba(0,0,0,.4);\n  border-radius: 50%;\n  transform: translate(-2px, -2px);\n}\n",""])},function(t,e){t.exports=function(t,e,n){return e<n?t<e?e:t>n?n:t:t<n?n:t>e?e:t}},function(t,e){function r(t,e,n){function r(e){var n=p,r=d;return p=d=void 0,_=e,v=t.apply(r,n)}function s(t){return _=t,g=setTimeout(u,e),w?r(t):v}function c(t){var n=t-b;return void 0===b||n>=e||n<0||A&&t-_>=h}function u(){var t=x();if(c(t))return l(t);g=setTimeout(u,function(t){var n=e-(t-b);return A?y(n,h-(t-_)):n}(t))}function l(t){return g=void 0,C&&p?r(t):(p=d=void 0,v)}function f(){var t=x(),n=c(t);if(p=arguments,d=this,b=t,n){if(void 0===g)return s(b);if(A)return g=setTimeout(u,e),r(b)}return void 0===g&&(g=setTimeout(u,e)),v}var p,d,h,v,g,b,_=0,w=!1,A=!1,C=!0;if("function"!=typeof t)throw new TypeError(a);return e=i(e)||0,o(n)&&(w=!!n.leading,h=(A="maxWait"in n)?m(i(n.maxWait)||0,e):h,C="trailing"in n?!!n.trailing:C),f.cancel=function(){void 0!==g&&clearTimeout(g),_=0,p=b=d=g=void 0},f.flush=function(){return void 0===g?v:l(x())},f}function o(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function i(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&b.call(t)==c}(t))return s;if(o(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=o(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(u,"");var n=f.test(t);return n||p.test(t)?d(t.slice(2),n?2:8):l.test(t)?s:+t}var a="Expected a function",s=NaN,c="[object Symbol]",u=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,f=/^0b[01]+$/i,p=/^0o[0-7]+$/i,d=parseInt,h="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,v="object"==typeof self&&self&&self.Object===Object&&self,g=h||v||Function("return this")(),b=Object.prototype.toString,m=Math.max,y=Math.min,x=function(){return g.Date.now()};t.exports=function(t,e,n){var i=!0,s=!0;if("function"!=typeof t)throw new TypeError(a);return o(n)&&(i="leading"in n?!!n.leading:i,s="trailing"in n?!!n.trailing:s),r(t,e,{leading:i,maxWait:e,trailing:s})}},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{ref:"container",staticClass:"vc-saturation",style:{background:t.bgColor},on:{mousedown:t.handleMouseDown,touchmove:t.handleChange,touchstart:t.handleChange}},[n("div",{staticClass:"vc-saturation--white"}),t._v(" "),n("div",{staticClass:"vc-saturation--black"}),t._v(" "),n("div",{staticClass:"vc-saturation-pointer",style:{top:t.pointerTop,left:t.pointerLeft}},[n("div",{staticClass:"vc-saturation-circle"})])])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){var r=n(129);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("4dc1b086",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-alpha {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n}\n.vc-alpha-checkboard-wrap {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  overflow: hidden;\n}\n.vc-alpha-gradient {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n}\n.vc-alpha-container {\n  cursor: pointer;\n  position: relative;\n  z-index: 2;\n  height: 100%;\n  margin: 0 3px;\n}\n.vc-alpha-pointer {\n  z-index: 2;\n  position: absolute;\n}\n.vc-alpha-picker {\n  cursor: pointer;\n  width: 4px;\n  border-radius: 1px;\n  height: 8px;\n  box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n  background: #fff;\n  margin-top: 1px;\n  transform: translateX(-2px);\n}\n",""])},function(t,e,n){var r=n(131);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("7e15c05b",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-checkerboard {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  background-size: contain;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{staticClass:"vc-checkerboard",style:t.bgStyle})};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-alpha"},[n("div",{staticClass:"vc-alpha-checkboard-wrap"},[n("checkboard")],1),t._v(" "),n("div",{staticClass:"vc-alpha-gradient",style:{background:t.gradientColor}}),t._v(" "),n("div",{ref:"container",staticClass:"vc-alpha-container",on:{mousedown:t.handleMouseDown,touchmove:t.handleChange,touchstart:t.handleChange}},[n("div",{staticClass:"vc-alpha-pointer",style:{left:100*t.colors.a+"%"}},[n("div",{staticClass:"vc-alpha-picker"})])])])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:["vc-photoshop",t.disableFields?"vc-photoshop__disable-fields":""],attrs:{role:"application","aria-label":"PhotoShop color picker"}},[n("div",{staticClass:"vc-ps-head",attrs:{role:"heading"}},[t._v(t._s(t.head))]),t._v(" "),n("div",{staticClass:"vc-ps-body"},[n("div",{staticClass:"vc-ps-saturation-wrap"},[n("saturation",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),n("div",{staticClass:"vc-ps-hue-wrap"},[n("hue",{attrs:{direction:"vertical"},on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}},[n("div",{staticClass:"vc-ps-hue-pointer"},[n("i",{staticClass:"vc-ps-hue-pointer--left"}),n("i",{staticClass:"vc-ps-hue-pointer--right"})])])],1),t._v(" "),n("div",{class:["vc-ps-controls",t.disableFields?"vc-ps-controls__disable-fields":""]},[n("div",{staticClass:"vc-ps-previews"},[n("div",{staticClass:"vc-ps-previews__label"},[t._v(t._s(t.newLabel))]),t._v(" "),n("div",{staticClass:"vc-ps-previews__swatches"},[n("div",{staticClass:"vc-ps-previews__pr-color",style:{background:t.colors.hex},attrs:{"aria-label":"New color is "+t.colors.hex}}),t._v(" "),n("div",{staticClass:"vc-ps-previews__pr-color",style:{background:t.currentColor},attrs:{"aria-label":"Current color is "+t.currentColor},on:{click:t.clickCurrentColor}})]),t._v(" "),n("div",{staticClass:"vc-ps-previews__label"},[t._v(t._s(t.currentLabel))])]),t._v(" "),t.disableFields?t._e():n("div",{staticClass:"vc-ps-actions"},[n("div",{staticClass:"vc-ps-ac-btn",attrs:{role:"button","aria-label":t.acceptLabel},on:{click:t.handleAccept}},[t._v(t._s(t.acceptLabel))]),t._v(" "),n("div",{staticClass:"vc-ps-ac-btn",attrs:{role:"button","aria-label":t.cancelLabel},on:{click:t.handleCancel}},[t._v(t._s(t.cancelLabel))]),t._v(" "),n("div",{staticClass:"vc-ps-fields"},[n("ed-in",{attrs:{label:"h",desc:"°",value:t.hsv.h},on:{change:t.inputChange}}),t._v(" "),n("ed-in",{attrs:{label:"s",desc:"%",value:t.hsv.s,max:100},on:{change:t.inputChange}}),t._v(" "),n("ed-in",{attrs:{label:"v",desc:"%",value:t.hsv.v,max:100},on:{change:t.inputChange}}),t._v(" "),n("div",{staticClass:"vc-ps-fields__divider"}),t._v(" "),n("ed-in",{attrs:{label:"r",value:t.colors.rgba.r},on:{change:t.inputChange}}),t._v(" "),n("ed-in",{attrs:{label:"g",value:t.colors.rgba.g},on:{change:t.inputChange}}),t._v(" "),n("ed-in",{attrs:{label:"b",value:t.colors.rgba.b},on:{change:t.inputChange}}),t._v(" "),n("div",{staticClass:"vc-ps-fields__divider"}),t._v(" "),n("ed-in",{staticClass:"vc-ps-fields__hex",attrs:{label:"#",value:t.hex},on:{change:t.inputChange}})],1),t._v(" "),t.hasResetButton?n("div",{staticClass:"vc-ps-ac-btn",attrs:{"aria-label":"reset"},on:{click:t.handleReset}},[t._v(t._s(t.resetLabel))]):t._e()])])])])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(57),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(138),s=!1,c=function(t){s||n(136)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/Sketch.vue",e.default=u.exports},function(t,e,n){var r=n(137);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("612c6604",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-sketch {\n  position: relative;\n  width: 200px;\n  padding: 10px 10px 0;\n  box-sizing: initial;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: 0 0 0 1px rgba(0, 0, 0, .15), 0 8px 16px rgba(0, 0, 0, .15);\n}\n.vc-sketch-saturation-wrap {\n  width: 100%;\n  padding-bottom: 75%;\n  position: relative;\n  overflow: hidden;\n}\n.vc-sketch-controls {\n  display: flex;\n}\n.vc-sketch-sliders {\n  padding: 4px 0;\n  flex: 1;\n}\n.vc-sketch-sliders .vc-hue,\n.vc-sketch-sliders .vc-alpha-gradient {\n  border-radius: 2px;\n}\n.vc-sketch-hue-wrap {\n  position: relative;\n  height: 10px;\n}\n.vc-sketch-alpha-wrap {\n  position: relative;\n  height: 10px;\n  margin-top: 4px;\n  overflow: hidden;\n}\n.vc-sketch-color-wrap {\n  width: 24px;\n  height: 24px;\n  position: relative;\n  margin-top: 4px;\n  margin-left: 4px;\n  border-radius: 3px;\n}\n.vc-sketch-active-color {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-radius: 2px;\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .15), inset 0 0 4px rgba(0, 0, 0, .25);\n  z-index: 2;\n}\n.vc-sketch-color-wrap .vc-checkerboard {\n  background-size: auto;\n}\n.vc-sketch-field {\n  display: flex;\n  padding-top: 4px;\n}\n.vc-sketch-field .vc-input__input {\n  width: 90%;\n  padding: 4px 0 3px 10%;\n  border: none;\n  box-shadow: inset 0 0 0 1px #ccc;\n  font-size: 10px;\n}\n.vc-sketch-field .vc-input__label {\n  display: block;\n  text-align: center;\n  font-size: 11px;\n  color: #222;\n  padding-top: 3px;\n  padding-bottom: 4px;\n  text-transform: capitalize;\n}\n.vc-sketch-field--single {\n  flex: 1;\n  padding-left: 6px;\n}\n.vc-sketch-field--double {\n  flex: 2;\n}\n.vc-sketch-presets {\n  margin-right: -10px;\n  margin-left: -10px;\n  padding-left: 10px;\n  padding-top: 10px;\n  border-top: 1px solid #eee;\n}\n.vc-sketch-presets-color {\n  border-radius: 3px;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n  margin: 0 10px 10px 0;\n  vertical-align: top;\n  cursor: pointer;\n  width: 16px;\n  height: 16px;\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .15);\n}\n.vc-sketch-presets-color .vc-checkerboard {\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .15);\n  border-radius: 3px;\n}\n.vc-sketch__disable-alpha .vc-sketch-color-wrap {\n  height: 10px;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:["vc-sketch",t.disableAlpha?"vc-sketch__disable-alpha":""],attrs:{role:"application","aria-label":"Sketch color picker"}},[n("div",{staticClass:"vc-sketch-saturation-wrap"},[n("saturation",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),n("div",{staticClass:"vc-sketch-controls"},[n("div",{staticClass:"vc-sketch-sliders"},[n("div",{staticClass:"vc-sketch-hue-wrap"},[n("hue",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-sketch-alpha-wrap"},[n("alpha",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1)]),t._v(" "),n("div",{staticClass:"vc-sketch-color-wrap"},[n("div",{staticClass:"vc-sketch-active-color",style:{background:t.activeColor},attrs:{"aria-label":"Current color is "+t.activeColor}}),t._v(" "),n("checkboard")],1)]),t._v(" "),t.disableFields?t._e():n("div",{staticClass:"vc-sketch-field"},[n("div",{staticClass:"vc-sketch-field--double"},[n("ed-in",{attrs:{label:"hex",value:t.hex},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-sketch-field--single"},[n("ed-in",{attrs:{label:"r",value:t.colors.rgba.r},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-sketch-field--single"},[n("ed-in",{attrs:{label:"g",value:t.colors.rgba.g},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-sketch-field--single"},[n("ed-in",{attrs:{label:"b",value:t.colors.rgba.b},on:{change:t.inputChange}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-sketch-field--single"},[n("ed-in",{attrs:{label:"a",value:t.colors.a,"arrow-offset":.01,max:1},on:{change:t.inputChange}})],1)]),t._v(" "),n("div",{staticClass:"vc-sketch-presets",attrs:{role:"group","aria-label":"A color preset, pick one to set as current color"}},[t._l(t.presetColors,(function(e){return[t.isTransparent(e)?n("div",{key:e,staticClass:"vc-sketch-presets-color",attrs:{"aria-label":"Color:"+e},on:{click:function(n){return t.handlePreset(e)}}},[n("checkboard")],1):n("div",{key:e,staticClass:"vc-sketch-presets-color",style:{background:e},attrs:{"aria-label":"Color:"+e},on:{click:function(n){return t.handlePreset(e)}}})]}))],2)])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(58),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(142),s=!1,c=function(t){s||n(140)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/Chrome.vue",e.default=u.exports},function(t,e,n){var r=n(141);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("1cd16048",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-chrome {\n  background: #fff;\n  border-radius: 2px;\n  box-shadow: 0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3);\n  box-sizing: initial;\n  width: 225px;\n  font-family: Menlo;\n  background-color: #fff;\n}\n.vc-chrome-controls {\n  display: flex;\n}\n.vc-chrome-color-wrap {\n  position: relative;\n  width: 36px;\n}\n.vc-chrome-active-color {\n  position: relative;\n  width: 30px;\n  height: 30px;\n  border-radius: 15px;\n  overflow: hidden;\n  z-index: 1;\n}\n.vc-chrome-color-wrap .vc-checkerboard {\n  width: 30px;\n  height: 30px;\n  border-radius: 15px;\n  background-size: auto;\n}\n.vc-chrome-sliders {\n  flex: 1;\n}\n.vc-chrome-fields-wrap {\n  display: flex;\n  padding-top: 16px;\n}\n.vc-chrome-fields {\n  display: flex;\n  margin-left: -6px;\n  flex: 1;\n}\n.vc-chrome-field {\n  padding-left: 6px;\n  width: 100%;\n}\n.vc-chrome-toggle-btn {\n  width: 32px;\n  text-align: right;\n  position: relative;\n}\n.vc-chrome-toggle-icon {\n  margin-right: -4px;\n  margin-top: 12px;\n  cursor: pointer;\n  position: relative;\n  z-index: 2;\n}\n.vc-chrome-toggle-icon-highlight {\n  position: absolute;\n  width: 24px;\n  height: 28px;\n  background: #eee;\n  border-radius: 4px;\n  top: 10px;\n  left: 12px;\n}\n.vc-chrome-hue-wrap {\n  position: relative;\n  height: 10px;\n  margin-bottom: 8px;\n}\n.vc-chrome-alpha-wrap {\n  position: relative;\n  height: 10px;\n}\n.vc-chrome-hue-wrap .vc-hue {\n  border-radius: 2px;\n}\n.vc-chrome-alpha-wrap .vc-alpha-gradient {\n  border-radius: 2px;\n}\n.vc-chrome-hue-wrap .vc-hue-picker, .vc-chrome-alpha-wrap .vc-alpha-picker {\n  width: 12px;\n  height: 12px;\n  border-radius: 6px;\n  transform: translate(-6px, -2px);\n  background-color: rgb(248, 248, 248);\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.37);\n}\n.vc-chrome-body {\n  padding: 16px 16px 12px;\n  background-color: #fff;\n}\n.vc-chrome-saturation-wrap {\n  width: 100%;\n  padding-bottom: 55%;\n  position: relative;\n  border-radius: 2px 2px 0 0;\n  overflow: hidden;\n}\n.vc-chrome-saturation-wrap .vc-saturation-circle {\n  width: 12px;\n  height: 12px;\n}\n.vc-chrome-fields .vc-input__input {\n  font-size: 11px;\n  color: #333;\n  width: 100%;\n  border-radius: 2px;\n  border: none;\n  box-shadow: inset 0 0 0 1px #dadada;\n  height: 21px;\n  text-align: center;\n}\n.vc-chrome-fields .vc-input__label {\n  text-transform: uppercase;\n  font-size: 11px;\n  line-height: 11px;\n  color: #969696;\n  text-align: center;\n  display: block;\n  margin-top: 12px;\n}\n.vc-chrome__disable-alpha .vc-chrome-active-color {\n  width: 18px;\n  height: 18px;\n}\n.vc-chrome__disable-alpha .vc-chrome-color-wrap {\n  width: 30px;\n}\n.vc-chrome__disable-alpha .vc-chrome-hue-wrap {\n  margin-top: 4px;\n  margin-bottom: 4px;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:["vc-chrome",t.disableAlpha?"vc-chrome__disable-alpha":""],attrs:{role:"application","aria-label":"Chrome color picker"}},[n("div",{staticClass:"vc-chrome-saturation-wrap"},[n("saturation",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-body"},[n("div",{staticClass:"vc-chrome-controls"},[n("div",{staticClass:"vc-chrome-color-wrap"},[n("div",{staticClass:"vc-chrome-active-color",style:{background:t.activeColor},attrs:{"aria-label":"current color is "+t.colors.hex}}),t._v(" "),t.disableAlpha?t._e():n("checkboard")],1),t._v(" "),n("div",{staticClass:"vc-chrome-sliders"},[n("div",{staticClass:"vc-chrome-hue-wrap"},[n("hue",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-chrome-alpha-wrap"},[n("alpha",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1)])]),t._v(" "),t.disableFields?t._e():n("div",{staticClass:"vc-chrome-fields-wrap"},[n("div",{directives:[{name:"show",rawName:"v-show",value:0===t.fieldsIndex,expression:"fieldsIndex === 0"}],staticClass:"vc-chrome-fields"},[n("div",{staticClass:"vc-chrome-field"},[t.hasAlpha?t._e():n("ed-in",{attrs:{label:"hex",value:t.colors.hex},on:{change:t.inputChange}}),t._v(" "),t.hasAlpha?n("ed-in",{attrs:{label:"hex",value:t.colors.hex8},on:{change:t.inputChange}}):t._e()],1)]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:1===t.fieldsIndex,expression:"fieldsIndex === 1"}],staticClass:"vc-chrome-fields"},[n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"r",value:t.colors.rgba.r},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"g",value:t.colors.rgba.g},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"b",value:t.colors.rgba.b},on:{change:t.inputChange}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"a",value:t.colors.a,"arrow-offset":.01,max:1},on:{change:t.inputChange}})],1)]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:2===t.fieldsIndex,expression:"fieldsIndex === 2"}],staticClass:"vc-chrome-fields"},[n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"h",value:t.hsl.h},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"s",value:t.hsl.s},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"l",value:t.hsl.l},on:{change:t.inputChange}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"a",value:t.colors.a,"arrow-offset":.01,max:1},on:{change:t.inputChange}})],1)]),t._v(" "),n("div",{staticClass:"vc-chrome-toggle-btn",attrs:{role:"button","aria-label":"Change another color definition"},on:{click:t.toggleViews}},[n("div",{staticClass:"vc-chrome-toggle-icon"},[n("svg",{staticStyle:{width:"24px",height:"24px"},attrs:{viewBox:"0 0 24 24"},on:{mouseover:t.showHighlight,mouseenter:t.showHighlight,mouseout:t.hideHighlight}},[n("path",{attrs:{fill:"#333",d:"M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"}})])]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:t.highlight,expression:"highlight"}],staticClass:"vc-chrome-toggle-icon-highlight"})])])])])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(59),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var a=n(146),s=!1,c=function(t){s||n(144)},u=n(2)(o.a,a.a,!1,c,null,null);u.options.__file="src/components/Twitter.vue",e.default=u.exports},function(t,e,n){var r=n(145);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("669a48a5",r,!1,{})},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-twitter {\n  background: #fff;\n  border: 0 solid rgba(0,0,0,0.25);\n  box-shadow: 0 1px 4px rgba(0,0,0,0.25);\n  border-radius: 4px;\n  position: relative;\n}\n.vc-twitter-triangle {\n  width: 0px;\n  height: 0px;\n  border-style: solid;\n  border-width: 0 9px 10px 9px;\n  border-color: transparent transparent #fff transparent;\n  position: absolute;\n}\n.vc-twitter-triangle-shadow {\n  width: 0px;\n  height: 0px;\n  border-style: solid;\n  border-width: 0 9px 10px 9px;\n  border-color: transparent transparent rgba(0, 0, 0, .1) transparent;\n  position: absolute;\n}\n.vc-twitter-body {\n  padding: 15px 9px 9px 15px;\n}\n.vc-twitter .vc-editable-input {\n  position: relative;\n}\n.vc-twitter .vc-editable-input input {\n  width: 100px;\n  font-size: 14px;\n  color: #666;\n  border: 0px;\n  outline: none;\n  height: 28px;\n  box-shadow: inset 0 0 0 1px #F0F0F0;\n  box-sizing: content-box;\n  border-radius: 0 4px 4px 0;\n  float: left;\n  padding: 1px;\n  padding-left: 8px;\n}\n.vc-twitter .vc-editable-input span {\n  display: none;\n}\n.vc-twitter-hash {\n  background: #F0F0F0;\n  height: 30px;\n  width: 30px;\n  border-radius: 4px 0 0 4px;\n  float: left;\n  color: #98A1A4;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.vc-twitter-swatch {\n  width: 30px;\n  height: 30px;\n  float: left;\n  border-radius: 4px;\n  margin: 0 6px 6px 0;\n  cursor: pointer;\n  position: relative;\n  outline: none;\n}\n.vc-twitter-clear {\n  clear: both;\n}\n.vc-twitter-hide-triangle .vc-twitter-triangle {\n  display: none;\n}\n.vc-twitter-hide-triangle .vc-twitter-triangle-shadow {\n  display: none;\n}\n.vc-twitter-top-left-triangle .vc-twitter-triangle{\n  top: -10px;\n  left: 12px;\n}\n.vc-twitter-top-left-triangle .vc-twitter-triangle-shadow{\n  top: -11px;\n  left: 12px;\n}\n.vc-twitter-top-right-triangle .vc-twitter-triangle{\n  top: -10px;\n  right: 12px;\n}\n.vc-twitter-top-right-triangle .vc-twitter-triangle-shadow{\n  top: -11px;\n  right: 12px;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-twitter",class:{"vc-twitter-hide-triangle ":"hide"===t.triangle,"vc-twitter-top-left-triangle ":"top-left"===t.triangle,"vc-twitter-top-right-triangle ":"top-right"===t.triangle},style:{width:"number"==typeof t.width?t.width+"px":t.width}},[n("div",{staticClass:"vc-twitter-triangle-shadow"}),t._v(" "),n("div",{staticClass:"vc-twitter-triangle"}),t._v(" "),n("div",{staticClass:"vc-twitter-body"},[t._l(t.defaultColors,(function(e,r){return n("span",{key:r,staticClass:"vc-twitter-swatch",style:{background:e,boxShadow:"0 0 4px "+(t.equal(e)?e:"transparent")},on:{click:function(n){return t.handlerClick(e)}}})})),t._v(" "),n("div",{staticClass:"vc-twitter-hash"},[t._v("#")]),t._v(" "),n("editable-input",{attrs:{label:"#",value:t.hex},on:{change:t.inputChange}}),t._v(" "),n("div",{staticClass:"vc-twitter-clear"})],2)])};r._withStripped=!0;var o={render:r,staticRenderFns:[]};e.a=o}])},3715:(t,e,n)=>{var r=n(1545);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals),(0,n(5346).Z)("47278c80",r,!0,{})},1639:(t,e,n)=>{var r=n(6489);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals),(0,n(5346).Z)("268c2b7b",r,!0,{})},305:(t,e,n)=>{var r=n(5575);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals),(0,n(5346).Z)("b7269164",r,!0,{})},6643:(t,e,n)=>{var r=n(2071);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals),(0,n(5346).Z)("1aeafdac",r,!0,{})},5346:(t,e,n)=>{"use strict";function r(t,e){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=i[0],s={id:t+":"+o,css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}n.d(e,{Z:()=>h});var o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},a=o&&(document.head||document.getElementsByTagName("head")[0]),s=null,c=0,u=!1,l=function(){},f=null,p="data-vue-ssr-id",d="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(t,e,n,o){u=n,f=o||{};var a=r(t,e);return v(a),function(e){for(var n=[],o=0;o<a.length;o++){var s=a[o];(c=i[s.id]).refs--,n.push(c)}for(e?v(a=r(t,e)):a=[],o=0;o<n.length;o++){var c;if(0===(c=n[o]).refs){for(var u=0;u<c.parts.length;u++)c.parts[u]();delete i[c.id]}}}}function v(t){for(var e=0;e<t.length;e++){var n=t[e],r=i[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(b(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var a=[];for(o=0;o<n.parts.length;o++)a.push(b(n.parts[o]));i[n.id]={id:n.id,refs:1,parts:a}}}}function g(){var t=document.createElement("style");return t.type="text/css",a.appendChild(t),t}function b(t){var e,n,r=document.querySelector("style["+p+'~="'+t.id+'"]');if(r){if(u)return l;r.parentNode.removeChild(r)}if(d){var o=c++;r=s||(s=g()),e=x.bind(null,r,o,!1),n=x.bind(null,r,o,!0)}else r=g(),e=_.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap)return;e(t=r)}else n()}}var m,y=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join("\n")});function x(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=y(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function _(t,e){var n=e.css,r=e.media,o=e.sourceMap;if(r&&t.setAttribute("media",r),f.ssrId&&t.setAttribute(p,e.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";n(2526),n(1817),n(2443),n(2401),n(8722),n(2165),n(9007),n(3510),n(1840),n(6982),n(2159),n(6649),n(9341),n(543),n(2222),n(545),n(3290),n(7327),n(9826),n(4553),n(4944),n(6535),n(1038),n(6699),n(2772),n(6992),n(9600),n(4986),n(1249),n(6572),n(5827),n(6644),n(7042),n(2707),n(8706),n(561),n(3792),n(9244),n(8264),n(6078),n(4855),n(8309),n(3706),n(1532),n(9752),n(2376),n(3181),n(3484),n(2388),n(8621),n(403),n(4755),n(5438),n(332),n(658),n(197),n(4914),n(2420),n(160),n(970),n(2703),n(3689),n(9653),n(3299),n(5192),n(3161),n(4048),n(8285),n(4363),n(5994),n(1874),n(9494),n(6977),n(9601),n(9595),n(5500),n(9720),n(3371),n(8559),n(5003),n(9337),n(6210),n(489),n(3304),n(1825),n(8410),n(2200),n(7941),n(4869),n(3952),n(7227),n(514),n(8304),n(1539),n(6833),n(4678),n(1058),n(8674),n(7727),n(224),n(2419),n(9596),n(2586),n(4819),n(5683),n(9361),n(1037),n(5898),n(7556),n(4361),n(3593),n(9532),n(4603),n(4916),n(2087),n(9714),n(189),n(9841),n(7852),n(4953),n(2023),n(8783),n(4723),n(6528),n(3112),n(8992),n(2481),n(5306),n(4765),n(3123),n(6755),n(3210),n(8702),n(5674),n(5218),n(4475),n(7929),n(915),n(9253),n(2125),n(8830),n(8734),n(9254),n(7268),n(7397),n(86),n(623),n(4197),n(6495),n(7145),n(5109),n(5125),n(2472),n(9743),n(8255),n(9135),n(2990),n(8927),n(3105),n(5035),n(4345),n(7174),n(2846),n(8145),n(4731),n(7209),n(6319),n(8867),n(7789),n(3739),n(5206),n(9368),n(4483),n(2056),n(3462),n(678),n(7462),n(3824),n(5021),n(2974),n(5016),n(4129),n(8478),n(8628),n(3475),n(6273),n(1568),n(6349),n(5743),n(72),n(9137),n(1957),n(6306),n(103),n(8582),n(618),n(4592),n(8440),n(8276),n(5082),n(2813),n(8222),n(4838),n(8563),n(336),n(7512),n(6603),n(100),n(6429),n(3187),n(92),n(9041),n(666),n(1638),n(2975),n(5728),n(6056),n(4299),n(5162),n(292),n(1025),n(7314),n(6290),n(7479),n(4582),n(7896),n(2647),n(8558),n(4018),n(7507),n(1605),n(9076),n(4999),n(8921),n(6248),n(3599),n(1477),n(3066),n(5389),n(6006),n(401),n(5164),n(1238),n(4837),n(7485),n(465),n(9916),n(6651),n(1437),n(5285),n(9865),n(6035),n(7501),n(3728),n(7207),n(5849),n(8824),n(4130),n(8206),n(6478),n(9715),n(3561),n(2049),n(6020),n(6585),n(4747),n(3948),n(4633),n(5844),n(285),n(3753),n(1637);var t=Object.freeze({});function e(t){return null==t}function r(t){return null!=t}function o(t){return!0===t}function i(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function a(t){return null!==t&&"object"==typeof t}var s=Object.prototype.toString;function c(t){return"[object Object]"===s.call(t)}function u(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function l(t){return r(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function f(t){return null==t?"":Array.isArray(t)||c(t)&&t.toString===s?JSON.stringify(t,null,2):String(t)}function p(t){var e=parseFloat(t);return isNaN(e)?t:e}function d(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}d("slot,component",!0);var h=d("key,ref,slot,slot-scope,is");function v(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var g=Object.prototype.hasOwnProperty;function b(t,e){return g.call(t,e)}function m(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var y=/-(\w)/g,x=m((function(t){return t.replace(y,(function(t,e){return e?e.toUpperCase():""}))})),_=m((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),w=/\B([A-Z])/g,A=m((function(t){return t.replace(w,"-$1").toLowerCase()})),C=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function S(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function k(t,e){for(var n in e)t[n]=e[n];return t}function O(t){for(var e={},n=0;n<t.length;n++)t[n]&&k(e,t[n]);return e}function E(t,e,n){}var I=function(t,e,n){return!1},M=function(t){return t};function T(t,e){if(t===e)return!0;var n=a(t),r=a(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return T(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var s=Object.keys(t),c=Object.keys(e);return s.length===c.length&&s.every((function(n){return T(t[n],e[n])}))}catch(t){return!1}}function j(t,e){for(var n=0;n<t.length;n++)if(T(t[n],e))return n;return-1}function R(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var P="data-server-rendered",B=["component","directive","filter"],$=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:I,isReservedAttr:I,isUnknownElement:I,getTagNamespace:E,parsePlatformTagName:M,mustUseProp:I,async:!0,_lifecycleHooks:$};function L(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var N,D=new RegExp("[^"+/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/.source+".$_\\d]"),U="__proto__"in{},z="undefined"!=typeof window,H="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,G=H&&WXEnvironment.platform.toLowerCase(),W=z&&window.navigator.userAgent.toLowerCase(),V=W&&/msie|trident/.test(W),q=W&&W.indexOf("msie 9.0")>0,Y=W&&W.indexOf("edge/")>0,K=(W&&W.indexOf("android"),W&&/iphone|ipad|ipod|ios/.test(W)||"ios"===G),X=(W&&/chrome\/\d+/.test(W),W&&/phantomjs/.test(W),W&&W.match(/firefox\/(\d+)/)),Z={}.watch,J=!1;if(z)try{var Q={};Object.defineProperty(Q,"passive",{get:function(){J=!0}}),window.addEventListener("test-passive",null,Q)}catch(t){}var tt=function(){return void 0===N&&(N=!z&&!H&&void 0!==n.g&&n.g.process&&"server"===n.g.process.env.VUE_ENV),N},et=z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function nt(t){return"function"==typeof t&&/native code/.test(t.toString())}var rt,ot="undefined"!=typeof Symbol&&nt(Symbol)&&"undefined"!=typeof Reflect&&nt(Reflect.ownKeys);rt="undefined"!=typeof Set&&nt(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var it=E,at=0,st=function(){this.id=at++,this.subs=[]};st.prototype.addSub=function(t){this.subs.push(t)},st.prototype.removeSub=function(t){v(this.subs,t)},st.prototype.depend=function(){st.target&&st.target.addDep(this)},st.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},st.target=null;var ct=[];function ut(t){ct.push(t),st.target=t}function lt(){ct.pop(),st.target=ct[ct.length-1]}var ft=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},pt={child:{configurable:!0}};pt.child.get=function(){return this.componentInstance},Object.defineProperties(ft.prototype,pt);var dt=function(t){void 0===t&&(t="");var e=new ft;return e.text=t,e.isComment=!0,e};function ht(t){return new ft(void 0,void 0,void 0,String(t))}function vt(t){var e=new ft(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var gt=Array.prototype,bt=Object.create(gt);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(t){var e=gt[t];L(bt,t,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i}))}));var mt=Object.getOwnPropertyNames(bt),yt=!0;function xt(t){yt=t}var _t=function(t){this.value=t,this.dep=new st,this.vmCount=0,L(t,"__ob__",this),Array.isArray(t)?(U?function(t,e){t.__proto__=e}(t,bt):function(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];L(t,i,e[i])}}(t,bt,mt),this.observeArray(t)):this.walk(t)};function wt(t,e){var n;if(a(t)&&!(t instanceof ft))return b(t,"__ob__")&&t.__ob__ instanceof _t?n=t.__ob__:yt&&!tt()&&(Array.isArray(t)||c(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new _t(t)),e&&n&&n.vmCount++,n}function At(t,e,n,r,o){var i=new st,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!o&&wt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return st.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&kt(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||s&&!c||(c?c.call(t,e):n=e,u=!o&&wt(e),i.notify())}})}}function Ct(t,e,n){if(Array.isArray(t)&&u(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(At(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function St(t,e){if(Array.isArray(t)&&u(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||b(t,e)&&(delete t[e],n&&n.dep.notify())}}function kt(t){for(var e=void 0,n=0,r=t.length;n<r;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&kt(e)}_t.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)At(t,e[n])},_t.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)wt(t[e])};var Ot=F.optionMergeStrategies;function Et(t,e){if(!e)return t;for(var n,r,o,i=ot?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)"__ob__"!==(n=i[a])&&(r=t[n],o=e[n],b(t,n)?r!==o&&c(r)&&c(o)&&Et(r,o):Ct(t,n,o));return t}function It(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,o="function"==typeof t?t.call(n,n):t;return r?Et(r,o):o}:e?t?function(){return Et("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Mt(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function Tt(t,e,n,r){var o=Object.create(t||null);return e?k(o,e):o}Ot.data=function(t,e,n){return n?It(t,e,n):e&&"function"!=typeof e?t:It(t,e)},$.forEach((function(t){Ot[t]=Mt})),B.forEach((function(t){Ot[t+"s"]=Tt})),Ot.watch=function(t,e,n,r){if(t===Z&&(t=void 0),e===Z&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in k(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Ot.props=Ot.methods=Ot.inject=Ot.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return k(o,t),e&&k(o,e),o},Ot.provide=It;var jt=function(t,e){return void 0===e?t:e};function Rt(t,e,n){if("function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[x(o)]={type:null});else if(c(n))for(var a in n)o=n[a],i[x(a)]=c(o)?o:{type:o};t.props=i}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(c(n))for(var i in n){var a=n[i];r[i]=c(a)?k({from:i},a):{from:a}}}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=Rt(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=Rt(t,e.mixins[r],n);var i,a={};for(i in t)s(i);for(i in e)b(t,i)||s(i);function s(r){var o=Ot[r]||jt;a[r]=o(t[r],e[r],n,r)}return a}function Pt(t,e,n,r){if("string"==typeof n){var o=t[e];if(b(o,n))return o[n];var i=x(n);if(b(o,i))return o[i];var a=_(i);return b(o,a)?o[a]:o[n]||o[i]||o[a]}}function Bt(t,e,n,r){var o=e[t],i=!b(n,t),a=n[t],s=Nt(Boolean,o.type);if(s>-1)if(i&&!b(o,"default"))a=!1;else if(""===a||a===A(t)){var c=Nt(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(b(e,"default")){var r=e.default;return t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"==typeof r&&"Function"!==Ft(e.type)?r.call(t):r}}(r,o,t);var u=yt;xt(!0),wt(a),xt(u)}return a}var $t=/^\s*function (\w+)/;function Ft(t){var e=t&&t.toString().match($t);return e?e[1]:""}function Lt(t,e){return Ft(t)===Ft(e)}function Nt(t,e){if(!Array.isArray(e))return Lt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Lt(e[n],t))return n;return-1}function Dt(t,e,n){ut();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,t,e,n))return}catch(t){zt(t,r,"errorCaptured hook")}}zt(t,e,n)}finally{lt()}}function Ut(t,e,n,r,o){var i;try{(i=n?t.apply(e,n):t.call(e))&&!i._isVue&&l(i)&&!i._handled&&(i.catch((function(t){return Dt(t,r,o+" (Promise/async)")})),i._handled=!0)}catch(t){Dt(t,r,o)}return i}function zt(t,e,n){if(F.errorHandler)try{return F.errorHandler.call(null,t,e,n)}catch(e){e!==t&&Ht(e)}Ht(t)}function Ht(t,e,n){if(!z&&!H||"undefined"==typeof console)throw t;console.error(t)}var Gt,Wt=!1,Vt=[],qt=!1;function Yt(){qt=!1;var t=Vt.slice(0);Vt.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&nt(Promise)){var Kt=Promise.resolve();Gt=function(){Kt.then(Yt),K&&setTimeout(E)},Wt=!0}else if(V||"undefined"==typeof MutationObserver||!nt(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Gt="undefined"!=typeof setImmediate&&nt(setImmediate)?function(){setImmediate(Yt)}:function(){setTimeout(Yt,0)};else{var Xt=1,Zt=new MutationObserver(Yt),Jt=document.createTextNode(String(Xt));Zt.observe(Jt,{characterData:!0}),Gt=function(){Xt=(Xt+1)%2,Jt.data=String(Xt)},Wt=!0}function Qt(t,e){var n;if(Vt.push((function(){if(t)try{t.call(e)}catch(t){Dt(t,e,"nextTick")}else n&&n(e)})),qt||(qt=!0,Gt()),!t&&"undefined"!=typeof Promise)return new Promise((function(t){n=t}))}var te=new rt;function ee(t){ne(t,te),te.clear()}function ne(t,e){var n,r,o=Array.isArray(t);if(!(!o&&!a(t)||Object.isFrozen(t)||t instanceof ft)){if(t.__ob__){var i=t.__ob__.dep.id;if(e.has(i))return;e.add(i)}if(o)for(n=t.length;n--;)ne(t[n],e);else for(n=(r=Object.keys(t)).length;n--;)ne(t[r[n]],e)}}var re=m((function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}}));function oe(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return Ut(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)Ut(o[i],null,t,e,"v-on handler")}return n.fns=t,n}function ie(t,n,r,i,a,s){var c,u,l,f;for(c in t)u=t[c],l=n[c],f=re(c),e(u)||(e(l)?(e(u.fns)&&(u=t[c]=oe(u,s)),o(f.once)&&(u=t[c]=a(f.name,u,f.capture)),r(f.name,u,f.capture,f.passive,f.params)):u!==l&&(l.fns=u,t[c]=l));for(c in n)e(t[c])&&i((f=re(c)).name,n[c],f.capture)}function ae(t,n,i){var a;t instanceof ft&&(t=t.data.hook||(t.data.hook={}));var s=t[n];function c(){i.apply(this,arguments),v(a.fns,c)}e(s)?a=oe([c]):r(s.fns)&&o(s.merged)?(a=s).fns.push(c):a=oe([s,c]),a.merged=!0,t[n]=a}function se(t,e,n,o,i){if(r(e)){if(b(e,n))return t[n]=e[n],i||delete e[n],!0;if(b(e,o))return t[n]=e[o],i||delete e[o],!0}return!1}function ce(t){return i(t)?[ht(t)]:Array.isArray(t)?le(t):void 0}function ue(t){return r(t)&&r(t.text)&&!1===t.isComment}function le(t,n){var a,s,c,u,l=[];for(a=0;a<t.length;a++)e(s=t[a])||"boolean"==typeof s||(u=l[c=l.length-1],Array.isArray(s)?s.length>0&&(ue((s=le(s,(n||"")+"_"+a))[0])&&ue(u)&&(l[c]=ht(u.text+s[0].text),s.shift()),l.push.apply(l,s)):i(s)?ue(u)?l[c]=ht(u.text+s):""!==s&&l.push(ht(s)):ue(s)&&ue(u)?l[c]=ht(u.text+s.text):(o(t._isVList)&&r(s.tag)&&e(s.key)&&r(n)&&(s.key="__vlist"+n+"_"+a+"__"),l.push(s)));return l}function fe(t,e){if(t){for(var n=Object.create(null),r=ot?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=t[i].from,s=e;s;){if(s._provided&&b(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s&&"default"in t[i]){var c=t[i].default;n[i]="function"==typeof c?c.call(e):c}}}return n}}function pe(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(de)&&delete n[u];return n}function de(t){return t.isComment&&!t.asyncFactory||" "===t.text}function he(t){return t.isComment&&t.asyncFactory}function ve(e,n,r){var o,i=Object.keys(n).length>0,a=e?!!e.$stable:!i,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(a&&r&&r!==t&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},e)e[c]&&"$"!==c[0]&&(o[c]=ge(n,c,e[c]))}else o={};for(var u in n)u in o||(o[u]=be(n,u));return e&&Object.isExtensible(e)&&(e._normalized=o),L(o,"$stable",a),L(o,"$key",s),L(o,"$hasNormal",i),o}function ge(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({}),e=(t=t&&"object"==typeof t&&!Array.isArray(t)?[t]:ce(t))&&t[0];return t&&(!e||1===t.length&&e.isComment&&!he(e))?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function be(t,e){return function(){return t[e]}}function me(t,e){var n,o,i,s,c;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),o=0,i=t.length;o<i;o++)n[o]=e(t[o],o);else if("number"==typeof t)for(n=new Array(t),o=0;o<t;o++)n[o]=e(o+1,o);else if(a(t))if(ot&&t[Symbol.iterator]){n=[];for(var u=t[Symbol.iterator](),l=u.next();!l.done;)n.push(e(l.value,n.length)),l=u.next()}else for(s=Object.keys(t),n=new Array(s.length),o=0,i=s.length;o<i;o++)c=s[o],n[o]=e(t[c],c,o);return r(n)||(n=[]),n._isVList=!0,n}function ye(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(n=k(k({},r),n)),o=i(n)||("function"==typeof e?e():e)):o=this.$slots[t]||("function"==typeof e?e():e);var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function xe(t){return Pt(this.$options,"filters",t)||M}function _e(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function we(t,e,n,r,o){var i=F.keyCodes[e]||n;return o&&r&&!F.keyCodes[e]?_e(o,r):i?_e(i,t):r?A(r)!==e:void 0===t}function Ae(t,e,n,r,o){if(n&&a(n)){var i;Array.isArray(n)&&(n=O(n));var s=function(a){if("class"===a||"style"===a||h(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||F.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=x(a),u=A(a);c in i||u in i||(i[a]=n[a],o&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var c in n)s(c)}return t}function Ce(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||ke(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r}function Se(t,e,n){return ke(t,"__once__"+e+(n?"_"+n:""),!0),t}function ke(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Oe(t[r],e+"_"+r,n);else Oe(t,e,n)}function Oe(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function Ee(t,e){if(e&&c(e)){var n=t.on=t.on?k({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}return t}function Ie(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?Ie(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Me(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r&&(t[e[n]]=e[n+1])}return t}function Te(t,e){return"string"==typeof t?e+t:t}function je(t){t._o=Se,t._n=p,t._s=f,t._l=me,t._t=ye,t._q=T,t._i=j,t._m=Ce,t._f=xe,t._k=we,t._b=Ae,t._v=ht,t._e=dt,t._u=Ie,t._g=Ee,t._d=Me,t._p=Te}function Re(e,n,r,i,a){var s,c=this,u=a.options;b(i,"_uid")?(s=Object.create(i))._original=i:(s=i,i=i._original);var l=o(u._compiled),f=!l;this.data=e,this.props=n,this.children=r,this.parent=i,this.listeners=e.on||t,this.injections=fe(u.inject,i),this.slots=function(){return c.$slots||ve(e.scopedSlots,c.$slots=pe(r,i)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ve(e.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=ve(e.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var o=De(s,t,e,n,r,f);return o&&!Array.isArray(o)&&(o.fnScopeId=u._scopeId,o.fnContext=i),o}:this._c=function(t,e,n,r){return De(s,t,e,n,r,f)}}function Pe(t,e,n,r,o){var i=vt(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function Be(t,e){for(var n in e)t[x(n)]=e[n]}je(Re.prototype);var $e={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;$e.prepatch(n,n)}else(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},o=t.data.inlineTemplate;return r(o)&&(n.render=o.render,n.staticRenderFns=o.staticRenderFns),new t.componentOptions.Ctor(n)}(t,Xe)).$mount(e?t.elm:void 0,e)},prepatch:function(e,n){var r=n.componentOptions;!function(e,n,r,o,i){var a=o.data.scopedSlots,s=e.$scopedSlots,c=!!(a&&!a.$stable||s!==t&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key||!a&&e.$scopedSlots.$key),u=!!(i||e.$options._renderChildren||c);if(e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o),e.$options._renderChildren=i,e.$attrs=o.data.attrs||t,e.$listeners=r||t,n&&e.$options.props){xt(!1);for(var l=e._props,f=e.$options._propKeys||[],p=0;p<f.length;p++){var d=f[p],h=e.$options.props;l[d]=Bt(d,h,n,e)}xt(!0),e.$options.propsData=n}r=r||t;var v=e.$options._parentListeners;e.$options._parentListeners=r,Ke(e,r,v),u&&(e.$slots=pe(i,o.context),e.$forceUpdate())}(n.componentInstance=e.componentInstance,r.propsData,r.listeners,n,r.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,en(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,rn.push(e)):Qe(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?tn(e,!0):e.$destroy())}},Fe=Object.keys($e);function Le(n,i,s,c,u){if(!e(n)){var f=s.$options._base;if(a(n)&&(n=f.extend(n)),"function"==typeof n){var p;if(e(n.cid)&&(n=function(t,n){if(o(t.error)&&r(t.errorComp))return t.errorComp;if(r(t.resolved))return t.resolved;var i=He;if(i&&r(t.owners)&&-1===t.owners.indexOf(i)&&t.owners.push(i),o(t.loading)&&r(t.loadingComp))return t.loadingComp;if(i&&!r(t.owners)){var s=t.owners=[i],c=!0,u=null,f=null;i.$on("hook:destroyed",(function(){return v(s,i)}));var p=function(t){for(var e=0,n=s.length;e<n;e++)s[e].$forceUpdate();t&&(s.length=0,null!==u&&(clearTimeout(u),u=null),null!==f&&(clearTimeout(f),f=null))},d=R((function(e){t.resolved=Ge(e,n),c?s.length=0:p(!0)})),h=R((function(e){r(t.errorComp)&&(t.error=!0,p(!0))})),g=t(d,h);return a(g)&&(l(g)?e(t.resolved)&&g.then(d,h):l(g.component)&&(g.component.then(d,h),r(g.error)&&(t.errorComp=Ge(g.error,n)),r(g.loading)&&(t.loadingComp=Ge(g.loading,n),0===g.delay?t.loading=!0:u=setTimeout((function(){u=null,e(t.resolved)&&e(t.error)&&(t.loading=!0,p(!1))}),g.delay||200)),r(g.timeout)&&(f=setTimeout((function(){f=null,e(t.resolved)&&h(null)}),g.timeout)))),c=!1,t.loading?t.loadingComp:t.resolved}}(p=n,f),void 0===n))return function(t,e,n,r,o){var i=dt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}(p,i,s,c,u);i=i||{},An(n),r(i.model)&&function(t,e){var n=t.model&&t.model.prop||"value",o=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),a=i[o],s=e.model.callback;r(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[o]=[s].concat(a)):i[o]=s}(n.options,i);var d=function(t,n,o){var i=n.options.props;if(!e(i)){var a={},s=t.attrs,c=t.props;if(r(s)||r(c))for(var u in i){var l=A(u);se(a,c,u,l,!0)||se(a,s,u,l,!1)}return a}}(i,n);if(o(n.options.functional))return function(e,n,o,i,a){var s=e.options,c={},u=s.props;if(r(u))for(var l in u)c[l]=Bt(l,u,n||t);else r(o.attrs)&&Be(c,o.attrs),r(o.props)&&Be(c,o.props);var f=new Re(o,c,a,i,e),p=s.render.call(null,f._c,f);if(p instanceof ft)return Pe(p,o,f.parent,s);if(Array.isArray(p)){for(var d=ce(p)||[],h=new Array(d.length),v=0;v<d.length;v++)h[v]=Pe(d[v],o,f.parent,s);return h}}(n,d,i,s,c);var h=i.on;if(i.on=i.nativeOn,o(n.options.abstract)){var g=i.slot;i={},g&&(i.slot=g)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<Fe.length;n++){var r=Fe[n],o=e[r],i=$e[r];o===i||o&&o._merged||(e[r]=o?Ne(i,o):i)}}(i);var b=n.options.name||u;return new ft("vue-component-"+n.cid+(b?"-"+b:""),i,void 0,void 0,void 0,s,{Ctor:n,propsData:d,listeners:h,tag:u,children:c},p)}}}function Ne(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function De(t,e,n,s,c,u){return(Array.isArray(n)||i(n))&&(c=s,s=n,n=void 0),o(u)&&(c=2),function(t,e,n,o,i){if(r(n)&&r(n.__ob__))return dt();if(r(n)&&r(n.is)&&(e=n.is),!e)return dt();var s,c,u;(Array.isArray(o)&&"function"==typeof o[0]&&((n=n||{}).scopedSlots={default:o[0]},o.length=0),2===i?o=ce(o):1===i&&(o=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(o)),"string"==typeof e)?(c=t.$vnode&&t.$vnode.ns||F.getTagNamespace(e),s=F.isReservedTag(e)?new ft(F.parsePlatformTagName(e),n,o,void 0,void 0,t):n&&n.pre||!r(u=Pt(t.$options,"components",e))?new ft(e,n,o,void 0,void 0,t):Le(u,n,t,o,e)):s=Le(e,n,t,o);return Array.isArray(s)?s:r(s)?(r(c)&&Ue(s,c),r(n)&&function(t){a(t.style)&&ee(t.style),a(t.class)&&ee(t.class)}(n),s):dt()}(t,e,n,s,c)}function Ue(t,n,i){if(t.ns=n,"foreignObject"===t.tag&&(n=void 0,i=!0),r(t.children))for(var a=0,s=t.children.length;a<s;a++){var c=t.children[a];r(c.tag)&&(e(c.ns)||o(i)&&"svg"!==c.tag)&&Ue(c,n,i)}}var ze,He=null;function Ge(t,e){return(t.__esModule||ot&&"Module"===t[Symbol.toStringTag])&&(t=t.default),a(t)?e.extend(t):t}function We(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(r(n)&&(r(n.componentOptions)||he(n)))return n}}function Ve(t,e){ze.$on(t,e)}function qe(t,e){ze.$off(t,e)}function Ye(t,e){var n=ze;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function Ke(t,e,n){ze=t,ie(e,n||{},Ve,qe,Ye,t),ze=void 0}var Xe=null;function Ze(t){var e=Xe;return Xe=t,function(){Xe=e}}function Je(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Qe(t,e){if(e){if(t._directInactive=!1,Je(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Qe(t.$children[n]);en(t,"activated")}}function tn(t,e){if(!(e&&(t._directInactive=!0,Je(t))||t._inactive)){t._inactive=!0;for(var n=0;n<t.$children.length;n++)tn(t.$children[n]);en(t,"deactivated")}}function en(t,e){ut();var n=t.$options[e],r=e+" hook";if(n)for(var o=0,i=n.length;o<i;o++)Ut(n[o],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),lt()}var nn=[],rn=[],on={},an=!1,sn=!1,cn=0,un=0,ln=Date.now;if(z&&!V){var fn=window.performance;fn&&"function"==typeof fn.now&&ln()>document.createEvent("Event").timeStamp&&(ln=function(){return fn.now()})}function pn(){var t,e;for(un=ln(),sn=!0,nn.sort((function(t,e){return t.id-e.id})),cn=0;cn<nn.length;cn++)(t=nn[cn]).before&&t.before(),e=t.id,on[e]=null,t.run();var n=rn.slice(),r=nn.slice();cn=nn.length=rn.length=0,on={},an=sn=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Qe(t[e],!0)}(n),function(t){for(var e=t.length;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&en(r,"updated")}}(r),et&&F.devtools&&et.emit("flush")}var dn=0,hn=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++dn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new rt,this.newDepIds=new rt,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!D.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=E)),this.value=this.lazy?void 0:this.get()};hn.prototype.get=function(){var t;ut(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Dt(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ee(t),lt(),this.cleanupDeps()}return t},hn.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},hn.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},hn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==on[e]){if(on[e]=!0,sn){for(var n=nn.length-1;n>cn&&nn[n].id>t.id;)n--;nn.splice(n+1,0,t)}else nn.push(t);an||(an=!0,Qt(pn))}}(this)},hn.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||a(t)||this.deep){var e=this.value;if(this.value=t,this.user){var n='callback for watcher "'+this.expression+'"';Ut(this.cb,this.vm,[t,e],this.vm,n)}else this.cb.call(this.vm,t,e)}}},hn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},hn.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},hn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||v(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var vn={enumerable:!0,configurable:!0,get:E,set:E};function gn(t,e,n){vn.get=function(){return this[e][n]},vn.set=function(t){this[e][n]=t},Object.defineProperty(t,n,vn)}var bn={lazy:!0};function mn(t,e,n){var r=!tt();"function"==typeof n?(vn.get=r?yn(e):xn(n),vn.set=E):(vn.get=n.get?r&&!1!==n.cache?yn(e):xn(n.get):E,vn.set=n.set||E),Object.defineProperty(t,e,vn)}function yn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),st.target&&e.depend(),e.value}}function xn(t){return function(){return t.call(this,this)}}function _n(t,e,n,r){return c(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var wn=0;function An(t){var e=t.options;if(t.super){var n=An(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}(t);r&&k(t.extendOptions,r),(e=t.options=Rt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function Cn(t){this._init(t)}function Sn(t){return t&&(t.Ctor.options.name||t.tag)}function kn(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:(n=t,!("[object RegExp]"!==s.call(n))&&t.test(e));var n}function On(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=a.name;s&&!e(s)&&En(n,i,r,o)}}}function En(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,v(n,e)}!function(e){e.prototype._init=function(e){var n=this;n._uid=wn++,n._isVue=!0,e&&e._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(n,e):n.$options=Rt(An(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(n),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Ke(t,e)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,r=e.$vnode=n._parentVnode,o=r&&r.context;e.$slots=pe(n._renderChildren,o),e.$scopedSlots=t,e._c=function(t,n,r,o){return De(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return De(e,t,n,r,o,!0)};var i=r&&r.data;At(e,"$attrs",i&&i.attrs||t,null,!0),At(e,"$listeners",n._parentListeners||t,null,!0)}(n),en(n,"beforeCreate"),function(t){var e=fe(t.$options.inject,t);e&&(xt(!1),Object.keys(e).forEach((function(n){At(t,n,e[n])})),xt(!0))}(n),function(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[];t.$parent&&xt(!1);var i=function(i){o.push(i);var a=Bt(i,e,n,t);At(r,i,a),i in t||gn(t,"_props",i)};for(var a in e)i(a);xt(!0)}(t,e.props),e.methods&&function(t,e){for(var n in t.$options.props,e)t[n]="function"!=typeof e[n]?E:C(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;c(e=t._data="function"==typeof e?function(t,e){ut();try{return t.call(e,e)}catch(t){return Dt(t,e,"data()"),{}}finally{lt()}}(e,t):e||{})||(e={});for(var n,r=Object.keys(e),o=t.$options.props,i=(t.$options.methods,r.length);i--;){var a=r[i];o&&b(o,a)||(n=void 0,36===(n=(a+"").charCodeAt(0))||95===n)||gn(t,"_data",a)}wt(e,!0)}(t):wt(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=tt();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;r||(n[o]=new hn(t,a||E,E,bn)),o in t||mn(t,o,i)}}(t,e.computed),e.watch&&e.watch!==Z&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)_n(t,n,r[o]);else _n(t,n,r)}}(t,e.watch)}(n),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(n),en(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(Cn),function(t){Object.defineProperty(t.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(t.prototype,"$props",{get:function(){return this._props}}),t.prototype.$set=Ct,t.prototype.$delete=St,t.prototype.$watch=function(t,e,n){var r=this;if(c(e))return _n(r,t,e,n);(n=n||{}).user=!0;var o=new hn(r,t,e,n);if(n.immediate){var i='callback for immediate watcher "'+o.expression+'"';ut(),Ut(e,r,[o.value],r,i),lt()}return function(){o.teardown()}}}(Cn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;for(var s=a.length;s--;)if((i=a[s])===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?S(n):n;for(var r=S(arguments,1),o='event handler for "'+t+'"',i=0,a=n.length;i<a;i++)Ut(n[i],e,r,e,o)}return e}}(Cn),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=Ze(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){en(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||v(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),en(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(Cn),function(t){je(t.prototype),t.prototype.$nextTick=function(t){return Qt(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=ve(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{He=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){Dt(n,e,"render"),t=e._vnode}finally{He=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof ft||(t=dt()),t.parent=o,t}}(Cn);var In=[String,RegExp,Array],Mn={name:"keep-alive",abstract:!0,props:{include:In,exclude:In,max:[String,Number]},methods:{cacheVNode:function(){var t=this,e=t.cache,n=t.keys,r=t.vnodeToCache,o=t.keyToCache;if(r){var i=r.tag,a=r.componentInstance,s=r.componentOptions;e[o]={name:Sn(s),tag:i,componentInstance:a},n.push(o),this.max&&n.length>parseInt(this.max)&&En(e,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)En(this.cache,t,this.keys)},mounted:function(){var t=this;this.cacheVNode(),this.$watch("include",(function(e){On(t,(function(t){return kn(e,t)}))})),this.$watch("exclude",(function(e){On(t,(function(t){return!kn(e,t)}))}))},updated:function(){this.cacheVNode()},render:function(){var t=this.$slots.default,e=We(t),n=e&&e.componentOptions;if(n){var r=Sn(n),o=this.include,i=this.exclude;if(o&&(!r||!kn(o,r))||i&&r&&kn(i,r))return e;var a=this.cache,s=this.keys,c=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,v(s,c),s.push(c)):(this.vnodeToCache=e,this.keyToCache=c),e.data.keepAlive=!0}return e||t&&t[0]}},Tn={KeepAlive:Mn};!function(t){var e={get:function(){return F}};Object.defineProperty(t,"config",e),t.util={warn:it,extend:k,mergeOptions:Rt,defineReactive:At},t.set=Ct,t.delete=St,t.nextTick=Qt,t.observable=function(t){return wt(t),t},t.options=Object.create(null),B.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,k(t.options.components,Tn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=S(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Rt(this.options,t),this}}(t),function(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name,a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Rt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)gn(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)mn(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,B.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=k({},a.options),o[r]=a,a}}(t),function(t){B.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&c(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}(t)}(Cn),Object.defineProperty(Cn.prototype,"$isServer",{get:tt}),Object.defineProperty(Cn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Cn,"FunctionalRenderContext",{value:Re}),Cn.version="2.6.14";var jn=d("style,class"),Rn=d("input,textarea,option,select,progress"),Pn=d("contenteditable,draggable,spellcheck"),Bn=d("events,caret,typing,plaintext-only"),$n=d("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Fn="http://www.w3.org/1999/xlink",Ln=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Nn=function(t){return Ln(t)?t.slice(6,t.length):""},Dn=function(t){return null==t||!1===t};function Un(t,e){return{staticClass:zn(t.staticClass,e.staticClass),class:r(t.class)?[t.class,e.class]:e.class}}function zn(t,e){return t?e?t+" "+e:t:e||""}function Hn(t){return Array.isArray(t)?function(t){for(var e,n="",o=0,i=t.length;o<i;o++)r(e=Hn(t[o]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):a(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Gn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Wn=d("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Vn=d("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),qn=function(t){return Wn(t)||Vn(t)},Yn=Object.create(null),Kn=d("text,number,password,search,email,tel,url"),Xn=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(t,e){return document.createElementNS(Gn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Zn={create:function(t,e){Jn(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Jn(t,!0),Jn(e))},destroy:function(t){Jn(t,!0)}};function Jn(t,e){var n=t.data.ref;if(r(n)){var o=t.context,i=t.componentInstance||t.elm,a=o.$refs;e?Array.isArray(a[n])?v(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var Qn=new ft("",{},[]),tr=["create","activate","update","remove","destroy"];function er(t,n){return t.key===n.key&&t.asyncFactory===n.asyncFactory&&(t.tag===n.tag&&t.isComment===n.isComment&&r(t.data)===r(n.data)&&function(t,e){if("input"!==t.tag)return!0;var n,o=r(n=t.data)&&r(n=n.attrs)&&n.type,i=r(n=e.data)&&r(n=n.attrs)&&n.type;return o===i||Kn(o)&&Kn(i)}(t,n)||o(t.isAsyncPlaceholder)&&e(n.asyncFactory.error))}function nr(t,e,n){var o,i,a={};for(o=e;o<=n;++o)r(i=t[o].key)&&(a[i]=o);return a}var rr={create:or,update:or,destroy:function(t){or(t,Qn)}};function or(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,o,i=t===Qn,a=e===Qn,s=ar(t.data.directives,t.context),c=ar(e.data.directives,e.context),u=[],l=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,cr(o,"update",e,t),o.def&&o.def.componentUpdated&&l.push(o)):(cr(o,"bind",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var f=function(){for(var n=0;n<u.length;n++)cr(u[n],"inserted",e,t)};i?ae(e,"insert",f):f()}if(l.length&&ae(e,"postpatch",(function(){for(var n=0;n<l.length;n++)cr(l[n],"componentUpdated",e,t)})),!i)for(n in s)c[n]||cr(s[n],"unbind",t,t,a)}(t,e)}var ir=Object.create(null);function ar(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=ir),o[sr(r)]=r,r.def=Pt(e.$options,"directives",r.name);return o}function sr(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function cr(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(r){Dt(r,n.context,"directive "+t.name+" "+e+" hook")}}var ur=[Zn,rr];function lr(t,n){var o=n.componentOptions;if(!(r(o)&&!1===o.Ctor.options.inheritAttrs||e(t.data.attrs)&&e(n.data.attrs))){var i,a,s=n.elm,c=t.data.attrs||{},u=n.data.attrs||{};for(i in r(u.__ob__)&&(u=n.data.attrs=k({},u)),u)a=u[i],c[i]!==a&&fr(s,i,a,n.data.pre);for(i in(V||Y)&&u.value!==c.value&&fr(s,"value",u.value),c)e(u[i])&&(Ln(i)?s.removeAttributeNS(Fn,Nn(i)):Pn(i)||s.removeAttribute(i))}}function fr(t,e,n,r){r||t.tagName.indexOf("-")>-1?pr(t,e,n):$n(e)?Dn(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Pn(e)?t.setAttribute(e,function(t,e){return Dn(e)||"false"===e?"false":"contenteditable"===t&&Bn(e)?e:"true"}(e,n)):Ln(e)?Dn(n)?t.removeAttributeNS(Fn,Nn(e)):t.setAttributeNS(Fn,e,n):pr(t,e,n)}function pr(t,e,n){if(Dn(n))t.removeAttribute(e);else{if(V&&!q&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var dr={create:lr,update:lr};function hr(t,n){var o=n.elm,i=n.data,a=t.data;if(!(e(i.staticClass)&&e(i.class)&&(e(a)||e(a.staticClass)&&e(a.class)))){var s=function(t){for(var e=t.data,n=t,o=t;r(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(e=Un(o.data,e));for(;r(n=n.parent);)n&&n.data&&(e=Un(e,n.data));return i=e.staticClass,a=e.class,r(i)||r(a)?zn(i,Hn(a)):"";var i,a}(n),c=o._transitionClasses;r(c)&&(s=zn(s,Hn(c))),s!==o._prevClass&&(o.setAttribute("class",s),o._prevClass=s)}}var vr,gr={create:hr,update:hr};function br(t,e,n){var r=vr;return function o(){var i=e.apply(null,arguments);null!==i&&xr(t,o,n,r)}}var mr=Wt&&!(X&&Number(X[1])<=53);function yr(t,e,n,r){if(mr){var o=un,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}vr.addEventListener(t,e,J?{capture:n,passive:r}:n)}function xr(t,e,n,r){(r||vr).removeEventListener(t,e._wrapper||e,n)}function _r(t,n){if(!e(t.data.on)||!e(n.data.on)){var o=n.data.on||{},i=t.data.on||{};vr=n.elm,function(t){if(r(t.__r)){var e=V?"change":"input";t[e]=[].concat(t.__r,t[e]||[]),delete t.__r}r(t.__c)&&(t.change=[].concat(t.__c,t.change||[]),delete t.__c)}(o),ie(o,i,yr,xr,br,n.context),vr=void 0}}var wr,Ar={create:_r,update:_r};function Cr(t,n){if(!e(t.data.domProps)||!e(n.data.domProps)){var o,i,a=n.elm,s=t.data.domProps||{},c=n.data.domProps||{};for(o in r(c.__ob__)&&(c=n.data.domProps=k({},c)),s)o in c||(a[o]="");for(o in c){if(i=c[o],"textContent"===o||"innerHTML"===o){if(n.children&&(n.children.length=0),i===s[o])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===o&&"PROGRESS"!==a.tagName){a._value=i;var u=e(i)?"":String(i);Sr(a,u)&&(a.value=u)}else if("innerHTML"===o&&Vn(a.tagName)&&e(a.innerHTML)){(wr=wr||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var l=wr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;l.firstChild;)a.appendChild(l.firstChild)}else if(i!==s[o])try{a[o]=i}catch(t){}}}}function Sr(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,o=t._vModifiers;if(r(o)){if(o.number)return p(n)!==p(e);if(o.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var kr={create:Cr,update:Cr},Or=m((function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach((function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Er(t){var e=Ir(t.style);return t.staticStyle?k(t.staticStyle,e):e}function Ir(t){return Array.isArray(t)?O(t):"string"==typeof t?Or(t):t}var Mr,Tr=/^--/,jr=/\s*!important$/,Rr=function(t,e,n){if(Tr.test(e))t.style.setProperty(e,n);else if(jr.test(n))t.style.setProperty(A(e),n.replace(jr,""),"important");else{var r=Br(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},Pr=["Webkit","Moz","ms"],Br=m((function(t){if(Mr=Mr||document.createElement("div").style,"filter"!==(t=x(t))&&t in Mr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<Pr.length;n++){var r=Pr[n]+e;if(r in Mr)return r}}));function $r(t,n){var o=n.data,i=t.data;if(!(e(o.staticStyle)&&e(o.style)&&e(i.staticStyle)&&e(i.style))){var a,s,c=n.elm,u=i.staticStyle,l=i.normalizedStyle||i.style||{},f=u||l,p=Ir(n.data.style)||{};n.data.normalizedStyle=r(p.__ob__)?k({},p):p;var d=function(t,e){for(var n,r={},o=t;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=Er(o.data))&&k(r,n);(n=Er(t.data))&&k(r,n);for(var i=t;i=i.parent;)i.data&&(n=Er(i.data))&&k(r,n);return r}(n);for(s in f)e(d[s])&&Rr(c,s,"");for(s in d)(a=d[s])!==f[s]&&Rr(c,s,null==a?"":a)}}var Fr={create:$r,update:$r},Lr=/\s+/;function Nr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Lr).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Dr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Lr).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Ur(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&k(e,zr(t.name||"v")),k(e,t),e}return"string"==typeof t?zr(t):void 0}}var zr=m((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),Hr=z&&!q,Gr="transition",Wr="animation",Vr="transition",qr="transitionend",Yr="animation",Kr="animationend";Hr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Vr="WebkitTransition",qr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Yr="WebkitAnimation",Kr="webkitAnimationEnd"));var Xr=z?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Zr(t){Xr((function(){Xr(t)}))}function Jr(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Nr(t,e))}function Qr(t,e){t._transitionClasses&&v(t._transitionClasses,e),Dr(t,e)}function to(t,e,n){var r=no(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===Gr?qr:Kr,c=0,u=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),i+1),t.addEventListener(s,l)}var eo=/\b(transform|all)(,|$)/;function no(t,e){var n,r=window.getComputedStyle(t),o=(r[Vr+"Delay"]||"").split(", "),i=(r[Vr+"Duration"]||"").split(", "),a=ro(o,i),s=(r[Yr+"Delay"]||"").split(", "),c=(r[Yr+"Duration"]||"").split(", "),u=ro(s,c),l=0,f=0;return e===Gr?a>0&&(n=Gr,l=a,f=i.length):e===Wr?u>0&&(n=Wr,l=u,f=c.length):f=(n=(l=Math.max(a,u))>0?a>u?Gr:Wr:null)?n===Gr?i.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===Gr&&eo.test(r[Vr+"Property"])}}function ro(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return oo(e)+oo(t[n])})))}function oo(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function io(t,n){var o=t.elm;r(o._leaveCb)&&(o._leaveCb.cancelled=!0,o._leaveCb());var i=Ur(t.data.transition);if(!e(i)&&!r(o._enterCb)&&1===o.nodeType){for(var s=i.css,c=i.type,u=i.enterClass,l=i.enterToClass,f=i.enterActiveClass,d=i.appearClass,h=i.appearToClass,v=i.appearActiveClass,g=i.beforeEnter,b=i.enter,m=i.afterEnter,y=i.enterCancelled,x=i.beforeAppear,_=i.appear,w=i.afterAppear,A=i.appearCancelled,C=i.duration,S=Xe,k=Xe.$vnode;k&&k.parent;)S=k.context,k=k.parent;var O=!S._isMounted||!t.isRootInsert;if(!O||_||""===_){var E=O&&d?d:u,I=O&&v?v:f,M=O&&h?h:l,T=O&&x||g,j=O&&"function"==typeof _?_:b,P=O&&w||m,B=O&&A||y,$=p(a(C)?C.enter:C),F=!1!==s&&!q,L=co(j),N=o._enterCb=R((function(){F&&(Qr(o,M),Qr(o,I)),N.cancelled?(F&&Qr(o,E),B&&B(o)):P&&P(o),o._enterCb=null}));t.data.show||ae(t,"insert",(function(){var e=o.parentNode,n=e&&e._pending&&e._pending[t.key];n&&n.tag===t.tag&&n.elm._leaveCb&&n.elm._leaveCb(),j&&j(o,N)})),T&&T(o),F&&(Jr(o,E),Jr(o,I),Zr((function(){Qr(o,E),N.cancelled||(Jr(o,M),L||(so($)?setTimeout(N,$):to(o,c,N)))}))),t.data.show&&(n&&n(),j&&j(o,N)),F||L||N()}}}function ao(t,n){var o=t.elm;r(o._enterCb)&&(o._enterCb.cancelled=!0,o._enterCb());var i=Ur(t.data.transition);if(e(i)||1!==o.nodeType)return n();if(!r(o._leaveCb)){var s=i.css,c=i.type,u=i.leaveClass,l=i.leaveToClass,f=i.leaveActiveClass,d=i.beforeLeave,h=i.leave,v=i.afterLeave,g=i.leaveCancelled,b=i.delayLeave,m=i.duration,y=!1!==s&&!q,x=co(h),_=p(a(m)?m.leave:m),w=o._leaveCb=R((function(){o.parentNode&&o.parentNode._pending&&(o.parentNode._pending[t.key]=null),y&&(Qr(o,l),Qr(o,f)),w.cancelled?(y&&Qr(o,u),g&&g(o)):(n(),v&&v(o)),o._leaveCb=null}));b?b(A):A()}function A(){w.cancelled||(!t.data.show&&o.parentNode&&((o.parentNode._pending||(o.parentNode._pending={}))[t.key]=t),d&&d(o),y&&(Jr(o,u),Jr(o,f),Zr((function(){Qr(o,u),w.cancelled||(Jr(o,l),x||(so(_)?setTimeout(w,_):to(o,c,w)))}))),h&&h(o,w),y||x||w())}}function so(t){return"number"==typeof t&&!isNaN(t)}function co(t){if(e(t))return!1;var n=t.fns;return r(n)?co(Array.isArray(n)?n[0]:n):(t._length||t.length)>1}function uo(t,e){!0!==e.data.show&&io(e)}var lo=function(t){var n,a,s={},c=t.modules,u=t.nodeOps;for(n=0;n<tr.length;++n)for(s[tr[n]]=[],a=0;a<c.length;++a)r(c[a][tr[n]])&&s[tr[n]].push(c[a][tr[n]]);function l(t){var e=u.parentNode(t);r(e)&&u.removeChild(e,t)}function f(t,e,n,i,a,c,l){if(r(t.elm)&&r(c)&&(t=c[l]=vt(t)),t.isRootInsert=!a,!function(t,e,n,i){var a=t.data;if(r(a)){var c=r(t.componentInstance)&&a.keepAlive;if(r(a=a.hook)&&r(a=a.init)&&a(t,!1),r(t.componentInstance))return p(t,e),h(n,t.elm,i),o(c)&&function(t,e,n,o){for(var i,a=t;a.componentInstance;)if(r(i=(a=a.componentInstance._vnode).data)&&r(i=i.transition)){for(i=0;i<s.activate.length;++i)s.activate[i](Qn,a);e.push(a);break}h(n,t.elm,o)}(t,e,n,i),!0}}(t,e,n,i)){var f=t.data,d=t.children,g=t.tag;r(g)?(t.elm=t.ns?u.createElementNS(t.ns,g):u.createElement(g,t),m(t),v(t,d,e),r(f)&&b(t,e),h(n,t.elm,i)):o(t.isComment)?(t.elm=u.createComment(t.text),h(n,t.elm,i)):(t.elm=u.createTextNode(t.text),h(n,t.elm,i))}}function p(t,e){r(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,g(t)?(b(t,e),m(t)):(Jn(t),e.push(t))}function h(t,e,n){r(t)&&(r(n)?u.parentNode(n)===t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function v(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)f(e[r],n,t.elm,null,!0,e,r);else i(t.text)&&u.appendChild(t.elm,u.createTextNode(String(t.text)))}function g(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return r(t.tag)}function b(t,e){for(var o=0;o<s.create.length;++o)s.create[o](Qn,t);r(n=t.data.hook)&&(r(n.create)&&n.create(Qn,t),r(n.insert)&&e.push(t))}function m(t){var e;if(r(e=t.fnScopeId))u.setStyleScope(t.elm,e);else for(var n=t;n;)r(e=n.context)&&r(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent;r(e=Xe)&&e!==t.context&&e!==t.fnContext&&r(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function y(t,e,n,r,o,i){for(;r<=o;++r)f(n[r],i,t,e,!1,n,r)}function x(t){var e,n,o=t.data;if(r(o))for(r(e=o.hook)&&r(e=e.destroy)&&e(t),e=0;e<s.destroy.length;++e)s.destroy[e](t);if(r(e=t.children))for(n=0;n<t.children.length;++n)x(t.children[n])}function _(t,e,n){for(;e<=n;++e){var o=t[e];r(o)&&(r(o.tag)?(w(o),x(o)):l(o.elm))}}function w(t,e){if(r(e)||r(t.data)){var n,o=s.remove.length+1;for(r(e)?e.listeners+=o:e=function(t,e){function n(){0==--n.listeners&&l(t)}return n.listeners=e,n}(t.elm,o),r(n=t.componentInstance)&&r(n=n._vnode)&&r(n.data)&&w(n,e),n=0;n<s.remove.length;++n)s.remove[n](t,e);r(n=t.data.hook)&&r(n=n.remove)?n(t,e):e()}else l(t.elm)}function A(t,e,n,o){for(var i=n;i<o;i++){var a=e[i];if(r(a)&&er(t,a))return i}}function C(t,n,i,a,c,l){if(t!==n){r(n.elm)&&r(a)&&(n=a[c]=vt(n));var p=n.elm=t.elm;if(o(t.isAsyncPlaceholder))r(n.asyncFactory.resolved)?O(t.elm,n,i):n.isAsyncPlaceholder=!0;else if(o(n.isStatic)&&o(t.isStatic)&&n.key===t.key&&(o(n.isCloned)||o(n.isOnce)))n.componentInstance=t.componentInstance;else{var d,h=n.data;r(h)&&r(d=h.hook)&&r(d=d.prepatch)&&d(t,n);var v=t.children,b=n.children;if(r(h)&&g(n)){for(d=0;d<s.update.length;++d)s.update[d](t,n);r(d=h.hook)&&r(d=d.update)&&d(t,n)}e(n.text)?r(v)&&r(b)?v!==b&&function(t,n,o,i,a){for(var s,c,l,p=0,d=0,h=n.length-1,v=n[0],g=n[h],b=o.length-1,m=o[0],x=o[b],w=!a;p<=h&&d<=b;)e(v)?v=n[++p]:e(g)?g=n[--h]:er(v,m)?(C(v,m,i,o,d),v=n[++p],m=o[++d]):er(g,x)?(C(g,x,i,o,b),g=n[--h],x=o[--b]):er(v,x)?(C(v,x,i,o,b),w&&u.insertBefore(t,v.elm,u.nextSibling(g.elm)),v=n[++p],x=o[--b]):er(g,m)?(C(g,m,i,o,d),w&&u.insertBefore(t,g.elm,v.elm),g=n[--h],m=o[++d]):(e(s)&&(s=nr(n,p,h)),e(c=r(m.key)?s[m.key]:A(m,n,p,h))?f(m,i,t,v.elm,!1,o,d):er(l=n[c],m)?(C(l,m,i,o,d),n[c]=void 0,w&&u.insertBefore(t,l.elm,v.elm)):f(m,i,t,v.elm,!1,o,d),m=o[++d]);p>h?y(t,e(o[b+1])?null:o[b+1].elm,o,d,b,i):d>b&&_(n,p,h)}(p,v,b,i,l):r(b)?(r(t.text)&&u.setTextContent(p,""),y(p,null,b,0,b.length-1,i)):r(v)?_(v,0,v.length-1):r(t.text)&&u.setTextContent(p,""):t.text!==n.text&&u.setTextContent(p,n.text),r(h)&&r(d=h.hook)&&r(d=d.postpatch)&&d(t,n)}}}function S(t,e,n){if(o(n)&&r(t.parent))t.parent.data.pendingInsert=e;else for(var i=0;i<e.length;++i)e[i].data.hook.insert(e[i])}var k=d("attrs,class,staticClass,staticStyle,key");function O(t,e,n,i){var a,s=e.tag,c=e.data,u=e.children;if(i=i||c&&c.pre,e.elm=t,o(e.isComment)&&r(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(r(c)&&(r(a=c.hook)&&r(a=a.init)&&a(e,!0),r(a=e.componentInstance)))return p(e,n),!0;if(r(s)){if(r(u))if(t.hasChildNodes())if(r(a=c)&&r(a=a.domProps)&&r(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var l=!0,f=t.firstChild,d=0;d<u.length;d++){if(!f||!O(f,u[d],n,i)){l=!1;break}f=f.nextSibling}if(!l||f)return!1}else v(e,u,n);if(r(c)){var h=!1;for(var g in c)if(!k(g)){h=!0,b(e,n);break}!h&&c.class&&ee(c.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,n,i,a){if(!e(n)){var c,l=!1,p=[];if(e(t))l=!0,f(n,p);else{var d=r(t.nodeType);if(!d&&er(t,n))C(t,n,p,null,null,a);else{if(d){if(1===t.nodeType&&t.hasAttribute(P)&&(t.removeAttribute(P),i=!0),o(i)&&O(t,n,p))return S(n,p,!0),t;c=t,t=new ft(u.tagName(c).toLowerCase(),{},[],void 0,c)}var h=t.elm,v=u.parentNode(h);if(f(n,p,h._leaveCb?null:v,u.nextSibling(h)),r(n.parent))for(var b=n.parent,m=g(n);b;){for(var y=0;y<s.destroy.length;++y)s.destroy[y](b);if(b.elm=n.elm,m){for(var w=0;w<s.create.length;++w)s.create[w](Qn,b);var A=b.data.hook.insert;if(A.merged)for(var k=1;k<A.fns.length;k++)A.fns[k]()}else Jn(b);b=b.parent}r(v)?_([t],0,0):r(t.tag)&&x(t)}}return S(n,p,l),n.elm}r(t)&&x(t)}}({nodeOps:Xn,modules:[dr,gr,Ar,kr,Fr,z?{create:uo,activate:uo,remove:function(t,e){!0!==t.data.show?ao(t,e):e()}}:{}].concat(ur)});q&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&yo(t,"input")}));var fo={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ae(n,"postpatch",(function(){fo.componentUpdated(t,e,n)})):po(t,e,n.context),t._vOptions=[].map.call(t.options,go)):("textarea"===n.tag||Kn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",bo),t.addEventListener("compositionend",mo),t.addEventListener("change",mo),q&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){po(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,go);o.some((function(t,e){return!T(t,r[e])}))&&(t.multiple?e.value.some((function(t){return vo(t,o)})):e.value!==e.oldValue&&vo(e.value,o))&&yo(t,"change")}}};function po(t,e,n){ho(t,e),(V||Y)&&setTimeout((function(){ho(t,e)}),0)}function ho(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=j(r,go(a))>-1,a.selected!==i&&(a.selected=i);else if(T(go(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function vo(t,e){return e.every((function(e){return!T(e,t)}))}function go(t){return"_value"in t?t._value:t.value}function bo(t){t.target.composing=!0}function mo(t){t.target.composing&&(t.target.composing=!1,yo(t.target,"input"))}function yo(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function xo(t){return!t.componentInstance||t.data&&t.data.transition?t:xo(t.componentInstance._vnode)}var _o={bind:function(t,e,n){var r=e.value,o=(n=xo(n)).data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,io(n,(function(){t.style.display=i}))):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=xo(n)).data&&n.data.transition?(n.data.show=!0,r?io(n,(function(){t.style.display=t.__vOriginalDisplay})):ao(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}},wo={model:fo,show:_o},Ao={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Co(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?Co(We(e.children)):t}function So(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[x(i)]=o[i];return e}function ko(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var Oo=function(t){return t.tag||he(t)},Eo=function(t){return"show"===t.name},Io={name:"transition",props:Ao,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(Oo)).length){var r=this.mode,o=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return o;var a=Co(o);if(!a)return o;if(this._leaving)return ko(t,o);var s="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?s+"comment":s+a.tag:i(a.key)?0===String(a.key).indexOf(s)?a.key:s+a.key:a.key;var c=(a.data||(a.data={})).transition=So(this),u=this._vnode,l=Co(u);if(a.data.directives&&a.data.directives.some(Eo)&&(a.data.show=!0),l&&l.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(a,l)&&!he(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var f=l.data.transition=k({},c);if("out-in"===r)return this._leaving=!0,ae(f,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),ko(t,o);if("in-out"===r){if(he(a))return u;var p,d=function(){p()};ae(c,"afterEnter",d),ae(c,"enterCancelled",d),ae(f,"delayLeave",(function(t){p=t}))}}return o}}},Mo=k({tag:String,moveClass:String},Ao);delete Mo.mode;var To={props:Mo,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Ze(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=So(this),s=0;s<o.length;s++){var c=o[s];c.tag&&null!=c.key&&0!==String(c.key).indexOf("__vlist")&&(i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a)}if(r){for(var u=[],l=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):l.push(p)}this.kept=t(e,null,u),this.removed=l}return t(e,null,i)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(jo),t.forEach(Ro),t.forEach(Po),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;Jr(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(qr,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(qr,t),n._moveCb=null,Qr(n,e))})}})))},methods:{hasMove:function(t,e){if(!Hr)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){Dr(n,t)})),Nr(n,e),n.style.display="none",this.$el.appendChild(n);var r=no(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function jo(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function Ro(t){t.data.newPos=t.elm.getBoundingClientRect()}function Po(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}var Bo={Transition:Io,TransitionGroup:To};Cn.config.mustUseProp=function(t,e,n){return"value"===n&&Rn(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Cn.config.isReservedTag=qn,Cn.config.isReservedAttr=jn,Cn.config.getTagNamespace=function(t){return Vn(t)?"svg":"math"===t?"math":void 0},Cn.config.isUnknownElement=function(t){if(!z)return!0;if(qn(t))return!1;if(t=t.toLowerCase(),null!=Yn[t])return Yn[t];var e=document.createElement(t);return t.indexOf("-")>-1?Yn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Yn[t]=/HTMLUnknownElement/.test(e.toString())},k(Cn.options.directives,wo),k(Cn.options.components,Bo),Cn.prototype.__patch__=z?lo:E,Cn.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=dt),en(t,"beforeMount"),r=function(){t._update(t._render(),n)},new hn(t,r,E,{before:function(){t._isMounted&&!t._isDestroyed&&en(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,en(t,"mounted")),t}(this,t=t&&z?function(t){return"string"==typeof t?document.querySelector(t)||document.createElement("div"):t}(t):void 0,e)},z&&setTimeout((function(){F.devtools&&et&&et.emit("init",Cn)}),0);const $o=Cn;var Fo=("undefined"!=typeof window?window:void 0!==n.g?n.g:{}).__VUE_DEVTOOLS_GLOBAL_HOOK__;function Lo(t,e){if(void 0===e&&(e=[]),null===t||"object"!=typeof t)return t;var n,r=(n=function(e){return e.original===t},e.filter(n)[0]);if(r)return r.copy;var o=Array.isArray(t)?[]:{};return e.push({original:t,copy:o}),Object.keys(t).forEach((function(n){o[n]=Lo(t[n],e)})),o}function No(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}function Do(t){return null!==t&&"object"==typeof t}var Uo=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"==typeof n?n():n)||{}},zo={namespaced:{configurable:!0}};zo.namespaced.get=function(){return!!this._rawModule.namespaced},Uo.prototype.addChild=function(t,e){this._children[t]=e},Uo.prototype.removeChild=function(t){delete this._children[t]},Uo.prototype.getChild=function(t){return this._children[t]},Uo.prototype.hasChild=function(t){return t in this._children},Uo.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},Uo.prototype.forEachChild=function(t){No(this._children,t)},Uo.prototype.forEachGetter=function(t){this._rawModule.getters&&No(this._rawModule.getters,t)},Uo.prototype.forEachAction=function(t){this._rawModule.actions&&No(this._rawModule.actions,t)},Uo.prototype.forEachMutation=function(t){this._rawModule.mutations&&No(this._rawModule.mutations,t)},Object.defineProperties(Uo.prototype,zo);var Ho,Go=function(t){this.register([],t,!1)};function Wo(t,e,n){if(e.update(n),n.modules)for(var r in n.modules){if(!e.getChild(r))return;Wo(t.concat(r),e.getChild(r),n.modules[r])}}Go.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},Go.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return t+((e=e.getChild(n)).namespaced?n+"/":"")}),"")},Go.prototype.update=function(t){Wo([],this.root,t)},Go.prototype.register=function(t,e,n){var r=this;void 0===n&&(n=!0);var o=new Uo(e,n);0===t.length?this.root=o:this.get(t.slice(0,-1)).addChild(t[t.length-1],o),e.modules&&No(e.modules,(function(e,o){r.register(t.concat(o),e,n)}))},Go.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1],r=e.getChild(n);r&&r.runtime&&e.removeChild(n)},Go.prototype.isRegistered=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];return!!e&&e.hasChild(n)};var Vo=function(t){var e=this;void 0===t&&(t={}),!Ho&&"undefined"!=typeof window&&window.Vue&&ti(window.Vue);var n=t.plugins;void 0===n&&(n=[]);var r=t.strict;void 0===r&&(r=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new Go(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new Ho,this._makeLocalGettersCache=Object.create(null);var o=this,i=this.dispatch,a=this.commit;this.dispatch=function(t,e){return i.call(o,t,e)},this.commit=function(t,e,n){return a.call(o,t,e,n)},this.strict=r;var s=this._modules.root.state;Zo(this,s,[],this._modules.root),Xo(this,s),n.forEach((function(t){return t(e)})),(void 0!==t.devtools?t.devtools:Ho.config.devtools)&&function(t){Fo&&(t._devtoolHook=Fo,Fo.emit("vuex:init",t),Fo.on("vuex:travel-to-state",(function(e){t.replaceState(e)})),t.subscribe((function(t,e){Fo.emit("vuex:mutation",t,e)}),{prepend:!0}),t.subscribeAction((function(t,e){Fo.emit("vuex:action",t,e)}),{prepend:!0}))}(this)},qo={state:{configurable:!0}};function Yo(t,e,n){return e.indexOf(t)<0&&(n&&n.prepend?e.unshift(t):e.push(t)),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function Ko(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;Zo(t,n,[],t._modules.root,!0),Xo(t,n,e)}function Xo(t,e,n){var r=t._vm;t.getters={},t._makeLocalGettersCache=Object.create(null);var o=t._wrappedGetters,i={};No(o,(function(e,n){i[n]=function(t,e){return function(){return t(e)}}(e,t),Object.defineProperty(t.getters,n,{get:function(){return t._vm[n]},enumerable:!0})}));var a=Ho.config.silent;Ho.config.silent=!0,t._vm=new Ho({data:{$$state:e},computed:i}),Ho.config.silent=a,t.strict&&function(t){t._vm.$watch((function(){return this._data.$$state}),(function(){}),{deep:!0,sync:!0})}(t),r&&(n&&t._withCommit((function(){r._data.$$state=null})),Ho.nextTick((function(){return r.$destroy()})))}function Zo(t,e,n,r,o){var i=!n.length,a=t._modules.getNamespace(n);if(r.namespaced&&(t._modulesNamespaceMap[a],t._modulesNamespaceMap[a]=r),!i&&!o){var s=Jo(e,n.slice(0,-1)),c=n[n.length-1];t._withCommit((function(){Ho.set(s,c,r.state)}))}var u=r.context=function(t,e,n){var r=""===e,o={dispatch:r?t.dispatch:function(n,r,o){var i=Qo(n,r,o),a=i.payload,s=i.options,c=i.type;return s&&s.root||(c=e+c),t.dispatch(c,a)},commit:r?t.commit:function(n,r,o){var i=Qo(n,r,o),a=i.payload,s=i.options,c=i.type;s&&s.root||(c=e+c),t.commit(c,a,s)}};return Object.defineProperties(o,{getters:{get:r?function(){return t.getters}:function(){return function(t,e){if(!t._makeLocalGettersCache[e]){var n={},r=e.length;Object.keys(t.getters).forEach((function(o){if(o.slice(0,r)===e){var i=o.slice(r);Object.defineProperty(n,i,{get:function(){return t.getters[o]},enumerable:!0})}})),t._makeLocalGettersCache[e]=n}return t._makeLocalGettersCache[e]}(t,e)}},state:{get:function(){return Jo(t.state,n)}}}),o}(t,a,n);r.forEachMutation((function(e,n){!function(t,e,n,r){(t._mutations[e]||(t._mutations[e]=[])).push((function(e){n.call(t,r.state,e)}))}(t,a+n,e,u)})),r.forEachAction((function(e,n){var r=e.root?n:a+n,o=e.handler||e;!function(t,e,n,r){(t._actions[e]||(t._actions[e]=[])).push((function(e){var o,i=n.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},e);return(o=i)&&"function"==typeof o.then||(i=Promise.resolve(i)),t._devtoolHook?i.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):i}))}(t,r,o,u)})),r.forEachGetter((function(e,n){!function(t,e,n,r){t._wrappedGetters[e]||(t._wrappedGetters[e]=function(t){return n(r.state,r.getters,t.state,t.getters)})}(t,a+n,e,u)})),r.forEachChild((function(r,i){Zo(t,e,n.concat(i),r,o)}))}function Jo(t,e){return e.reduce((function(t,e){return t[e]}),t)}function Qo(t,e,n){return Do(t)&&t.type&&(n=e,e=t,t=t.type),{type:t,payload:e,options:n}}function ti(t){Ho&&t===Ho||function(t){if(Number(t.version.split(".")[0])>=2)t.mixin({beforeCreate:n});else{var e=t.prototype._init;t.prototype._init=function(t){void 0===t&&(t={}),t.init=t.init?[n].concat(t.init):n,e.call(this,t)}}function n(){var t=this.$options;t.store?this.$store="function"==typeof t.store?t.store():t.store:t.parent&&t.parent.$store&&(this.$store=t.parent.$store)}}(Ho=t)}qo.state.get=function(){return this._vm._data.$$state},qo.state.set=function(t){},Vo.prototype.commit=function(t,e,n){var r=this,o=Qo(t,e,n),i=o.type,a=o.payload,s=(o.options,{type:i,payload:a}),c=this._mutations[i];c&&(this._withCommit((function(){c.forEach((function(t){t(a)}))})),this._subscribers.slice().forEach((function(t){return t(s,r.state)})))},Vo.prototype.dispatch=function(t,e){var n=this,r=Qo(t,e),o=r.type,i=r.payload,a={type:o,payload:i},s=this._actions[o];if(s){try{this._actionSubscribers.slice().filter((function(t){return t.before})).forEach((function(t){return t.before(a,n.state)}))}catch(t){}var c=s.length>1?Promise.all(s.map((function(t){return t(i)}))):s[0](i);return new Promise((function(t,e){c.then((function(e){try{n._actionSubscribers.filter((function(t){return t.after})).forEach((function(t){return t.after(a,n.state)}))}catch(t){}t(e)}),(function(t){try{n._actionSubscribers.filter((function(t){return t.error})).forEach((function(e){return e.error(a,n.state,t)}))}catch(t){}e(t)}))}))}},Vo.prototype.subscribe=function(t,e){return Yo(t,this._subscribers,e)},Vo.prototype.subscribeAction=function(t,e){return Yo("function"==typeof t?{before:t}:t,this._actionSubscribers,e)},Vo.prototype.watch=function(t,e,n){var r=this;return this._watcherVM.$watch((function(){return t(r.state,r.getters)}),e,n)},Vo.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._vm._data.$$state=t}))},Vo.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"==typeof t&&(t=[t]),this._modules.register(t,e),Zo(this,this.state,t,this._modules.get(t),n.preserveState),Xo(this,this.state)},Vo.prototype.unregisterModule=function(t){var e=this;"string"==typeof t&&(t=[t]),this._modules.unregister(t),this._withCommit((function(){var n=Jo(e.state,t.slice(0,-1));Ho.delete(n,t[t.length-1])})),Ko(this)},Vo.prototype.hasModule=function(t){return"string"==typeof t&&(t=[t]),this._modules.isRegistered(t)},Vo.prototype.hotUpdate=function(t){this._modules.update(t),Ko(this,!0)},Vo.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(Vo.prototype,qo);var ei=ai((function(t,e){var n={};return ii(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var r=si(this.$store,0,t);if(!r)return;e=r.context.state,n=r.context.getters}return"function"==typeof o?o.call(this,e,n):e[o]},n[r].vuex=!0})),n})),ni=ai((function(t,e){var n={};return ii(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var r=this.$store.commit;if(t){var i=si(this.$store,0,t);if(!i)return;r=i.context.commit}return"function"==typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),ri=ai((function(t,e){var n={};return ii(e).forEach((function(e){var r=e.key,o=e.val;o=t+o,n[r]=function(){if(!t||si(this.$store,0,t))return this.$store.getters[o]},n[r].vuex=!0})),n})),oi=ai((function(t,e){var n={};return ii(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var r=this.$store.dispatch;if(t){var i=si(this.$store,0,t);if(!i)return;r=i.context.dispatch}return"function"==typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n}));function ii(t){return function(t){return Array.isArray(t)||Do(t)}(t)?Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}})):[]}function ai(t){return function(e,n){return"string"!=typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function si(t,e,n){return t._modulesNamespaceMap[n]}function ci(t,e,n){var r=n?t.groupCollapsed:t.group;try{r.call(t,e)}catch(n){t.log(e)}}function ui(t){try{t.groupEnd()}catch(e){t.log("—— log end ——")}}function li(){var t=new Date;return" @ "+fi(t.getHours(),2)+":"+fi(t.getMinutes(),2)+":"+fi(t.getSeconds(),2)+"."+fi(t.getMilliseconds(),3)}function fi(t,e){return"0",n=e-t.toString().length,new Array(n+1).join("0")+t;var n}var pi={Store:Vo,install:ti,version:"3.6.2",mapState:ei,mapMutations:ni,mapGetters:ri,mapActions:oi,createNamespacedHelpers:function(t){return{mapState:ei.bind(null,t),mapGetters:ri.bind(null,t),mapMutations:ni.bind(null,t),mapActions:oi.bind(null,t)}},createLogger:function(t){void 0===t&&(t={});var e=t.collapsed;void 0===e&&(e=!0);var n=t.filter;void 0===n&&(n=function(t,e,n){return!0});var r=t.transformer;void 0===r&&(r=function(t){return t});var o=t.mutationTransformer;void 0===o&&(o=function(t){return t});var i=t.actionFilter;void 0===i&&(i=function(t,e){return!0});var a=t.actionTransformer;void 0===a&&(a=function(t){return t});var s=t.logMutations;void 0===s&&(s=!0);var c=t.logActions;void 0===c&&(c=!0);var u=t.logger;return void 0===u&&(u=console),function(t){var l=Lo(t.state);void 0!==u&&(s&&t.subscribe((function(t,i){var a=Lo(i);if(n(t,l,a)){var s=li(),c=o(t),f="mutation "+t.type+s;ci(u,f,e),u.log("%c prev state","color: #9E9E9E; font-weight: bold",r(l)),u.log("%c mutation","color: #03A9F4; font-weight: bold",c),u.log("%c next state","color: #4CAF50; font-weight: bold",r(a)),ui(u)}l=a})),c&&t.subscribeAction((function(t,n){if(i(t,n)){var r=li(),o=a(t),s="action "+t.type+r;ci(u,s,e),u.log("%c action","color: #03A9F4; font-weight: bold",o),ui(u)}})))}}};const di=pi;function hi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function vi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var gi={color0:"#3288bd",color1:"#99d594",color2:"#fee08b",color3:"#d53e4f"};const bi={namespaced:!0,state:function(){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?hi(Object(n),!0).forEach((function(e){vi(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):hi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},gi)},mutations:{updateColor:function(t,e){var n=e.step,r=e.color;return t[n]=r},resetColors:function(t){return Object.keys(gi).forEach((function(e){return t[e]=gi[e]}))}}};function mi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function yi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var xi={width:325,height:325,resolution:5};const _i={namespaced:!0,state:function(){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?mi(Object(n),!0).forEach((function(e){yi(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):mi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},xi)},mutations:{setWidth:function(t,e){return t.width=parseInt(e,10)},setHeight:function(t,e){return t.height=parseInt(e,10)},setResolution:function(t,e){return t.resolution=parseInt(e)},resetDimensions:function(t){return Object.keys(xi).forEach((function(e){return t[e]=xi[e]}))}},getters:{cols:function(t){return Math.floor(t.width/t.resolution)},rows:function(t){return Math.floor(t.height/t.resolution)},minWidth:function(t){var e=250;return Math.floor(e/t.resolution)%2==0&&(e+=t.resolution),e},maxWidth:function(t){var e=800;return Math.floor(e/t.resolution)%2==0&&(e+=t.resolution),e},minHeight:function(t){var e=250;return Math.floor(e/t.resolution)%2==0&&(e+=t.resolution),e},maxHeight:function(t){var e=800;return Math.floor(e/t.resolution)%2==0&&(e+=t.resolution),e},minResolution:function(t){return 5},maxResolution:function(t){return 15}}};function wi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Ai(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?wi(Object(n),!0).forEach((function(e){Ci(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):wi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ci(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Si={baseSand:0,startingSand:1e3},ki={setBaseSand:function(t,e){return t.baseSand=parseInt(e,10)},setStartingSand:function(t,e){return t.startingSand=parseInt(e,10)},resetSand:function(t){return Object.keys(Si).forEach((function(e){t[e]=Si[e]}))},setSand:function(t,e){return t.sand=e},updateSand:function(t,e){var n=e.idx,r=e.amount;return t.sand.splice(n,1,r)}};const Oi={namespaced:!0,state:function(){return Ai(Ai({},Si),{},{sand:[]})},mutations:ki,getters:{sandTotal:function(t){return t.sand.reduce((function(t,e){return t+e}),0)}}};$o.use(di);const Ei=new di.Store({strict:!1,modules:{canvas:_i,heatmap:bi,sand:Oi}});function Ii(t,e,n,r,o,i,a,s){var c,u="function"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var l=u.render;u.render=function(t,e){return c.call(e),l(t,e)}}else{var f=u.beforeCreate;u.beforeCreate=f?[].concat(f,c):[c]}return{exports:t,options:u}}const Mi=Ii({props:{startActive:{type:Boolean,default:!1},activeIcon:{type:String,default:""},inactiveIcon:{type:String,default:""},activeText:{type:String,default:""},inactiveText:{type:String,default:""}},data:function(){return{active:this.startActive}},computed:{icon:function(){return this.active?this.activeIcon:this.inactiveIcon},text:function(){return this.active?this.activeText:this.inactiveText}},methods:{toggle:function(){this.active=!this.active,this.$emit("toggle",this.active)}}},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"inline-container"},[n("button",{staticClass:"btn",on:{click:function(e){return e.preventDefault(),t.toggle.apply(null,arguments)}}},[t.icon?n("span",{staticClass:"icon",domProps:{innerHTML:t._s(t.icon)}}):t._e(),t._v(" "),n("span",{staticClass:"text"},[t._v("\n            "+t._s(t.text)+"\n        ")])])])}),[],!1,null,null,null).exports,Ti=Ii({props:{width:{type:Number,default:0},height:{type:Number,default:0}},data:function(){return{provider:{context:null,width:this.width,height:this.height}}},provide:function(){return{provider:this.provider}},watch:{width:function(t){this.provider.width=t},height:function(t){this.provider.height=t}},mounted:function(){this.provider.context=this.$refs["vue-canvas"].getContext("2d")}},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("canvas",{ref:"vue-canvas",staticClass:"vue-canvas",attrs:{width:t.width,height:t.height},on:{mousedown:function(e){return t.$emit("mousedown",e)},mouseup:function(e){return t.$emit("mouseup",e)},mouseleave:function(e){return t.$emit("mouseleave",e)},mousemove:function(e){return t.$emit("mousemove",e)}}}),t._v(" "),t._t("default")],2)}),[],!1,null,null,null).exports;var ji=function(t,e,n){return t+e*n},Ri=function(t,e){return{x:t%e,y:Math.floor(t/e)}};const Pi={inject:["provider"],props:{grid:{type:Array,default:function(){return[]}},width:{type:[String,Number],default:100,validator:function(t){var e=parseInt(t,10);return!isNaN(e)&&e>0}},height:{type:[String,Number],default:100,validator:function(t){var e=parseInt(t,10);return!isNaN(e)&&e>0}},resolution:{type:Number,default:1,validator:function(t){return parseInt(t,10),!isNaN(t)&&t>0}},colorStep0:{type:String,default:"#3288bd"},colorStep1:{type:String,default:"#99d594"},colorStep2:{type:String,default:"#fee08b"},colorStep3:{type:String,default:"#fc8d59"}},computed:{rows:function(){return Math.floor(this.height/this.resolution)},cols:function(){return Math.floor(this.width/this.resolution)}},methods:{clear:function(){var t=this.provider.context,e=this.width,n=this.height;t.clearRect(0,0,e,n)}},watch:{width:function(){this.clear()},height:function(){this.clear()},resolution:function(){this.clear()}},render:function(){if(this.provider.context){var t=this.provider.context,e=(this.width,this.height,this.cols),n=(this.rows,this.resolution),r=this.grid,o=this.colorStep0,i=this.colorStep1,a=this.colorStep2,s=this.colorStep3;for(var c in r){var u=Ri(c,e),l=u.x,f=u.y,p=s;switch(r[c]){case 0:p=o;break;case 1:p=i;break;case 2:p=a}t.fillStyle=p,t.fillRect(l*n,f*n,n,n),t.strokeStyle="rgba(0, 0, 0, 0.1)",t.strokeRect(l*n,f*n,n,n)}}}},Bi=Ii(Pi,void 0,void 0,!1,null,null,null).exports,$i=Ii({props:{legend:{type:String,required:!0},canReset:{type:Boolean,default:!0}}},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("fieldset",{staticClass:"control-group"},[n("legend",[t._v(t._s(t.legend))]),t._v(" "),t._t("default"),t._v(" "),t.canReset?n("div",[n("button",{staticClass:"btn",on:{click:function(e){return e.preventDefault(),t.$emit("reset",e)}}},[t._v("\n            Reset\n        ")])]):t._e()],2)}),[],!1,null,null,null).exports;function Fi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Li(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Fi(Object(n),!0).forEach((function(e){Ni(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Fi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ni(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}const Di=Ii({components:{ControlGroup:$i},computed:Li(Li({},ei("sand",["baseSand","startingSand","sand"])),ri("sand",["sandTotal"])),methods:ni("sand",["setBaseSand","setStartingSand","resetSand","setSand","updateSand"])},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ControlGroup",{attrs:{legend:"Sand"},on:{reset:t.resetSand}},[n("div",[n("div",[t._v("Total Sand: "+t._s(t.sandTotal))]),t._v(" "),n("div",[n("button",{staticClass:"btn",on:{click:function(e){return e.preventDefault(),t.$emit("clear",e)}}},[t._v("\n                Clear\n            ")])])]),t._v(" "),n("div",[n("div",[n("label",[t._v("Base Sand ("+t._s(t.baseSand)+")")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:"0",max:"4",step:"1"},domProps:{value:t.baseSand},on:{input:function(e){return t.setBaseSand(e.target.value)}}})])]),t._v(" "),n("div",[n("div",[n("label",[t._v("Starting Sand ("+t._s(t.startingSand)+")")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:"100",max:"100000",step:"100"},domProps:{value:t.startingSand},on:{input:function(e){return t.setStartingSand(e.target.value)}}})])])])}),[],!1,null,null,null).exports;var Ui=n(4023);const zi={props:{value:{type:String,required:!0},popupTitle:{type:String,required:!0}},data:function(){return{open:!1,color:this.value,x:0,y:0}},components:{Photoshop:Ui.Photoshop},methods:{cancel:function(){this.color=this.value,this.open=!1},choose:function(){this.open=!1,this.$emit("change",this.color)}},watch:{open:function(t){t&&(this.x=this.$refs.button.getBoundingClientRect().left,this.y=this.$refs.button.getBoundingClientRect().top-this.$refs.button.clientHeight)}}};n(3715);var Hi=Ii(zi,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"inline-container"},[n("button",{ref:"button",staticClass:"btn btn-color-picker",on:{click:function(e){t.open=!0}}},[n("span",{staticClass:"swatch",style:{backgroundColor:t.value}}),t._v(" "),n("span",{staticClass:"text"},[t._v(t._s(t.value))])]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:t.open,expression:"open"}],staticClass:"popup"},[n("div",{staticClass:"popup-inner",style:{top:t.y+"px",left:t.x+"px"}},[n("Photoshop",{attrs:{value:t.color,head:t.popupTitle},on:{cancel:t.cancel,input:function(e){t.color=e.hex},ok:t.choose}})],1)])])}),[],!1,null,"531a026a",null);const Gi=Ii({components:{ButtonColorPicker:Hi.exports,ControlGroup:$i},computed:ei("heatmap",["color0","color1","color2","color3"]),methods:ni("heatmap",["updateColor","resetColors"])},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ControlGroup",{attrs:{legend:"Heatmap"},on:{reset:t.resetColors}},[n("div",[n("label",[t._v("0 Grains")]),t._v(" "),n("ButtonColorPicker",{key:t.color0+"-color0",attrs:{value:t.color0,popupTitle:"Color - 0 Grains"},on:{change:function(e){return t.updateColor({step:"color0",color:e})}}})],1),t._v(" "),n("div",[n("label",[t._v("1 Grains")]),t._v(" "),n("ButtonColorPicker",{key:t.color1+"-color1",attrs:{value:t.color1,popupTitle:"Color - 1 Grains"},on:{change:function(e){return t.updateColor({step:"color1",color:e})}}})],1),t._v(" "),n("div",[n("label",[t._v("2 Grains")]),t._v(" "),n("ButtonColorPicker",{key:t.color2+"-color2",attrs:{value:t.color2,popupTitle:"Color - 2 Grains"},on:{change:function(e){return t.updateColor({step:"color2",color:e})}}})],1),t._v(" "),n("div",[n("label",[t._v("3 Grains")]),t._v(" "),n("ButtonColorPicker",{key:t.color3+"-color3",attrs:{value:t.color3,popupTitle:"Color - 3 Grains"},on:{change:function(e){return t.updateColor({step:"color3",color:e})}}})],1)])}),[],!1,null,null,null).exports;function Wi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Vi(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Wi(Object(n),!0).forEach((function(e){qi(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Wi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function qi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}const Yi=Ii({components:{ControlGroup:$i},computed:Vi(Vi({},ei("canvas",["width","height","resolution"])),ri("canvas",["minWidth","maxWidth","minHeight","maxHeight","minResolution","maxResolution","cols","rows"])),methods:ni("canvas",["setHeight","setWidth","setResolution","resetDimensions"])},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ControlGroup",{attrs:{legend:"Canvas"},on:{reset:t.resetDimensions}},[n("div",[n("div",[n("label",[t._v("Resolution ("+t._s(t.resolution)+"px "),n("span",{domProps:{innerHTML:t._s("&#215;")}}),t._v(" "+t._s(t.resolution)+"px)")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:t.minResolution,max:t.maxResolution,step:"1"},domProps:{value:t.resolution},on:{input:function(e){return t.setResolution(e.target.value)}}})])]),t._v(" "),n("div",[n("div",[n("label",[t._v("Width ("+t._s(t.cols)+" Cols)")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:t.minWidth,max:t.maxWidth,step:t.resolution},domProps:{value:t.width},on:{input:function(e){return t.setWidth(e.target.value)}}})])]),t._v(" "),n("div",[n("div",[n("label",[t._v("Height ("+t._s(t.rows)+" Rows)")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:t.minHeight,max:t.maxHeight,step:t.resolution},domProps:{value:t.height},on:{input:function(e){return t.setHeight(e.target.value)}}})])])])}),[],!1,null,null,null).exports;n(305);const Ki=Ii({data:function(){return{active:!1}}},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("button",{staticClass:"btn",on:{click:function(e){e.preventDefault(),t.active=!t.active}}},[n("div",{staticClass:"hamburger",class:{active:t.active}},[n("div",{staticClass:"horizontal-bar"}),t._v(" "),n("div",{staticClass:"horizontal-bar"}),t._v(" "),n("div",{staticClass:"horizontal-bar"})])]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:t.active,expression:"active"}]},[t._t("default")],2)])}),[],!1,null,"729e4cd7",null).exports;function Xi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Zi(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Xi(Object(n),!0).forEach((function(e){Ji(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Xi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ji(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Qi=void 0;const ta={components:{ButtonToggle:Mi,CanvasRoot:Ti,CanvasGridHeatMap:Bi,ControlGroupSand:Di,ControlGroupHeatmap:Gi,ControlGroupCanvas:Yi,MenuCollapsible:Ki},data:function(){return{interacting:!1,interactingX:null,interactingY:null,interactingAmount:10,doLoop:!0,timeout:null}},computed:Zi(Zi(Zi(Zi({},ei("heatmap",["color0","color1","color2","color3"])),ei("canvas",["width","height","resolution"])),ri("canvas",["minWidth","maxWidth","minHeight","maxHeight","minResolution","maxResolution","cols","rows"])),ei("sand",["baseSand","startingSand","sand"])),methods:Zi(Zi(Zi({},ni("canvas",["setHeight","setWidth","setResolution"])),ni("sand",["setSand","updateSand"])),{},{constrainCanvas:function(t){var e=t?this.resolution:-this.resolution,n=Math.max(this.minWidth,Math.min(this.maxWidth,this.width+e)),r=Math.max(this.minHeight,Math.min(this.maxHeight,this.height+e));(this.cols%2==0||this.width>this.maxWidth||this.width<this.minHeight)&&this.setWidth(n),(this.rows%2==0||this.height>this.maxHeight||this.height<this.minHeight)&&this.setHeight(r)},setInteracting:function(t,e){this.interacting=!0,this.updateInteracting(e),this.interactingAmount=t},updateInteracting:function(t){var e=t.offsetX||t.layerX,n=t.offsetY||t.layerY;(e=Math.round(e/this.resolution))>0&&e<this.cols&&(this.interactingX=e),(n=Math.round(n/this.resolution))>0&&n<this.rows&&(this.interactingY=n)},clear:function(){var t=new Array(this.rows*this.cols);t.fill(this.baseSand),this.setSand(t)},reset:function(){this.clear();var t=ji(Math.floor(this.cols/2),Math.floor(this.rows/2),this.cols);this.updateSand({idx:t,amount:this.startingSand})},optimiseCanvas:function(){var t=this.$refs.content.getBoundingClientRect(),e=t.width,n=t.height,r=Math.floor(Math.min(e,n)),o=Math.round(.0125*r);o=Math.min(o,this.maxResolution),o=Math.max(o,this.minResolution),this.setWidth(r),this.setHeight(r),this.setResolution(o)},onResize:function(){var t=this;clearTimeout(Qi),Qi=setTimeout((function(){t.optimiseCanvas()}),100)},$_setUp:function(){window.addEventListener("resize",this.onResize),this.optimiseCanvas(),this.reset()},$_update:function(){if(this.interacting){var t=ji(this.interactingX,this.interactingY,this.cols);this.updateSand({idx:t,amount:this.sand[t]+=this.interactingAmount})}this.$_topple()},$_topple:function(){var t=this,e=Array.from(this.sand);this.sand.forEach((function(n,r){if(n>=4){e[r]=e[r]-4;var o=Ri(r,t.cols),i=o.x,a=o.y;if(i>0){var s=ji(i-1,a,t.cols);e[s]=e[s]+1}if(i<t.cols-1){var c=ji(i+1,a,t.cols);e[c]=e[c]+1}if(a>0){var u=ji(i,a-1,t.cols);e[u]=e[u]+1}if(a<t.rows-1){var l=ji(i,a+1,t.cols);e[l]=e[l]+1}}})),this.setSand(e)},$_loop:function(){var t=this;requestAnimationFrame((function(){t.$_update(),t.doLoop&&t.$_loop()}))}}),watch:{doLoop:function(t){t&&this.$_loop()},resolution:function(t,e){t=parseInt(t,10),e=parseInt(e,10),this.constrainCanvas(t>e),this.reset()},width:function(t,e){t=parseInt(t,10),e=parseInt(e,10),this.constrainCanvas(t>e),this.reset()},height:function(t,e){t=parseInt(t,10),e=parseInt(e,10),this.constrainCanvas(t>e),this.reset()}},mounted:function(){this.$nextTick((function(){this.$_setUp(),this.$_loop()}))},beforeDestroy:function(){window.removeEventListener("resize",this.onResize)}},ea=ta;n(1639);const na=Ii(ea,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"container"}},[t._m(0),t._v(" "),n("aside",{attrs:{id:"controls"}},[n("div",[n("ButtonToggle",{attrs:{activeText:"Play",inactiveText:"Pause",inactiveIcon:"&#9208;",activeIcon:"&#9654;"},on:{toggle:function(e){t.doLoop=!t.doLoop}}}),t._v(" "),n("button",{staticClass:"btn",on:{click:function(e){return e.preventDefault(),t.reset.apply(null,arguments)}}},[n("span",{domProps:{innerHTML:t._s("&#8634;")}}),t._v(" Restart\n            ")])],1),t._v(" "),n("MenuCollapsible",{staticClass:"display-sm hamburger-menu"},[n("ControlGroupSand",{on:{clear:t.clear}}),t._v(" "),n("ControlGroupCanvas")],1),t._v(" "),n("div",{staticClass:"display-md"},[n("ControlGroupSand",{on:{clear:t.clear}}),t._v(" "),n("ControlGroupHeatmap"),t._v(" "),n("ControlGroupCanvas")],1)],1),t._v(" "),n("section",{ref:"content",attrs:{id:"content"}},[n("CanvasRoot",{attrs:{width:t.width,height:t.height},on:{mousedown:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"left",37,e.key,["Left","ArrowLeft"])||"button"in e&&0!==e.button?null:t.setInteracting(10,e)},mouseup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"left",37,e.key,["Left","ArrowLeft"])||"button"in e&&0!==e.button?null:void(t.interacting=!1)},mouselave:function(e){t.interacting=!1},mousemove:function(e){return t.updateInteracting(e)}}},[n("CanvasGridHeatMap",{attrs:{grid:t.sand,height:t.height,width:t.width,resolution:t.resolution,colorStep0:t.color0,colorStep1:t.color1,colorStep2:t.color2,colorStep3:t.color3}})],1)],1)])}),[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("header",{attrs:{id:"header"}},[n("h1",[t._v("Abelian Sandpile")])])}],!1,null,"426338b8",null).exports;n(6643),new $o({el:"#app",store:Ei,render:function(t){return t(na)}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPLFNBQVNDLE1BQU0sTUFBTUMsZUFBZSxTQUFTQyxLQUFLLE1BQU1DLFdBQVcsU0FBU0MsTUFBTSxTQUFTQyxVQUFVLFNBQVNDLFlBQVksU0FBU0MsVUFBVSxTQUFTQyxXQUFXLFNBQVNDLFVBQVUsU0FBU0MsTUFBTSxTQUFTQyxlQUFlLFNBQVNDLFNBQVMsU0FBU0MsUUFBUSxTQUFTQyxLQUFLLE1BQU1DLFNBQVMsU0FBU0MsU0FBUyxTQUFTQyxjQUFjLFNBQVNDLFNBQVMsU0FBU0MsVUFBVSxTQUFTQyxTQUFTLFNBQVNDLFVBQVUsU0FBU0MsWUFBWSxTQUFTQyxlQUFlLFNBQVNDLFdBQVcsU0FBU0MsV0FBVyxTQUFTQyxRQUFRLFNBQVNDLFdBQVcsU0FBU0MsYUFBYSxTQUFTQyxjQUFjLFNBQVNDLGNBQWMsU0FBU0MsY0FBYyxTQUFTQyxjQUFjLFNBQVNDLFdBQVcsU0FBU0MsU0FBUyxTQUFTQyxZQUFZLFNBQVNDLFFBQVEsU0FBU0MsUUFBUSxTQUFTQyxXQUFXLFNBQVNDLFVBQVUsU0FBU0MsWUFBWSxTQUFTQyxZQUFZLFNBQVNDLFFBQVEsTUFBTUMsVUFBVSxTQUFTQyxXQUFXLFNBQVNDLEtBQUssU0FBU0MsVUFBVSxTQUFTQyxLQUFLLFNBQVNDLE1BQU0sU0FBU0MsWUFBWSxTQUFTMUosS0FBSyxTQUFTMkosU0FBUyxTQUFTQyxRQUFRLFNBQVNDLFVBQVUsU0FBU0MsT0FBTyxTQUFTQyxNQUFNLFNBQVNDLE1BQU0sU0FBU0MsU0FBUyxTQUFTQyxjQUFjLFNBQVNDLFVBQVUsU0FBU0MsYUFBYSxTQUFTQyxVQUFVLFNBQVNDLFdBQVcsU0FBU0MsVUFBVSxTQUFTQyxxQkFBcUIsU0FBU0MsVUFBVSxTQUFTQyxXQUFXLFNBQVNDLFVBQVUsU0FBU0MsVUFBVSxTQUFTQyxZQUFZLFNBQVNDLGNBQWMsU0FBU0MsYUFBYSxTQUFTQyxlQUFlLE1BQU1DLGVBQWUsTUFBTUMsZUFBZSxTQUFTQyxZQUFZLFNBQVNDLEtBQUssTUFBTUMsVUFBVSxTQUFTQyxNQUFNLFNBQVNDLFFBQVEsTUFBTUMsT0FBTyxT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QUUsQ0FBQyxHQUFHLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUyakMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXdGtELEVBQUUsQ0FBQyxHQUFHLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVVta0QsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXOWEsRUFBRSxDQUFDLEdBQUcsVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVTJhLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssV0FBV2p0QixFQUFFLENBQUMsR0FBRyxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVOHNCLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssV0FBVzNpRSxFQUFFLENBQUMsR0FBRyxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVd2lFLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssV0FBVzdhLEVBQUUsQ0FBQyxHQUFHLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUwYSxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFdBQVd2YSxFQUFFLENBQUMsR0FBRyxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVb2EsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXMzZCLEVBQUUsQ0FBQyxHQUFHLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVV3NkIsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXdm9DLEVBQUUsQ0FBQyxHQUFHLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVVvb0MsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXNWlELEVBQUUsQ0FBQyxHQUFHLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVV5aUQsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXdmtELEVBQUUsQ0FBQyxHQUFHLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVVva0QsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXbCtDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFV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N0osRUFDQSxLQUNBLFdBQ0EsTUFJOEIsZ0JFYmhDLElBQUk0akIsR0FBSSxDQUNKaDVFLEdBQUksT0FDSjNFLE1BQUFBLEdBQ0FxaUQsT0FBUSxTQUFBZCxHQUFDLE9BQUlBLEVBQUU2bEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLWNvbnN0cnVjdG9yLWFuZC1saXN0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zb3J0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tYWRkLWFsbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi1kZWxldGUtYWxsLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLWZyb20uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbXBvc2l0ZS1rZXkuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWh0bWwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZyZWV6aW5nLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtbWFwLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llZWU3NTQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1kYXRhLWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWxvZzFwLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLXNjYWxlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS11cmwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9udW1iZXItaXMtZmluaXRlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9udW1iZXItcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZmxlY3QtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NhbWUtdmFsdWUtemVyby5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGFzay5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXBvc2l0aXZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLXNwZWNpZXMtYW5kLWxpc3QuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mbGF0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXAuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jb3NoLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cyLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaWduLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaW5oLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50YW5oLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5hbGwtc2V0dGxlZC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuYW55LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS1hbGwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5yZXBsYWNlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zcGVjaWVzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNwbGl0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mcm9tLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDE2LWFycmF5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm9mLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zdWJhcnJheS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstc2V0LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFnZ3JlZ2F0ZS1lcnJvci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hcnJheS5sYXN0LWluZGV4LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5Lmxhc3QtaXRlbS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5jb21wb3NpdGUta2V5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmNvbXBvc2l0ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuZ2xvYmFsLXRoaXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmRlbGV0ZS1hbGwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmV2ZXJ5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmZpbmQta2V5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5maW5kLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5mcm9tLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5ncm91cC1ieS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmtleS1ieS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAua2V5LW9mLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5tYXAta2V5cy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAubWFwLXZhbHVlcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAubWVyZ2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLm9mLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLnNvbWUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLnVwZGF0ZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXRoLmNsYW1wLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hdGguZGVnLXBlci1yYWQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5kZWdyZWVzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hdGguZnNjYWxlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hdGguaWFkZGguanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5pbXVsaC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXRoLmlzdWJoLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hdGgucmFkLXBlci1kZWcuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5yYWRpYW5zLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hdGguc2NhbGUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5zZWVkZWQtcHJuZy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXRoLnNpZ25iaXQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5udW1iZXIuZnJvbS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLmFsbC1zZXR0bGVkLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnByb21pc2UuYW55LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQucmVmbGVjdC5nZXQtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5hZGQtYWxsLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5kZWxldGUtYWxsLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5kaWZmZXJlbmNlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5ldmVyeS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuZmlsdGVyLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5maW5kLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5mcm9tLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5pbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmlzLWRpc2pvaW50LWZyb20uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmlzLXN1YnNldC1vZi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtc3VwZXJzZXQtb2YuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmpvaW4uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0Lm1hcC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQub2YuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuc29tZS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuc3ltbWV0cmljLWRpZmZlcmVuY2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LnVuaW9uLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnN0cmluZy5hdC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zdHJpbmcuY29kZS1wb2ludHMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zdHJpbmcucmVwbGFjZS1hbGwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3ltYm9sLmRpc3Bvc2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3ltYm9sLnBhdHRlcm4tbWF0Y2guanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQud2Vhay1tYXAuZGVsZXRlLWFsbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LndlYWstc2V0LmFkZC1hbGwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQud2Vhay1zZXQuZGVsZXRlLWFsbC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC53ZWFrLXNldC5mcm9tLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnF1ZXVlLW1pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2NvbXBvbmVudHMvQnV0dG9uQ29sb3JQaWNrZXIudnVlPzBmZjYiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2NvbXBvbmVudHMvTWFpbkFwcC52dWU/MTU2OCIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvY29tcG9uZW50cy9NZW51Q29sbGFwc2libGUudnVlPzc3MzAiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2Nzcy9hcHAuY3NzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9jc3MvYnV0dG9ucy5jc3MiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2Nzcy9mb3Jtcy5jc3MiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2Nzcy9ncmlkLmNzcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvY3NzL3Jlc3BvbnNpdmUuY3NzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9jc3MvdHlwb2dyYXBoeS5jc3MiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvdnVlLWNvbG9yL2Rpc3QvdnVlLWNvbG9yLm1pbi5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvY29tcG9uZW50cy9CdXR0b25Db2xvclBpY2tlci52dWU/NmFkYSIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvY29tcG9uZW50cy9NYWluQXBwLnZ1ZT85M2YwIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL01lbnVDb2xsYXBzaWJsZS52dWU/ZjBkYyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvY3NzL2FwcC5jc3M/NzM5OCIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5lc20uanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL3Z1ZXgvZGlzdC92dWV4LmVzbS5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvc3RvcmVzL2hlYXRtYXAuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL3N0b3Jlcy9jYW52YXMuanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL3N0b3Jlcy9zYW5kLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9zdG9yZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvY29tcG9uZW50cy9CdXR0b25Ub2dnbGUudnVlIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS9zcmMvanMvY29tcG9uZW50cy9CdXR0b25Ub2dnbGUudnVlIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL0J1dHRvblRvZ2dsZS52dWU/N2ViNyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvY29tcG9uZW50cy9DYW52YXNSb290LnZ1ZSIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvc3JjL2pzL2NvbXBvbmVudHMvQ2FudmFzUm9vdC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2NvbXBvbmVudHMvQ2FudmFzUm9vdC52dWU/ZWIxNyIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvdXRpbGl0aWVzLmpzIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS9zcmMvanMvY29tcG9uZW50cy9DYW52YXNHcmlkSGVhdE1hcC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2NvbXBvbmVudHMvQ2FudmFzR3JpZEhlYXRNYXAudnVlIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL0NhbnZhc0dyaWRIZWF0TWFwLnZ1ZT80NGY0Iiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwLnZ1ZT9iOWEyIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cFNhbmQudnVlIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS9zcmMvanMvY29tcG9uZW50cy9Db250cm9sR3JvdXBTYW5kLnZ1ZSIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvY29tcG9uZW50cy9Db250cm9sR3JvdXBTYW5kLnZ1ZT84NThkIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cEhlYXRtYXAudnVlPzY1ZTIiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlL3NyYy9qcy9jb21wb25lbnRzL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZSIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvY29tcG9uZW50cy9CdXR0b25Db2xvclBpY2tlci52dWU/ODhmOCIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvY29tcG9uZW50cy9CdXR0b25Db2xvclBpY2tlci52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2NvbXBvbmVudHMvQnV0dG9uQ29sb3JQaWNrZXIudnVlPzQyYzEiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwSGVhdG1hcC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cEhlYXRtYXAudnVlIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cENhbnZhcy52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cENhbnZhcy52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwQ2FudmFzLnZ1ZT82MzMwIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL01lbnVDb2xsYXBzaWJsZS52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlL3NyYy9qcy9jb21wb25lbnRzL01lbnVDb2xsYXBzaWJsZS52dWUiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2NvbXBvbmVudHMvTWVudUNvbGxhcHNpYmxlLnZ1ZT9hZGM1Iiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS9zcmMvanMvY29tcG9uZW50cy9NYWluQXBwLnZ1ZSIsIndlYnBhY2s6Ly92dWUtc2FuZHBpbGUvLi9zcmMvanMvY29tcG9uZW50cy9NYWluQXBwLnZ1ZT9jNTAxIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL01haW5BcHAudnVlIiwid2VicGFjazovL3Z1ZS1zYW5kcGlsZS8uL3NyYy9qcy9jb21wb25lbnRzL01haW5BcHAudnVlPzUyMDAiLCJ3ZWJwYWNrOi8vdnVlLXNhbmRwaWxlLy4vc3JjL2pzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gY2hhckF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCAnICsgKG5hbWUgPyBuYW1lICsgJyAnIDogJycpICsgJ2ludm9jYXRpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby10eXBlZC1hcnJheXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBEYXRhVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIEludDhBcnJheVByb3RvdHlwZSA9IEludDhBcnJheSAmJiBJbnQ4QXJyYXkucHJvdG90eXBlO1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5ID0gZ2xvYmFsLlVpbnQ4Q2xhbXBlZEFycmF5O1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlID0gVWludDhDbGFtcGVkQXJyYXkgJiYgVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlO1xudmFyIFR5cGVkQXJyYXkgPSBJbnQ4QXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5KTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5UHJvdG90eXBlICYmIGdldFByb3RvdHlwZU9mKEludDhBcnJheVByb3RvdHlwZSk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBpc1Byb3RvdHlwZU9mID0gT2JqZWN0UHJvdG90eXBlLmlzUHJvdG90eXBlT2Y7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIFRZUEVEX0FSUkFZX1RBRyA9IHVpZCgnVFlQRURfQVJSQVlfVEFHJyk7XG52YXIgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IgPSB1aWQoJ1RZUEVEX0FSUkFZX0NPTlNUUlVDVE9SJyk7XG4vLyBGaXhpbmcgbmF0aXZlIHR5cGVkIGFycmF5cyBpbiBPcGVyYSBQcmVzdG8gY3Jhc2hlcyB0aGUgYnJvd3Nlciwgc2VlICM1OTVcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gTkFUSVZFX0FSUkFZX0JVRkZFUiAmJiAhIXNldFByb3RvdHlwZU9mICYmIGNsYXNzb2YoZ2xvYmFsLm9wZXJhKSAhPT0gJ09wZXJhJztcbnZhciBUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCA9IGZhbHNlO1xudmFyIE5BTUUsIENvbnN0cnVjdG9yLCBQcm90b3R5cGU7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgSW50OEFycmF5OiAxLFxuICBVaW50OEFycmF5OiAxLFxuICBVaW50OENsYW1wZWRBcnJheTogMSxcbiAgSW50MTZBcnJheTogMixcbiAgVWludDE2QXJyYXk6IDIsXG4gIEludDMyQXJyYXk6IDQsXG4gIFVpbnQzMkFycmF5OiA0LFxuICBGbG9hdDMyQXJyYXk6IDQsXG4gIEZsb2F0NjRBcnJheTogOFxufTtcblxudmFyIEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgQmlnSW50NjRBcnJheTogOCxcbiAgQmlnVWludDY0QXJyYXk6IDhcbn07XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiBrbGFzcyA9PT0gJ0RhdGFWaWV3J1xuICAgIHx8IGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpXG4gICAgfHwgaGFzKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICB2YXIga2xhc3MgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpXG4gICAgfHwgaGFzKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGFUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1R5cGVkQXJyYXkoaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBhIHR5cGVkIGFycmF5Jyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChDKSB7XG4gIGlmIChzZXRQcm90b3R5cGVPZiAmJiAhaXNQcm90b3R5cGVPZi5jYWxsKFR5cGVkQXJyYXksIEMpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3InKTtcbiAgfSByZXR1cm4gQztcbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCkge1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChmb3JjZWQpIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSwgS0VZKSkgdHJ5IHtcbiAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICB9XG4gIGlmICghVHlwZWRBcnJheVByb3RvdHlwZVtLRVldIHx8IGZvcmNlZCkge1xuICAgIHJlZGVmaW5lKFR5cGVkQXJyYXlQcm90b3R5cGUsIEtFWSwgZm9yY2VkID8gcHJvcGVydHlcbiAgICAgIDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBJbnQ4QXJyYXlQcm90b3R5cGVbS0VZXSB8fCBwcm9wZXJ0eSk7XG4gIH1cbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCkge1xuICB2YXIgQVJSQVksIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAoZm9yY2VkKSBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVkpKSB0cnkge1xuICAgICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV07XG4gICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfVxuICAgIGlmICghVHlwZWRBcnJheVtLRVldIHx8IGZvcmNlZCkge1xuICAgICAgLy8gVjggfiBDaHJvbWUgNDktNTAgYCVUeXBlZEFycmF5JWAgbWV0aG9kcyBhcmUgbm9uLXdyaXRhYmxlIG5vbi1jb25maWd1cmFibGVcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZWRlZmluZShUeXBlZEFycmF5LCBLRVksIGZvcmNlZCA/IHByb3BlcnR5IDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBUeXBlZEFycmF5W0tFWV0gfHwgcHJvcGVydHkpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICAgIH0gZWxzZSByZXR1cm47XG4gIH1cbiAgZm9yIChBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiAoIVR5cGVkQXJyYXlDb25zdHJ1Y3RvcltLRVldIHx8IGZvcmNlZCkpIHtcbiAgICAgIHJlZGVmaW5lKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZLCBwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFByb3RvdHlwZSwgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IsIENvbnN0cnVjdG9yKTtcbiAgZWxzZSBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gZmFsc2U7XG59XG5cbmZvciAoTkFNRSBpbiBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFByb3RvdHlwZSwgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IsIENvbnN0cnVjdG9yKTtcbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIHR5cGVkIGFycmF5cyBjb25zdHJ1Y3RvcnMgcHJvdG90eXBlIGlzIE9iamVjdC5wcm90b3R5cGVcbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCB0eXBlb2YgVHlwZWRBcnJheSAhPSAnZnVuY3Rpb24nIHx8IFR5cGVkQXJyYXkgPT09IEZ1bmN0aW9uLnByb3RvdHlwZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93IC0tIHNhZmVcbiAgVHlwZWRBcnJheSA9IGZ1bmN0aW9uIFR5cGVkQXJyYXkoKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xuICB9O1xuICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgaWYgKGdsb2JhbFtOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLCBUeXBlZEFycmF5KTtcbiAgfVxufVxuXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIVR5cGVkQXJyYXlQcm90b3R5cGUgfHwgVHlwZWRBcnJheVByb3RvdHlwZSA9PT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5LnByb3RvdHlwZTtcbiAgaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIGlmIChnbG9iYWxbTkFNRV0pIHNldFByb3RvdHlwZU9mKGdsb2JhbFtOQU1FXS5wcm90b3R5cGUsIFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICB9XG59XG5cbi8vIFdlYktpdCBidWcgLSBvbmUgbW9yZSBvYmplY3QgaW4gVWludDhDbGFtcGVkQXJyYXkgcHJvdG90eXBlIGNoYWluXG5pZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBnZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSkgIT09IFR5cGVkQXJyYXlQcm90b3R5cGUpIHtcbiAgc2V0UHJvdG90eXBlT2YoVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUsIFR5cGVkQXJyYXlQcm90b3R5cGUpO1xufVxuXG5pZiAoREVTQ1JJUFRPUlMgJiYgIWhhcyhUeXBlZEFycmF5UHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICBUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCA9IHRydWU7XG4gIGRlZmluZVByb3BlcnR5KFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaXMpID8gdGhpc1tUWVBFRF9BUlJBWV9UQUddIDogdW5kZWZpbmVkO1xuICB9IH0pO1xuICBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIGlmIChnbG9iYWxbTkFNRV0pIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsW05BTUVdLCBUWVBFRF9BUlJBWV9UQUcsIE5BTUUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTLFxuICBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUjogVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IsXG4gIFRZUEVEX0FSUkFZX1RBRzogVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQgJiYgVFlQRURfQVJSQVlfVEFHLFxuICBhVHlwZWRBcnJheTogYVR5cGVkQXJyYXksXG4gIGFUeXBlZEFycmF5Q29uc3RydWN0b3I6IGFUeXBlZEFycmF5Q29uc3RydWN0b3IsXG4gIGV4cG9ydFR5cGVkQXJyYXlNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlNZXRob2QsXG4gIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QsXG4gIGlzVmlldzogaXNWaWV3LFxuICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheTogVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheVByb3RvdHlwZTogVHlwZWRBcnJheVByb3RvdHlwZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgSUVFRTc1NCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZWVlNzU0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCc7XG52YXIgTmF0aXZlQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkQXJyYXlCdWZmZXIgPSBOYXRpdmVBcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciAkRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXcgJiYgJERhdGFWaWV3W1BST1RPVFlQRV07XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG5cbnZhciBwYWNrSUVFRTc1NCA9IElFRUU3NTQucGFjaztcbnZhciB1bnBhY2tJRUVFNzU0ID0gSUVFRTc1NC51bnBhY2s7XG5cbnZhciBwYWNrSW50OCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGXTtcbn07XG5cbnZhciBwYWNrSW50MTYgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRiwgbnVtYmVyID4+IDggJiAweEZGXTtcbn07XG5cbnZhciBwYWNrSW50MzIgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRiwgbnVtYmVyID4+IDggJiAweEZGLCBudW1iZXIgPj4gMTYgJiAweEZGLCBudW1iZXIgPj4gMjQgJiAweEZGXTtcbn07XG5cbnZhciB1bnBhY2tJbnQzMiA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlclszXSA8PCAyNCB8IGJ1ZmZlclsyXSA8PCAxNiB8IGJ1ZmZlclsxXSA8PCA4IHwgYnVmZmVyWzBdO1xufTtcblxudmFyIHBhY2tGbG9hdDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCAyMywgNCk7XG59O1xuXG52YXIgcGFja0Zsb2F0NjQgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChudW1iZXIsIDUyLCA4KTtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGtleSkge1xuICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvcltQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07IH0gfSk7XG59O1xuXG52YXIgZ2V0ID0gZnVuY3Rpb24gKHZpZXcsIGNvdW50LCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChpbmRleCk7XG4gIHZhciBzdG9yZSA9IGdldEludGVybmFsU3RhdGUodmlldyk7XG4gIGlmIChpbnRJbmRleCArIGNvdW50ID4gc3RvcmUuYnl0ZUxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBieXRlcyA9IGdldEludGVybmFsU3RhdGUoc3RvcmUuYnVmZmVyKS5ieXRlcztcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyBzdG9yZS5ieXRlT2Zmc2V0O1xuICB2YXIgcGFjayA9IGJ5dGVzLnNsaWNlKHN0YXJ0LCBzdGFydCArIGNvdW50KTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufTtcblxudmFyIHNldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIGJ5dGVzW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGNvdW50IC0gaSAtIDFdO1xufTtcblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnl0ZXM6IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCksXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoXG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykgdGhpcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBnZXRJbnRlcm5hbFN0YXRlKGJ1ZmZlcikuYnl0ZUxlbmd0aDtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICBieXRlT2Zmc2V0OiBvZmZzZXRcbiAgICB9KTtcbiAgICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gICAgICB0aGlzLmJ5dGVPZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVPZmZzZXQnKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgMjMpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCA1Mik7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDY0LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgTmF0aXZlQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKC0xKTtcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigxLjUpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcihOYU4pO1xuICAgIHJldHVybiBOYXRpdmVBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlQXJyYXlCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvdHlwZSA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gTmF0aXZlQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVBcnJheUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRBcnJheUJ1ZmZlciwga2V5LCBOYXRpdmVBcnJheUJ1ZmZlcltrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQXJyYXlCdWZmZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cblxuICAvLyBXZWJLaXQgYnVnIC0gdGhlIHNhbWUgcGFyZW50IHByb3RvdHlwZSBmb3IgdHlwZWQgYXJyYXlzIGFuZCBkYXRhIHZpZXdcbiAgaWYgKHNldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKCREYXRhVmlld1Byb3RvdHlwZSkgIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIHNldFByb3RvdHlwZU9mKCREYXRhVmlld1Byb3RvdHlwZSwgT2JqZWN0UHJvdG90eXBlKTtcbiAgfVxuXG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdGVzdFZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdQcm90b3R5cGUuc2V0SW50ODtcbiAgdGVzdFZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHRlc3RWaWV3LmdldEludDgoMCkgfHwgIXRlc3RWaWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1Byb3RvdHlwZSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyLFxuICBEYXRhVmlldzogJERhdGFWaWV3XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWNvcHl3aXRoaW4gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IG1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWxsXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gIVNUUklDVF9NRVRIT0QgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxufSA6IFtdLmZvckVhY2g7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgbGlzdCkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgQ29uc3RydWN0b3IobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyUmVqZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyUmVqZWN0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUtbGFzdGluZGV4b2YgLS0gc2FmZSAqL1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciAkbGFzdEluZGV4T2YgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbGFzdEluZGV4T2YgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdsYXN0SW5kZXhPZicpO1xudmFyIEZPUkNFRCA9IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0Q7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAvLyBjb252ZXJ0IC0wIHRvICswXG4gIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJGxhc3RJbmRleE9mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBtaW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8gJiYgT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICByZXR1cm4gLTE7XG59IDogJGxhc3RJbmRleE9mO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gSVNfUklHSFQgPyBsZW5ndGggLSAxIDogMDtcbiAgICB2YXIgaSA9IElTX1JJR0hUID8gLTEgOiAxO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPCAyKSB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBpZiAoSVNfUklHSFQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoO0lTX1JJR0hUID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiAgbGVmdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG4gIHJpZ2h0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIvLyBUT0RPOiB1c2Ugc29tZXRoaW5nIG1vcmUgY29tcGxleCBsaWtlIHRpbXNvcnQ/XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG52YXIgbWVyZ2VTb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICByZXR1cm4gbGVuZ3RoIDwgOCA/IGluc2VydGlvblNvcnQoYXJyYXksIGNvbXBhcmVmbikgOiBtZXJnZShcbiAgICBtZXJnZVNvcnQoYXJyYXkuc2xpY2UoMCwgbWlkZGxlKSwgY29tcGFyZWZuKSxcbiAgICBtZXJnZVNvcnQoYXJyYXkuc2xpY2UobWlkZGxlKSwgY29tcGFyZWZuKSxcbiAgICBjb21wYXJlZm5cbiAgKTtcbn07XG5cbnZhciBpbnNlcnRpb25Tb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIGkgPSAxO1xuICB2YXIgZWxlbWVudCwgajtcblxuICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgIGogPSBpO1xuICAgIGVsZW1lbnQgPSBhcnJheVtpXTtcbiAgICB3aGlsZSAoaiAmJiBjb21wYXJlZm4oYXJyYXlbaiAtIDFdLCBlbGVtZW50KSA+IDApIHtcbiAgICAgIGFycmF5W2pdID0gYXJyYXlbLS1qXTtcbiAgICB9XG4gICAgaWYgKGogIT09IGkrKykgYXJyYXlbal0gPSBlbGVtZW50O1xuICB9IHJldHVybiBhcnJheTtcbn07XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCwgY29tcGFyZWZuKSB7XG4gIHZhciBsbGVuZ3RoID0gbGVmdC5sZW5ndGg7XG4gIHZhciBybGVuZ3RoID0gcmlnaHQubGVuZ3RoO1xuICB2YXIgbGluZGV4ID0gMDtcbiAgdmFyIHJpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAobGluZGV4IDwgbGxlbmd0aCB8fCByaW5kZXggPCBybGVuZ3RoKSB7XG4gICAgaWYgKGxpbmRleCA8IGxsZW5ndGggJiYgcmluZGV4IDwgcmxlbmd0aCkge1xuICAgICAgcmVzdWx0LnB1c2goY29tcGFyZWZuKGxlZnRbbGluZGV4XSwgcmlnaHRbcmluZGV4XSkgPD0gMCA/IGxlZnRbbGluZGV4KytdIDogcmlnaHRbcmluZGV4KytdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2gobGluZGV4IDwgbGxlbmd0aCA/IGxlZnRbbGluZGV4KytdIDogcmlnaHRbcmluZGV4KytdKTtcbiAgICB9XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2VTb3J0O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYSBwYXJ0IG9mIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsInZhciBhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChhcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbEFycmF5KSkobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvY29sbGVjdGlvbi1tZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgvKiAuLi5lbGVtZW50cyAqLykge1xuICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciBhZGRlciA9IGFGdW5jdGlvbihzZXQuYWRkKTtcbiAgZm9yICh2YXIgayA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgIGFkZGVyLmNhbGwoc2V0LCBhcmd1bWVudHNba10pO1xuICB9XG4gIHJldHVybiBzZXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2NvbGxlY3Rpb24tbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgdmFyIGNvbGxlY3Rpb24gPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlbW92ZXIgPSBhRnVuY3Rpb24oY29sbGVjdGlvblsnZGVsZXRlJ10pO1xuICB2YXIgYWxsRGVsZXRlZCA9IHRydWU7XG4gIHZhciB3YXNEZWxldGVkO1xuICBmb3IgKHZhciBrID0gMCwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgd2FzRGVsZXRlZCA9IHJlbW92ZXIuY2FsbChjb2xsZWN0aW9uLCBhcmd1bWVudHNba10pO1xuICAgIGFsbERlbGV0ZWQgPSBhbGxEZWxldGVkICYmIHdhc0RlbGV0ZWQ7XG4gIH1cbiAgcmV0dXJuICEhYWxsRGVsZXRlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBGbiA9IGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nLCBhcnJheSwgbiwgYm91bmRGdW5jdGlvbjtcbiAgYUZ1bmN0aW9uKHRoaXMpO1xuICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgYXJyYXkgPSBbXTtcbiAgaWYgKG1hcHBpbmcpIHtcbiAgICBuID0gMDtcbiAgICBib3VuZEZ1bmN0aW9uID0gYmluZChtYXBGbiwgbGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgaXRlcmF0ZShzb3VyY2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgYXJyYXkucHVzaChib3VuZEZ1bmN0aW9uKG5leHRJdGVtLCBuKyspKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyYXRlKHNvdXJjZSwgYXJyYXkucHVzaCwgeyB0aGF0OiBhcnJheSB9KTtcbiAgfVxuICByZXR1cm4gbmV3IHRoaXMoYXJyYXkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb2YoKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgQSA9IG5ldyBBcnJheShsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICByZXR1cm4gbmV3IHRoaXMoQSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLmZhc3RLZXk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaW5kZXg6IGNyZWF0ZShudWxsKSxcbiAgICAgICAgZmlyc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgbGFzdDogdW5kZWZpbmVkLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9KTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMpIHRoYXQuc2l6ZSA9IDA7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgdmFyIHByZXZpb3VzLCBpbmRleDtcbiAgICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0ID0gZW50cnkgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZW1vdmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXN0YXRlLmZpcnN0KSBzdGF0ZS5maXJzdCA9IGVudHJ5O1xuICAgICAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSBlbnRyeTtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplKys7XG4gICAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICB2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gICAgICB2YXIgZW50cnk7XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHN0YXRlLmluZGV4W2luZGV4XTtcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICAgICAgZm9yIChlbnRyeSA9IHN0YXRlLmZpcnN0OyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgICAgIGlmIChlbnRyeS5rZXkgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5jbGVhcigpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuY2xlYXJcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5jbGVhclxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgIHZhciBkYXRhID0gc3RhdGUuaW5kZXg7XG4gICAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmZpcnN0O1xuICAgICAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucHJldmlvdXMpIGVudHJ5LnByZXZpb3VzID0gZW50cnkucHJldmlvdXMubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pbmRleF07XG4gICAgICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmZpcnN0ID0gc3RhdGUubGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplID0gMDtcbiAgICAgICAgZWxzZSB0aGF0LnNpemUgPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmRlbGV0ZShrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubmV4dDtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5pbmRleFtlbnRyeS5pbmRleF07XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubmV4dCA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucHJldmlvdXMgPSBwcmV2O1xuICAgICAgICAgIGlmIChzdGF0ZS5maXJzdCA9PSBlbnRyeSkgc3RhdGUuZmlyc3QgPSBuZXh0O1xuICAgICAgICAgIGlmIChzdGF0ZS5sYXN0ID09IGVudHJ5KSBzdGF0ZS5sYXN0ID0gcHJldjtcbiAgICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUtLTtcbiAgICAgICAgICBlbHNlIHRoYXQuc2l6ZS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5mb3JlYWNoXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZm9yZWFjaFxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubmV4dCA6IHN0YXRlLmZpcnN0KSB7XG4gICAgICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucmVtb3ZlZCkgZW50cnkgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIGB7IE1hcCwgU2V0fS5wcm90b3R5cGUuaGFzKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5oYXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5oYXNcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIElTX01BUCA/IHtcbiAgICAgIC8vIGBNYXAucHJvdG90eXBlLmdldChrZXkpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5nZXRcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudmFsdWU7XG4gICAgICB9LFxuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5zZXRcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSA6IHtcbiAgICAgIC8vIGBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmFkZFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eShDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuc2l6ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKSB7XG4gICAgdmFyIElURVJBVE9SX05BTUUgPSBDT05TVFJVQ1RPUl9OQU1FICsgJyBJdGVyYXRvcic7XG4gICAgdmFyIGdldEludGVybmFsQ29sbGVjdGlvblN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB2YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihJVEVSQVRPUl9OQU1FKTtcbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS57IGtleXMsIHZhbHVlcywgZW50cmllcywgQEBpdGVyYXRvciB9KClgIG1ldGhvZHNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmVudHJpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUua2V5c1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS52YWx1ZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUtQEBpdGVyYXRvclxuICAgIGRlZmluZUl0ZXJhdG9yKEMsIENPTlNUUlVDVE9SX05BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgIHR5cGU6IElURVJBVE9SX05BTUUsXG4gICAgICAgIHRhcmdldDogaXRlcmF0ZWQsXG4gICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUubGFzdDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS5rZXksIGRvbmU6IGZhbHNlIH07XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IGVudHJ5LnZhbHVlLCBkb25lOiBmYWxzZSB9O1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXSwgZG9uZTogZmFsc2UgfTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZVtAQHNwZWNpZXNdYCBhY2Nlc3NvcnNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1tYXAtQEBzcGVjaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtc2V0LUBAc3BlY2llc1xuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2Vha0RhdGEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5nZXRXZWFrRGF0YTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgQXJyYXlJdGVyYXRpb25Nb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xudmFyIGZpbmQgPSBBcnJheUl0ZXJhdGlvbk1vZHVsZS5maW5kO1xudmFyIGZpbmRJbmRleCA9IEFycmF5SXRlcmF0aW9uTW9kdWxlLmZpbmRJbmRleDtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIHN0b3JlLmZyb3plbiB8fCAoc3RvcmUuZnJvemVuID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xuXG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbnRyaWVzID0gW107XG59O1xuXG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGZpbmQoc3RvcmUuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblxuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuZW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gZmluZEluZGV4KHRoaXMuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgIHR5cGU6IENPTlNUUlVDVE9SX05BTUUsXG4gICAgICAgIGlkOiBpZCsrLFxuICAgICAgICBmcm96ZW46IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLnNldChrZXksIHZhbHVlKTtcbiAgICAgIGVsc2UgZGF0YVtzdGF0ZS5pZF0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gYHsgV2Vha01hcCwgV2Vha1NldCB9LnByb3RvdHlwZS5kZWxldGUoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5kZWxldGVcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHN0YXRlLmlkKSAmJiBkZWxldGUgZGF0YVtzdGF0ZS5pZF07XG4gICAgICB9LFxuICAgICAgLy8gYHsgV2Vha01hcCwgV2Vha1NldCB9LnByb3RvdHlwZS5oYXMoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5oYXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCBzdGF0ZS5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuZ2V0XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5nZXQoa2V5KTtcbiAgICAgICAgICByZXR1cm4gZGF0YSA/IGRhdGFbc3RhdGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gYFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyBgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmFkZFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQztcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIEludGVybmFsTWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUsIHdyYXBwZXIsIGNvbW1vbikge1xuICB2YXIgSVNfTUFQID0gQ09OU1RSVUNUT1JfTkFNRS5pbmRleE9mKCdNYXAnKSAhPT0gLTE7XG4gIHZhciBJU19XRUFLID0gQ09OU1RSVUNUT1JfTkFNRS5pbmRleE9mKCdXZWFrJykgIT09IC0xO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgTmF0aXZlQ29uc3RydWN0b3IgPSBnbG9iYWxbQ09OU1RSVUNUT1JfTkFNRV07XG4gIHZhciBOYXRpdmVQcm90b3R5cGUgPSBOYXRpdmVDb25zdHJ1Y3RvciAmJiBOYXRpdmVDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIHZhciBDb25zdHJ1Y3RvciA9IE5hdGl2ZUNvbnN0cnVjdG9yO1xuICB2YXIgZXhwb3J0ZWQgPSB7fTtcblxuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBuYXRpdmVNZXRob2QgPSBOYXRpdmVQcm90b3R5cGVbS0VZXTtcbiAgICByZWRlZmluZShOYXRpdmVQcm90b3R5cGUsIEtFWSxcbiAgICAgIEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICBuYXRpdmVNZXRob2QuY2FsbCh0aGlzLCB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSA6IEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyB1bmRlZmluZWQgOiBuYXRpdmVNZXRob2QuY2FsbCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiBuYXRpdmVNZXRob2QuY2FsbCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBuYXRpdmVNZXRob2QuY2FsbCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICk7XG4gIH07XG5cbiAgdmFyIFJFUExBQ0UgPSBpc0ZvcmNlZChcbiAgICBDT05TVFJVQ1RPUl9OQU1FLFxuICAgIHR5cGVvZiBOYXRpdmVDb25zdHJ1Y3RvciAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBOYXRpdmVQcm90b3R5cGUuZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCkuZW50cmllcygpLm5leHQoKTtcbiAgICB9KSlcbiAgKTtcblxuICBpZiAoUkVQTEFDRSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQ29uc3RydWN0b3IgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgfSBlbHNlIGlmIChpc0ZvcmNlZChDT05TVFJVQ1RPUl9OQU1FLCB0cnVlKSkge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihpdGVyYWJsZSk7IH0pO1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG5cbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UoZHVtbXksIENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgTmF0aXZlQ29uc3RydWN0b3IoKSwgZHVtbXksIENvbnN0cnVjdG9yKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gTmF0aXZlUHJvdG90eXBlO1xuICAgICAgTmF0aXZlUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgfVxuXG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuXG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG5cbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIE5hdGl2ZVByb3RvdHlwZS5jbGVhcikgZGVsZXRlIE5hdGl2ZVByb3RvdHlwZS5jbGVhcjtcbiAgfVxuXG4gIGV4cG9ydGVkW0NPTlNUUlVDVE9SX05BTUVdID0gQ29uc3RydWN0b3I7XG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogQ29uc3RydWN0b3IgIT0gTmF0aXZlQ29uc3RydWN0b3IgfSwgZXhwb3J0ZWQpO1xuXG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufTtcbiIsIi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG52YXIgTWFwID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXAnKTtcbnZhciBXZWFrTWFwID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy53ZWFrLW1hcCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBOb2RlID0gZnVuY3Rpb24gKCkge1xuICAvLyBrZXlzXG4gIHRoaXMub2JqZWN0ID0gbnVsbDtcbiAgdGhpcy5zeW1ib2wgPSBudWxsO1xuICAvLyBjaGlsZCBub2Rlc1xuICB0aGlzLnByaW1pdGl2ZXMgPSBudWxsO1xuICB0aGlzLm9iamVjdHNCeUluZGV4ID0gY3JlYXRlKG51bGwpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgaW5pdGlhbGl6ZXIpIHtcbiAgcmV0dXJuIHRoaXNba2V5XSB8fCAodGhpc1trZXldID0gaW5pdGlhbGl6ZXIoKSk7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGksIGl0LCBJU19PQkpFQ1QpIHtcbiAgdmFyIHN0b3JlID0gSVNfT0JKRUNUXG4gICAgPyB0aGlzLm9iamVjdHNCeUluZGV4W2ldIHx8ICh0aGlzLm9iamVjdHNCeUluZGV4W2ldID0gbmV3IFdlYWtNYXAoKSlcbiAgICA6IHRoaXMucHJpbWl0aXZlcyB8fCAodGhpcy5wcmltaXRpdmVzID0gbmV3IE1hcCgpKTtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuZ2V0KGl0KTtcbiAgaWYgKCFlbnRyeSkgc3RvcmUuc2V0KGl0LCBlbnRyeSA9IG5ldyBOb2RlKCkpO1xuICByZXR1cm4gZW50cnk7XG59O1xuXG52YXIgcm9vdCA9IG5ldyBOb2RlKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYWN0aXZlID0gcm9vdDtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpLCBpdDtcbiAgLy8gZm9yIHByZXZlbnQgbGVha2luZywgc3RhcnQgZnJvbSBvYmplY3RzXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChpc09iamVjdChpdCA9IGFyZ3VtZW50c1tpXSkpIGFjdGl2ZSA9IGFjdGl2ZS5uZXh0KGksIGl0LCB0cnVlKTtcbiAgfVxuICBpZiAodGhpcyA9PT0gT2JqZWN0ICYmIGFjdGl2ZSA9PT0gcm9vdCkgdGhyb3cgVHlwZUVycm9yKCdDb21wb3NpdGUga2V5cyBtdXN0IGNvbnRhaW4gYSBub24tcHJpbWl0aXZlIGNvbXBvbmVudCcpO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWlzT2JqZWN0KGl0ID0gYXJndW1lbnRzW2ldKSkgYWN0aXZlID0gYWN0aXZlLm5leHQoaSwgaXQsIGZhbHNlKTtcbiAgfSByZXR1cm4gYWN0aXZlO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICB0cnkge1xuICAgICAgcmVnZXhwW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIGZhbHNlO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHF1b3QgPSAvXCIvZztcblxuLy8gYENyZWF0ZUhUTUxgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVodG1sXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgdG9TdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGFuT2JqZWN0KHRoaXMpO1xuICBpZiAoaGludCA9PT0gJ3N0cmluZycgfHwgaGludCA9PT0gJ2RlZmF1bHQnKSBoaW50ID0gJ3N0cmluZyc7XG4gIGVsc2UgaWYgKGhpbnQgIT09ICdudW1iZXInKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKHRoaXMsIGhpbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCIvLyBpbiBvbGQgV2ViS2l0IHZlcnNpb25zLCBgZWxlbWVudC5jbGFzc0xpc3RgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBnbG9iYWwgYERPTVRva2VuTGlzdGBcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxudmFyIGNsYXNzTGlzdCA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnc3BhbicpLmNsYXNzTGlzdDtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSBjbGFzc0xpc3QgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yICYmIGNsYXNzTGlzdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NVG9rZW5MaXN0UHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlID8gdW5kZWZpbmVkIDogRE9NVG9rZW5MaXN0UHJvdG90eXBlO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgZmlyZWZveCA9IHVzZXJBZ2VudC5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS9pKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIWZpcmVmb3ggJiYgK2ZpcmVmb3hbMV07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCc7XG4iLCJ2YXIgVUEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvTVNJRXxUcmlkZW50Ly50ZXN0KFVBKTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL2lwYWR8aXBob25lfGlwb2QvaS50ZXN0KHVzZXJBZ2VudCkgJiYgZ2xvYmFsLlBlYmJsZSAhPT0gdW5kZWZpbmVkO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oPzppcGFkfGlwaG9uZXxpcG9kKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzc29mKGdsb2JhbC5wcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL3dlYjBzKD8hLipjaHJvbWUpL2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsLkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdIDwgNCA/IDEgOiBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciB3ZWJraXQgPSB1c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XFwvKFxcZCspXFwuLyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISF3ZWJraXQgJiYgK3dlYmtpdFsxXTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEZPUkNFRCwgU0hBTSkge1xuICB2YXIgU1lNQk9MID0gd2VsbEtub3duU3ltYm9sKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG5cbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgcmVhbCByZWdleCBoZXJlIHNpbmNlIGl0IGNhdXNlcyBkZW9wdGltaXphdGlvblxuICAgICAgLy8gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24gaW4gVjhcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMDZcbiAgICAgIHJlID0ge307XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgRk9SQ0VEXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIHZhciAkZXhlYyA9IHJlZ2V4cC5leGVjO1xuICAgICAgaWYgKCRleGVjID09PSByZWdleHBFeGVjIHx8ICRleGVjID09PSBSZWdFeHBQcm90b3R5cGUuZXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgbWV0aG9kc1swXSk7XG4gICAgcmVkZWZpbmUoUmVnRXhwUHJvdG90eXBlLCBTWU1CT0wsIG1ldGhvZHNbMV0pO1xuICB9XG5cbiAgaWYgKFNIQU0pIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShSZWdFeHBQcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG5cbi8vIGBGbGF0dGVuSW50b0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gZnVuY3Rpb24gKHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gYmluZChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50O1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBpZiAoZGVwdGggPiAwICYmIGlzQXJyYXkoZWxlbWVudCkpIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MUZGRkZGRkZGRkZGRkYpIHRocm93IFR5cGVFcnJvcignRXhjZWVkIHRoZSBhY2NlcHRhYmxlIGFycmF5IGxlbmd0aCcpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMvbm8tb2JqZWN0LXByZXZlbnRleHRlbnNpb25zIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghKGFyZ3NMZW5ndGggaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIGxpc3QgPSBbXSwgaSA9IDA7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIGxpc3RbaV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gd2UgaGF2ZSBubyBwcm9wZXIgYWx0ZXJuYXRpdmVzLCBJRTgtIG9ubHlcbiAgICBmYWN0b3JpZXNbYXJnc0xlbmd0aF0gPSBGdW5jdGlvbignQyxhJywgJ3JldHVybiBuZXcgQygnICsgbGlzdC5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG59O1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZEZ1bmN0aW9uID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kRnVuY3Rpb24ucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmRGdW5jdGlvbjtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHVzaW5nSXRlcmF0b3IpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBnZXRJdGVyYXRvck1ldGhvZChpdCkgOiB1c2luZ0l0ZXJhdG9yO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yTWV0aG9kICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gIH0gcmV0dXJuIGFuT2JqZWN0KGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWFwIC0tIHNhZmVcbiAgcmV0dXJuIE1hcC5wcm90b3R5cGUuZW50cmllcy5jYWxsKGl0KTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gYEdldE1ldGhvZGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldG1ldGhvZFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zZXQgLS0gc2FmZVxuICByZXR1cm4gU2V0LnByb3RvdHlwZS52YWx1ZXMuY2FsbChpdCk7XG59O1xuIiwidmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHJlcGxhY2UgPSAnJy5yZXBsYWNlO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkezEsMn18PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9KS9nO1xuXG4vLyBgR2V0U3Vic3RpdHV0aW9uYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgIHZhciBjYXB0dXJlO1xuICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gIH0pO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG5cbnZhciBwYWNrID0gZnVuY3Rpb24gKG51bWJlciwgbWFudGlzc2FMZW5ndGgsIGJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkoYnl0ZXMpO1xuICB2YXIgZXhwb25lbnRMZW5ndGggPSBieXRlcyAqIDggLSBtYW50aXNzYUxlbmd0aCAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZXhwb25lbnRMZW5ndGgpIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtYW50aXNzYUxlbmd0aCA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwIHx8IG51bWJlciA9PT0gMCAmJiAxIC8gbnVtYmVyIDwgMCA/IDEgOiAwO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgZXhwb25lbnQsIG1hbnRpc3NhLCBjO1xuICBudW1iZXIgPSBhYnMobnVtYmVyKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgaWYgKG51bWJlciAhPSBudW1iZXIgfHwgbnVtYmVyID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgbWFudGlzc2EgPSBudW1iZXIgIT0gbnVtYmVyID8gMSA6IDA7XG4gICAgZXhwb25lbnQgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGV4cG9uZW50ID0gZmxvb3IobG9nKG51bWJlcikgLyBMTjIpO1xuICAgIGlmIChudW1iZXIgKiAoYyA9IHBvdygyLCAtZXhwb25lbnQpKSA8IDEpIHtcbiAgICAgIGV4cG9uZW50LS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChleHBvbmVudCArIGVCaWFzID49IDEpIHtcbiAgICAgIG51bWJlciArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG51bWJlciArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAobnVtYmVyICogYyA+PSAyKSB7XG4gICAgICBleHBvbmVudCsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtYW50aXNzYSA9IDA7XG4gICAgICBleHBvbmVudCA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChleHBvbmVudCArIGVCaWFzID49IDEpIHtcbiAgICAgIG1hbnRpc3NhID0gKG51bWJlciAqIGMgLSAxKSAqIHBvdygyLCBtYW50aXNzYUxlbmd0aCk7XG4gICAgICBleHBvbmVudCA9IGV4cG9uZW50ICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hbnRpc3NhID0gbnVtYmVyICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbWFudGlzc2FMZW5ndGggPj0gODsgYnVmZmVyW2luZGV4KytdID0gbWFudGlzc2EgJiAyNTUsIG1hbnRpc3NhIC89IDI1NiwgbWFudGlzc2FMZW5ndGggLT0gOCk7XG4gIGV4cG9uZW50ID0gZXhwb25lbnQgPDwgbWFudGlzc2FMZW5ndGggfCBtYW50aXNzYTtcbiAgZXhwb25lbnRMZW5ndGggKz0gbWFudGlzc2FMZW5ndGg7XG4gIGZvciAoOyBleHBvbmVudExlbmd0aCA+IDA7IGJ1ZmZlcltpbmRleCsrXSA9IGV4cG9uZW50ICYgMjU1LCBleHBvbmVudCAvPSAyNTYsIGV4cG9uZW50TGVuZ3RoIC09IDgpO1xuICBidWZmZXJbLS1pbmRleF0gfD0gc2lnbiAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbnZhciB1bnBhY2sgPSBmdW5jdGlvbiAoYnVmZmVyLCBtYW50aXNzYUxlbmd0aCkge1xuICB2YXIgYnl0ZXMgPSBidWZmZXIubGVuZ3RoO1xuICB2YXIgZXhwb25lbnRMZW5ndGggPSBieXRlcyAqIDggLSBtYW50aXNzYUxlbmd0aCAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZXhwb25lbnRMZW5ndGgpIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBleHBvbmVudExlbmd0aCAtIDc7XG4gIHZhciBpbmRleCA9IGJ5dGVzIC0gMTtcbiAgdmFyIHNpZ24gPSBidWZmZXJbaW5kZXgtLV07XG4gIHZhciBleHBvbmVudCA9IHNpZ24gJiAxMjc7XG4gIHZhciBtYW50aXNzYTtcbiAgc2lnbiA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZXhwb25lbnQgPSBleHBvbmVudCAqIDI1NiArIGJ1ZmZlcltpbmRleF0sIGluZGV4LS0sIG5CaXRzIC09IDgpO1xuICBtYW50aXNzYSA9IGV4cG9uZW50ICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGV4cG9uZW50ID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1hbnRpc3NhTGVuZ3RoO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtYW50aXNzYSA9IG1hbnRpc3NhICogMjU2ICsgYnVmZmVyW2luZGV4XSwgaW5kZXgtLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChleHBvbmVudCA9PT0gMCkge1xuICAgIGV4cG9uZW50ID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGV4cG9uZW50ID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG1hbnRpc3NhID8gTmFOIDogc2lnbiA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgKyBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgIGV4cG9uZW50ID0gZXhwb25lbnQgLSBlQmlhcztcbiAgfSByZXR1cm4gKHNpZ24gPyAtMSA6IDEpICogbWFudGlzc2EgKiBwb3coMiwgZXhwb25lbnQgLSBtYW50aXNzYUxlbmd0aCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGFjazogcGFjayxcbiAgdW5wYWNrOiB1bnBhY2tcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBtYWtlcyBzdWJjbGFzc2luZyB3b3JrIGNvcnJlY3QgZm9yIHdyYXBwZWQgYnVpbHQtaW5zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHtcbiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlO1xuICBpZiAoXG4gICAgLy8gaXQgY2FuIHdvcmsgb25seSB3aXRoIG5hdGl2ZSBgc2V0UHJvdG90eXBlT2ZgXG4gICAgc2V0UHJvdG90eXBlT2YgJiZcbiAgICAvLyB3ZSBoYXZlbid0IGNvbXBsZXRlbHkgY29ycmVjdCBwcmUtRVM2IHdheSBmb3IgZ2V0dGluZyBgbmV3LnRhcmdldGAsIHNvIHVzZSB0aGlzXG4gICAgdHlwZW9mIChOZXdUYXJnZXQgPSBkdW1teS5jb25zdHJ1Y3RvcikgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIE5ld1RhcmdldCAhPT0gV3JhcHBlciAmJlxuICAgIGlzT2JqZWN0KE5ld1RhcmdldFByb3RvdHlwZSA9IE5ld1RhcmdldC5wcm90b3R5cGUpICYmXG4gICAgTmV3VGFyZ2V0UHJvdG90eXBlICE9PSBXcmFwcGVyLnByb3RvdHlwZVxuICApIHNldFByb3RvdHlwZU9mKCR0aGlzLCBOZXdUYXJnZXRQcm90b3R5cGUpO1xuICByZXR1cm4gJHRoaXM7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAodHlwZW9mIHN0b3JlLmluc3BlY3RTb3VyY2UgIT0gJ2Z1bmN0aW9uJykge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG52YXIgUkVRVUlSRUQgPSBmYWxzZTtcbnZhciBNRVRBREFUQSA9IHVpZCgnbWV0YScpO1xudmFyIGlkID0gMDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBzZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBkZWZpbmVQcm9wZXJ0eShpdCwgTUVUQURBVEEsIHsgdmFsdWU6IHtcbiAgICBvYmplY3RJRDogJ08nICsgaWQrKywgLy8gb2JqZWN0IElEXG4gICAgd2Vha0RhdGE6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xuXG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBhIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLm9iamVjdElEO1xufTtcblxudmFyIGdldFdlYWtEYXRhID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiB0aGUgc3RvcmUgb2Ygd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLndlYWtEYXRhO1xufTtcblxuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaSU5HICYmIFJFUVVJUkVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQURBVEEpKSBzZXRNZXRhZGF0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbnZhciBlbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIG1ldGEuZW5hYmxlID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuICBSRVFVSVJFRCA9IHRydWU7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mO1xuICB2YXIgc3BsaWNlID0gW10uc3BsaWNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB0ZXN0W01FVEFEQVRBXSA9IDE7XG5cbiAgLy8gcHJldmVudCBleHBvc2luZyBvZiBtZXRhZGF0YSBrZXlcbiAgaWYgKGdldE93blByb3BlcnR5TmFtZXModGVzdCkubGVuZ3RoKSB7XG4gICAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChyZXN1bHRbaV0gPT09IE1FVEFEQVRBKSB7XG4gICAgICAgICAgc3BsaWNlLmNhbGwocmVzdWx0LCBpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZS5mXG4gICAgfSk7XG4gIH1cbn07XG5cbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuYWJsZTogZW5hYmxlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrRGF0YTogZ2V0V2Vha0RhdGEsXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuaGlkZGVuS2V5c1tNRVRBREFUQV0gPSB0cnVlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmICh3bWhhcy5jYWxsKHN0b3JlLCBpdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAob2JqZWN0SGFzKGl0LCBTVEFURSkpIHRocm93IG5ldyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2FycmF5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRlc2NyaXB0b3IpIHtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCAmJiAoaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpIHx8IGhhcyhkZXNjcmlwdG9yLCAnd3JpdGFibGUnKSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgT2JqZWN0KGl0KSBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQsIDEgKyBBU19FTlRSSUVTICsgSU5URVJSVVBURUQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ25vcm1hbCcsIGNvbmRpdGlvbik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gY2FsbEZuKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUsIGl0ZXJGbik7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGtpbmQsIHZhbHVlKSB7XG4gIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjtcbiAgYW5PYmplY3QoaXRlcmF0b3IpO1xuICB0cnkge1xuICAgIGlubmVyUmVzdWx0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChpbm5lclJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlubmVyUmVzdWx0ID0gaW5uZXJSZXN1bHQuY2FsbChpdGVyYXRvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgfVxuICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDtcbiAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuZWxzZSBpZiAoSVNfUFVSRSkgSXRlcmF0b3JQcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1AQGl0ZXJhdG9yXG5pZiAodHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gJ2Z1bmN0aW9uJykge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWV4cG0xIC0tIHNhZmVcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC5leHBtMWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZXhwbTFcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBleHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsInZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtZnJvdW5kIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBhYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsInZhciBsb2cgPSBNYXRoLmxvZztcblxuLy8gYE1hdGgubG9nMXBgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzFwXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1sb2cxcCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBsb2coMSArIHgpO1xufTtcbiIsIi8vIGBNYXRoLnNjYWxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2sgKi9cbiAgICAgIHx8IHggIT0geFxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrICovXG4gICkgcmV0dXJuIE5hTjtcbiAgaWYgKHggPT09IEluZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkgcmV0dXJuIHg7XG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XG59O1xuIiwiLy8gYE1hdGguc2lnbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2lnblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtc2lnbiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfSU9TX1BFQkJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZScpO1xudmFyIElTX1dFQk9TX1dFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0Jyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICAvLyBhbHNvIGV4Y2VwdCBXZWJPUyBXZWJraXQgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg5OFxuICBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmICghSVNfSU9TX1BFQkJMRSAmJiBQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIC8vIHdvcmthcm91bmQgb2YgV2ViS2l0IH4gaU9TIFNhZmFyaSAxMC4xIGJ1Z1xuICAgIHByb21pc2UuY29uc3RydWN0b3IgPSBQcm9taXNlO1xuICAgIHRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgICB9O1xuICAvLyBOb2RlLmpzIHdpdGhvdXQgcHJvbWlzZXNcbiAgfSBlbHNlIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Qcm9taXNlO1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGBnZXQtb3duLXByb3BlcnR5LXN5bWJvbHNgIHBvbHlmaWxsIHN5bWJvbHMgY29udmVydGVkIHRvIG9iamVjdCBhcmUgbm90IFN5bWJvbCBpbnN0YW5jZXNcbiAgcmV0dXJuICFTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fFxuICAgIC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG4gICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBuZXcgVVJMKCdiP2E9MSZiPTImYz0zJywgJ2h0dHA6Ly9hJyk7XG4gIHZhciBzZWFyY2hQYXJhbXMgPSB1cmwuc2VhcmNoUGFyYW1zO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHVybC5wYXRobmFtZSA9ICdjJTIwZCc7XG4gIHNlYXJjaFBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgc2VhcmNoUGFyYW1zWydkZWxldGUnXSgnYicpO1xuICAgIHJlc3VsdCArPSBrZXkgKyB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiAoSVNfUFVSRSAmJiAhdXJsLnRvSlNPTilcbiAgICB8fCAhc2VhcmNoUGFyYW1zLnNvcnRcbiAgICB8fCB1cmwuaHJlZiAhPT0gJ2h0dHA6Ly9hL2MlMjBkP2E9MSZjPTMnXG4gICAgfHwgc2VhcmNoUGFyYW1zLmdldCgnYycpICE9PSAnMydcbiAgICB8fCBTdHJpbmcobmV3IFVSTFNlYXJjaFBhcmFtcygnP2E9MScpKSAhPT0gJ2E9MSdcbiAgICB8fCAhc2VhcmNoUGFyYW1zW0lURVJBVE9SXVxuICAgIC8vIHRocm93cyBpbiBFZGdlXG4gICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly9hQGInKS51c2VybmFtZSAhPT0gJ2EnXG4gICAgfHwgbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgVVJMU2VhcmNoUGFyYW1zKCdhPWInKSkuZ2V0KCdhJykgIT09ICdiJ1xuICAgIC8vIG5vdCBwdW55Y29kZWQgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly/RgtC10YHRgicpLmhvc3QgIT09ICd4bi0tZTFheWJjJ1xuICAgIC8vIG5vdCBlc2NhcGVkIGluIENocm9tZSA2Mi1cbiAgICB8fCBuZXcgVVJMKCdodHRwOi8vYSPQsScpLmhhc2ggIT09ICcjJUQwJUIxJ1xuICAgIC8vIGZhaWxzIGluIENocm9tZSA2Ni1cbiAgICB8fCByZXN1bHQgIT09ICdhMWMzJ1xuICAgIC8vIHRocm93cyBpbiBTYWZhcmlcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8veCcsIHVuZGVmaW5lZCkuaG9zdCAhPT0gJ3gnO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG5cbi8vIGBOZXdQcm9taXNlQ2FwYWJpbGl0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW5ld3Byb21pc2VjYXBhYmlsaXR5XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1JlZ0V4cChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBnbG9iYWxJc0Zpbml0ZSA9IGdsb2JhbC5pc0Zpbml0ZTtcblxuLy8gYE51bWJlci5pc0Zpbml0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc2Zpbml0ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW51bWJlci1pc2Zpbml0ZSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIGdsb2JhbElzRmluaXRlKGl0KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciAkcGFyc2VGbG9hdCA9IGdsb2JhbC5wYXJzZUZsb2F0O1xudmFyIEZPUkNFRCA9IDEgLyAkcGFyc2VGbG9hdCh3aGl0ZXNwYWNlcyArICctMCcpICE9PSAtSW5maW5pdHk7XG5cbi8vIGBwYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VmbG9hdC1zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHJpbmcpIHtcbiAgdmFyIHRyaW1tZWRTdHJpbmcgPSB0cmltKHRvU3RyaW5nKHN0cmluZykpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQodHJpbW1lZFN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgdHJpbW1lZFN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciAkcGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQ7XG52YXIgaGV4ID0gL15bKy1dPzBbWHhdLztcbnZhciBGT1JDRUQgPSAkcGFyc2VJbnQod2hpdGVzcGFjZXMgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod2hpdGVzcGFjZXMgKyAnMHgxNicpICE9PSAyMjtcblxuLy8gYHBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VpbnQtc3RyaW5nLXJhZGl4XG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgpIHtcbiAgdmFyIFMgPSB0cmltKHRvU3RyaW5nKHN0cmluZykpO1xuICByZXR1cm4gJHBhcnNlSW50KFMsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KFMpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtYXNzaWduIC0tIHNhZmVcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gc2hvdWxkIGhhdmUgY29ycmVjdCBvcmRlciBvZiBvcGVyYXRpb25zIChFZGdlIGJ1ZylcbiAgaWYgKERFU0NSSVBUT1JTICYmICRhc3NpZ24oeyBiOiAxIH0sICRhc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pLCB7IGI6IDIgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlO1xuICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN5bWJvbCAtLSBzYWZlXG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtzeW1ib2xdID0gNztcbiAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikgeyBCW2Nocl0gPSBjaHI7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbc3ltYm9sXSAhPSA3IHx8IG9iamVjdEtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbiAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBvYmplY3RLZXlzKFMpLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoUykpIDogb2JqZWN0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnRcbiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRVxuICAgICAgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKVxuICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XSdcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogJGdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWtleXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICEkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbicpO1xuXG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgb2JqZWN0IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBJU19QVVJFIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gY3Jhc2hlcyBvbGQgV2ViS2l0XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yMzJcbiAgaWYgKFdFQktJVCAmJiBXRUJLSVQgPCA1MzUpIHJldHVybjtcbiAgdmFyIGtleSA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBrZXksIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSBnbG9iYWxba2V5XTtcbn0pO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gLS0gc2FmZSAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKS5mO1xuXG4vLyBgT2JqZWN0LnsgZW50cmllcywgdmFsdWVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVE9fRU5UUklFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChUT19FTlRSSUVTID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllc1xuICBlbnRyaWVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBPYmplY3QudmFsdWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4gIHZhbHVlczogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgT3JkaW5hcnlUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwiLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnZhciBNYXAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hcCcpO1xudmFyIFdlYWtNYXAgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLndlYWstbWFwJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xuXG52YXIgbWV0YWRhdGEgPSBzaGFyZWQoJ21ldGFkYXRhJyk7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZSB8fCAobWV0YWRhdGEuc3RvcmUgPSBuZXcgV2Vha01hcCgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm47XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybjtcbiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH0gcmV0dXJuIGtleU1ldGFkYXRhO1xufTtcblxudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcblxudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG5cbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKSB7XG4gIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbn07XG5cbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xuXG52YXIgdG9NZXRhZGF0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBnZXRNYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICB0b0tleTogdG9NZXRhZGF0YUtleVxufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9jbGFzc29mLXJhdycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuXG4gIHJldHVybiByZWdleHBFeGVjLmNhbGwoUiwgUyk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBuYXRpdmVSZXBsYWNlID0gc2hhcmVkKCduYXRpdmUtc3RyaW5nLXJlcGxhY2UnLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLztcbiAgdmFyIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1kgfHwgc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0c7XG5cbmlmIChQQVRDSCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyaW5nKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmF3ID0gc3RhdGUucmF3O1xuICAgIHZhciByZXN1bHQsIHJlQ29weSwgbGFzdEluZGV4LCBtYXRjaCwgaSwgb2JqZWN0LCBncm91cDtcblxuICAgIGlmIChyYXcpIHtcbiAgICAgIHJhdy5sYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICByZXN1bHQgPSBwYXRjaGVkRXhlYy5jYWxsKHJhdywgc3RyKTtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJhdy5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBncm91cHMgPSBzdGF0ZS5ncm91cHM7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IHJlZ2V4cEZsYWdzLmNhbGwocmUpO1xuICAgIHZhciBzb3VyY2UgPSByZS5zb3VyY2U7XG4gICAgdmFyIGNoYXJzQWRkZWQgPSAwO1xuICAgIHZhciBzdHJDb3B5ID0gc3RyO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgZmxhZ3MgPSBmbGFncy5yZXBsYWNlKCd5JywgJycpO1xuICAgICAgaWYgKGZsYWdzLmluZGV4T2YoJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gc3RyLnNsaWNlKHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBzdHIuY2hhckF0KHJlLmxhc3RJbmRleCAtIDEpICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwoc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gbWF0Y2guaW5wdXQuc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXRjaCAmJiBncm91cHMpIHtcbiAgICAgIG1hdGNoLmdyb3VwcyA9IG9iamVjdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbaV07XG4gICAgICAgIG9iamVjdFtncm91cFswXV0gPSBtYXRjaFtncm91cFsxXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5leHBvcnRzLlVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuZXhwb3J0cy5CUk9LRU5fQ0FSRVQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSAkUmVnRXhwKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ3MnKSAtPiAvLi9zIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJy4nLCAncycpO1xuICByZXR1cm4gIShyZS5kb3RBbGwgJiYgcmUuZXhlYygnXFxuJykgJiYgcmUuZmxhZ3MgPT09ICdzJyk7XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4vZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcoPzxhPmIpJywgJ2cnKTtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2InKS5ncm91cHMuYSAhPT0gJ2InIHx8XG4gICAgJ2InLnJlcGxhY2UocmUsICckPGE+YycpICE9PSAnYmMnO1xufSk7XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gYFNhbWVWYWx1ZVplcm9gIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zYW1ldmFsdWV6ZXJvXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiB4ID09PSB5IHx8IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gYFNhbWVWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNhbWV2YWx1ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pcyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjE3LjMnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjEgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBjaGVjayB0aGUgZXhpc3RlbmNlIG9mIGEgbWV0aG9kLCBsb3dlcmNhc2Vcbi8vIG9mIGEgdGFnIGFuZCBlc2NhcGluZyBxdW90ZXMgaW4gYXJndW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTUVUSE9EX05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXVuc2FmZS1yZWdleCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IC9WZXJzaW9uXFwvMTAoPzpcXC5cXGQrKXsxLDJ9KD86IFtcXHcuL10rKT8oPzogTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBjZWlsID0gTWF0aC5jZWlsO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19FTkQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICAgIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogdG9TdHJpbmcoZmlsbFN0cmluZyk7XG4gICAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gICAgdmFyIGZpbGxMZW4sIHN0cmluZ0ZpbGxlcjtcbiAgICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgICBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICAgIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIGNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gICAgcmV0dXJuIElTX0VORCA/IFMgKyBzdHJpbmdGaWxsZXIgOiBzdHJpbmdGaWxsZXIgKyBTO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzL2Jsb2IvbWFzdGVyL3B1bnljb2RlLmpzXG52YXIgbWF4SW50ID0gMjE0NzQ4MzY0NzsgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxudmFyIGJhc2UgPSAzNjtcbnZhciB0TWluID0gMTtcbnZhciB0TWF4ID0gMjY7XG52YXIgc2tldyA9IDM4O1xudmFyIGRhbXAgPSA3MDA7XG52YXIgaW5pdGlhbEJpYXMgPSA3MjtcbnZhciBpbml0aWFsTiA9IDEyODsgLy8gMHg4MFxudmFyIGRlbGltaXRlciA9ICctJzsgLy8gJ1xceDJEJ1xudmFyIHJlZ2V4Tm9uQVNDSUkgPSAvW15cXDAtXFx1MDA3RV0vOyAvLyBub24tQVNDSUkgY2hhcnNcbnZhciByZWdleFNlcGFyYXRvcnMgPSAvWy5cXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2c7IC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcbnZhciBPVkVSRkxPV19FUlJPUiA9ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2Vzcyc7XG52YXIgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqL1xudmFyIHVjczJkZWNvZGUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgdmFyIGNvdW50ZXIgPSAwO1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuICAgIGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgIC8vIEl0J3MgYSBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICB2YXIgZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuICAgICAgaWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIExvdyBzdXJyb2dhdGUuXG4gICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJdCdzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZVxuICAgICAgICAvLyBuZXh0IGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cbiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgICBjb3VudGVyLS07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuICovXG52YXIgZGlnaXRUb0Jhc2ljID0gZnVuY3Rpb24gKGRpZ2l0KSB7XG4gIC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG4gIC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuICByZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpO1xufTtcblxuLyoqXG4gKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcbiAqL1xudmFyIGFkYXB0ID0gZnVuY3Rpb24gKGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuICB2YXIgayA9IDA7XG4gIGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG4gIGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcbiAgZm9yICg7IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG4gICAgZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuICB9XG4gIHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuXG4gIC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIGFuIGFycmF5IG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG4gIGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cbiAgLy8gQ2FjaGUgdGhlIGxlbmd0aC5cbiAgdmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHN0YXRlLlxuICB2YXIgbiA9IGluaXRpYWxOO1xuICB2YXIgZGVsdGEgPSAwO1xuICB2YXIgYmlhcyA9IGluaXRpYWxCaWFzO1xuICB2YXIgaSwgY3VycmVudFZhbHVlO1xuXG4gIC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHMuXG4gIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgIGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG4gICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuICB2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDsgLy8gbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cbiAgLy8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgd2l0aCBhIGRlbGltaXRlciB1bmxlc3MgaXQncyBlbXB0eS5cbiAgaWYgKGJhc2ljTGVuZ3RoKSB7XG4gICAgb3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcbiAgfVxuXG4gIC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcbiAgd2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcbiAgICAvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0IGxhcmdlciBvbmU6XG4gICAgdmFyIG0gPSBtYXhJbnQ7XG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG4gICAgICAgIG0gPSBjdXJyZW50VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LCBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvdy5cbiAgICB2YXIgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuICAgIGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG4gICAgICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICB9XG5cbiAgICBkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuICAgIG4gPSBtO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFZhbHVlID09IG4pIHtcbiAgICAgICAgLy8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXG4gICAgICAgIHZhciBxID0gZGVsdGE7XG4gICAgICAgIGZvciAodmFyIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuICAgICAgICAgIHZhciB0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcbiAgICAgICAgICBpZiAocSA8IHQpIGJyZWFrO1xuICAgICAgICAgIHZhciBxTWludXNUID0gcSAtIHQ7XG4gICAgICAgICAgdmFyIGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCkpKTtcbiAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxKSkpO1xuICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuICAgICAgICBkZWx0YSA9IDA7XG4gICAgICAgICsraGFuZGxlZENQQ291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgKytkZWx0YTtcbiAgICArK247XG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBlbmNvZGVkID0gW107XG4gIHZhciBsYWJlbHMgPSBpbnB1dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx1MDAyRScpLnNwbGl0KCcuJyk7XG4gIHZhciBpLCBsYWJlbDtcbiAgZm9yIChpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgIGxhYmVsID0gbGFiZWxzW2ldO1xuICAgIGVuY29kZWQucHVzaChyZWdleE5vbkFTQ0lJLnRlc3QobGFiZWwpID8gJ3huLS0nICsgZW5jb2RlKGxhYmVsKSA6IGxhYmVsKTtcbiAgfVxuICByZXR1cm4gZW5jb2RlZC5qb2luKCcuJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBudW1iZXIgb2YgcmVwZXRpdGlvbnMnKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlc3VsdCArPSBzdHI7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIG5vbiA9ICdcXHUyMDBCXFx1MDA4NVxcdTE4MEUnO1xuXG4vLyBjaGVjayB0aGF0IGEgbWV0aG9kIHdvcmtzIHdpdGggdGhlIGNvcnJlY3QgbGlzdFxuLy8gb2Ygd2hpdGVzcGFjZXMgYW5kIGhhcyBhIGNvcnJlY3QgbmFtZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0oKSB8fCBub25bTUVUSE9EX05BTUVdKCkgIT0gbm9uIHx8IHdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXS5uYW1lICE9PSBNRVRIT0RfTkFNRTtcbiAgfSk7XG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIHdoaXRlc3BhY2UgPSAnWycgKyB3aGl0ZXNwYWNlcyArICddJztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyB3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAod2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKiQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltLCB0cmltU3RhcnQsIHRyaW1FbmQsIHRyaW1MZWZ0LCB0cmltUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVJpZ2h0LCB0cmltRW5kIH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICB0cmltOiBjcmVhdGVNZXRob2QoMylcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGxvY2F0aW9uLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudHJ5IHtcbiAgLy8gRGVubyB0aHJvd3MgYSBSZWZlcmVuY2VFcnJvciBvbiBgbG9jYXRpb25gIGFjY2VzcyB3aXRob3V0IGAtLWxvY2F0aW9uYCBmbGFnXG4gIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShTdHJpbmcoaWQpLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNwZWMgcmVxdWlyZW1lbnRcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmXG4gICAgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmXG4gICAgbG9jYXRpb24gJiYgbG9jYXRpb24ucHJvdG9jb2wgIT09ICdmaWxlOicgJiZcbiAgICAhZmFpbHMocG9zdClcbiAgKSB7XG4gICAgZGVmZXIgPSBwb3N0O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCJ2YXIgdmFsdWVPZiA9IDEuMC52YWx1ZU9mO1xuXG4vLyBgdGhpc051bWJlclZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdGhpc251bWJlcnZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWVPZi5jYWxsKHZhbHVlKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBUb0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIG9yIGluZGV4Jyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgdG9Qb3NpdGl2ZUludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgdmFyIG9mZnNldCA9IHRvUG9zaXRpdmVJbnRlZ2VyKGl0KTtcbiAgaWYgKG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQnKTtcbiAgcmV0dXJuIG9mZnNldDtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHRvSW50ZWdlcihpdCk7XG4gIGlmIChyZXN1bHQgPCAwKSB0aHJvdyBSYW5nZUVycm9yKFwiVGhlIGFyZ3VtZW50IGNhbid0IGJlIGxlc3MgdGhhbiAwXCIpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBpbnB1dFtUT19QUklNSVRJVkVdO1xuICB2YXIgcmVzdWx0O1xuICBpZiAoZXhvdGljVG9QcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBwcmVmKTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG4gIH1cbiAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdudW1iZXInO1xuICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgcHJlZik7XG59O1xuIiwidmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xuXG4vLyBgVG9Qcm9wZXJ0eUtleWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ3N0cmluZycpO1xuICByZXR1cm4gaXNTeW1ib2woa2V5KSA/IGtleSA6IFN0cmluZyhrZXkpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNTeW1ib2woYXJndW1lbnQpKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3JzLXJlcXVpcmUtd3JhcHBlcnMnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBBcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleCcpO1xudmFyIHRvT2Zmc2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9mZnNldCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBBcnJheUJ1ZmZlciA9IEFycmF5QnVmZmVyTW9kdWxlLkFycmF5QnVmZmVyO1xudmFyIERhdGFWaWV3ID0gQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcbnZhciBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiA9IEFycmF5QnVmZmVyVmlld0NvcmUuVFlQRURfQVJSQVlfQ09OU1RSVUNUT1I7XG52YXIgVFlQRURfQVJSQVlfVEFHID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UWVBFRF9BUlJBWV9UQUc7XG52YXIgVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuVHlwZWRBcnJheTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5UHJvdG90eXBlO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgaXNUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5pc1R5cGVkQXJyYXk7XG52YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGgnO1xuXG52YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9IH0pO1xufTtcblxudmFyIGlzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGtsYXNzO1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGl0KSkgPT0gJ0FycmF5QnVmZmVyJyB8fCBrbGFzcyA9PSAnU2hhcmVkQXJyYXlCdWZmZXInO1xufTtcblxudmFyIGlzVHlwZWRBcnJheUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gIHJldHVybiBpc1R5cGVkQXJyYXkodGFyZ2V0KVxuICAgICYmICFpc1N5bWJvbChrZXkpXG4gICAgJiYga2V5IGluIHRhcmdldFxuICAgICYmIGlzSW50ZWdlcigra2V5KVxuICAgICYmIGtleSA+PSAwO1xufTtcblxudmFyIHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICByZXR1cm4gaXNUeXBlZEFycmF5SW5kZXgodGFyZ2V0LCBrZXkpXG4gICAgPyBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMiwgdGFyZ2V0W2tleV0pXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xufTtcblxudmFyIHdyYXBwZWREZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5KVxuICAgICYmIGlzT2JqZWN0KGRlc2NyaXB0b3IpXG4gICAgJiYgaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpXG4gICAgJiYgIWhhcyhkZXNjcmlwdG9yLCAnZ2V0JylcbiAgICAmJiAhaGFzKGRlc2NyaXB0b3IsICdzZXQnKVxuICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlXG4gICAgJiYgKCFoYXMoZGVzY3JpcHRvciwgJ3dyaXRhYmxlJykgfHwgZGVzY3JpcHRvci53cml0YWJsZSlcbiAgICAmJiAoIWhhcyhkZXNjcmlwdG9yLCAnZW51bWVyYWJsZScpIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSlcbiAgKSB7XG4gICAgdGFyZ2V0W2tleV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9IHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9IHdyYXBwZWREZWZpbmVQcm9wZXJ0eTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZU9mZnNldCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnbGVuZ3RoJyk7XG4gIH1cblxuICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB9LCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGRlZmluZVByb3BlcnR5OiB3cmFwcGVkRGVmaW5lUHJvcGVydHlcbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIHZhciBCWVRFUyA9IFRZUEUubWF0Y2goL1xcZCskLylbMF0gLyA4O1xuICAgIHZhciBDT05TVFJVQ1RPUl9OQU1FID0gVFlQRSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBUWVBFO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIFRZUEU7XG4gICAgdmFyIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgZXhwb3J0ZWQgPSB7fTtcblxuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHJldHVybiBkYXRhLnZpZXdbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IHJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhGRiA/IDB4RkYgOiB2YWx1ZSAmIDB4RkY7XG4gICAgICBkYXRhLnZpZXdbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsIG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBieXRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIGJ5dGVPZmZzZXQgPSB0b09mZnNldChvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIGJ5dGVPZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIGJ5dGVPZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdHlwZWRBcnJheUZyb20uY2FsbChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgICAgIGJ5dGVPZmZzZXQ6IGJ5dGVPZmZzZXQsXG4gICAgICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgICB2aWV3OiBuZXcgRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBUeXBlZEFycmF5KTtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoVHlwZWRBcnJheVByb3RvdHlwZSk7XG4gICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgZGF0YSwgdHlwZWRBcnJheU9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKGR1bW15LCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgICByZXR1cm4gaW5oZXJpdElmUmVxdWlyZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICAgIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IoZGF0YSwgdG9PZmZzZXQodHlwZWRBcnJheU9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiB0eXBlZEFycmF5T2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEpO1xuICAgICAgICAgIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICAgIHJldHVybiB0eXBlZEFycmF5RnJvbS5jYWxsKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIH0oKSwgZHVtbXksIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcik7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihUeXBlZEFycmF5Q29uc3RydWN0b3IsIFR5cGVkQXJyYXkpO1xuICAgICAgZm9yRWFjaChnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBrZXksIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcltrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlO1xuICAgIH1cblxuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUuY29uc3RydWN0b3IgIT09IFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcikge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheUNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheUNvbnN0cnVjdG9yKTtcblxuICAgIGlmIChUWVBFRF9BUlJBWV9UQUcpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsIFRZUEVEX0FSUkFZX1RBRywgQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgfVxuXG4gICAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbiAgICAkKHtcbiAgICAgIGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBUeXBlZEFycmF5Q29uc3RydWN0b3IgIT0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBzaGFtOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXU1xuICAgIH0sIGV4cG9ydGVkKTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3IsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG4gICAgfVxuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcbiAgICB9XG5cbiAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG5cbnZhciBBcnJheUJ1ZmZlciA9IGdsb2JhbC5BcnJheUJ1ZmZlcjtcbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIEludDhBcnJheSgxKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5ldyBJbnQ4QXJyYXkoLTEpO1xufSkgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgbmV3IEludDhBcnJheSgpO1xuICBuZXcgSW50OEFycmF5KG51bGwpO1xuICBuZXcgSW50OEFycmF5KDEuNSk7XG4gIG5ldyBJbnQ4QXJyYXkoaXRlcmFibGUpO1xufSwgdHJ1ZSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBTYWZhcmkgKDExKykgYnVnIC0gYSByZWFzb24gd2h5IGV2ZW4gU2FmYXJpIDEzIHNob3VsZCBsb2FkIGEgdHlwZWQgYXJyYXkgcG9seWZpbGxcbiAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKDIpLCAxLCB1bmRlZmluZWQpLmxlbmd0aCAhPT0gMTtcbn0pO1xuIiwidmFyIGFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tLWNvbnN0cnVjdG9yLWFuZC1saXN0Jyk7XG52YXIgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsaXN0KSB7XG4gIHJldHVybiBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QodHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihpbnN0YW5jZSksIGxpc3QpO1xufTtcbiIsInZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQ7XG4gIGlmIChpdGVyYXRvck1ldGhvZCAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpIHtcbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKE8sIGl0ZXJhdG9yTWV0aG9kKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICBPID0gW107XG4gICAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgIE8ucHVzaChzdGVwLnZhbHVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKG1hcHBpbmcgJiYgYXJndW1lbnRzTGVuZ3RoID4gMikge1xuICAgIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgfVxuICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0aGlzKSkobGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbi8vIGEgcGFydCBvZiBgVHlwZWRBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3R5cGVkYXJyYXktc3BlY2llcy1jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgcmV0dXJuIGFUeXBlZEFycmF5Q29uc3RydWN0b3Ioc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsQXJyYXksIG9yaWdpbmFsQXJyYXlbVFlQRURfQVJSQVlfQ09OU1RSVUNUT1JdKSk7XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhcyhXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpIHx8ICEoTkFUSVZFX1NZTUJPTCB8fCB0eXBlb2YgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID09ICdzdHJpbmcnKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgICB9XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyICRBZ2dyZWdhdGVFcnJvciA9IGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIGlmICghKHRoYXQgaW5zdGFuY2VvZiAkQWdncmVnYXRlRXJyb3IpKSByZXR1cm4gbmV3ICRBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UpO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9lcnJvci1tZXNzYWdlIC0tIGV4cGVjdGVkXG4gICAgdGhhdCA9IHNldFByb3RvdHlwZU9mKG5ldyBFcnJvcih1bmRlZmluZWQpLCBnZXRQcm90b3R5cGVPZih0aGF0KSk7XG4gIH1cbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdtZXNzYWdlJywgdG9TdHJpbmcobWVzc2FnZSkpO1xuICB2YXIgZXJyb3JzQXJyYXkgPSBbXTtcbiAgaXRlcmF0ZShlcnJvcnMsIGVycm9yc0FycmF5LnB1c2gsIHsgdGhhdDogZXJyb3JzQXJyYXkgfSk7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0aGF0LCAnZXJyb3JzJywgZXJyb3JzQXJyYXkpO1xuICByZXR1cm4gdGhhdDtcbn07XG5cbiRBZ2dyZWdhdGVFcnJvci5wcm90b3R5cGUgPSBjcmVhdGUoRXJyb3IucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoNSwgJEFnZ3JlZ2F0ZUVycm9yKSxcbiAgbWVzc2FnZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDUsICcnKSxcbiAgbmFtZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDUsICdBZ2dyZWdhdGVFcnJvcicpXG59KTtcblxuLy8gYEFnZ3JlZ2F0ZUVycm9yYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZ2dyZWdhdGUtZXJyb3ItY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICBBZ2dyZWdhdGVFcnJvcjogJEFnZ3JlZ2F0ZUVycm9yXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG5cbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIEFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXJNb2R1bGVbQVJSQVlfQlVGRkVSXTtcbnZhciBOYXRpdmVBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xuXG4vLyBgQXJyYXlCdWZmZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IE5hdGl2ZUFycmF5QnVmZmVyICE9PSBBcnJheUJ1ZmZlciB9LCB7XG4gIEFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlclxufSk7XG5cbnNldFNwZWNpZXMoQVJSQVlfQlVGRkVSKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7XG5cbi8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgYXJyYXlbSVNfQ09OQ0FUX1NQUkVBREFCTEVdID0gZmFsc2U7XG4gIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7XG59KTtcblxudmFyIFNQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2NvbmNhdCcpO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhU1BFQ0lFU19TVVBQT1JUO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IHRvTGVuZ3RoKEUubGVuZ3RoKTtcbiAgICAgICAgaWYgKG4gKyBsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG4gPj0gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjb3B5V2l0aGluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvcHl3aXRoaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgY29weVdpdGhpbjogY29weVdpdGhpblxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2NvcHlXaXRoaW4nKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWxsXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZpbGw6IGZpbGxcbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnZmlsdGVyJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkRfSU5ERVggPSAnZmluZEluZGV4JztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORF9JTkRFWCBpbiBbXSkgQXJyYXkoMSlbRklORF9JTkRFWF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZGluZGV4XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTS0lQU19IT0xFUyB9LCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kSW5kZXgodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcyhGSU5EX0lOREVYKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkQgPSAnZmluZCc7XG52YXIgU0tJUFNfSE9MRVMgPSB0cnVlO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkQgaW4gW10pIEFycmF5KDEpW0ZJTkRdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTS0lQU19IT0xFUyB9LCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcyhGSU5EKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mbGF0TWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZsYXRtYXBcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZsYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmxhdFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmbGF0OiBmdW5jdGlvbiBmbGF0KC8qIGRlcHRoQXJnID0gMSAqLykge1xuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIEEubGVuZ3RoID0gZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoQXJnKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWluZGV4b2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG5hdGl2ZUluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnaW5kZXhPZicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogTkVHQVRJVkVfWkVSTyB8fCAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyBuYXRpdmVJbmRleE9mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG5hdGl2ZUpvaW4gPSBbXS5qb2luO1xuXG52YXIgRVMzX1NUUklOR1MgPSBJbmRleGVkT2JqZWN0ICE9IE9iamVjdDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnam9pbicsICcsJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuam9pbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5qb2luXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBFUzNfU1RSSU5HUyB8fCAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUpvaW4uY2FsbCh0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtbGFzdGluZGV4b2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGxhc3RJbmRleE9mICE9PSBbXS5sYXN0SW5kZXhPZiB9LCB7XG4gIGxhc3RJbmRleE9mOiBsYXN0SW5kZXhPZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxudmFyIElTTlRfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG5cbi8vIGBBcnJheS5vZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5Lm9mXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU05UX0dFTkVSSUMgfSwge1xuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYXJndW1lbnRzTGVuZ3RoKTtcbiAgICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFyZ3VtZW50c0xlbmd0aDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2VSaWdodCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5yaWdodDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2VSaWdodCcpO1xuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlUmlnaHQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2UnKTtcbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBuYXRpdmVTbGljZSA9IFtdLnNsaWNlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBDb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlLmNhbGwoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpbnRlcm5hbFNvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc29ydCcpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIEZGID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1mZi12ZXJzaW9uJyk7XG52YXIgSUVfT1JfRURHRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaWUtb3ItZWRnZScpO1xudmFyIFY4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbicpO1xuXG52YXIgdGVzdCA9IFtdO1xudmFyIG5hdGl2ZVNvcnQgPSB0ZXN0LnNvcnQ7XG5cbi8vIElFOC1cbnZhciBGQUlMU19PTl9VTkRFRklORUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSk7XG4vLyBWOCBidWdcbnZhciBGQUlMU19PTl9OVUxMID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQobnVsbCk7XG59KTtcbi8vIE9sZCBXZWJLaXRcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29ydCcpO1xuXG52YXIgU1RBQkxFX1NPUlQgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBmZWF0dXJlIGRldGVjdGlvbiBjYW4gYmUgdG9vIHNsb3csIHNvIGNoZWNrIGVuZ2luZXMgdmVyc2lvbnNcbiAgaWYgKFY4KSByZXR1cm4gVjggPCA3MDtcbiAgaWYgKEZGICYmIEZGID4gMykgcmV0dXJuO1xuICBpZiAoSUVfT1JfRURHRSkgcmV0dXJuIHRydWU7XG4gIGlmIChXRUJLSVQpIHJldHVybiBXRUJLSVQgPCA2MDM7XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgY29kZSwgY2hyLCB2YWx1ZSwgaW5kZXg7XG5cbiAgLy8gZ2VuZXJhdGUgYW4gYXJyYXkgd2l0aCBtb3JlIDUxMiBlbGVtZW50cyAoQ2hha3JhIGFuZCBvbGQgVjggZmFpbHMgb25seSBpbiB0aGlzIGNhc2UpXG4gIGZvciAoY29kZSA9IDY1OyBjb2RlIDwgNzY7IGNvZGUrKykge1xuICAgIGNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG5cbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgIGNhc2UgNjY6IGNhc2UgNjk6IGNhc2UgNzA6IGNhc2UgNzI6IHZhbHVlID0gMzsgYnJlYWs7XG4gICAgICBjYXNlIDY4OiBjYXNlIDcxOiB2YWx1ZSA9IDQ7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogdmFsdWUgPSAyO1xuICAgIH1cblxuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDQ3OyBpbmRleCsrKSB7XG4gICAgICB0ZXN0LnB1c2goeyBrOiBjaHIgKyBpbmRleCwgdjogdmFsdWUgfSk7XG4gICAgfVxuICB9XG5cbiAgdGVzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBiLnYgLSBhLnY7IH0pO1xuXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRlc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gdGVzdFtpbmRleF0uay5jaGFyQXQoMCk7XG4gICAgaWYgKHJlc3VsdC5jaGFyQXQocmVzdWx0Lmxlbmd0aCAtIDEpICE9PSBjaHIpIHJlc3VsdCArPSBjaHI7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICE9PSAnREdCRUZIQUNJSksnO1xufSk7XG5cbnZhciBGT1JDRUQgPSBGQUlMU19PTl9VTkRFRklORUQgfHwgIUZBSUxTX09OX05VTEwgfHwgIVNUUklDVF9NRVRIT0QgfHwgIVNUQUJMRV9TT1JUO1xuXG52YXIgZ2V0U29ydENvbXBhcmUgPSBmdW5jdGlvbiAoY29tcGFyZWZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIGlmICh5ID09PSB1bmRlZmluZWQpIHJldHVybiAtMTtcbiAgICBpZiAoeCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMTtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIHJldHVybiArY29tcGFyZWZuKHgsIHkpIHx8IDA7XG4gICAgcmV0dXJuIHRvU3RyaW5nKHgpID4gdG9TdHJpbmcoeSkgPyAxIDogLTE7XG4gIH07XG59O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29ydFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIGFGdW5jdGlvbihjb21wYXJlZm4pO1xuXG4gICAgdmFyIGFycmF5ID0gdG9PYmplY3QodGhpcyk7XG5cbiAgICBpZiAoU1RBQkxFX1NPUlQpIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZCA/IG5hdGl2ZVNvcnQuY2FsbChhcnJheSkgOiBuYXRpdmVTb3J0LmNhbGwoYXJyYXksIGNvbXBhcmVmbik7XG5cbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB2YXIgYXJyYXlMZW5ndGggPSB0b0xlbmd0aChhcnJheS5sZW5ndGgpO1xuICAgIHZhciBpdGVtc0xlbmd0aCwgaW5kZXg7XG5cbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGluZGV4IGluIGFycmF5KSBpdGVtcy5wdXNoKGFycmF5W2luZGV4XSk7XG4gICAgfVxuXG4gICAgaXRlbXMgPSBpbnRlcm5hbFNvcnQoaXRlbXMsIGdldFNvcnRDb21wYXJlKGNvbXBhcmVmbikpO1xuICAgIGl0ZW1zTGVuZ3RoID0gaXRlbXMubGVuZ3RoO1xuICAgIGluZGV4ID0gMDtcblxuICAgIHdoaWxlIChpbmRleCA8IGl0ZW1zTGVuZ3RoKSBhcnJheVtpbmRleF0gPSBpdGVtc1tpbmRleCsrXTtcbiAgICB3aGlsZSAoaW5kZXggPCBhcnJheUxlbmd0aCkgZGVsZXRlIGFycmF5W2luZGV4KytdO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG59KTtcbiIsInZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG5cbi8vIGBBcnJheVtAQHNwZWNpZXNdYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LWFycmF5LUBAc3BlY2llc1xuc2V0U3BlY2llcygnQXJyYXknKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NwbGljZScpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgbGVuZ3RoIGV4Y2VlZGVkJztcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zcGxpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc3BsaWNlXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQgLyogLCAuLi5pdGVtcyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXIoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIH1cbiAgICBpZiAobGVuICsgaW5zZXJ0Q291bnQgLSBhY3R1YWxEZWxldGVDb3VudCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEKTtcbiAgICB9XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgIGZyb20gPSBhY3R1YWxTdGFydCArIGs7XG4gICAgICBpZiAoZnJvbSBpbiBPKSBjcmVhdGVQcm9wZXJ0eShBLCBrLCBPW2Zyb21dKTtcbiAgICB9XG4gICAgQS5sZW5ndGggPSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICBpZiAoaW5zZXJ0Q291bnQgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gYWN0dWFsU3RhcnQ7IGsgPCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50O1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGUgT1trIC0gMV07XG4gICAgfSBlbHNlIGlmIChpbnNlcnRDb3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgayA+IGFjdHVhbFN0YXJ0OyBrLS0pIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50IC0gMTtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrID0gMDsgayA8IGluc2VydENvdW50OyBrKyspIHtcbiAgICAgIE9bayArIGFjdHVhbFN0YXJ0XSA9IGFyZ3VtZW50c1trICsgMl07XG4gICAgfVxuICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIvLyB0aGlzIG1ldGhvZCB3YXMgYWRkZWQgdG8gdW5zY29wYWJsZXMgYWZ0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGluIHBvcHVsYXIgZW5naW5lcywgc28gaXQncyBtb3ZlZCB0byBhIHNlcGFyYXRlIG1vZHVsZVxudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZsYXRNYXAnKTtcbiIsIi8vIHRoaXMgbWV0aG9kIHdhcyBhZGRlZCB0byB1bnNjb3BhYmxlcyBhZnRlciBpbXBsZW1lbnRhdGlvblxuLy8gaW4gcG9wdWxhciBlbmdpbmVzLCBzbyBpdCdzIG1vdmVkIHRvIGEgc2VwYXJhdGUgbW9kdWxlXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmxhdCcpO1xuIiwidmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkYXRlVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghKFRPX1BSSU1JVElWRSBpbiBEYXRlUHJvdG90eXBlKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoRGF0ZVByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBkYXRlVG9QcmltaXRpdmUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSEFTX0lOU1RBTkNFID0gd2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLUBAaGFzaW5zdGFuY2VcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihGdW5jdGlvblByb3RvdHlwZSwgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gICAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSB9KTtcbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICEoTkFNRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHkoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZy5jYWxsKHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYGdsb2JhbFRoaXNgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nbG9iYWx0aGlzXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgZ2xvYmFsVGhpczogZ2xvYmFsXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gSlNPTltAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYE1hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLW9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gY29sbGVjdGlvbignTWFwJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtYWNvc2ggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgTE4yID0gTWF0aC5MTjI7XG5cbnZhciBGT1JDRUQgPSAhJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgfHwgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpICE9IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICB8fCAkYWNvc2goSW5maW5pdHkpICE9IEluZmluaXR5O1xuXG4vLyBgTWF0aC5hY29zaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguYWNvc2hcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gbG9nKHgpICsgTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWFzaW5oIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogbG9nKHggKyBzcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBgTWF0aC5hc2luaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguYXNpbmhcbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSB9LCB7XG4gIGFzaW5oOiBhc2luaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtYXRhbmggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xudmFyIGxvZyA9IE1hdGgubG9nO1xuXG4vLyBgTWF0aC5hdGFuaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguYXRhbmhcbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCkgfSwge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IGxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcblxuLy8gYE1hdGguY2JydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguY2JydFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIHBvdyhhYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cyRSA9IE1hdGguTE9HMkU7XG5cbi8vIGBNYXRoLmNsejMyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jbHozMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gZmxvb3IobG9nKHggKyAwLjUpICogTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1jb3NoIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGNvc2ggPSBNYXRoLmNvc2g7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgRSA9IE1hdGguRTtcblxuLy8gYE1hdGguY29zaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguY29zaFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICEkY29zaCB8fCAkY29zaCg3MTApID09PSBJbmZpbml0eSB9LCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHZhciB0ID0gZXhwbTEoYWJzKHgpIC0gMSkgKyAxO1xuICAgIHJldHVybiAodCArIDEgLyAodCAqIEUgKiBFKSkgKiAoRSAvIDIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxuLy8gYE1hdGguZXhwbTFgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmV4cG0xXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1leHBtMSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGV4cG0xICE9IE1hdGguZXhwbTEgfSwgeyBleHBtMTogZXhwbTEgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1mcm91bmQnKTtcblxuLy8gYE1hdGguZnJvdW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5mcm91bmRcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7IGZyb3VuZDogZnJvdW5kIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWh5cG90IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGh5cG90ID0gTWF0aC5oeXBvdDtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG4vLyBDaHJvbWUgNzcgYnVnXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05NTQ2XG52YXIgQlVHR1kgPSAhISRoeXBvdCAmJiAkaHlwb3QoSW5maW5pdHksIE5hTikgIT09IEluZmluaXR5O1xuXG4vLyBgTWF0aC5oeXBvdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguaHlwb3RcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBCVUdHWSB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogc3FydChzdW0pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWltdWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4RkZGRkZGRkYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSk7XG5cbi8vIGBNYXRoLmltdWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmltdWxcbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4RkZGRjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE9HMTBFID0gTWF0aC5MT0cxMEU7XG5cbi8vIGBNYXRoLmxvZzEwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gbG9nKHgpICogTE9HMTBFO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxuLy8gYE1hdGgubG9nMXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzFwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBsb2cxcDogbG9nMXAgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG4vLyBgTWF0aC5sb2cyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cyXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gbG9nKHgpIC8gTE4yO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbi8vIGBNYXRoLnNpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnNpZ25cbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNpZ246IHNpZ25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBleHAgPSBNYXRoLmV4cDtcbnZhciBFID0gTWF0aC5FO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1zaW5oIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KTtcblxuLy8gYE1hdGguc2luaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2luaFxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIGFicyh4ID0gK3gpIDwgMSA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoRSAvIDIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC50YW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50YW5oXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCJ2YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gTWF0aFtAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgTWF0aC50cnVuY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgudHJ1bmNcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcblxudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyIE5hdGl2ZU51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIE51bWJlclByb3RvdHlwZSA9IE5hdGl2ZU51bWJlci5wcm90b3R5cGU7XG5cbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DTEFTU09GID0gY2xhc3NvZihjcmVhdGUoTnVtYmVyUHJvdG90eXBlKSkgPT0gTlVNQkVSO1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc1N5bWJvbChhcmd1bWVudCkpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdudW1iZXInKTtcbiAgdmFyIGZpcnN0LCB0aGlyZCwgcmFkaXgsIG1heENvZGUsIGRpZ2l0cywgbGVuZ3RoLCBpbmRleCwgY29kZTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSB0cmltKGl0KTtcbiAgICBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IGl0LnNsaWNlKDIpO1xuICAgICAgbGVuZ3RoID0gZGlnaXRzLmxlbmd0aDtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuLy8gYE51bWJlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLWNvbnN0cnVjdG9yXG5pZiAoaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpKSB7XG4gIHZhciBOdW1iZXJXcmFwcGVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIGR1bW15ID0gdGhpcztcbiAgICByZXR1cm4gZHVtbXkgaW5zdGFuY2VvZiBOdW1iZXJXcmFwcGVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ0xBU1NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgTnVtYmVyUHJvdG90eXBlLnZhbHVlT2YuY2FsbChkdW1teSk7IH0pIDogY2xhc3NvZihkdW1teSkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVOdW1iZXIodG9OdW1iZXIoaXQpKSwgZHVtbXksIE51bWJlcldyYXBwZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gREVTQ1JJUFRPUlMgPyBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZU51bWJlcikgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzIwMTUgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzIwMTUgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyLCcgK1xuICAgIC8vIEVTTmV4dFxuICAgICdmcm9tU3RyaW5nLHJhbmdlJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhOYXRpdmVOdW1iZXIsIGtleSA9IGtleXNbal0pICYmICFoYXMoTnVtYmVyV3JhcHBlciwga2V5KSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoTnVtYmVyV3JhcHBlciwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTmF0aXZlTnVtYmVyLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgTnVtYmVyV3JhcHBlci5wcm90b3R5cGUgPSBOdW1iZXJQcm90b3R5cGU7XG4gIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG4gIHJlZGVmaW5lKGdsb2JhbCwgTlVNQkVSLCBOdW1iZXJXcmFwcGVyKTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLkVQU0lMT05gIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5lcHNpbG9uXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIEVQU0lMT046IE1hdGgucG93KDIsIC01Milcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbnVtYmVySXNGaW5pdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZScpO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7IGlzRmluaXRlOiBudW1iZXJJc0Zpbml0ZSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ2VyJyk7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc0ludGVnZXI6IGlzSW50ZWdlclxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5pc05hTmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc25hblxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdlcicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbi8vIGBOdW1iZXIuaXNTYWZlSW50ZWdlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc3NhZmVpbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MUZGRkZGRkZGRkZGRkY7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLm1heF9zYWZlX2ludGVnZXJcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgTUFYX1NBRkVfSU5URUdFUjogMHgxRkZGRkZGRkZGRkZGRlxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5NSU5fU0FGRV9JTlRFR0VSYCBjb25zdGFudFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIubWluX3NhZmVfaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxRkZGRkZGRkZGRkZGRlxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1mbG9hdCcpO1xuXG4vLyBgTnVtYmVyLnBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucGFyc2VGbG9hdFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW51bWJlci1wYXJzZWZsb2F0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBOdW1iZXIucGFyc2VGbG9hdCAhPSBwYXJzZUZsb2F0IH0sIHtcbiAgcGFyc2VGbG9hdDogcGFyc2VGbG9hdFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBwYXJzZUludCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtaW50Jyk7XG5cbi8vIGBOdW1iZXIucGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucGFyc2VpbnRcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1udW1iZXItcGFyc2VpbnQgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE51bWJlci5wYXJzZUludCAhPSBwYXJzZUludCB9LCB7XG4gIHBhcnNlSW50OiBwYXJzZUludFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZVRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG5cbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAoZGF0YSwgbiwgYykge1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraW5kZXggPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaW5kZXhdO1xuICAgIGRhdGFbaW5kZXhdID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG5cbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAoZGF0YSwgbikge1xuICB2YXIgaW5kZXggPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICBjICs9IGRhdGFbaW5kZXhdO1xuICAgIGRhdGFbaW5kZXhdID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xuXG52YXIgZGF0YVRvU3RyaW5nID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIGluZGV4ID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taW5kZXggPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpbmRleCA9PT0gMCB8fCBkYXRhW2luZGV4XSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpbmRleF0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbCgnMCcsIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG5cbnZhciBGT1JDRUQgPSBuYXRpdmVUb0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgbmF0aXZlVG9GaXhlZC5jYWxsKHt9KTtcbn0pO1xuXG4vLyBgTnVtYmVyLnByb3RvdHlwZS50b0ZpeGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b2ZpeGVkXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciBudW1iZXIgPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgdmFyIGZyYWN0RGlnaXRzID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbiAgICB2YXIgc2lnbiA9ICcnO1xuICAgIHZhciByZXN1bHQgPSAnMCc7XG4gICAgdmFyIGUsIHosIGosIGs7XG5cbiAgICBpZiAoZnJhY3REaWdpdHMgPCAwIHx8IGZyYWN0RGlnaXRzID4gMjApIHRocm93IFJhbmdlRXJyb3IoJ0luY29ycmVjdCBmcmFjdGlvbiBkaWdpdHMnKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChudW1iZXIgIT0gbnVtYmVyKSByZXR1cm4gJ05hTic7XG4gICAgaWYgKG51bWJlciA8PSAtMWUyMSB8fCBudW1iZXIgPj0gMWUyMSkgcmV0dXJuIFN0cmluZyhudW1iZXIpO1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICBzaWduID0gJy0nO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKG51bWJlciAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyBudW1iZXIgKiBwb3coMiwgLWUsIDEpIDogbnVtYmVyIC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseShkYXRhLCAwLCB6KTtcbiAgICAgICAgaiA9IGZyYWN0RGlnaXRzO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoZGF0YSwgMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgcG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoZGF0YSwgMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoZGF0YSwgMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMSwgMSk7XG4gICAgICAgIGRpdmlkZShkYXRhLCAyKTtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVRvU3RyaW5nKGRhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMCwgeik7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDEgPDwgLWUsIDApO1xuICAgICAgICByZXN1bHQgPSBkYXRhVG9TdHJpbmcoZGF0YSkgKyByZXBlYXQuY2FsbCgnMCcsIGZyYWN0RGlnaXRzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZyYWN0RGlnaXRzID4gMCkge1xuICAgICAgayA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICByZXN1bHQgPSBzaWduICsgKGsgPD0gZnJhY3REaWdpdHNcbiAgICAgICAgPyAnMC4nICsgcmVwZWF0LmNhbGwoJzAnLCBmcmFjdERpZ2l0cyAtIGspICsgcmVzdWx0XG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGsgLSBmcmFjdERpZ2l0cykgKyAnLicgKyByZXN1bHQuc2xpY2UoayAtIGZyYWN0RGlnaXRzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyByZXN1bHQ7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9iamVjdC5hc3NpZ24gIT09IGFzc2lnbiB9LCB7XG4gIGFzc2lnbjogYXNzaWduXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykuZW50cmllcztcblxuLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhPKSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBvbkZyZWV6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLm9uRnJlZXplO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWZyZWV6ZSAtLSBzYWZlXG52YXIgJGZyZWV6ZSA9IE9iamVjdC5mcmVlemU7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJGZyZWV6ZSgxKTsgfSk7XG5cbi8vIGBPYmplY3QuZnJlZXplYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmZyZWV6ZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgZnJlZXplOiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5mcm9tRW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZnJvbS1lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGZyb21FbnRyaWVzOiBmdW5jdGlvbiBmcm9tRW50cmllcyhpdGVyYWJsZSkge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgY3JlYXRlUHJvcGVydHkob2JqLCBrLCB2KTtcbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKDEpOyB9KTtcbnZhciBGT1JDRUQgPSAhREVTQ1JJUFRPUlMgfHwgRkFJTFNfT05fUFJJTUlUSVZFUztcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSW5kZXhlZE9iamVjdChpdCksIGtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIga2V5LCBkZXNjcmlwdG9yO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSA9IGtleXNbaW5kZXgrK10pO1xuICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpLmY7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiAhT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldFByb3RvdHlwZU9mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0V4dGVuc2libGUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2Zyb3plbiAtLSBzYWZlXG52YXIgJGlzRnJvemVuID0gT2JqZWN0LmlzRnJvemVuO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0Zyb3plbigxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNGcm96ZW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNmcm96ZW5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBpc0Zyb3plbjogZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzc2VhbGVkIC0tIHNhZmVcbnZhciAkaXNTZWFsZWQgPSBPYmplY3QuaXNTZWFsZWQ7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJGlzU2VhbGVkKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc1NlYWxlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc3NlYWxlZFxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGlzU2VhbGVkOiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcblxuLy8gYE9iamVjdC5pc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBpczogaXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gICAgICB2YXIgZGVzYztcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGRlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5KSkgcmV0dXJuIGRlc2MuZ2V0O1xuICAgICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICAgICAgdmFyIGRlc2M7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChkZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSkpIHJldHVybiBkZXNjLnNldDtcbiAgICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG9uRnJlZXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykub25GcmVlemU7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXByZXZlbnRleHRlbnNpb25zIC0tIHNhZmVcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJHByZXZlbnRFeHRlbnNpb25zKDEpOyB9KTtcblxuLy8gYE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcmV2ZW50ZXh0ZW5zaW9uc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMob25GcmVlemUoaXQpKSA6IGl0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG9uRnJlZXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykub25GcmVlemU7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNlYWwgLS0gc2FmZVxudmFyICRzZWFsID0gT2JqZWN0LnNlYWw7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJHNlYWwoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LnNlYWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2VhbFxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgc2VhbDogZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBzZXRQcm90b3R5cGVPZjogc2V0UHJvdG90eXBlT2Zcbn0pO1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLnZhbHVlcztcblxuLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKE8pIHtcbiAgICByZXR1cm4gJHZhbHVlcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBwYXJzZUZsb2F0SW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0Jyk7XG5cbi8vIGBwYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VmbG9hdC1zdHJpbmdcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogcGFyc2VGbG9hdCAhPSBwYXJzZUZsb2F0SW1wbGVtZW50YXRpb24gfSwge1xuICBwYXJzZUZsb2F0OiBwYXJzZUZsb2F0SW1wbGVtZW50YXRpb25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtaW50Jyk7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUludCAhPSBwYXJzZUludEltcGxlbWVudGF0aW9uIH0sIHtcbiAgcGFyc2VJbnQ6IHBhcnNlSW50SW1wbGVtZW50YXRpb25cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBQcm9taXNlLmFsbFNldHRsZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbHNldHRsZWRcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGFsbFNldHRsZWQ6IGZ1bmN0aW9uIGFsbFNldHRsZWQoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiBlcnJvciB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbnZhciBQUk9NSVNFX0FOWV9FUlJPUiA9ICdObyBvbmUgcHJvbWlzZSByZXNvbHZlZCc7XG5cbi8vIGBQcm9taXNlLmFueWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYW55XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUgfSwge1xuICBhbnk6IGZ1bmN0aW9uIGFueShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICB2YXIgYWxyZWFkeVJlc29sdmVkID0gZmFsc2U7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5UmVqZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgZXJyb3JzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIGlmIChhbHJlYWR5UmVqZWN0ZWQgfHwgYWxyZWFkeVJlc29sdmVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeVJlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBlcnJvcnNbaW5kZXhdID0gZXJyb3I7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyAoZ2V0QnVpbHRJbignQWdncmVnYXRlRXJyb3InKSkoZXJyb3JzLCBQUk9NSVNFX0FOWV9FUlJPUikpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyAoZ2V0QnVpbHRJbignQWdncmVnYXRlRXJyb3InKSkoZXJyb3JzLCBQUk9NSVNFX0FOWV9FUlJPUikpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbi8vIFNhZmFyaSBidWcgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwMDgyOVxudmFyIE5PTl9HRU5FUklDID0gISFOYXRpdmVQcm9taXNlICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXS5jYWxsKHsgdGhlbjogZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9IH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmZpbmFsbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IE5PTl9HRU5FUklDIH0sIHtcbiAgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgZ2V0QnVpbHRJbignUHJvbWlzZScpKTtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHksXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5XG4gICAgKTtcbiAgfVxufSk7XG5cbi8vIG1ha2VzIHN1cmUgdGhhdCBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzIGBQcm9taXNlI2ZpbmFsbHlgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicpIHtcbiAgdmFyIG1ldGhvZCA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2ZpbmFsbHknXTtcbiAgaWYgKE5hdGl2ZVByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10gIT09IG1ldGhvZCkge1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAnZmluYWxseScsIG1ldGhvZCwgeyB1bnNhZmU6IHRydWUgfSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX0JST1dTRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXInKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlICYmIE5hdGl2ZVByb21pc2UucHJvdG90eXBlO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2U7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgTkFUSVZFX1JFSkVDVElPTl9FVkVOVCA9IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJztcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBTVUJDTEFTU0lORyA9IGZhbHNlO1xudmFyIEludGVybmFsLCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgUHJvbWlzZVdyYXBwZXIsIG5hdGl2ZVRoZW47XG5cbnZhciBGT1JDRUQgPSBpc0ZvcmNlZChQUk9NSVNFLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBQUk9NSVNFX0NPTlNUUlVDVE9SX1NPVVJDRSA9IGluc3BlY3RTb3VyY2UoUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBQUk9NSVNFX0NPTlNUUlVDVE9SX1NPVVJDRSAhPT0gU3RyaW5nKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIC8vIFY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gIC8vIFdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gIGlmICghR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSAmJiBWOF9WRVJTSU9OID09PSA2NikgcmV0dXJuIHRydWU7XG4gIC8vIFdlIG5lZWQgUHJvbWlzZSNmaW5hbGx5IGluIHRoZSBwdXJlIHZlcnNpb24gZm9yIHByZXZlbnRpbmcgcHJvdG90eXBlIHBvbGx1dGlvblxuICBpZiAoSVNfUFVSRSAmJiAhUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlWydmaW5hbGx5J10pIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKDEpOyB9KTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICBTVUJDTEFTU0lORyA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIGlmICghU1VCQ0xBU1NJTkcpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIHJldHVybiAhR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSAmJiBJU19CUk9XU0VSICYmICFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoc3RhdGUsIGlzUmVqZWN0KSB7XG4gIGlmIChzdGF0ZS5ub3RpZmllZCkgcmV0dXJuO1xuICBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHN0YXRlLnJlYWN0aW9ucztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gY2hhaW5baW5kZXgrK107XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRCkgb25IYW5kbGVVbmhhbmRsZWQoc3RhdGUpO1xuICAgICAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gY2FuIHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5yZWFjdGlvbnMgPSBbXTtcbiAgICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKSBvblVuaGFuZGxlZChzdGF0ZSk7XG4gIH0pO1xufTtcblxudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gIHZhciBldmVudCwgaGFuZGxlcjtcbiAgaWYgKERJU1BBVENIX0VWRU5UKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBldmVudC5yZWFzb24gPSByZWFzb247XG4gICAgZXZlbnQuaW5pdEV2ZW50KG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0gZWxzZSBldmVudCA9IHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiByZWFzb24gfTtcbiAgaWYgKCFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UICYmIChoYW5kbGVyID0gZ2xvYmFsWydvbicgKyBuYW1lXSkpIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlc29sdmUsIHdyYXBwZXIsIHN0YXRlKSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZWplY3QsIHdyYXBwZXIsIHN0YXRlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaW50ZXJuYWxSZWplY3Qod3JhcHBlciwgZXJyb3IsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBzdGF0ZS5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICAgIG5vdGlmeShzdGF0ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbnRlcm5hbFJlamVjdCh7IGRvbmU6IGZhbHNlIH0sIGVycm9yLCBzdGF0ZSk7XG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoRk9SQ0VEKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICBQcm9taXNlQ29uc3RydWN0b3JQcm90b3R5cGUgPSBQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIHR5cGU6IFBST01JU0UsXG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIG5vdGlmaWVkOiBmYWxzZSxcbiAgICAgIHBhcmVudDogZmFsc2UsXG4gICAgICByZWFjdGlvbnM6IFtdLFxuICAgICAgcmVqZWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0YXRlOiBQRU5ESU5HLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZWRlZmluZUFsbChQcm9taXNlQ29uc3RydWN0b3JQcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICAgICBzdGF0ZS5yZWFjdGlvbnMucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgIT0gUEVORElORykgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS5jYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHByb21pc2UpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gYmluZChpbnRlcm5hbFJlc29sdmUsIHN0YXRlKTtcbiAgICB0aGlzLnJlamVjdCA9IGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicgJiYgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLnRoZW47XG5cbiAgICBpZiAoIVNVQkNMQVNTSU5HKSB7XG4gICAgICAvLyBtYWtlIGBQcm9taXNlI3RoZW5gIHJldHVybiBhIHBvbHlmaWxsZWQgYFByb21pc2VgIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgICByZWRlZmluZShOYXRpdmVQcm9taXNlUHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgbmF0aXZlVGhlbi5jYWxsKHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgICAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG5cbiAgICAgIC8vIG1ha2VzIHN1cmUgdGhhdCBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzIGBQcm9taXNlI2NhdGNoYCBwcm9wZXJseSB3b3JrcyB3aXRoIHBhdGNoZWQgYFByb21pc2UjdGhlbmBcbiAgICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICdjYXRjaCcsIFByb21pc2VDb25zdHJ1Y3RvclByb3RvdHlwZVsnY2F0Y2gnXSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBgLmNvbnN0cnVjdG9yID09PSBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIC8vIG1ha2UgYGluc3RhbmNlb2YgUHJvbWlzZWAgd29yayBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgc2V0UHJvdG90eXBlT2YoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlKTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG5cblByb21pc2VXcmFwcGVyID0gZ2V0QnVpbHRJbihQUk9NSVNFKTtcblxuLy8gc3RhdGljc1xuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoSVNfUFVSRSAmJiB0aGlzID09PSBQcm9taXNlV3JhcHBlciA/IFByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgLy8gYFByb21pc2UuYWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbFxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgbmF0aXZlQXBwbHkgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2FwcGx5Jyk7XG52YXIgZnVuY3Rpb25BcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuXG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbnZhciBPUFRJT05BTF9BUkdVTUVOVFNfTElTVCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZUFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFJlZmxlY3QuYXBwbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmFwcGx5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT1BUSU9OQUxfQVJHVU1FTlRTX0xJU1QgfSwge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gbmF0aXZlQXBwbHlcbiAgICAgID8gbmF0aXZlQXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG4gICAgICA6IGZ1bmN0aW9uQXBwbHkuY2FsbCh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZUNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG5cbi8vIGBSZWZsZWN0LmNvbnN0cnVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuY29uc3RydWN0XG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcbnZhciBGT1JDRUQgPSBORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRztcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogRk9SQ0VEIH0sIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIG5hdGl2ZUNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbnZhciBFUlJPUl9JTlNURUFEX09GX0ZBTFNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRlZmluZVByb3BlcnR5TW9kdWxlLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KTtcblxuLy8gYFJlZmxlY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmRlZmluZXByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRVJST1JfSU5TVEVBRF9PRl9GQUxTRSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZih0YXJnZXQsIGtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5kZWxldGVwcm9wZXJ0eVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbi8vIGBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG4vLyBgUmVmbGVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZ2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gb2JqZWN0R2V0UHJvdG90eXBlT2YoYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1kYXRhLWRlc2NyaXB0b3InKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIGBSZWZsZWN0LmdldGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZ2V0XG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzY3JpcHRvciwgcHJvdG90eXBlO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gIGlmIChkZXNjcmlwdG9yKSByZXR1cm4gaXNEYXRhRGVzY3JpcHRvcihkZXNjcmlwdG9yKVxuICAgID8gZGVzY3JpcHRvci52YWx1ZVxuICAgIDogZGVzY3JpcHRvci5nZXQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGRlc2NyaXB0b3IuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBnZXQ6IGdldFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYFJlZmxlY3QuaGFzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5oYXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSAtLSBzYWZlXG52YXIgb2JqZWN0SXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuLy8gYFJlZmxlY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5pc2V4dGVuc2libGVcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuIG9iamVjdElzRXh0ZW5zaWJsZSA/IG9iamVjdElzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG5cbi8vIGBSZWZsZWN0Lm93bktleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lm93bmtleXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG93bktleXM6IG93bktleXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG4vLyBgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QucHJldmVudGV4dGVuc2lvbnNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyA9IGdldEJ1aWx0SW4oJ09iamVjdCcsICdwcmV2ZW50RXh0ZW5zaW9ucycpO1xuICAgICAgaWYgKG9iamVjdFByZXZlbnRFeHRlbnNpb25zKSBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG52YXIgb2JqZWN0U2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldHByb3RvdHlwZW9mXG5pZiAob2JqZWN0U2V0UHJvdG90eXBlT2YpICQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBvYmplY3RTZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBgUmVmbGVjdC5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldFxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvdHlwZSwgc2V0dGVyO1xuICBpZiAoIW93bkRlc2NyaXB0b3IpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDApO1xuICB9XG4gIGlmIChpc0RhdGFEZXNjcmlwdG9yKG93bkRlc2NyaXB0b3IpKSB7XG4gICAgaWYgKG93bkRlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgVikpO1xuICB9IGVsc2Uge1xuICAgIHNldHRlciA9IG93bkRlc2NyaXB0b3Iuc2V0O1xuICAgIGlmIChzZXR0ZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgIHNldHRlci5jYWxsKHJlY2VpdmVyLCBWKTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gTVMgRWRnZSAxNy0xOCBSZWZsZWN0LnNldCBhbGxvd3Mgc2V0dGluZyB0aGUgcHJvcGVydHkgdG8gb2JqZWN0XG4vLyB3aXRoIG5vbi13cml0YWJsZSBwcm9wZXJ0eSBvbiB0aGUgcHJvdG90eXBlXG52YXIgTVNfRURHRV9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgdmFyIG9iamVjdCA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmYobmV3IENvbnN0cnVjdG9yKCksICdhJywgeyBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBSZWZsZWN0LnNldChDb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdhJywgMSwgb2JqZWN0KSAhPT0gZmFsc2U7XG59KTtcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE1TX0VER0VfQlVHIH0sIHtcbiAgc2V0OiBzZXRcbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG4vLyBUT0RPOiBVc2Ugb25seSBwcm9wcGVyIFJlZ0V4cElkZW50aWZpZXJOYW1lXG52YXIgSVNfTkNHID0gL15cXD88W15cXHNcXGQhIyUmKis8PT5AXl1bXlxccyEjJSYqKzw9PkBeXSo+LztcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG5cbi8vIFwibmV3XCIgc2hvdWxkIGNyZWF0ZSBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgTmF0aXZlUmVnRXhwKHJlMSkgIT09IHJlMTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1k7XG5cbnZhciBCQVNFX0ZPUkNFRCA9IERFU0NSSVBUT1JTICYmXG4gICghQ09SUkVDVF9ORVcgfHwgVU5TVVBQT1JURURfWSB8fCBVTlNVUFBPUlRFRF9ET1RfQUxMIHx8IFVOU1VQUE9SVEVEX05DRyB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmUyW01BVENIXSA9IGZhbHNlO1xuICAgIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gICAgcmV0dXJuIE5hdGl2ZVJlZ0V4cChyZTEpICE9IHJlMSB8fCBOYXRpdmVSZWdFeHAocmUyKSA9PSByZTIgfHwgTmF0aXZlUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG4gIH0pKTtcblxudmFyIGhhbmRsZURvdEFsbCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBzdHJpbmcuY2hhckF0KGluZGV4KTtcbiAgICBpZiAoY2hyID09PSAnXFxcXCcpIHtcbiAgICAgIHJlc3VsdCArPSBjaHIgKyBzdHJpbmcuY2hhckF0KCsraW5kZXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghYnJhY2tldHMgJiYgY2hyID09PSAnLicpIHtcbiAgICAgIHJlc3VsdCArPSAnW1xcXFxzXFxcXFNdJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNociA9PT0gJ1snKSB7XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXScpIHtcbiAgICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICAgIH0gcmVzdWx0ICs9IGNocjtcbiAgICB9XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBoYW5kbGVOQ0cgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuYW1lZCA9IFtdO1xuICB2YXIgbmFtZXMgPSB7fTtcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBuY2cgPSBmYWxzZTtcbiAgdmFyIGdyb3VwaWQgPSAwO1xuICB2YXIgZ3JvdXBuYW1lID0gJyc7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBzdHJpbmcuY2hhckF0KGluZGV4KTtcbiAgICBpZiAoY2hyID09PSAnXFxcXCcpIHtcbiAgICAgIGNociA9IGNociArIHN0cmluZy5jaGFyQXQoKytpbmRleCk7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09ICddJykge1xuICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFicmFja2V0cykgc3dpdGNoICh0cnVlKSB7XG4gICAgICBjYXNlIGNociA9PT0gJ1snOlxuICAgICAgICBicmFja2V0cyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBjaHIgPT09ICcoJzpcbiAgICAgICAgaWYgKElTX05DRy50ZXN0KHN0cmluZy5zbGljZShpbmRleCArIDEpKSkge1xuICAgICAgICAgIGluZGV4ICs9IDI7XG4gICAgICAgICAgbmNnID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gY2hyO1xuICAgICAgICBncm91cGlkKys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY2FzZSBjaHIgPT09ICc+JyAmJiBuY2c6XG4gICAgICAgIGlmIChncm91cG5hbWUgPT09ICcnIHx8IGhhcyhuYW1lcywgZ3JvdXBuYW1lKSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignSW52YWxpZCBjYXB0dXJlIGdyb3VwIG5hbWUnKTtcbiAgICAgICAgfVxuICAgICAgICBuYW1lc1tncm91cG5hbWVdID0gdHJ1ZTtcbiAgICAgICAgbmFtZWQucHVzaChbZ3JvdXBuYW1lLCBncm91cGlkXSk7XG4gICAgICAgIG5jZyA9IGZhbHNlO1xuICAgICAgICBncm91cG5hbWUgPSAnJztcbiAgICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChuY2cpIGdyb3VwbmFtZSArPSBjaHI7XG4gICAgZWxzZSByZXN1bHQgKz0gY2hyO1xuICB9IHJldHVybiBbcmVzdWx0LCBuYW1lZF07XG59O1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAtY29uc3RydWN0b3JcbmlmIChpc0ZvcmNlZCgnUmVnRXhwJywgQkFTRV9GT1JDRUQpKSB7XG4gIHZhciBSZWdFeHBXcmFwcGVyID0gZnVuY3Rpb24gUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHRoaXNJc1JlZ0V4cCA9IHRoaXMgaW5zdGFuY2VvZiBSZWdFeHBXcmFwcGVyO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBncm91cHMgPSBbXTtcbiAgICB2YXIgcmF3UGF0dGVybiA9IHBhdHRlcm47XG4gICAgdmFyIHJhd0ZsYWdzLCBkb3RBbGwsIHN0aWNreSwgaGFuZGxlZCwgcmVzdWx0LCBzdGF0ZTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0FyZVVuZGVmaW5lZCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybklzUmVnRXhwIHx8IHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICBwYXR0ZXJuID0gcGF0dGVybi5zb3VyY2U7XG4gICAgICBpZiAoZmxhZ3NBcmVVbmRlZmluZWQpIGZsYWdzID0gJ2ZsYWdzJyBpbiByYXdQYXR0ZXJuID8gcmF3UGF0dGVybi5mbGFncyA6IGdldEZsYWdzLmNhbGwocmF3UGF0dGVybik7XG4gICAgfVxuXG4gICAgcGF0dGVybiA9IHBhdHRlcm4gPT09IHVuZGVmaW5lZCA/ICcnIDogdG9TdHJpbmcocGF0dGVybik7XG4gICAgZmxhZ3MgPSBmbGFncyA9PT0gdW5kZWZpbmVkID8gJycgOiB0b1N0cmluZyhmbGFncyk7XG4gICAgcmF3UGF0dGVybiA9IHBhdHRlcm47XG5cbiAgICBpZiAoVU5TVVBQT1JURURfRE9UX0FMTCAmJiAnZG90QWxsJyBpbiByZTEpIHtcbiAgICAgIGRvdEFsbCA9ICEhZmxhZ3MgJiYgZmxhZ3MuaW5kZXhPZigncycpID4gLTE7XG4gICAgICBpZiAoZG90QWxsKSBmbGFncyA9IGZsYWdzLnJlcGxhY2UoL3MvZywgJycpO1xuICAgIH1cblxuICAgIHJhd0ZsYWdzID0gZmxhZ3M7XG5cbiAgICBpZiAoVU5TVVBQT1JURURfWSAmJiAnc3RpY2t5JyBpbiByZTEpIHtcbiAgICAgIHN0aWNreSA9ICEhZmxhZ3MgJiYgZmxhZ3MuaW5kZXhPZigneScpID4gLTE7XG4gICAgICBpZiAoc3RpY2t5KSBmbGFncyA9IGZsYWdzLnJlcGxhY2UoL3kvZywgJycpO1xuICAgIH1cblxuICAgIGlmIChVTlNVUFBPUlRFRF9OQ0cpIHtcbiAgICAgIGhhbmRsZWQgPSBoYW5kbGVOQ0cocGF0dGVybik7XG4gICAgICBwYXR0ZXJuID0gaGFuZGxlZFswXTtcbiAgICAgIGdyb3VwcyA9IGhhbmRsZWRbMV07XG4gICAgfVxuXG4gICAgcmVzdWx0ID0gaW5oZXJpdElmUmVxdWlyZWQoTmF0aXZlUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSwgdGhpc0lzUmVnRXhwID8gdGhpcyA6IFJlZ0V4cFByb3RvdHlwZSwgUmVnRXhwV3JhcHBlcik7XG5cbiAgICBpZiAoZG90QWxsIHx8IHN0aWNreSB8fCBncm91cHMubGVuZ3RoKSB7XG4gICAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHJlc3VsdCk7XG4gICAgICBpZiAoZG90QWxsKSB7XG4gICAgICAgIHN0YXRlLmRvdEFsbCA9IHRydWU7XG4gICAgICAgIHN0YXRlLnJhdyA9IFJlZ0V4cFdyYXBwZXIoaGFuZGxlRG90QWxsKHBhdHRlcm4pLCByYXdGbGFncyk7XG4gICAgICB9XG4gICAgICBpZiAoc3RpY2t5KSBzdGF0ZS5zdGlja3kgPSB0cnVlO1xuICAgICAgaWYgKGdyb3Vwcy5sZW5ndGgpIHN0YXRlLmdyb3VwcyA9IGdyb3VwcztcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybiAhPT0gcmF3UGF0dGVybikgdHJ5IHtcbiAgICAgIC8vIGZhaWxzIGluIG9sZCBlbmdpbmVzLCBidXQgd2UgaGF2ZSBubyBhbHRlcm5hdGl2ZXMgZm9yIHVuc3VwcG9ydGVkIHJlZ2V4IHN5bnRheFxuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHJlc3VsdCwgJ3NvdXJjZScsIHJhd1BhdHRlcm4gPT09ICcnID8gJyg/OiknIDogcmF3UGF0dGVybik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluIFJlZ0V4cFdyYXBwZXIgfHwgZGVmaW5lUHJvcGVydHkoUmVnRXhwV3JhcHBlciwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5hdGl2ZVJlZ0V4cFtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgTmF0aXZlUmVnRXhwW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZVJlZ0V4cCksIGluZGV4ID0gMDsga2V5cy5sZW5ndGggPiBpbmRleDspIHtcbiAgICBwcm94eShrZXlzW2luZGV4KytdKTtcbiAgfVxuXG4gIFJlZ0V4cFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlZ0V4cFdyYXBwZXI7XG4gIFJlZ0V4cFdyYXBwZXIucHJvdG90eXBlID0gUmVnRXhwUHJvdG90eXBlO1xuICByZWRlZmluZShnbG9iYWwsICdSZWdFeHAnLCBSZWdFeHBXcmFwcGVyKTtcbn1cblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLUBAc3BlY2llc1xuc2V0U3BlY2llcygnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb2JqZWN0RGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGT1JDRUQgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJykuZ2V0LmNhbGwoeyBkb3RBbGw6IHRydWUsIHN0aWNreTogdHJ1ZSB9KSAhPT0gJ3N5Jztcbn0pO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5pZiAoRk9SQ0VEKSBvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlZ0V4cEZsYWdzXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG5hdGl2ZVRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbnZhciBJTkNPUlJFQ1RfTkFNRSA9IG5hdGl2ZVRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSAkdG9TdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpID8gZmxhZ3MuY2FsbChSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYFNldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LW9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gY29sbGVjdGlvbignU2V0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5hbmNob3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmFuY2hvclxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2FuY2hvcicpIH0sIHtcbiAgYW5jaG9yOiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYmlnYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5iaWdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdiaWcnKSB9LCB7XG4gIGJpZzogZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5ibGlua2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdibGluaycpIH0sIHtcbiAgYmxpbms6IGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJvbGRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmJvbGRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdib2xkJykgfSwge1xuICBib2xkOiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjb2RlQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNvZGVBdDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuIGNvZGVBdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtZW5kc3dpdGggLS0gc2FmZVxudmFyICRlbmRzV2l0aCA9ICcnLmVuZHNXaXRoO1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnZW5kc1dpdGgnKTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL3B1bGwvNzAyXG52YXIgTUROX1BPTFlGSUxMX0JVRyA9ICFJU19QVVJFICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyAmJiAhIWZ1bmN0aW9uICgpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuZW5kc3dpdGhcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhTUROX1BPTFlGSUxMX0JVRyAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgfSwge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICBub3RBUmVnRXhwKHNlYXJjaFN0cmluZyk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IG1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZpeGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5maXhlZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZpeGVkJykgfSwge1xuICBmaXhlZDogZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3JcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdmb250Y29sb3InKSB9LCB7XG4gIGZvbnRjb2xvcjogZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZvbnRzaXplJykgfSwge1xuICBmb250c2l6ZTogZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLWZyb21jb2RlcG9pbnQgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG52YXIgSU5DT1JSRUNUX0xFTkdUSCA9ICEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDE7XG5cbi8vIGBTdHJpbmcuZnJvbUNvZGVQb2ludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5mcm9tY29kZXBvaW50XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfTEVOR1RIIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwRkZGRikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgZWxlbWVudHMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhEODAwLCBjb2RlICUgMHg0MDAgKyAweERDMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIGVsZW1lbnRzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhY29ycmVjdElzUmVnRXhwTG9naWMoJ2luY2x1ZGVzJykgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfnRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpXG4gICAgICAuaW5kZXhPZih0b1N0cmluZyhub3RBUmVnRXhwKHNlYXJjaFN0cmluZykpLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLml0YWxpY3NgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLml0YWxpY3NcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdpdGFsaWNzJykgfSwge1xuICBpdGFsaWNzOiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHRvU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmxpbmtgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdsaW5rJykgfSwge1xuICBsaW5rOiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN0cmluZy1wcm90b3R5cGUtbWF0Y2hhbGwgLS0gc2FmZSAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgTUFUQ0hfQUxMID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaEFsbCcpO1xudmFyIFJFR0VYUF9TVFJJTkcgPSAnUmVnRXhwIFN0cmluZyc7XG52YXIgUkVHRVhQX1NUUklOR19JVEVSQVRPUiA9IFJFR0VYUF9TVFJJTkcgKyAnIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IpO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmVnRXhwQnVpbHRpbkV4ZWMgPSBSZWdFeHBQcm90b3R5cGUuZXhlYztcbnZhciBuYXRpdmVNYXRjaEFsbCA9ICcnLm1hdGNoQWxsO1xuXG52YXIgV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYID0gISFuYXRpdmVNYXRjaEFsbCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAnYScubWF0Y2hBbGwoLy4vKTtcbn0pO1xuXG52YXIgcmVnRXhwRXhlYyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICB2YXIgcmVzdWx0O1xuICBpZiAodHlwZW9mIGV4ZWMgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgZXhlYyByZXN1bHQnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiByZWdFeHBCdWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW4gLS0gaWdub3JlXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihmdW5jdGlvbiBSZWdFeHBTdHJpbmdJdGVyYXRvcihyZWdleHAsIHN0cmluZywgZ2xvYmFsLCBmdWxsVW5pY29kZSkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBSRUdFWFBfU1RSSU5HX0lURVJBVE9SLFxuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIHN0cmluZzogc3RyaW5nLFxuICAgIGdsb2JhbDogZ2xvYmFsLFxuICAgIHVuaWNvZGU6IGZ1bGxVbmljb2RlLFxuICAgIGRvbmU6IGZhbHNlXG4gIH0pO1xufSwgUkVHRVhQX1NUUklORywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgdmFyIFIgPSBzdGF0ZS5yZWdleHA7XG4gIHZhciBTID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgbWF0Y2ggPSByZWdFeHBFeGVjKFIsIFMpO1xuICBpZiAobWF0Y2ggPT09IG51bGwpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHN0YXRlLmRvbmUgPSB0cnVlIH07XG4gIGlmIChzdGF0ZS5nbG9iYWwpIHtcbiAgICBpZiAodG9TdHJpbmcobWF0Y2hbMF0pID09PSAnJykgUi5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgoUi5sYXN0SW5kZXgpLCBzdGF0ZS51bmljb2RlKTtcbiAgICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IGZhbHNlIH07XG4gIH1cbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG52YXIgJG1hdGNoQWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHZhciBDLCBmbGFnc1ZhbHVlLCBmbGFncywgbWF0Y2hlciwgZ2xvYmFsLCBmdWxsVW5pY29kZTtcbiAgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihSLCBSZWdFeHApO1xuICBmbGFnc1ZhbHVlID0gUi5mbGFncztcbiAgaWYgKGZsYWdzVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpKSB7XG4gICAgZmxhZ3NWYWx1ZSA9IGdldFJlZ0V4cEZsYWdzLmNhbGwoUik7XG4gIH1cbiAgZmxhZ3MgPSBmbGFnc1ZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKGZsYWdzVmFsdWUpO1xuICBtYXRjaGVyID0gbmV3IEMoQyA9PT0gUmVnRXhwID8gUi5zb3VyY2UgOiBSLCBmbGFncyk7XG4gIGdsb2JhbCA9ICEhfmZsYWdzLmluZGV4T2YoJ2cnKTtcbiAgZnVsbFVuaWNvZGUgPSAhIX5mbGFncy5pbmRleE9mKCd1Jyk7XG4gIG1hdGNoZXIubGFzdEluZGV4ID0gdG9MZW5ndGgoUi5sYXN0SW5kZXgpO1xuICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihtYXRjaGVyLCBTLCBnbG9iYWwsIGZ1bGxVbmljb2RlKTtcbn07XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaGFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFdPUktTX1dJVEhfTk9OX0dMT0JBTF9SRUdFWCB9LCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgdmFyIGZsYWdzLCBTLCBtYXRjaGVyLCByeDtcbiAgICBpZiAocmVnZXhwICE9IG51bGwpIHtcbiAgICAgIGlmIChpc1JlZ0V4cChyZWdleHApKSB7XG4gICAgICAgIGZsYWdzID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZVxuICAgICAgICAgID8gcmVnZXhwLmZsYWdzXG4gICAgICAgICAgOiBnZXRSZWdFeHBGbGFncy5jYWxsKHJlZ2V4cClcbiAgICAgICAgKSk7XG4gICAgICAgIGlmICghfmZsYWdzLmluZGV4T2YoJ2cnKSkgdGhyb3cgVHlwZUVycm9yKCdgLm1hdGNoQWxsYCBkb2VzIG5vdCBhbGxvdyBub24tZ2xvYmFsIHJlZ2V4ZXMnKTtcbiAgICAgIH1cbiAgICAgIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiBuYXRpdmVNYXRjaEFsbC5hcHBseShPLCBhcmd1bWVudHMpO1xuICAgICAgbWF0Y2hlciA9IHJlZ2V4cFtNQVRDSF9BTExdO1xuICAgICAgaWYgKG1hdGNoZXIgPT09IHVuZGVmaW5lZCAmJiBJU19QVVJFICYmIGNsYXNzb2YocmVnZXhwKSA9PSAnUmVnRXhwJykgbWF0Y2hlciA9ICRtYXRjaEFsbDtcbiAgICAgIGlmIChtYXRjaGVyICE9IG51bGwpIHJldHVybiBhRnVuY3Rpb24obWF0Y2hlcikuY2FsbChyZWdleHAsIE8pO1xuICAgIH0gZWxzZSBpZiAoV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYKSByZXR1cm4gbmF0aXZlTWF0Y2hBbGwuYXBwbHkoTywgYXJndW1lbnRzKTtcbiAgICBTID0gdG9TdHJpbmcoTyk7XG4gICAgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cCwgJ2cnKTtcbiAgICByZXR1cm4gSVNfUFVSRSA/ICRtYXRjaEFsbC5jYWxsKHJ4LCBTKSA6IHJ4W01BVENIX0FMTF0oUyk7XG4gIH1cbn0pO1xuXG5JU19QVVJFIHx8IE1BVENIX0FMTCBpbiBSZWdFeHBQcm90b3R5cGUgfHwgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cFByb3RvdHlwZSwgTUFUQ0hfQUxMLCAkbWF0Y2hBbGwpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ21hdGNoJywgZnVuY3Rpb24gKE1BVENILCBuYXRpdmVNYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIG1hdGNoZXIgPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBtYXRjaGVyICE9PSB1bmRlZmluZWQgPyBtYXRjaGVyLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0odG9TdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByeCwgUyk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcblxuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYWRFbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLmVuZDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFdFQktJVF9CVUcgfSwge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRFbmQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZFN0YXJ0KHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG4vLyBgU3RyaW5nLnJhd2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5yYXdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlIH0sIHtcbiAgcmF3OiBmdW5jdGlvbiByYXcodGVtcGxhdGUpIHtcbiAgICB2YXIgcmF3VGVtcGxhdGUgPSB0b0luZGV4ZWRPYmplY3QodGVtcGxhdGUucmF3KTtcbiAgICB2YXIgbGl0ZXJhbFNlZ21lbnRzID0gdG9MZW5ndGgocmF3VGVtcGxhdGUubGVuZ3RoKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxpdGVyYWxTZWdtZW50cyA+IGkpIHtcbiAgICAgIGVsZW1lbnRzLnB1c2godG9TdHJpbmcocmF3VGVtcGxhdGVbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhcmd1bWVudHNMZW5ndGgpIGVsZW1lbnRzLnB1c2godG9TdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gZWxlbWVudHMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHJlcGVhdDogcmVwZWF0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG52YXIgc3RyaW5nSW5kZXhPZiA9IGZ1bmN0aW9uIChzdHJpbmcsIHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgaWYgKGZyb21JbmRleCA+IHN0cmluZy5sZW5ndGgpIHJldHVybiAtMTtcbiAgaWYgKHNlYXJjaFZhbHVlID09PSAnJykgcmV0dXJuIGZyb21JbmRleDtcbiAgcmV0dXJuIHN0cmluZy5pbmRleE9mKHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpO1xufTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZWFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgcmVwbGFjZUFsbDogZnVuY3Rpb24gcmVwbGFjZUFsbChzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBJU19SRUdfRVhQLCBmbGFncywgcmVwbGFjZXIsIHN0cmluZywgc2VhcmNoU3RyaW5nLCBmdW5jdGlvbmFsUmVwbGFjZSwgc2VhcmNoTGVuZ3RoLCBhZHZhbmNlQnksIHJlcGxhY2VtZW50O1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGVuZE9mTGFzdE1hdGNoID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgaWYgKHNlYXJjaFZhbHVlICE9IG51bGwpIHtcbiAgICAgIElTX1JFR19FWFAgPSBpc1JlZ0V4cChzZWFyY2hWYWx1ZSk7XG4gICAgICBpZiAoSVNfUkVHX0VYUCkge1xuICAgICAgICBmbGFncyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGVcbiAgICAgICAgICA/IHNlYXJjaFZhbHVlLmZsYWdzXG4gICAgICAgICAgOiBnZXRSZWdFeHBGbGFncy5jYWxsKHNlYXJjaFZhbHVlKVxuICAgICAgICApKTtcbiAgICAgICAgaWYgKCF+ZmxhZ3MuaW5kZXhPZignZycpKSB0aHJvdyBUeXBlRXJyb3IoJ2AucmVwbGFjZUFsbGAgZG9lcyBub3QgYWxsb3cgbm9uLWdsb2JhbCByZWdleGVzJyk7XG4gICAgICB9XG4gICAgICByZXBsYWNlciA9IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgaWYgKHJlcGxhY2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VyLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKElTX1BVUkUgJiYgSVNfUkVHX0VYUCkge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcoTykucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RyaW5nID0gdG9TdHJpbmcoTyk7XG4gICAgc2VhcmNoU3RyaW5nID0gdG9TdHJpbmcoc2VhcmNoVmFsdWUpO1xuICAgIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSB0b1N0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgIHNlYXJjaExlbmd0aCA9IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gICAgYWR2YW5jZUJ5ID0gbWF4KDEsIHNlYXJjaExlbmd0aCk7XG4gICAgcG9zaXRpb24gPSBzdHJpbmdJbmRleE9mKHN0cmluZywgc2VhcmNoU3RyaW5nLCAwKTtcbiAgICB3aGlsZSAocG9zaXRpb24gIT09IC0xKSB7XG4gICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgcmVwbGFjZW1lbnQgPSB0b1N0cmluZyhyZXBsYWNlVmFsdWUoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiwgc3RyaW5nKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihzZWFyY2hTdHJpbmcsIHN0cmluZywgcG9zaXRpb24sIFtdLCB1bmRlZmluZWQsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gc3RyaW5nLnNsaWNlKGVuZE9mTGFzdE1hdGNoLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgIGVuZE9mTGFzdE1hdGNoID0gcG9zaXRpb24gKyBzZWFyY2hMZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHN0cmluZ0luZGV4T2Yoc3RyaW5nLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uICsgYWR2YW5jZUJ5KTtcbiAgICB9XG4gICAgaWYgKGVuZE9mTGFzdE1hdGNoIDwgc3RyaW5nLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ICs9IHN0cmluZy5zbGljZShlbmRPZkxhc3RNYXRjaCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBnZXRTdWJzdGl0dXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbicpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9wcmVmZXItZXNjYXBlLXJlcGxhY2VtZW50LWRvbGxhci1jaGFyIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby11c2VsZXNzLWRvbGxhci1yZXBsYWNlbWVudHMgLS0gZmFsc2UgcG9zaXRpdmVcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgZnVuY3Rpb24gKF8sIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgVU5TQUZFX1NVQlNUSVRVVEUgPSBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA/ICckJyA6ICckMCc7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gcmVwbGFjZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHJlcGxhY2VyLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBuYXRpdmVSZXBsYWNlLmNhbGwodG9TdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgcmVwbGFjZVZhbHVlLmluZGV4T2YoVU5TQUZFX1NVQlNUSVRVVEUpID09PSAtMSAmJlxuICAgICAgICByZXBsYWNlVmFsdWUuaW5kZXhPZignJDwnKSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJ4LCBTLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSB0b1N0cmluZyhyZXBsYWNlVmFsdWUpO1xuXG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcblxuICAgICAgICB2YXIgbWF0Y2hTdHIgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB0b1N0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xufSwgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIHx8ICFSRVBMQUNFX0tFRVBTXyQwIHx8IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzZWFyY2gnLCBmdW5jdGlvbiAoU0VBUkNILCBuYXRpdmVTZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzZWFyY2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBzZWFyY2hlciAhPT0gdW5kZWZpbmVkID8gc2VhcmNoZXIuY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0odG9TdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlU2VhcmNoLCByeCwgUyk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnNtYWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zbWFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3NtYWxsJykgfSwge1xuICBzbWFsbDogZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xudmFyIGFycmF5UHVzaCA9IFtdLnB1c2g7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgTUFYX1VJTlQzMiA9IDB4RkZGRkZGRkY7XG5cbi8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuLy8gV2VleCBKUyBoYXMgZnJvemVuIGJ1aWx0LWluIHByb3RvdHlwZXMsIHNvIHVzZSB0cnkgLyBjYXRjaCB3cmFwcGVyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NwbGl0JywgZnVuY3Rpb24gKFNQTElULCBuYXRpdmVTcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnLnNwbGl0KC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT0gNCB8fFxuICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT0gNCB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHJldHVybiBbc3RyaW5nXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbSk7XG4gICAgICB9XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHkubGFzdEluZGV4O1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nLmxlbmd0aCkgYXJyYXlQdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW0pIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHkubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltID8gb3V0cHV0LnNsaWNlKDAsIGxpbSkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJy5zcGxpdCh1bmRlZmluZWQsIDApLmxlbmd0aCkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBuYXRpdmVTcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSBpbnRlcm5hbFNwbGl0ID0gbmF0aXZlU3BsaXQ7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwodG9TdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIGxpbWl0KSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcngsIFMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSBuYXRpdmVTcGxpdCk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoVU5TVVBQT1JURURfWSA/ICdnJyA6ICd5Jyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhVTlNVUFBPUlRFRF9ZID8gJ14oPzonICsgcnguc291cmNlICsgJyknIDogcngsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBVTlNVUFBPUlRFRF9ZID8gMCA6IHE7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFVOU1VQUE9SVEVEX1kgPyBTLnNsaWNlKHEpIDogUyk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChVTlNVUFBPUlRFRF9ZID8gcSA6IDApKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0sICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMsIFVOU1VQUE9SVEVEX1kpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS1zdGFydHN3aXRoIC0tIHNhZmVcbnZhciAkc3RhcnRzV2l0aCA9ICcnLnN0YXJ0c1dpdGg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0cmlrZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N0cmlrZScpIH0sIHtcbiAgc3RyaWtlOiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN1YmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3ViXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3ViJykgfSwge1xuICBzdWI6IGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3VwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdXBcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzdXAnKSB9LCB7XG4gIHN1cDogZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykuZW5kO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbnZhciBGT1JDRUQgPSBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltRW5kJyk7XG5cbnZhciB0cmltRW5kID0gRk9SQ0VEID8gZnVuY3Rpb24gdHJpbUVuZCgpIHtcbiAgcmV0dXJuICR0cmltRW5kKHRoaXMpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtdHJpbXN0YXJ0LXRyaW1lbmQgLS0gc2FmZVxufSA6ICcnLnRyaW1FbmQ7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUVuZCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHNcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jU3RyaW5nLnByb3RvdHlwZS50cmltcmlnaHRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0cmltRW5kOiB0cmltRW5kLFxuICB0cmltUmlnaHQ6IHRyaW1FbmRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW1TdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnN0YXJ0O1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbnZhciBGT1JDRUQgPSBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltU3RhcnQnKTtcblxudmFyIHRyaW1TdGFydCA9IEZPUkNFRCA/IGZ1bmN0aW9uIHRyaW1TdGFydCgpIHtcbiAgcmV0dXJuICR0cmltU3RhcnQodGhpcyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltc3RhcnQtdHJpbWVuZCAtLSBzYWZlXG59IDogJycudHJpbVN0YXJ0O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1TdGFydCwgdHJpbUxlZnQgfWAgbWV0aG9kc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI1N0cmluZy5wcm90b3R5cGUudHJpbWxlZnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0cmltU3RhcnQ6IHRyaW1TdGFydCxcbiAgdHJpbUxlZnQ6IHRyaW1TdGFydFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW0nKSB9LCB7XG4gIHRyaW06IGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMpO1xuICB9XG59KTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuYXN5bmNJdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmFzeW5jaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnYXN5bmNJdGVyYXRvcicpO1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG5cbmlmIChERVNDUklQVE9SUyAmJiB0eXBlb2YgTmF0aXZlU3ltYm9sID09ICdmdW5jdGlvbicgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBOYXRpdmVTeW1ib2wucHJvdG90eXBlKSB8fFxuICAvLyBTYWZhcmkgMTIgYnVnXG4gIE5hdGl2ZVN5bWJvbCgpLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWRcbikpIHtcbiAgdmFyIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSA9IHt9O1xuICAvLyB3cmFwIFN5bWJvbCBjb25zdHJ1Y3RvciBmb3IgY29ycmVjdCB3b3JrIHdpdGggdW5kZWZpbmVkIGRlc2NyaXB0aW9uXG4gIHZhciBTeW1ib2xXcmFwcGVyID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPCAxIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMgaW5zdGFuY2VvZiBTeW1ib2xXcmFwcGVyXG4gICAgICA/IG5ldyBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pXG4gICAgICAvLyBpbiBFZGdlIDEzLCBTdHJpbmcoU3ltYm9sKHVuZGVmaW5lZCkpID09PSAnU3ltYm9sKHVuZGVmaW5lZCknXG4gICAgICA6IGRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQgPyBOYXRpdmVTeW1ib2woKSA6IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgaWYgKGRlc2NyaXB0aW9uID09PSAnJykgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlW3Jlc3VsdF0gPSB0cnVlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgdmFyIHN5bWJvbFByb3RvdHlwZSA9IFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcbiAgc3ltYm9sUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ltYm9sV3JhcHBlcjtcblxuICB2YXIgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90b3R5cGUudG9TdHJpbmc7XG4gIHZhciBuYXRpdmVTeW1ib2wgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCd0ZXN0JykpID09ICdTeW1ib2wodGVzdCknO1xuICB2YXIgcmVnZXhwID0gL15TeW1ib2xcXCgoLiopXFwpW14pXSskLztcbiAgZGVmaW5lUHJvcGVydHkoc3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gaXNPYmplY3QodGhpcykgPyB0aGlzLnZhbHVlT2YoKSA6IHRoaXM7XG4gICAgICB2YXIgc3RyaW5nID0gc3ltYm9sVG9TdHJpbmcuY2FsbChzeW1ib2wpO1xuICAgICAgaWYgKGhhcyhFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBkZXNjID0gbmF0aXZlU3ltYm9sID8gc3RyaW5nLnNsaWNlKDcsIC0xKSA6IHN0cmluZy5yZXBsYWNlKHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBTeW1ib2w6IFN5bWJvbFdyYXBwZXJcbiAgfSk7XG59XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLmhhc0luc3RhbmNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaGFzaW5zdGFuY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaGFzSW5zdGFuY2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXNjb25jYXRzcHJlYWRhYmxlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgIE9bSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhPLCBISURERU4pICYmIE9bSElEREVOXVtrZXldKSBPW0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgQXR0cmlidXRlcyA9IG5hdGl2ZU9iamVjdENyZWF0ZShBdHRyaWJ1dGVzLCB7IGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpO1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBrZXksIEF0dHJpYnV0ZXMpO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgJGZvckVhY2goa2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghREVTQ1JJUFRPUlMgfHwgJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9Qcm9wZXJ0eUtleShWKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoaGlkZGVuS2V5cywga2V5KSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogJHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgc2V0dGVyLmNhbGwoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICByZWRlZmluZSgkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gJHRvU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhcyhTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXMoU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpO1xuICAgIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gICAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG4gIH0pO1xuXG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfSlNPTl9TVFJJTkdJRlkgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgICAgdmFyIGluZGV4ID0gMTtcbiAgICAgIHZhciAkcmVwbGFjZXI7XG4gICAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGluZGV4KSBhcmdzLnB1c2goYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICAgICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICAgIHJldHVybiAkc3RyaW5naWZ5LmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoISRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xufVxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5tYXRjaFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5yZXBsYWNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucmVwbGFjZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNlYXJjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNlYXJjaFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzZWFyY2gnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuc3BlY2llc2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNwZWNpZXNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zcGxpdGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNwbGl0XG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NwbGl0Jyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnRvUHJpbWl0aXZlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9wcmltaXRpdmVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wudG9TdHJpbmdUYWdgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3N0cmluZ3RhZ1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC51bnNjb3BhYmxlc2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnVuc2NvcGFibGVzXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5jb3B5d2l0aGluXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdjb3B5V2l0aGluJywgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gIHJldHVybiAkY29weVdpdGhpbi5jYWxsKGFUeXBlZEFycmF5KHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmV2ZXJ5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdldmVyeScsIGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZXZlcnkoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWxsXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmlsbCcsIGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7XG4gIHJldHVybiAkZmlsbC5hcHBseShhVHlwZWRBcnJheSh0aGlzKSwgYXJndW1lbnRzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGZyb21TcGVjaWVzQW5kTGlzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLXNwZWNpZXMtYW5kLWxpc3QnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbHRlclxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmlsdGVyJywgZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHZhciBsaXN0ID0gJGZpbHRlcihhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICByZXR1cm4gZnJvbVNwZWNpZXNBbmRMaXN0KHRoaXMsIGxpc3QpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kaW5kZXhcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbmRJbmRleCcsIGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZEluZGV4KGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmluZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZCcsIGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZpbmQoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBGbG9hdDMyQXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdGbG9hdDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBGbG9hdDY0QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdGbG9hdDY0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5mb3JlYWNoXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmb3JFYWNoJywgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAkZm9yRWFjaChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q7XG52YXIgdHlwZWRBcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbScpO1xuXG4vLyBgJVR5cGVkQXJyYXklLmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUuZnJvbVxuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCgnZnJvbScsIHR5cGVkQXJyYXlGcm9tLCBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuaW5jbHVkZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2luY2x1ZGVzJywgZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGluY2x1ZGVzKGFUeXBlZEFycmF5KHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuaW5kZXhvZlxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnaW5kZXhPZicsIGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGluZGV4T2YoYVR5cGVkQXJyYXkodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50MTZBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0ludDE2JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0ludDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50OEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbnZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbnZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xudmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgbmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yID0gVWludDhBcnJheSAmJiBVaW50OEFycmF5LnByb3RvdHlwZVtJVEVSQVRPUl07XG5cbnZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhbmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yXG4gICYmIChuYXRpdmVUeXBlZEFycmF5SXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCBuYXRpdmVUeXBlZEFycmF5SXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuXG52YXIgdHlwZWRBcnJheVZhbHVlcyA9IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwoYVR5cGVkQXJyYXkodGhpcykpO1xufTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZW50cmllc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZW50cmllcycsIGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gIHJldHVybiBhcnJheUVudHJpZXMuY2FsbChhVHlwZWRBcnJheSh0aGlzKSk7XG59KTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmtleXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2tleXMnLCBmdW5jdGlvbiBrZXlzKCkge1xuICByZXR1cm4gYXJyYXlLZXlzLmNhbGwoYVR5cGVkQXJyYXkodGhpcykpO1xufSk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnZhbHVlc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndmFsdWVzJywgdHlwZWRBcnJheVZhbHVlcywgIUNPUlJFQ1RfSVRFUl9OQU1FKTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKElURVJBVE9SLCB0eXBlZEFycmF5VmFsdWVzLCAhQ09SUkVDVF9JVEVSX05BTUUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgJGpvaW4gPSBbXS5qb2luO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5qb2luXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnam9pbicsIGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gIHJldHVybiAkam9pbi5hcHBseShhVHlwZWRBcnJheSh0aGlzKSwgYXJndW1lbnRzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmxhc3RpbmRleG9mXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbGFzdEluZGV4T2YnLCBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkbGFzdEluZGV4T2YuYXBwbHkoYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLm1hcFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbWFwJywgZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJG1hcChhVHlwZWRBcnJheSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyAodHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihPKSkobGVuZ3RoKTtcbiAgfSk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUub2ZcbmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QoJ29mJywgZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IodGhpcykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRyZWR1Y2VSaWdodCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5yaWdodDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZWR1Y2VSaWNodGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3JlZHVjZVJpZ2h0JywgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICByZXR1cm4gJHJlZHVjZVJpZ2h0KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLmxlZnQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZWR1Y2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3JlZHVjZScsIGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gIHJldHVybiAkcmVkdWNlKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmV2ZXJzZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmV2ZXJzZScsIGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IGFUeXBlZEFycmF5KHRoYXQpLmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgdmFsdWU7XG4gIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICB9IHJldHVybiB0aGF0O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNldFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2V0JywgZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAxKTtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSAwO1xuICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGgnKTtcbiAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICRzbGljZSA9IFtdLnNsaWNlO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2xpY2UoKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2xpY2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NsaWNlJywgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgbGlzdCA9ICRzbGljZS5jYWxsKGFUeXBlZEFycmF5KHRoaXMpLCBzdGFydCwgZW5kKTtcbiAgdmFyIEMgPSB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yKHRoaXMpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgQyhsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufSwgRk9SQ0VEKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5zb21lO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvbWVcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NvbWUnLCBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkc29tZShhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBpbnRlcm5hbFNvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc29ydCcpO1xudmFyIEZGID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1mZi12ZXJzaW9uJyk7XG52YXIgSUVfT1JfRURHRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaWUtb3ItZWRnZScpO1xudmFyIFY4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgVWludDE2QXJyYXkgPSBnbG9iYWwuVWludDE2QXJyYXk7XG52YXIgbmF0aXZlU29ydCA9IFVpbnQxNkFycmF5ICYmIFVpbnQxNkFycmF5LnByb3RvdHlwZS5zb3J0O1xuXG4vLyBXZWJLaXRcbnZhciBBQ0NFUFRfSU5DT1JSRUNUX0FSR1VNRU5UUyA9ICEhbmF0aXZlU29ydCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSBuZXcgVWludDE2QXJyYXkoMik7XG4gIGFycmF5LnNvcnQobnVsbCk7XG4gIGFycmF5LnNvcnQoe30pO1xufSk7XG5cbnZhciBTVEFCTEVfU09SVCA9ICEhbmF0aXZlU29ydCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBmZWF0dXJlIGRldGVjdGlvbiBjYW4gYmUgdG9vIHNsb3csIHNvIGNoZWNrIGVuZ2luZXMgdmVyc2lvbnNcbiAgaWYgKFY4KSByZXR1cm4gVjggPCA3NDtcbiAgaWYgKEZGKSByZXR1cm4gRkYgPCA2NztcbiAgaWYgKElFX09SX0VER0UpIHJldHVybiB0cnVlO1xuICBpZiAoV0VCS0lUKSByZXR1cm4gV0VCS0lUIDwgNjAyO1xuXG4gIHZhciBhcnJheSA9IG5ldyBVaW50MTZBcnJheSg1MTYpO1xuICB2YXIgZXhwZWN0ZWQgPSBBcnJheSg1MTYpO1xuICB2YXIgaW5kZXgsIG1vZDtcblxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA1MTY7IGluZGV4KyspIHtcbiAgICBtb2QgPSBpbmRleCAlIDQ7XG4gICAgYXJyYXlbaW5kZXhdID0gNTE1IC0gaW5kZXg7XG4gICAgZXhwZWN0ZWRbaW5kZXhdID0gaW5kZXggLSAyICogbW9kICsgMztcbiAgfVxuXG4gIGFycmF5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gKGEgLyA0IHwgMCkgLSAoYiAvIDQgfCAwKTtcbiAgfSk7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNTE2OyBpbmRleCsrKSB7XG4gICAgaWYgKGFycmF5W2luZGV4XSAhPT0gZXhwZWN0ZWRbaW5kZXhdKSByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG5cbnZhciBnZXRTb3J0Q29tcGFyZSA9IGZ1bmN0aW9uIChjb21wYXJlZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgaWYgKGNvbXBhcmVmbiAhPT0gdW5kZWZpbmVkKSByZXR1cm4gK2NvbXBhcmVmbih4LCB5KSB8fCAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKHkgIT09IHkpIHJldHVybiAtMTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmICh4ICE9PSB4KSByZXR1cm4gMTtcbiAgICBpZiAoeCA9PT0gMCAmJiB5ID09PSAwKSByZXR1cm4gMSAvIHggPiAwICYmIDEgLyB5IDwgMCA/IDEgOiAtMTtcbiAgICByZXR1cm4geCA+IHk7XG4gIH07XG59O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zb3J0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzb3J0JywgZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgdmFyIGFycmF5ID0gdGhpcztcbiAgaWYgKGNvbXBhcmVmbiAhPT0gdW5kZWZpbmVkKSBhRnVuY3Rpb24oY29tcGFyZWZuKTtcbiAgaWYgKFNUQUJMRV9TT1JUKSByZXR1cm4gbmF0aXZlU29ydC5jYWxsKGFycmF5LCBjb21wYXJlZm4pO1xuXG4gIGFUeXBlZEFycmF5KGFycmF5KTtcbiAgdmFyIGFycmF5TGVuZ3RoID0gdG9MZW5ndGgoYXJyYXkubGVuZ3RoKTtcbiAgdmFyIGl0ZW1zID0gQXJyYXkoYXJyYXlMZW5ndGgpO1xuICB2YXIgaW5kZXg7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICBpdGVtc1tpbmRleF0gPSBhcnJheVtpbmRleF07XG4gIH1cblxuICBpdGVtcyA9IGludGVybmFsU29ydChhcnJheSwgZ2V0U29ydENvbXBhcmUoY29tcGFyZWZuKSk7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICBhcnJheVtpbmRleF0gPSBpdGVtc1tpbmRleF07XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59LCAhU1RBQkxFX1NPUlQgfHwgQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnN1YmFycmF5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zdWJhcnJheVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc3ViYXJyYXknLCBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgdmFyIGJlZ2luSW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gIHZhciBDID0gdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihPKTtcbiAgcmV0dXJuIG5ldyBDKFxuICAgIE8uYnVmZmVyLFxuICAgIE8uYnl0ZU9mZnNldCArIGJlZ2luSW5kZXggKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gYmVnaW5JbmRleClcbiAgKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkdG9Mb2NhbGVTdHJpbmcgPSBbXS50b0xvY2FsZVN0cmluZztcbnZhciAkc2xpY2UgPSBbXS5zbGljZTtcblxuLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxudmFyIFRPX0xPQ0FMRV9TVFJJTkdfQlVHID0gISFJbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgSW50OEFycmF5KDEpKTtcbn0pO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IEludDhBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9sb2NhbGVzdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvTG9jYWxlU3RyaW5nJywgZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gIHJldHVybiAkdG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX1NUUklOR19CVUcgPyAkc2xpY2UuY2FsbChhVHlwZWRBcnJheSh0aGlzKSkgOiBhVHlwZWRBcnJheSh0aGlzKSwgYXJndW1lbnRzKTtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbnZhciBVaW50OEFycmF5UHJvdG90eXBlID0gVWludDhBcnJheSAmJiBVaW50OEFycmF5LnByb3RvdHlwZSB8fCB7fTtcbnZhciBhcnJheVRvU3RyaW5nID0gW10udG9TdHJpbmc7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgYXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgfTtcbn1cblxudmFyIElTX05PVF9BUlJBWV9NRVRIT0QgPSBVaW50OEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmc7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS50b3N0cmluZ1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndG9TdHJpbmcnLCBhcnJheVRvU3RyaW5nLCBJU19OT1RfQVJSQVlfTUVUSE9EKTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDE2JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQ4Q2xhbXBlZEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDgnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvbldlYWsgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZW5mb3JjZUl0ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmVuZm9yY2U7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xuXG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgSW50ZXJuYWxXZWFrTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxuLy8gYFdlYWtNYXBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAtY29uc3RydWN0b3JcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gY29sbGVjdGlvbignV2Vha01hcCcsIHdyYXBwZXIsIGNvbGxlY3Rpb25XZWFrKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuLy8gV2UgY2FuJ3QgdXNlIGZlYXR1cmUgZGV0ZWN0aW9uIGJlY2F1c2UgaXQgY3Jhc2ggc29tZSBvbGQgSUUgYnVpbGRzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDg1XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxXZWFrTWFwID0gY29sbGVjdGlvbldlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgJ1dlYWtNYXAnLCB0cnVlKTtcbiAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgdmFyIFdlYWtNYXBQcm90b3R5cGUgPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVEZWxldGUgPSBXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXTtcbiAgdmFyIG5hdGl2ZUhhcyA9IFdlYWtNYXBQcm90b3R5cGUuaGFzO1xuICB2YXIgbmF0aXZlR2V0ID0gV2Vha01hcFByb3RvdHlwZS5nZXQ7XG4gIHZhciBuYXRpdmVTZXQgPSBXZWFrTWFwUHJvdG90eXBlLnNldDtcbiAgcmVkZWZpbmVBbGwoV2Vha01hcFByb3RvdHlwZSwge1xuICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUl0ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZURlbGV0ZS5jYWxsKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlLmNhbGwodGhpcywga2V5KTtcbiAgICB9LFxuICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJdGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXMuY2FsbCh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcy5jYWxsKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSXRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlSGFzLmNhbGwodGhpcywga2V5KSA/IG5hdGl2ZUdldC5jYWxsKHRoaXMsIGtleSkgOiBzdGF0ZS5mcm96ZW4uZ2V0KGtleSk7XG4gICAgICB9IHJldHVybiBuYXRpdmVHZXQuY2FsbCh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJdGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcy5jYWxsKHRoaXMsIGtleSkgPyBuYXRpdmVTZXQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKSA6IHN0YXRlLmZyb3plbi5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgbmF0aXZlU2V0LmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyBgV2Vha1NldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC1jb25zdHJ1Y3RvclxuY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25XZWFrKTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuL2VzLmFnZ3JlZ2F0ZS1lcnJvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhgIGdldHRlclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tlaXRoYW11cy9wcm9wb3NhbC1hcnJheS1sYXN0XG5pZiAoREVTQ1JJUFRPUlMgJiYgISgnbGFzdEluZGV4JyBpbiBbXSkpIHtcbiAgZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnbGFzdEluZGV4Jywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGxhc3RJbmRleCgpIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIGxlbiA9PSAwID8gMCA6IGxlbiAtIDE7XG4gICAgfVxuICB9KTtcblxuICBhZGRUb1Vuc2NvcGFibGVzKCdsYXN0SW5kZXgnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4YCBhY2Nlc3NvclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tlaXRoYW11cy9wcm9wb3NhbC1hcnJheS1sYXN0XG5pZiAoREVTQ1JJUFRPUlMgJiYgISgnbGFzdEl0ZW0nIGluIFtdKSkge1xuICBkZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdsYXN0SXRlbScsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBsYXN0SXRlbSgpIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIGxlbiA9PSAwID8gdW5kZWZpbmVkIDogT1tsZW4gLSAxXTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gbGFzdEl0ZW0odmFsdWUpIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIE9bbGVuID09IDAgPyAwIDogbGVuIC0gMV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGFkZFRvVW5zY29wYWJsZXMoJ2xhc3RJdGVtJyk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRDb21wb3NpdGVLZXlOb2RlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbXBvc2l0ZS1rZXknKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG5cbnZhciBpbml0aWFsaXplciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGZyZWV6ZSA9IGdldEJ1aWx0SW4oJ09iamVjdCcsICdmcmVlemUnKTtcbiAgcmV0dXJuIGZyZWV6ZSA/IGZyZWV6ZShjcmVhdGUobnVsbCkpIDogY3JlYXRlKG51bGwpO1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcmljaGVyLWtleXMvdHJlZS9tYXN0ZXIvY29tcG9zaXRlS2V5XG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgY29tcG9zaXRlS2V5OiBmdW5jdGlvbiBjb21wb3NpdGVLZXkoKSB7XG4gICAgcmV0dXJuIGdldENvbXBvc2l0ZUtleU5vZGUuYXBwbHkoT2JqZWN0LCBhcmd1bWVudHMpLmdldCgnb2JqZWN0JywgaW5pdGlhbGl6ZXIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldENvbXBvc2l0ZUtleU5vZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29tcG9zaXRlLWtleScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJpY2hlci1rZXlzL3RyZWUvbWFzdGVyL2NvbXBvc2l0ZUtleVxuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7XG4gIGNvbXBvc2l0ZVN5bWJvbDogZnVuY3Rpb24gY29tcG9zaXRlU3ltYm9sKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnKSByZXR1cm4gZ2V0QnVpbHRJbignU3ltYm9sJylbJ2ZvciddKGFyZ3VtZW50c1swXSk7XG4gICAgcmV0dXJuIGdldENvbXBvc2l0ZUtleU5vZGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5nZXQoJ3N5bWJvbCcsIGdldEJ1aWx0SW4oJ1N5bWJvbCcpKTtcbiAgfVxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi9lcy5nbG9iYWwtdGhpcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgY29sbGVjdGlvbkRlbGV0ZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLWRlbGV0ZS1hbGwnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZGVsZXRlQWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBkZWxldGVBbGw6IGZ1bmN0aW9uIGRlbGV0ZUFsbCgvKiAuLi5lbGVtZW50cyAqLykge1xuICAgIHJldHVybiBjb2xsZWN0aW9uRGVsZXRlQWxsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRNYXBJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWFwLWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0TWFwSXRlcmF0b3IobWFwKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHJldHVybiAhaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKGtleSwgdmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmICghYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApKSByZXR1cm4gc3RvcCgpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBnZXRNYXBJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWFwLWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0TWFwSXRlcmF0b3IobWFwKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHZhciBuZXdNYXAgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihtYXAsIGdldEJ1aWx0SW4oJ01hcCcpKSkoKTtcbiAgICB2YXIgc2V0dGVyID0gYUZ1bmN0aW9uKG5ld01hcC5zZXQpO1xuICAgIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApKSBzZXR0ZXIuY2FsbChuZXdNYXAsIGtleSwgdmFsdWUpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgcmV0dXJuIG5ld01hcDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZmluZEtleWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgZmluZEtleTogZnVuY3Rpb24gZmluZEtleShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgcmV0dXJuIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApKSByZXR1cm4gc3RvcChrZXkpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgcmV0dXJuIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApKSByZXR1cm4gc3RvcCh2YWx1ZSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkucmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1mcm9tJyk7XG5cbi8vIGBNYXAuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxuJCh7IHRhcmdldDogJ01hcCcsIHN0YXQ6IHRydWUgfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIGBNYXAuZ3JvdXBCeWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZ3JvdXBCeTogZnVuY3Rpb24gZ3JvdXBCeShpdGVyYWJsZSwga2V5RGVyaXZhdGl2ZSkge1xuICAgIHZhciBuZXdNYXAgPSBuZXcgdGhpcygpO1xuICAgIGFGdW5jdGlvbihrZXlEZXJpdmF0aXZlKTtcbiAgICB2YXIgaGFzID0gYUZ1bmN0aW9uKG5ld01hcC5oYXMpO1xuICAgIHZhciBnZXQgPSBhRnVuY3Rpb24obmV3TWFwLmdldCk7XG4gICAgdmFyIHNldCA9IGFGdW5jdGlvbihuZXdNYXAuc2V0KTtcbiAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgdmFyIGRlcml2ZWRLZXkgPSBrZXlEZXJpdmF0aXZlKGVsZW1lbnQpO1xuICAgICAgaWYgKCFoYXMuY2FsbChuZXdNYXAsIGRlcml2ZWRLZXkpKSBzZXQuY2FsbChuZXdNYXAsIGRlcml2ZWRLZXksIFtlbGVtZW50XSk7XG4gICAgICBlbHNlIGdldC5jYWxsKG5ld01hcCwgZGVyaXZlZEtleSkucHVzaChlbGVtZW50KTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3TWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBzYW1lVmFsdWVaZXJvID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUtemVybycpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQpIHtcbiAgICByZXR1cm4gaXRlcmF0ZShnZXRNYXBJdGVyYXRvcihhbk9iamVjdCh0aGlzKSksIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoc2FtZVZhbHVlWmVybyh2YWx1ZSwgc2VhcmNoRWxlbWVudCkpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkuc3RvcHBlZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBgTWFwLmtleUJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHN0YXQ6IHRydWUgfSwge1xuICBrZXlCeTogZnVuY3Rpb24ga2V5QnkoaXRlcmFibGUsIGtleURlcml2YXRpdmUpIHtcbiAgICB2YXIgbmV3TWFwID0gbmV3IHRoaXMoKTtcbiAgICBhRnVuY3Rpb24oa2V5RGVyaXZhdGl2ZSk7XG4gICAgdmFyIHNldHRlciA9IGFGdW5jdGlvbihuZXdNYXAuc2V0KTtcbiAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgc2V0dGVyLmNhbGwobmV3TWFwLCBrZXlEZXJpdmF0aXZlKGVsZW1lbnQpLCBlbGVtZW50KTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3TWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGtleU9mOiBmdW5jdGlvbiBrZXlPZihzZWFyY2hFbGVtZW50KSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUoZ2V0TWFwSXRlcmF0b3IoYW5PYmplY3QodGhpcykpLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKHZhbHVlID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gc3RvcChrZXkpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUubWFwS2V5c2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgbWFwS2V5czogZnVuY3Rpb24gbWFwS2V5cyhjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgdmFyIG5ld01hcCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG1hcCwgZ2V0QnVpbHRJbignTWFwJykpKSgpO1xuICAgIHZhciBzZXR0ZXIgPSBhRnVuY3Rpb24obmV3TWFwLnNldCk7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIHNldHRlci5jYWxsKG5ld01hcCwgYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApLCB2YWx1ZSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICByZXR1cm4gbmV3TWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5tYXBWYWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIG1hcFZhbHVlczogZnVuY3Rpb24gbWFwVmFsdWVzKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldE1hcEl0ZXJhdG9yKG1hcCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICB2YXIgbmV3TWFwID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IobWFwLCBnZXRCdWlsdEluKCdNYXAnKSkpKCk7XG4gICAgdmFyIHNldHRlciA9IGFGdW5jdGlvbihuZXdNYXAuc2V0KTtcbiAgICBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgc2V0dGVyLmNhbGwobmV3TWFwLCBrZXksIGJvdW5kRnVuY3Rpb24odmFsdWUsIGtleSwgbWFwKSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICByZXR1cm4gbmV3TWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLm1lcmdlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2UoaXRlcmFibGUgLyogLi4uaXRlcmJsZXMgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHNldHRlciA9IGFGdW5jdGlvbihtYXAuc2V0KTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmd1bWVudHNMZW5ndGgpIHtcbiAgICAgIGl0ZXJhdGUoYXJndW1lbnRzW2krK10sIHNldHRlciwgeyB0aGF0OiBtYXAsIEFTX0VOVFJJRVM6IHRydWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1vZicpO1xuXG4vLyBgTWFwLm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxuJCh7IHRhcmdldDogJ01hcCcsIHN0YXQ6IHRydWUgfSwge1xuICBvZjogb2Zcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBnZXRNYXBJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWFwLWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBub0luaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoIDwgMjtcbiAgICB2YXIgYWNjdW11bGF0b3IgPSBub0luaXRpYWwgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAobm9Jbml0aWFsKSB7XG4gICAgICAgIG5vSW5pdGlhbCA9IGZhbHNlO1xuICAgICAgICBhY2N1bXVsYXRvciA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBjYWxsYmFja2ZuKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBtYXApO1xuICAgICAgfVxuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgaWYgKG5vSW5pdGlhbCkgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgbWFwIHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgcmV0dXJuIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApKSByZXR1cm4gc3RvcCgpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gYFNldC5wcm90b3R5cGUudXBkYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShrZXksIGNhbGxiYWNrIC8qICwgdGh1bmsgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrKTtcbiAgICB2YXIgaXNQcmVzZW50SW5NYXAgPSBtYXAuaGFzKGtleSk7XG4gICAgaWYgKCFpc1ByZXNlbnRJbk1hcCAmJiBsZW5ndGggPCAzKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1VwZGF0aW5nIGFic2VudCB2YWx1ZScpO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBpc1ByZXNlbnRJbk1hcCA/IG1hcC5nZXQoa2V5KSA6IGFGdW5jdGlvbihsZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKShrZXksIG1hcCk7XG4gICAgbWFwLnNldChrZXksIGNhbGxiYWNrKHZhbHVlLCBrZXksIG1hcCkpO1xuICAgIHJldHVybiBtYXA7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYE1hdGguY2xhbXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBtaW4odXBwZXIsIG1heChsb3dlciwgeCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTWF0aC5ERUdfUEVSX1JBRGAgY29uc3RhbnRcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4vLyBgTWF0aC5kZWdyZWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXNjYWxlJyk7XG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZnJvdW5kJyk7XG5cbi8vIGBNYXRoLmZzY2FsZWAgbWV0aG9kXG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBmc2NhbGU6IGZ1bmN0aW9uIGZzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgICByZXR1cm4gZnJvdW5kKHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTWF0aC5pYWRkaGAgbWV0aG9kXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBNYXRoLmltdWxoYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhGRkZGO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTWF0aC5pc3ViaGAgbWV0aG9kXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE1hdGguUkFEX1BFUl9ERUdgIGNvbnN0YW50XG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuLy8gYE1hdGgucmFkaWFuc2AgbWV0aG9kXG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2NhbGUnKTtcblxuLy8gYE1hdGguc2NhbGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2NhbGU6IHNjYWxlXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG51bWJlcklzRmluaXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1pcy1maW5pdGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIFNFRURFRF9SQU5ET00gPSAnU2VlZGVkIFJhbmRvbSc7XG52YXIgU0VFREVEX1JBTkRPTV9HRU5FUkFUT1IgPSBTRUVERURfUkFORE9NICsgJyBHZW5lcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU0VFREVEX1JBTkRPTV9HRU5FUkFUT1IpO1xudmFyIFNFRURfVFlQRV9FUlJPUiA9ICdNYXRoLnNlZWRlZFBSTkcoKSBhcmd1bWVudCBzaG91bGQgaGF2ZSBhIFwic2VlZFwiIGZpZWxkIHdpdGggYSBmaW5pdGUgdmFsdWUuJztcblxudmFyICRTZWVkZWRSYW5kb21HZW5lcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIFNlZWRlZFJhbmRvbUdlbmVyYXRvcihzZWVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNFRURFRF9SQU5ET01fR0VORVJBVE9SLFxuICAgIHNlZWQ6IHNlZWQgJSAyMTQ3NDgzNjQ3XG4gIH0pO1xufSwgU0VFREVEX1JBTkRPTSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHNlZWQgPSBzdGF0ZS5zZWVkID0gKHN0YXRlLnNlZWQgKiAxMTAzNTE1MjQ1ICsgMTIzNDUpICUgMjE0NzQ4MzY0NztcbiAgcmV0dXJuIHsgdmFsdWU6IChzZWVkICYgMTA3Mzc0MTgyMykgLyAxMDczNzQxODIzLCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbi8vIGBNYXRoLnNlZWRlZFBSTkdgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2VlZGVkLXJhbmRvbVxuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2VlZGVkLXJhbmRvbS9ibG9iLzc4YjgyNTg4MzViNTdmYzIxMDBkMDc2MTUxYWI1MDZiYzMyMDJhZTYvZGVtby5odG1sXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHNlZWRlZFBSTkc6IGZ1bmN0aW9uIHNlZWRlZFBSTkcoaXQpIHtcbiAgICB2YXIgc2VlZCA9IGFuT2JqZWN0KGl0KS5zZWVkO1xuICAgIGlmICghbnVtYmVySXNGaW5pdGUoc2VlZCkpIHRocm93IFR5cGVFcnJvcihTRUVEX1RZUEVfRVJST1IpO1xuICAgIHJldHVybiBuZXcgJFNlZWRlZFJhbmRvbUdlbmVyYXRvcihzZWVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE1hdGguc2lnbmJpdGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1NYXRoLnNpZ25iaXRcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSB4ICYmIHggPT0gMCA/IDEgLyB4ID09IC1JbmZpbml0eSA6IHggPCAwO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTWF0aC51bXVsaGAgbWV0aG9kXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4RkZGRjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+Pj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciBwYXJzZUludCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtaW50Jyk7XG5cbnZhciBJTlZBTElEX05VTUJFUl9SRVBSRVNFTlRBVElPTiA9ICdJbnZhbGlkIG51bWJlciByZXByZXNlbnRhdGlvbic7XG52YXIgSU5WQUxJRF9SQURJWCA9ICdJbnZhbGlkIHJhZGl4JztcbnZhciB2YWxpZCA9IC9eW1xcZGEtel0rJC87XG5cbi8vIGBOdW1iZXIuZnJvbVN0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1udW1iZXItZnJvbXN0cmluZ1xuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBmcm9tU3RyaW5nOiBmdW5jdGlvbiBmcm9tU3RyaW5nKHN0cmluZywgcmFkaXgpIHtcbiAgICB2YXIgc2lnbiA9IDE7XG4gICAgdmFyIFIsIG1hdGhOdW07XG4gICAgaWYgKHR5cGVvZiBzdHJpbmcgIT0gJ3N0cmluZycpIHRocm93IFR5cGVFcnJvcihJTlZBTElEX05VTUJFUl9SRVBSRVNFTlRBVElPTik7XG4gICAgaWYgKCFzdHJpbmcubGVuZ3RoKSB0aHJvdyBTeW50YXhFcnJvcihJTlZBTElEX05VTUJFUl9SRVBSRVNFTlRBVElPTik7XG4gICAgaWYgKHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nKSB7XG4gICAgICBzaWduID0gLTE7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMSk7XG4gICAgICBpZiAoIXN0cmluZy5sZW5ndGgpIHRocm93IFN5bnRheEVycm9yKElOVkFMSURfTlVNQkVSX1JFUFJFU0VOVEFUSU9OKTtcbiAgICB9XG4gICAgUiA9IHJhZGl4ID09PSB1bmRlZmluZWQgPyAxMCA6IHRvSW50ZWdlcihyYWRpeCk7XG4gICAgaWYgKFIgPCAyIHx8IFIgPiAzNikgdGhyb3cgUmFuZ2VFcnJvcihJTlZBTElEX1JBRElYKTtcbiAgICBpZiAoIXZhbGlkLnRlc3Qoc3RyaW5nKSB8fCAobWF0aE51bSA9IHBhcnNlSW50KHN0cmluZywgUikpLnRvU3RyaW5nKFIpICE9PSBzdHJpbmcpIHtcbiAgICAgIHRocm93IFN5bnRheEVycm9yKElOVkFMSURfTlVNQkVSX1JFUFJFU0VOVEFUSU9OKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpZ24gKiBtYXRoTnVtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgT0JTRVJWQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnb2JzZXJ2YWJsZScpO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvblN0YXRlKSB7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uU3RhdGUuY2xlYW51cDtcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb25TdGF0ZS5jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGhvc3RSZXBvcnRFcnJvcnMoZXJyb3IpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb25TdGF0ZSkge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uU3RhdGUub2JzZXJ2ZXIgPT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBjbG9zZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb25TdGF0ZSkge1xuICB2YXIgc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uU3RhdGUuZmFjYWRlO1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgc3Vic2NyaXB0aW9uLmNsb3NlZCA9IHRydWU7XG4gICAgdmFyIHN1YnNjcmlwdGlvbk9ic2VydmVyID0gc3Vic2NyaXB0aW9uU3RhdGUuc3Vic2NyaXB0aW9uT2JzZXJ2ZXI7XG4gICAgaWYgKHN1YnNjcmlwdGlvbk9ic2VydmVyKSBzdWJzY3JpcHRpb25PYnNlcnZlci5jbG9zZWQgPSB0cnVlO1xuICB9IHN1YnNjcmlwdGlvblN0YXRlLm9ic2VydmVyID0gdW5kZWZpbmVkO1xufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICB2YXIgc3Vic2NyaXB0aW9uU3RhdGUgPSBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICBjbGVhbnVwOiB1bmRlZmluZWQsXG4gICAgb2JzZXJ2ZXI6IGFuT2JqZWN0KG9ic2VydmVyKSxcbiAgICBzdWJzY3JpcHRpb25PYnNlcnZlcjogdW5kZWZpbmVkXG4gIH0pO1xuICB2YXIgc3RhcnQ7XG4gIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXJ0ID0gZ2V0TWV0aG9kKG9ic2VydmVyLnN0YXJ0KSkgc3RhcnQuY2FsbChvYnNlcnZlciwgdGhpcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaG9zdFJlcG9ydEVycm9ycyhlcnJvcik7XG4gIH1cbiAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb25TdGF0ZSkpIHJldHVybjtcbiAgdmFyIHN1YnNjcmlwdGlvbk9ic2VydmVyID0gc3Vic2NyaXB0aW9uU3RhdGUuc3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKHN1YnNjcmlwdGlvbk9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSBzdWJzY3JpcHRpb25TdGF0ZS5jbGVhbnVwID0gdHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gZnVuY3Rpb24gKCkgeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfVxuICAgICAgOiBhRnVuY3Rpb24oY2xlYW51cCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgc3Vic2NyaXB0aW9uT2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvblN0YXRlKSkgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25TdGF0ZSk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb25TdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uU3RhdGUpKSB7XG4gICAgICBjbG9zZShzdWJzY3JpcHRpb25TdGF0ZSk7XG4gICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvblN0YXRlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5pZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KFN1YnNjcmlwdGlvbi5wcm90b3R5cGUsICdjbG9zZWQnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbkNsb3NlZChnZXRJbnRlcm5hbFN0YXRlKHRoaXMpKTtcbiAgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7IHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSB0aGlzLmNsb3NlZCA9IGZhbHNlO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb25TdGF0ZSA9IGdldEludGVybmFsU3RhdGUoZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdWJzY3JpcHRpb24pO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvblN0YXRlKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uU3RhdGUub2JzZXJ2ZXI7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV4dE1ldGhvZCA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgaWYgKG5leHRNZXRob2QpIG5leHRNZXRob2QuY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaG9zdFJlcG9ydEVycm9ycyhlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uU3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKGdldEludGVybmFsU3RhdGUodGhpcykuc3Vic2NyaXB0aW9uKTtcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb25TdGF0ZSkpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvblN0YXRlLm9ic2VydmVyO1xuICAgICAgY2xvc2Uoc3Vic2NyaXB0aW9uU3RhdGUpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGVycm9yTWV0aG9kID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgICAgaWYgKGVycm9yTWV0aG9kKSBlcnJvck1ldGhvZC5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICAgIGVsc2UgaG9zdFJlcG9ydEVycm9ycyh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaG9zdFJlcG9ydEVycm9ycyhlcnIpO1xuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvblN0YXRlKTtcbiAgICB9XG4gIH0sXG4gIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uU3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKGdldEludGVybmFsU3RhdGUodGhpcykuc3Vic2NyaXB0aW9uKTtcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb25TdGF0ZSkpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvblN0YXRlLm9ic2VydmVyO1xuICAgICAgY2xvc2Uoc3Vic2NyaXB0aW9uU3RhdGUpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGNvbXBsZXRlTWV0aG9kID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTtcbiAgICAgICAgaWYgKGNvbXBsZXRlTWV0aG9kKSBjb21wbGV0ZU1ldGhvZC5jYWxsKG9ic2VydmVyKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhvc3RSZXBvcnRFcnJvcnMoZXJyb3IpO1xuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvblN0YXRlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5pZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KFN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSwgJ2Nsb3NlZCcsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uQ2xvc2VkKGdldEludGVybmFsU3RhdGUoZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdWJzY3JpcHRpb24pKTtcbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcikge1xuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScpO1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHsgc3Vic2NyaWJlcjogYUZ1bmN0aW9uKHN1YnNjcmliZXIpIH0pO1xufTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24odHlwZW9mIG9ic2VydmVyID09PSAnZnVuY3Rpb24nID8ge1xuICAgICAgbmV4dDogb2JzZXJ2ZXIsXG4gICAgICBlcnJvcjogbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCxcbiAgICAgIGNvbXBsZXRlOiBsZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkXG4gICAgfSA6IGlzT2JqZWN0KG9ic2VydmVyKSA/IG9ic2VydmVyIDoge30sIGdldEludGVybmFsU3RhdGUodGhpcykuc3Vic2NyaWJlcik7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBvYnNlcnZhYmxlTWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTtcbiAgICBpZiAob2JzZXJ2YWJsZU1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChvYnNlcnZhYmxlTWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoeCk7XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKGl0LCBzdG9wKSB7XG4gICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKSByZXR1cm4gc3RvcCgpO1xuICAgICAgfSwgeyBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSk7XG4gICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9LFxuICBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZTtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaXRlbXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgaXRlbXNbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tpXSk7XG4gICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpIHJldHVybjtcbiAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgT2JzZXJ2YWJsZTogJE9ic2VydmFibGVcbn0pO1xuXG5zZXRTcGVjaWVzKCdPYnNlcnZhYmxlJyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi9lcy5wcm9taXNlLmFsbC1zZXR0bGVkLmpzJyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi9lcy5wcm9taXNlLmFueScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xuXG4vLyBgUHJvbWlzZS50cnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSB9LCB7XG4gICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICAgIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYodGhpcyk7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gICAgKHJlc3VsdC5lcnJvciA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgUmVmbGVjdE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZmxlY3QtbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIHRvTWV0YWRhdGFLZXkgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUudG9LZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS5zZXQ7XG5cbi8vIGBSZWZsZWN0LmRlZmluZU1ldGFkYXRhYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYnVja3Rvbi9yZWZsZWN0LW1ldGFkYXRhXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBkZWZpbmVNZXRhZGF0YTogZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHVuZGVmaW5lZCA6IHRvTWV0YWRhdGFLZXkoYXJndW1lbnRzWzNdKTtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIFJlZmxlY3RNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWZsZWN0LW1ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciB0b01ldGFkYXRhS2V5ID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLnRvS2V5O1xudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUuZ2V0TWFwO1xudmFyIHN0b3JlID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLnN0b3JlO1xuXG4vLyBgUmVmbGVjdC5kZWxldGVNZXRhZGF0YWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcmJ1Y2t0b24vcmVmbGVjdC1tZXRhZGF0YVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFkYXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gICAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChtZXRhZGF0YU1hcC5zaXplKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnZhciBTZXQgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnNldCcpO1xudmFyIFJlZmxlY3RNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWZsZWN0LW1ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLmtleXM7XG52YXIgdG9NZXRhZGF0YUtleSA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS50b0tleTtcblxudmFyIGZyb20gPSBmdW5jdGlvbiAoaXRlcikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGl0ZXJhdGUoaXRlciwgcmVzdWx0LnB1c2gsIHsgdGhhdDogcmVzdWx0IH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG4vLyBgUmVmbGVjdC5nZXRNZXRhZGF0YUtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JidWNrdG9uL3JlZmxlY3QtbWV0YWRhdGFcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGdldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YWRhdGFLZXkoYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBSZWZsZWN0TWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVmbGVjdC1tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLmhhcztcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLmdldDtcbnZhciB0b01ldGFkYXRhS2V5ID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLnRvS2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbi8vIGBSZWZsZWN0LmdldE1ldGFkYXRhYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYnVja3Rvbi9yZWZsZWN0LW1ldGFkYXRhXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YWRhdGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBSZWZsZWN0TWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVmbGVjdC1tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUua2V5cztcbnZhciB0b01ldGFkYXRhS2V5ID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLnRvS2V5O1xuXG4vLyBgUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JidWNrdG9uL3JlZmxlY3QtbWV0YWRhdGFcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGdldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YWRhdGFLZXkoYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBSZWZsZWN0TWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVmbGVjdC1tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS5nZXQ7XG52YXIgdG9NZXRhZGF0YUtleSA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS50b0tleTtcblxuLy8gYFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JidWNrdG9uL3JlZmxlY3QtbWV0YWRhdGFcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gICAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhZGF0YUtleShhcmd1bWVudHNbMl0pO1xuICAgIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIFJlZmxlY3RNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWZsZWN0LW1ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUuaGFzO1xudmFyIHRvTWV0YWRhdGFLZXkgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUudG9LZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbi8vIGBSZWZsZWN0Lmhhc01ldGFkYXRhYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYnVja3Rvbi9yZWZsZWN0LW1ldGFkYXRhXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YWRhdGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBSZWZsZWN0TWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVmbGVjdC1tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS5oYXM7XG52YXIgdG9NZXRhZGF0YUtleSA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS50b0tleTtcblxuLy8gYFJlZmxlY3QuaGFzT3duTWV0YWRhdGFgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JidWNrdG9uL3JlZmxlY3QtbWV0YWRhdGFcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gICAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhZGF0YUtleShhcmd1bWVudHNbMl0pO1xuICAgIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIFJlZmxlY3RNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWZsZWN0LW1ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciB0b01ldGFkYXRhS2V5ID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLnRvS2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUuc2V0O1xuXG4vLyBgUmVmbGVjdC5tZXRhZGF0YWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcmJ1Y2t0b24vcmVmbGVjdC1tZXRhZGF0YVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIGtleSkge1xuICAgICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhZGF0YUtleShrZXkpKTtcbiAgICB9O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGNvbGxlY3Rpb25BZGRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1hZGQtYWxsJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmFkZEFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgYWRkQWxsOiBmdW5jdGlvbiBhZGRBbGwoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbkFkZEFsbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGNvbGxlY3Rpb25EZWxldGVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1kZWxldGUtYWxsJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmRlbGV0ZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgZGVsZXRlQWxsOiBmdW5jdGlvbiBkZWxldGVBbGwoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbkRlbGV0ZUFsbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5kaWZmZXJlbmNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNldC1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGRpZmZlcmVuY2U6IGZ1bmN0aW9uIGRpZmZlcmVuY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIG5ld1NldCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHNldCwgZ2V0QnVpbHRJbignU2V0JykpKShzZXQpO1xuICAgIHZhciByZW1vdmVyID0gYUZ1bmN0aW9uKG5ld1NldFsnZGVsZXRlJ10pO1xuICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmVtb3Zlci5jYWxsKG5ld1NldCwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdTZXQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRTZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0U2V0SXRlcmF0b3Ioc2V0KTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHJldHVybiAhaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoIWJvdW5kRnVuY3Rpb24odmFsdWUsIHZhbHVlLCBzZXQpKSByZXR1cm4gc3RvcCgpO1xuICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBnZXRTZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0U2V0SXRlcmF0b3Ioc2V0KTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHZhciBuZXdTZXQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihzZXQsIGdldEJ1aWx0SW4oJ1NldCcpKSkoKTtcbiAgICB2YXIgYWRkZXIgPSBhRnVuY3Rpb24obmV3U2V0LmFkZCk7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpIGFkZGVyLmNhbGwobmV3U2V0LCB2YWx1ZSk7XG4gICAgfSwgeyBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICByZXR1cm4gbmV3U2V0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0U2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXNldC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICByZXR1cm4gaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpIHJldHVybiBzdG9wKHZhbHVlKTtcbiAgICB9LCB7IElTX0lURVJBVE9SOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5yZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLWZyb20nKTtcblxuLy8gYFNldC5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG4kKHsgdGFyZ2V0OiAnU2V0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmludGVyc2VjdGlvbmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBpbnRlcnNlY3Rpb246IGZ1bmN0aW9uIGludGVyc2VjdGlvbihpdGVyYWJsZSkge1xuICAgIHZhciBzZXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgbmV3U2V0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Ioc2V0LCBnZXRCdWlsdEluKCdTZXQnKSkpKCk7XG4gICAgdmFyIGhhc0NoZWNrID0gYUZ1bmN0aW9uKHNldC5oYXMpO1xuICAgIHZhciBhZGRlciA9IGFGdW5jdGlvbihuZXdTZXQuYWRkKTtcbiAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChoYXNDaGVjay5jYWxsKHNldCwgdmFsdWUpKSBhZGRlci5jYWxsKG5ld1NldCwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdTZXQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuaXNEaXNqb2ludEZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXQtbWV0aG9kcy8jU2V0LnByb3RvdHlwZS5pc0Rpc2pvaW50RnJvbVxuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBpc0Rpc2pvaW50RnJvbTogZnVuY3Rpb24gaXNEaXNqb2ludEZyb20oaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGhhc0NoZWNrID0gYUZ1bmN0aW9uKHNldC5oYXMpO1xuICAgIHJldHVybiAhaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoaGFzQ2hlY2suY2FsbChzZXQsIHZhbHVlKSA9PT0gdHJ1ZSkgcmV0dXJuIHN0b3AoKTtcbiAgICB9LCB7IElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5pc1N1YnNldE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0LW1ldGhvZHMvI1NldC5wcm90b3R5cGUuaXNTdWJzZXRPZlxuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBpc1N1YnNldE9mOiBmdW5jdGlvbiBpc1N1YnNldE9mKGl0ZXJhYmxlKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IodGhpcyk7XG4gICAgdmFyIG90aGVyU2V0ID0gYW5PYmplY3QoaXRlcmFibGUpO1xuICAgIHZhciBoYXNDaGVjayA9IG90aGVyU2V0LmhhcztcbiAgICBpZiAodHlwZW9mIGhhc0NoZWNrICE9ICdmdW5jdGlvbicpIHtcbiAgICAgIG90aGVyU2V0ID0gbmV3IChnZXRCdWlsdEluKCdTZXQnKSkoaXRlcmFibGUpO1xuICAgICAgaGFzQ2hlY2sgPSBhRnVuY3Rpb24ob3RoZXJTZXQuaGFzKTtcbiAgICB9XG4gICAgcmV0dXJuICFpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAodmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChoYXNDaGVjay5jYWxsKG90aGVyU2V0LCB2YWx1ZSkgPT09IGZhbHNlKSByZXR1cm4gc3RvcCgpO1xuICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuaXNTdXBlcnNldE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0LW1ldGhvZHMvI1NldC5wcm90b3R5cGUuaXNTdXBlcnNldE9mXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGlzU3VwZXJzZXRPZjogZnVuY3Rpb24gaXNTdXBlcnNldE9mKGl0ZXJhYmxlKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBoYXNDaGVjayA9IGFGdW5jdGlvbihzZXQuaGFzKTtcbiAgICByZXR1cm4gIWl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKGhhc0NoZWNrLmNhbGwoc2V0LCB2YWx1ZSkgPT09IGZhbHNlKSByZXR1cm4gc3RvcCgpO1xuICAgIH0sIHsgSU5URVJSVVBURUQ6IHRydWUgfSkuc3RvcHBlZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRTZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIHNlcCA9IHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGl0ZXJhdGUoaXRlcmF0b3IsIHJlc3VsdC5wdXNoLCB7IHRoYXQ6IHJlc3VsdCwgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKHNlcCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBnZXRTZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0U2V0SXRlcmF0b3Ioc2V0KTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHZhciBuZXdTZXQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihzZXQsIGdldEJ1aWx0SW4oJ1NldCcpKSkoKTtcbiAgICB2YXIgYWRkZXIgPSBhRnVuY3Rpb24obmV3U2V0LmFkZCk7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBhZGRlci5jYWxsKG5ld1NldCwgYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpO1xuICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgcmV0dXJuIG5ld1NldDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLW9mJyk7XG5cbi8vIGBTZXQub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG4kKHsgdGFyZ2V0OiAnU2V0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG9mOiBvZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGdldFNldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zZXQtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIG5vSW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyO1xuICAgIHZhciBhY2N1bXVsYXRvciA9IG5vSW5pdGlhbCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAobm9Jbml0aWFsKSB7XG4gICAgICAgIG5vSW5pdGlhbCA9IGZhbHNlO1xuICAgICAgICBhY2N1bXVsYXRvciA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBjYWxsYmFja2ZuKGFjY3VtdWxhdG9yLCB2YWx1ZSwgdmFsdWUsIHNldCk7XG4gICAgICB9XG4gICAgfSwgeyBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICBpZiAobm9Jbml0aWFsKSB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBzZXQgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0U2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXNldC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5zb21lYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICByZXR1cm4gaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkuc3RvcHBlZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuc3ltbWV0cmljRGlmZmVyZW5jZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBzeW1tZXRyaWNEaWZmZXJlbmNlOiBmdW5jdGlvbiBzeW1tZXRyaWNEaWZmZXJlbmNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBuZXdTZXQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihzZXQsIGdldEJ1aWx0SW4oJ1NldCcpKSkoc2V0KTtcbiAgICB2YXIgcmVtb3ZlciA9IGFGdW5jdGlvbihuZXdTZXRbJ2RlbGV0ZSddKTtcbiAgICB2YXIgYWRkZXIgPSBhRnVuY3Rpb24obmV3U2V0LmFkZCk7XG4gICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZW1vdmVyLmNhbGwobmV3U2V0LCB2YWx1ZSkgfHwgYWRkZXIuY2FsbChuZXdTZXQsIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3U2V0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS51bmlvbmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICB1bmlvbjogZnVuY3Rpb24gdW5pb24oaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIG5ld1NldCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHNldCwgZ2V0QnVpbHRJbignU2V0JykpKShzZXQpO1xuICAgIGl0ZXJhdGUoaXRlcmFibGUsIGFGdW5jdGlvbihuZXdTZXQuYWRkKSwgeyB0aGF0OiBuZXdTZXQgfSk7XG4gICAgcmV0dXJuIG5ld1NldDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ/CgrrcnLmF0KDApICE9PSAn8KCutyc7XG59KTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3MpIHtcbiAgICByZXR1cm4gY2hhckF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBTdHJpbmdNdWx0aWJ5dGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpO1xuXG52YXIgY29kZUF0ID0gU3RyaW5nTXVsdGlieXRlTW9kdWxlLmNvZGVBdDtcbnZhciBjaGFyQXQgPSBTdHJpbmdNdWx0aWJ5dGVNb2R1bGUuY2hhckF0O1xudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gVE9ETzogdW5pZnkgd2l0aCBTdHJpbmcjQEBpdGVyYXRvclxudmFyICRTdHJpbmdJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gU3RyaW5nSXRlcmF0b3Ioc3RyaW5nKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHN0cmluZyxcbiAgICBpbmRleDogMFxuICB9KTtcbn0sICdTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogeyBjb2RlUG9pbnQ6IGNvZGVBdChwb2ludCwgMCksIHBvc2l0aW9uOiBpbmRleCB9LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludHNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXByb3RvdHlwZS1jb2RlcG9pbnRzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICBjb2RlUG9pbnRzOiBmdW5jdGlvbiBjb2RlUG9pbnRzKCkge1xuICAgIHJldHVybiBuZXcgJFN0cmluZ0l0ZXJhdG9yKHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpKTtcbiAgfVxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi9lcy5zdHJpbmcubWF0Y2gtYWxsJyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi9lcy5zdHJpbmcucmVwbGFjZS1hbGwnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuZGlzcG9zZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXVzaW5nLXN0YXRlbWVudFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdkaXNwb3NlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLm9ic2VydmFibGVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ29ic2VydmFibGUnKTtcbiIsIi8vIFRPRE86IHJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnBhdHRlcm5NYXRjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXBhdHRlcm4tbWF0Y2hpbmdcbmRlZmluZVdlbGxLbm93blN5bWJvbCgncGF0dGVybk1hdGNoJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBjb2xsZWN0aW9uRGVsZXRlQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tZGVsZXRlLWFsbCcpO1xuXG4vLyBgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlQWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1dlYWtNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgZGVsZXRlQWxsOiBmdW5jdGlvbiBkZWxldGVBbGwoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbkRlbGV0ZUFsbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1mcm9tJyk7XG5cbi8vIGBXZWFrTWFwLmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG4kKHsgdGFyZ2V0OiAnV2Vha01hcCcsIHN0YXQ6IHRydWUgfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tb2YnKTtcblxuLy8gYFdlYWtNYXAub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxuJCh7IHRhcmdldDogJ1dlYWtNYXAnLCBzdGF0OiB0cnVlIH0sIHtcbiAgb2Y6IG9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGNvbGxlY3Rpb25BZGRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1hZGQtYWxsJyk7XG5cbi8vIGBXZWFrU2V0LnByb3RvdHlwZS5hZGRBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnV2Vha1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBhZGRBbGw6IGZ1bmN0aW9uIGFkZEFsbCgvKiAuLi5lbGVtZW50cyAqLykge1xuICAgIHJldHVybiBjb2xsZWN0aW9uQWRkQWxsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgY29sbGVjdGlvbkRlbGV0ZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLWRlbGV0ZS1hbGwnKTtcblxuLy8gYFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdXZWFrU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGRlbGV0ZUFsbDogZnVuY3Rpb24gZGVsZXRlQWxsKC8qIC4uLmVsZW1lbnRzICovKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25EZWxldGVBbGwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tZnJvbScpO1xuXG4vLyBgV2Vha1NldC5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxuJCh7IHRhcmdldDogJ1dlYWtTZXQnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLW9mJyk7XG5cbi8vIGBXZWFrU2V0Lm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2ZcbiQoeyB0YXJnZXQ6ICdXZWFrU2V0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG9mOiBvZlxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSk7XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG52YXIgaGFuZGxlUHJvdG90eXBlID0gZnVuY3Rpb24gKENvbGxlY3Rpb25Qcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSkge1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIGhhbmRsZVByb3RvdHlwZShnbG9iYWxbQ09MTEVDVElPTl9OQU1FXSAmJiBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXS5wcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSk7XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUsICdET01Ub2tlbkxpc3QnKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKTtcblxudmFyIEZPUkNFRCA9ICFnbG9iYWwuc2V0SW1tZWRpYXRlIHx8ICFnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG5cbi8vIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3NldEltbWVkaWF0ZS9cbiQoeyBnbG9iYWw6IHRydWUsIGJpbmQ6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYHNldEltbWVkaWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3NldEltbWVkaWF0ZS8jc2ktc2V0SW1tZWRpYXRlXG4gIHNldEltbWVkaWF0ZTogdGFzay5zZXQsXG4gIC8vIGBjbGVhckltbWVkaWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3NldEltbWVkaWF0ZS8jc2ktY2xlYXJJbW1lZGlhdGVcbiAgY2xlYXJJbW1lZGlhdGU6IHRhc2suY2xlYXJcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG5cbi8vIGBxdWV1ZU1pY3JvdGFza2AgbWV0aG9kXG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1xdWV1ZW1pY3JvdGFza1xuJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgbm9UYXJnZXRHZXQ6IHRydWUgfSwge1xuICBxdWV1ZU1pY3JvdGFzazogZnVuY3Rpb24gcXVldWVNaWNyb3Rhc2soZm4pIHtcbiAgICB2YXIgZG9tYWluID0gSVNfTk9ERSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS11cmwnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIG5hdGl2ZUZldGNoID0gZ2V0QnVpbHRJbignZmV0Y2gnKTtcbnZhciBOYXRpdmVSZXF1ZXN0ID0gZ2V0QnVpbHRJbignUmVxdWVzdCcpO1xudmFyIFJlcXVlc3RQcm90b3R5cGUgPSBOYXRpdmVSZXF1ZXN0ICYmIE5hdGl2ZVJlcXVlc3QucHJvdG90eXBlO1xudmFyIEhlYWRlcnMgPSBnZXRCdWlsdEluKCdIZWFkZXJzJyk7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVVJMX1NFQVJDSF9QQVJBTVMgPSAnVVJMU2VhcmNoUGFyYW1zJztcbnZhciBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiA9IFVSTF9TRUFSQ0hfUEFSQU1TICsgJ0l0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TKTtcbnZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUik7XG5cbnZhciBwbHVzID0gL1xcKy9nO1xudmFyIHNlcXVlbmNlcyA9IEFycmF5KDQpO1xuXG52YXIgcGVyY2VudFNlcXVlbmNlID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gIHJldHVybiBzZXF1ZW5jZXNbYnl0ZXMgLSAxXSB8fCAoc2VxdWVuY2VzW2J5dGVzIC0gMV0gPSBSZWdFeHAoJygoPzolW1xcXFxkYS1mXXsyfSl7JyArIGJ5dGVzICsgJ30pJywgJ2dpJykpO1xufTtcblxudmFyIHBlcmNlbnREZWNvZGUgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHNlcXVlbmNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gc2VxdWVuY2U7XG4gIH1cbn07XG5cbnZhciBkZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gaXQucmVwbGFjZShwbHVzLCAnICcpO1xuICB2YXIgYnl0ZXMgPSA0O1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3aGlsZSAoYnl0ZXMpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKHBlcmNlbnRTZXF1ZW5jZShieXRlcy0tKSwgcGVyY2VudERlY29kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cbnZhciBmaW5kID0gL1shJygpfl18JTIwL2c7XG5cbnZhciByZXBsYWNlID0ge1xuICAnISc6ICclMjEnLFxuICBcIidcIjogJyUyNycsXG4gICcoJzogJyUyOCcsXG4gICcpJzogJyUyOScsXG4gICd+JzogJyU3RScsXG4gICclMjAnOiAnKydcbn07XG5cbnZhciByZXBsYWNlciA9IGZ1bmN0aW9uIChtYXRjaCkge1xuICByZXR1cm4gcmVwbGFjZVttYXRjaF07XG59O1xuXG52YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoaXQpLnJlcGxhY2UoZmluZCwgcmVwbGFjZXIpO1xufTtcblxudmFyIHBhcnNlU2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKHJlc3VsdCwgcXVlcnkpIHtcbiAgaWYgKHF1ZXJ5KSB7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBxdWVyeS5zcGxpdCgnJicpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGF0dHJpYnV0ZSwgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaW5kZXgrK107XG4gICAgICBpZiAoYXR0cmlidXRlLmxlbmd0aCkge1xuICAgICAgICBlbnRyeSA9IGF0dHJpYnV0ZS5zcGxpdCgnPScpO1xuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAga2V5OiBkZXNlcmlhbGl6ZShlbnRyeS5zaGlmdCgpKSxcbiAgICAgICAgICB2YWx1ZTogZGVzZXJpYWxpemUoZW50cnkuam9pbignPScpKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciB1cGRhdGVTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgdGhpcy5lbnRyaWVzLmxlbmd0aCA9IDA7XG4gIHBhcnNlU2VhcmNoUGFyYW1zKHRoaXMuZW50cmllcywgcXVlcnkpO1xufTtcblxudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gZnVuY3Rpb24gKHBhc3NlZCwgcmVxdWlyZWQpIHtcbiAgaWYgKHBhc3NlZCA8IHJlcXVpcmVkKSB0aHJvdyBUeXBlRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIEl0ZXJhdG9yKHBhcmFtcywga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUixcbiAgICBpdGVyYXRvcjogZ2V0SXRlcmF0b3IoZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZShwYXJhbXMpLmVudHJpZXMpLFxuICAgIGtpbmQ6IGtpbmRcbiAgfSk7XG59LCAnSXRlcmF0b3InLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUodGhpcyk7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIHN0ZXAgPSBzdGF0ZS5pdGVyYXRvci5uZXh0KCk7XG4gIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gIGlmICghc3RlcC5kb25lKSB7XG4gICAgc3RlcC52YWx1ZSA9IGtpbmQgPT09ICdrZXlzJyA/IGVudHJ5LmtleSA6IGtpbmQgPT09ICd2YWx1ZXMnID8gZW50cnkudmFsdWUgOiBbZW50cnkua2V5LCBlbnRyeS52YWx1ZV07XG4gIH0gcmV0dXJuIHN0ZXA7XG59KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtc2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaW50ZXJmYWNlLXVybHNlYXJjaHBhcmFtc1xudmFyIFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMU2VhcmNoUGFyYW1zKC8qIGluaXQgKi8pIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuICB2YXIgaW5pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBlbnRyaWVzID0gW107XG4gIHZhciBpdGVyYXRvck1ldGhvZCwgaXRlcmF0b3IsIG5leHQsIHN0ZXAsIGVudHJ5SXRlcmF0b3IsIGVudHJ5TmV4dCwgZmlyc3QsIHNlY29uZCwga2V5O1xuXG4gIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TLFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgdXBkYXRlVVJMOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sXG4gICAgdXBkYXRlU2VhcmNoUGFyYW1zOiB1cGRhdGVTZWFyY2hQYXJhbXNcbiAgfSk7XG5cbiAgaWYgKGluaXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChpc09iamVjdChpbml0KSkge1xuICAgICAgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChpbml0KTtcbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3JNZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpbml0LCBpdGVyYXRvck1ldGhvZCk7XG4gICAgICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgICAgIGVudHJ5SXRlcmF0b3IgPSBnZXRJdGVyYXRvcihhbk9iamVjdChzdGVwLnZhbHVlKSk7XG4gICAgICAgICAgZW50cnlOZXh0ID0gZW50cnlJdGVyYXRvci5uZXh0O1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChmaXJzdCA9IGVudHJ5TmV4dC5jYWxsKGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgICAoc2Vjb25kID0gZW50cnlOZXh0LmNhbGwoZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAgICFlbnRyeU5leHQuY2FsbChlbnRyeUl0ZXJhdG9yKS5kb25lXG4gICAgICAgICAgKSB0aHJvdyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlcXVlbmNlIHdpdGggbGVuZ3RoIDInKTtcbiAgICAgICAgICBlbnRyaWVzLnB1c2goeyBrZXk6ICR0b1N0cmluZyhmaXJzdC52YWx1ZSksIHZhbHVlOiAkdG9TdHJpbmcoc2Vjb25kLnZhbHVlKSB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGZvciAoa2V5IGluIGluaXQpIGlmIChoYXNPd24oaW5pdCwga2V5KSkgZW50cmllcy5wdXNoKHsga2V5OiBrZXksIHZhbHVlOiAkdG9TdHJpbmcoaW5pdFtrZXldKSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VTZWFyY2hQYXJhbXMoXG4gICAgICAgIGVudHJpZXMsXG4gICAgICAgIHR5cGVvZiBpbml0ID09PSAnc3RyaW5nJyA/IGluaXQuY2hhckF0KDApID09PSAnPycgPyBpbml0LnNsaWNlKDEpIDogaW5pdCA6ICR0b1N0cmluZyhpbml0KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnJlZGVmaW5lQWxsKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwge1xuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5hcHBlbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtYXBwZW5kXG4gIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMik7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBzdGF0ZS5lbnRyaWVzLnB1c2goeyBrZXk6ICR0b1N0cmluZyhuYW1lKSwgdmFsdWU6ICR0b1N0cmluZyh2YWx1ZSkgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmRlbGV0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1kZWxldGVcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGVsc2UgaW5kZXgrKztcbiAgICB9XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRcbiAgZ2V0OiBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSByZXR1cm4gZW50cmllc1tpbmRleF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRBbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0YWxsXG4gIGdldEFsbDogZnVuY3Rpb24gZ2V0QWxsKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHJlc3VsdC5wdXNoKGVudHJpZXNbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaGFzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWhhc1xuICBoYXM6IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleCsrXS5rZXkgPT09IGtleSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNldFxuICBzZXQ6IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIHZhbCA9ICR0b1N0cmluZyh2YWx1ZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICBpZiAoZW50cnkua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGZvdW5kKSBlbnRyaWVzLnNwbGljZShpbmRleC0tLCAxKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGVudHJ5LnZhbHVlID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmQpIGVudHJpZXMucHVzaCh7IGtleToga2V5LCB2YWx1ZTogdmFsIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zb3J0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNvcnRcbiAgc29ydDogZnVuY3Rpb24gc29ydCgpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICAvLyBBcnJheSNzb3J0IGlzIG5vdCBzdGFibGUgaW4gc29tZSBlbmdpbmVzXG4gICAgdmFyIHNsaWNlID0gZW50cmllcy5zbGljZSgpO1xuICAgIHZhciBlbnRyeSwgZW50cmllc0luZGV4LCBzbGljZUluZGV4O1xuICAgIGVudHJpZXMubGVuZ3RoID0gMDtcbiAgICBmb3IgKHNsaWNlSW5kZXggPSAwOyBzbGljZUluZGV4IDwgc2xpY2UubGVuZ3RoOyBzbGljZUluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gc2xpY2Vbc2xpY2VJbmRleF07XG4gICAgICBmb3IgKGVudHJpZXNJbmRleCA9IDA7IGVudHJpZXNJbmRleCA8IHNsaWNlSW5kZXg7IGVudHJpZXNJbmRleCsrKSB7XG4gICAgICAgIGlmIChlbnRyaWVzW2VudHJpZXNJbmRleF0ua2V5ID4gZW50cnkua2V5KSB7XG4gICAgICAgICAgZW50cmllcy5zcGxpY2UoZW50cmllc0luZGV4LCAwLCBlbnRyeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbnRyaWVzSW5kZXggPT09IHNsaWNlSW5kZXgpIGVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjayAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2ssIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2tleXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudmFsdWVzYCBtZXRob2RcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2VudHJpZXMnKTtcbiAgfVxufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG5yZWRlZmluZShVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIElURVJBVE9SLCBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUuZW50cmllcyk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsc2VhcmNocGFyYW1zLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGVudHJ5O1xuICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICByZXN1bHQucHVzaChzZXJpYWxpemUoZW50cnkua2V5KSArICc9JyArIHNlcmlhbGl6ZShlbnRyeS52YWx1ZSkpO1xuICB9IHJldHVybiByZXN1bHQuam9pbignJicpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5zZXRUb1N0cmluZ1RhZyhVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCB9LCB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3Jcbn0pO1xuXG4vLyBXcmFwIGBmZXRjaGAgYW5kIGBSZXF1ZXN0YCBmb3IgY29ycmVjdCB3b3JrIHdpdGggcG9seWZpbGxlZCBgVVJMU2VhcmNoUGFyYW1zYFxuaWYgKCFVU0VfTkFUSVZFX1VSTCAmJiB0eXBlb2YgSGVhZGVycyA9PSAnZnVuY3Rpb24nKSB7XG4gIHZhciB3cmFwUmVxdWVzdE9wdGlvbnMgPSBmdW5jdGlvbiAoaW5pdCkge1xuICAgIGlmIChpc09iamVjdChpbml0KSkge1xuICAgICAgdmFyIGJvZHkgPSBpbml0LmJvZHk7XG4gICAgICB2YXIgaGVhZGVycztcbiAgICAgIGlmIChjbGFzc29mKGJvZHkpID09PSBVUkxfU0VBUkNIX1BBUkFNUykge1xuICAgICAgICBoZWFkZXJzID0gaW5pdC5oZWFkZXJzID8gbmV3IEhlYWRlcnMoaW5pdC5oZWFkZXJzKSA6IG5ldyBIZWFkZXJzKCk7XG4gICAgICAgIGlmICghaGVhZGVycy5oYXMoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgICAgaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGUoaW5pdCwge1xuICAgICAgICAgIGJvZHk6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBTdHJpbmcoYm9keSkpLFxuICAgICAgICAgIGhlYWRlcnM6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBoZWFkZXJzKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IHJldHVybiBpbml0O1xuICB9O1xuXG4gIGlmICh0eXBlb2YgbmF0aXZlRmV0Y2ggPT0gJ2Z1bmN0aW9uJykge1xuICAgICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVGZXRjaChpbnB1dCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB3cmFwUmVxdWVzdE9wdGlvbnMoYXJndW1lbnRzWzFdKSA6IHt9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgTmF0aXZlUmVxdWVzdCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIFJlcXVlc3RDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsIFJlcXVlc3RDb25zdHJ1Y3RvciwgJ1JlcXVlc3QnKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlUmVxdWVzdChpbnB1dCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB3cmFwUmVxdWVzdE9wdGlvbnMoYXJndW1lbnRzWzFdKSA6IHt9KTtcbiAgICB9O1xuXG4gICAgUmVxdWVzdFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlcXVlc3RDb25zdHJ1Y3RvcjtcbiAgICBSZXF1ZXN0Q29uc3RydWN0b3IucHJvdG90eXBlID0gUmVxdWVzdFByb3RvdHlwZTtcblxuICAgICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBSZXF1ZXN0OiBSZXF1ZXN0Q29uc3RydWN0b3JcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvcixcbiAgZ2V0U3RhdGU6IGdldEludGVybmFsUGFyYW1zU3RhdGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVVNFX05BVElWRV9VUkwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXVybCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbicpO1xudmFyIGFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY29kZUF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jb2RlQXQ7XG52YXIgdG9BU0NJSSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcHVueWNvZGUtdG8tYXNjaWknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7XG52YXIgVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLlVSTFNlYXJjaFBhcmFtcztcbnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFVSTFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoJ1VSTCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcblxudmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JztcbnZhciBJTlZBTElEX1NDSEVNRSA9ICdJbnZhbGlkIHNjaGVtZSc7XG52YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7XG52YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7XG5cbnZhciBBTFBIQSA9IC9bQS1aYS16XS87XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLW9ic2N1cmUtcmFuZ2UgLS0gc2FmZVxudmFyIEFMUEhBTlVNRVJJQyA9IC9bXFxkKy0uQS1aYS16XS87XG52YXIgRElHSVQgPSAvXFxkLztcbnZhciBIRVhfU1RBUlQgPSAvXjB4L2k7XG52YXIgT0NUID0gL15bMC03XSskLztcbnZhciBERUMgPSAvXlxcZCskLztcbnZhciBIRVggPSAvXltcXGRBLUZhLWZdKyQvO1xuLyogZXNsaW50LWRpc2FibGUgbm8tY29udHJvbC1yZWdleCAtLSBzYWZlICovXG52YXIgRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCA9IC9bXFwwXFx0XFxuXFxyICMlLzo8Pj9AW1xcXFxcXF1efF0vO1xudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQgPSAvW1xcMFxcdFxcblxcciAjLzo8Pj9AW1xcXFxcXF1efF0vO1xudmFyIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UgPSAvXltcXHUwMDAwLVxcdTAwMjBdK3xbXFx1MDAwMC1cXHUwMDIwXSskL2c7XG52YXIgVEFCX0FORF9ORVdfTElORSA9IC9bXFx0XFxuXFxyXS9nO1xuLyogZXNsaW50LWVuYWJsZSBuby1jb250cm9sLXJlZ2V4IC0tIHNhZmUgKi9cbnZhciBFT0Y7XG5cbnZhciBwYXJzZUhvc3QgPSBmdW5jdGlvbiAodXJsLCBpbnB1dCkge1xuICB2YXIgcmVzdWx0LCBjb2RlUG9pbnRzLCBpbmRleDtcbiAgaWYgKGlucHV0LmNoYXJBdCgwKSA9PSAnWycpIHtcbiAgICBpZiAoaW5wdXQuY2hhckF0KGlucHV0Lmxlbmd0aCAtIDEpICE9ICddJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICByZXN1bHQgPSBwYXJzZUlQdjYoaW5wdXQuc2xpY2UoMSwgLTEpKTtcbiAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICB1cmwuaG9zdCA9IHJlc3VsdDtcbiAgLy8gb3BhcXVlIGhvc3RcbiAgfSBlbHNlIGlmICghaXNTcGVjaWFsKHVybCkpIHtcbiAgICBpZiAoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVC50ZXN0KGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICByZXN1bHQgPSAnJztcbiAgICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2RlUG9pbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0ICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpbmRleF0sIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgIH1cbiAgICB1cmwuaG9zdCA9IHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICBpbnB1dCA9IHRvQVNDSUkoaW5wdXQpO1xuICAgIGlmIChGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5ULnRlc3QoaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9IHBhcnNlSVB2NChpbnB1dCk7XG4gICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICB1cmwuaG9zdCA9IHJlc3VsdDtcbiAgfVxufTtcblxudmFyIHBhcnNlSVB2NCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgcGFydHMgPSBpbnB1dC5zcGxpdCgnLicpO1xuICB2YXIgcGFydHNMZW5ndGgsIG51bWJlcnMsIGluZGV4LCBwYXJ0LCByYWRpeCwgbnVtYmVyLCBpcHY0O1xuICBpZiAocGFydHMubGVuZ3RoICYmIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdID09ICcnKSB7XG4gICAgcGFydHMucG9wKCk7XG4gIH1cbiAgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG4gIGlmIChwYXJ0c0xlbmd0aCA+IDQpIHJldHVybiBpbnB1dDtcbiAgbnVtYmVycyA9IFtdO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIHBhcnQgPSBwYXJ0c1tpbmRleF07XG4gICAgaWYgKHBhcnQgPT0gJycpIHJldHVybiBpbnB1dDtcbiAgICByYWRpeCA9IDEwO1xuICAgIGlmIChwYXJ0Lmxlbmd0aCA+IDEgJiYgcGFydC5jaGFyQXQoMCkgPT0gJzAnKSB7XG4gICAgICByYWRpeCA9IEhFWF9TVEFSVC50ZXN0KHBhcnQpID8gMTYgOiA4O1xuICAgICAgcGFydCA9IHBhcnQuc2xpY2UocmFkaXggPT0gOCA/IDEgOiAyKTtcbiAgICB9XG4gICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICBudW1iZXIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShyYWRpeCA9PSAxMCA/IERFQyA6IHJhZGl4ID09IDggPyBPQ1QgOiBIRVgpLnRlc3QocGFydCkpIHJldHVybiBpbnB1dDtcbiAgICAgIG51bWJlciA9IHBhcnNlSW50KHBhcnQsIHJhZGl4KTtcbiAgICB9XG4gICAgbnVtYmVycy5wdXNoKG51bWJlcik7XG4gIH1cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBudW1iZXIgPSBudW1iZXJzW2luZGV4XTtcbiAgICBpZiAoaW5kZXggPT0gcGFydHNMZW5ndGggLSAxKSB7XG4gICAgICBpZiAobnVtYmVyID49IHBvdygyNTYsIDUgLSBwYXJ0c0xlbmd0aCkpIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyID4gMjU1KSByZXR1cm4gbnVsbDtcbiAgfVxuICBpcHY0ID0gbnVtYmVycy5wb3AoKTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbnVtYmVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBpcHY0ICs9IG51bWJlcnNbaW5kZXhdICogcG93KDI1NiwgMyAtIGluZGV4KTtcbiAgfVxuICByZXR1cm4gaXB2NDtcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBUT0RPXG52YXIgcGFyc2VJUHY2ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgcGllY2VJbmRleCA9IDA7XG4gIHZhciBjb21wcmVzcyA9IG51bGw7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIHZhbHVlLCBsZW5ndGgsIG51bWJlcnNTZWVuLCBpcHY0UGllY2UsIG51bWJlciwgc3dhcHMsIHN3YXA7XG5cbiAgdmFyIGNociA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5wdXQuY2hhckF0KHBvaW50ZXIpO1xuICB9O1xuXG4gIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICBpZiAoaW5wdXQuY2hhckF0KDEpICE9ICc6JykgcmV0dXJuO1xuICAgIHBvaW50ZXIgKz0gMjtcbiAgICBwaWVjZUluZGV4Kys7XG4gICAgY29tcHJlc3MgPSBwaWVjZUluZGV4O1xuICB9XG4gIHdoaWxlIChjaHIoKSkge1xuICAgIGlmIChwaWVjZUluZGV4ID09IDgpIHJldHVybjtcbiAgICBpZiAoY2hyKCkgPT0gJzonKSB7XG4gICAgICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHJldHVybjtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIHBpZWNlSW5kZXgrKztcbiAgICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IGxlbmd0aCA9IDA7XG4gICAgd2hpbGUgKGxlbmd0aCA8IDQgJiYgSEVYLnRlc3QoY2hyKCkpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlICogMTYgKyBwYXJzZUludChjaHIoKSwgMTYpO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgbGVuZ3RoKys7XG4gICAgfVxuICAgIGlmIChjaHIoKSA9PSAnLicpIHtcbiAgICAgIGlmIChsZW5ndGggPT0gMCkgcmV0dXJuO1xuICAgICAgcG9pbnRlciAtPSBsZW5ndGg7XG4gICAgICBpZiAocGllY2VJbmRleCA+IDYpIHJldHVybjtcbiAgICAgIG51bWJlcnNTZWVuID0gMDtcbiAgICAgIHdoaWxlIChjaHIoKSkge1xuICAgICAgICBpcHY0UGllY2UgPSBudWxsO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPiAwKSB7XG4gICAgICAgICAgaWYgKGNocigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKztcbiAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIURJR0lULnRlc3QoY2hyKCkpKSByZXR1cm47XG4gICAgICAgIHdoaWxlIChESUdJVC50ZXN0KGNocigpKSkge1xuICAgICAgICAgIG51bWJlciA9IHBhcnNlSW50KGNocigpLCAxMCk7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA9PT0gbnVsbCkgaXB2NFBpZWNlID0gbnVtYmVyO1xuICAgICAgICAgIGVsc2UgaWYgKGlwdjRQaWVjZSA9PSAwKSByZXR1cm47XG4gICAgICAgICAgZWxzZSBpcHY0UGllY2UgPSBpcHY0UGllY2UgKiAxMCArIG51bWJlcjtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID4gMjU1KSByZXR1cm47XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9XG4gICAgICAgIGFkZHJlc3NbcGllY2VJbmRleF0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdICogMjU2ICsgaXB2NFBpZWNlO1xuICAgICAgICBudW1iZXJzU2VlbisrO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KSBwaWVjZUluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyc1NlZW4gIT0gNCkgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIGlmICghY2hyKCkpIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGNocigpKSByZXR1cm47XG4gICAgYWRkcmVzc1twaWVjZUluZGV4KytdID0gdmFsdWU7XG4gIH1cbiAgaWYgKGNvbXByZXNzICE9PSBudWxsKSB7XG4gICAgc3dhcHMgPSBwaWVjZUluZGV4IC0gY29tcHJlc3M7XG4gICAgcGllY2VJbmRleCA9IDc7XG4gICAgd2hpbGUgKHBpZWNlSW5kZXggIT0gMCAmJiBzd2FwcyA+IDApIHtcbiAgICAgIHN3YXAgPSBhZGRyZXNzW3BpZWNlSW5kZXhdO1xuICAgICAgYWRkcmVzc1twaWVjZUluZGV4LS1dID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07XG4gICAgICBhZGRyZXNzW2NvbXByZXNzICsgLS1zd2Fwc10gPSBzd2FwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwaWVjZUluZGV4ICE9IDgpIHJldHVybjtcbiAgcmV0dXJuIGFkZHJlc3M7XG59O1xuXG52YXIgZmluZExvbmdlc3RaZXJvU2VxdWVuY2UgPSBmdW5jdGlvbiAoaXB2Nikge1xuICB2YXIgbWF4SW5kZXggPSBudWxsO1xuICB2YXIgbWF4TGVuZ3RoID0gMTtcbiAgdmFyIGN1cnJTdGFydCA9IG51bGw7XG4gIHZhciBjdXJyTGVuZ3RoID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgZm9yICg7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgIGlmIChpcHY2W2luZGV4XSAhPT0gMCkge1xuICAgICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gICAgICB9XG4gICAgICBjdXJyU3RhcnQgPSBudWxsO1xuICAgICAgY3Vyckxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyU3RhcnQgPT09IG51bGwpIGN1cnJTdGFydCA9IGluZGV4O1xuICAgICAgKytjdXJyTGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG1heEluZGV4O1xufTtcblxudmFyIHNlcmlhbGl6ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7XG4gIC8vIGlwdjRcbiAgaWYgKHR5cGVvZiBob3N0ID09ICdudW1iZXInKSB7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0LnVuc2hpZnQoaG9zdCAlIDI1Nik7XG4gICAgICBob3N0ID0gZmxvb3IoaG9zdCAvIDI1Nik7XG4gICAgfSByZXR1cm4gcmVzdWx0LmpvaW4oJy4nKTtcbiAgLy8gaXB2NlxuICB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoaWdub3JlMCAmJiBob3N0W2luZGV4XSA9PT0gMCkgY29udGludWU7XG4gICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlO1xuICAgICAgaWYgKGNvbXByZXNzID09PSBpbmRleCkge1xuICAgICAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonO1xuICAgICAgICBpZ25vcmUwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBob3N0W2luZGV4XS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChpbmRleCA8IDcpIHJlc3VsdCArPSAnOic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7XG4gIH0gcmV0dXJuIGhvc3Q7XG59O1xuXG52YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9O1xudmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwge1xuICAnICc6IDEsICdcIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDFcbn0pO1xudmFyIHBhdGhQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxXG59KTtcbnZhciB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIHBhdGhQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXFxcJzogMSwgJ10nOiAxLCAnXic6IDEsICd8JzogMVxufSk7XG5cbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gKGNociwgc2V0KSB7XG4gIHZhciBjb2RlID0gY29kZUF0KGNociwgMCk7XG4gIHJldHVybiBjb2RlID4gMHgyMCAmJiBjb2RlIDwgMHg3RiAmJiAhaGFzKHNldCwgY2hyKSA/IGNociA6IGVuY29kZVVSSUNvbXBvbmVudChjaHIpO1xufTtcblxudmFyIHNwZWNpYWxTY2hlbWVzID0ge1xuICBmdHA6IDIxLFxuICBmaWxlOiBudWxsLFxuICBodHRwOiA4MCxcbiAgaHR0cHM6IDQ0MyxcbiAgd3M6IDgwLFxuICB3c3M6IDQ0M1xufTtcblxudmFyIGlzU3BlY2lhbCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgcmV0dXJuIGhhcyhzcGVjaWFsU2NoZW1lcywgdXJsLnNjaGVtZSk7XG59O1xuXG52YXIgaW5jbHVkZXNDcmVkZW50aWFscyA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgcmV0dXJuIHVybC51c2VybmFtZSAhPSAnJyB8fCB1cmwucGFzc3dvcmQgIT0gJyc7XG59O1xuXG52YXIgY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gIXVybC5ob3N0IHx8IHVybC5jYW5ub3RCZUFCYXNlVVJMIHx8IHVybC5zY2hlbWUgPT0gJ2ZpbGUnO1xufTtcblxudmFyIGlzV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZywgbm9ybWFsaXplZCkge1xuICB2YXIgc2Vjb25kO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PSAyICYmIEFMUEhBLnRlc3Qoc3RyaW5nLmNoYXJBdCgwKSlcbiAgICAmJiAoKHNlY29uZCA9IHN0cmluZy5jaGFyQXQoMSkpID09ICc6JyB8fCAoIW5vcm1hbGl6ZWQgJiYgc2Vjb25kID09ICd8JykpO1xufTtcblxudmFyIHN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciB0aGlyZDtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPiAxICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKHN0cmluZy5zbGljZSgwLCAyKSkgJiYgKFxuICAgIHN0cmluZy5sZW5ndGggPT0gMiB8fFxuICAgICgodGhpcmQgPSBzdHJpbmcuY2hhckF0KDIpKSA9PT0gJy8nIHx8IHRoaXJkID09PSAnXFxcXCcgfHwgdGhpcmQgPT09ICc/JyB8fCB0aGlyZCA9PT0gJyMnKVxuICApO1xufTtcblxudmFyIHNob3J0ZW5VUkxzUGF0aCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgdmFyIHBhdGggPSB1cmwucGF0aDtcbiAgdmFyIHBhdGhTaXplID0gcGF0aC5sZW5ndGg7XG4gIGlmIChwYXRoU2l6ZSAmJiAodXJsLnNjaGVtZSAhPSAnZmlsZScgfHwgcGF0aFNpemUgIT0gMSB8fCAhaXNXaW5kb3dzRHJpdmVMZXR0ZXIocGF0aFswXSwgdHJ1ZSkpKSB7XG4gICAgcGF0aC5wb3AoKTtcbiAgfVxufTtcblxudmFyIGlzU2luZ2xlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQgPT09ICcuJyB8fCBzZWdtZW50LnRvTG93ZXJDYXNlKCkgPT09ICclMmUnO1xufTtcblxudmFyIGlzRG91YmxlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgc2VnbWVudCA9IHNlZ21lbnQudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIHNlZ21lbnQgPT09ICcuLicgfHwgc2VnbWVudCA9PT0gJyUyZS4nIHx8IHNlZ21lbnQgPT09ICcuJTJlJyB8fCBzZWdtZW50ID09PSAnJTJlJTJlJztcbn07XG5cbi8vIFN0YXRlczpcbnZhciBTQ0hFTUVfU1RBUlQgPSB7fTtcbnZhciBTQ0hFTUUgPSB7fTtcbnZhciBOT19TQ0hFTUUgPSB7fTtcbnZhciBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWSA9IHt9O1xudmFyIFBBVEhfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUkVMQVRJVkUgPSB7fTtcbnZhciBSRUxBVElWRV9TTEFTSCA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVMgPSB7fTtcbnZhciBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUyA9IHt9O1xudmFyIEFVVEhPUklUWSA9IHt9O1xudmFyIEhPU1QgPSB7fTtcbnZhciBIT1NUTkFNRSA9IHt9O1xudmFyIFBPUlQgPSB7fTtcbnZhciBGSUxFID0ge307XG52YXIgRklMRV9TTEFTSCA9IHt9O1xudmFyIEZJTEVfSE9TVCA9IHt9O1xudmFyIFBBVEhfU1RBUlQgPSB7fTtcbnZhciBQQVRIID0ge307XG52YXIgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSCA9IHt9O1xudmFyIFFVRVJZID0ge307XG52YXIgRlJBR01FTlQgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbnZhciBwYXJzZVVSTCA9IGZ1bmN0aW9uICh1cmwsIGlucHV0LCBzdGF0ZU92ZXJyaWRlLCBiYXNlKSB7XG4gIHZhciBzdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgU0NIRU1FX1NUQVJUO1xuICB2YXIgcG9pbnRlciA9IDA7XG4gIHZhciBidWZmZXIgPSAnJztcbiAgdmFyIHNlZW5BdCA9IGZhbHNlO1xuICB2YXIgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgdmFyIHNlZW5QYXNzd29yZFRva2VuID0gZmFsc2U7XG4gIHZhciBjb2RlUG9pbnRzLCBjaHIsIGJ1ZmZlckNvZGVQb2ludHMsIGZhaWx1cmU7XG5cbiAgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgdXJsLnNjaGVtZSA9ICcnO1xuICAgIHVybC51c2VybmFtZSA9ICcnO1xuICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgIHVybC5ob3N0ID0gbnVsbDtcbiAgICB1cmwucG9ydCA9IG51bGw7XG4gICAgdXJsLnBhdGggPSBbXTtcbiAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgIHVybC5mcmFnbWVudCA9IG51bGw7XG4gICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSBmYWxzZTtcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSwgJycpO1xuICB9XG5cbiAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFRBQl9BTkRfTkVXX0xJTkUsICcnKTtcblxuICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcblxuICB3aGlsZSAocG9pbnRlciA8PSBjb2RlUG9pbnRzLmxlbmd0aCkge1xuICAgIGNociA9IGNvZGVQb2ludHNbcG9pbnRlcl07XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSBTQ0hFTUVfU1RBUlQ6XG4gICAgICAgIGlmIChjaHIgJiYgQUxQSEEudGVzdChjaHIpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHN0YXRlID0gU0NIRU1FO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFNDSEVNRTpcbiAgICAgICAgaWYgKGNociAmJiAoQUxQSEFOVU1FUklDLnRlc3QoY2hyKSB8fCBjaHIgPT0gJysnIHx8IGNociA9PSAnLScgfHwgY2hyID09ICcuJykpIHtcbiAgICAgICAgICBidWZmZXIgKz0gY2hyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc6Jykge1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIChcbiAgICAgICAgICAgIChpc1NwZWNpYWwodXJsKSAhPSBoYXMoc3BlY2lhbFNjaGVtZXMsIGJ1ZmZlcikpIHx8XG4gICAgICAgICAgICAoYnVmZmVyID09ICdmaWxlJyAmJiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgfHxcbiAgICAgICAgICAgICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLmhvc3QpXG4gICAgICAgICAgKSkgcmV0dXJuO1xuICAgICAgICAgIHVybC5zY2hlbWUgPSBidWZmZXI7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSA9PSB1cmwucG9ydCkgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgIHN0YXRlID0gRklMRTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh1cmwpICYmIGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gdXJsLnNjaGVtZSkge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh1cmwpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgc3RhdGUgPSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgIHBvaW50ZXIgPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBOT19TQ0hFTUU6XG4gICAgICAgIGlmICghYmFzZSB8fCAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNociAhPSAnIycpKSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgIGlmIChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgIHVybC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBiYXNlLnNjaGVtZSA9PSAnZmlsZScgPyBGSUxFIDogUkVMQVRJVkU7XG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBjYXNlIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZOlxuICAgICAgICBpZiAoY2hyID09ICcvJyAmJiBjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBBVEhfT1JfQVVUSE9SSVRZOlxuICAgICAgICBpZiAoY2hyID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFJFTEFUSVZFOlxuICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgIGlmIChjaHIgPT0gRU9GKSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJy8nIHx8IChjaHIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSkge1xuICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkVfU0xBU0g7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucGF0aC5wb3AoKTtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUkVMQVRJVkVfU0xBU0g6XG4gICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSkge1xuICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUzpcbiAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgaWYgKGNociAhPSAnLycgfHwgYnVmZmVyLmNoYXJBdChwb2ludGVyICsgMSkgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUzpcbiAgICAgICAgaWYgKGNociAhPSAnLycgJiYgY2hyICE9ICdcXFxcJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIEFVVEhPUklUWTpcbiAgICAgICAgaWYgKGNociA9PSAnQCcpIHtcbiAgICAgICAgICBpZiAoc2VlbkF0KSBidWZmZXIgPSAnJTQwJyArIGJ1ZmZlcjtcbiAgICAgICAgICBzZWVuQXQgPSB0cnVlO1xuICAgICAgICAgIGJ1ZmZlckNvZGVQb2ludHMgPSBhcnJheUZyb20oYnVmZmVyKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlckNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBidWZmZXJDb2RlUG9pbnRzW2ldO1xuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA9PSAnOicgJiYgIXNlZW5QYXNzd29yZFRva2VuKSB7XG4gICAgICAgICAgICAgIHNlZW5QYXNzd29yZFRva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW5jb2RlZENvZGVQb2ludHMgPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludCwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICAgIGlmIChzZWVuUGFzc3dvcmRUb2tlbikgdXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgICAgZWxzZSB1cmwudXNlcm5hbWUgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycgfHxcbiAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHNlZW5BdCAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0FVVEhPUklUWTtcbiAgICAgICAgICBwb2ludGVyIC09IGFycmF5RnJvbShidWZmZXIpLmxlbmd0aCArIDE7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBIT1NUO1xuICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNocjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgSE9TVDpcbiAgICAgIGNhc2UgSE9TVE5BTUU6XG4gICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc6JyAmJiAhc2VlbkJyYWNrZXQpIHtcbiAgICAgICAgICBpZiAoYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgIGZhaWx1cmUgPSBwYXJzZUhvc3QodXJsLCBidWZmZXIpO1xuICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFBPUlQ7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgPT0gSE9TVE5BTUUpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgYnVmZmVyID09ICcnICYmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSByZXR1cm47XG4gICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaHIgPT0gJ1snKSBzZWVuQnJhY2tldCA9IHRydWU7XG4gICAgICAgICAgZWxzZSBpZiAoY2hyID09ICddJykgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgICAgICAgICBidWZmZXIgKz0gY2hyO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBPUlQ6XG4gICAgICAgIGlmIChESUdJVC50ZXN0KGNocikpIHtcbiAgICAgICAgICBidWZmZXIgKz0gY2hyO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycgfHxcbiAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkgfHxcbiAgICAgICAgICBzdGF0ZU92ZXJyaWRlXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChidWZmZXIgIT0gJycpIHtcbiAgICAgICAgICAgIHZhciBwb3J0ID0gcGFyc2VJbnQoYnVmZmVyLCAxMCk7XG4gICAgICAgICAgICBpZiAocG9ydCA+IDB4RkZGRikgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gKGlzU3BlY2lhbCh1cmwpICYmIHBvcnQgPT09IHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdKSA/IG51bGwgOiBwb3J0O1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgRklMRTpcbiAgICAgICAgdXJsLnNjaGVtZSA9ICdmaWxlJztcbiAgICAgICAgaWYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykgc3RhdGUgPSBGSUxFX1NMQVNIO1xuICAgICAgICBlbHNlIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgIGlmIChjaHIgPT0gRU9GKSB7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGNvZGVQb2ludHMuc2xpY2UocG9pbnRlcikuam9pbignJykpKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgICBzaG9ydGVuVVJMc1BhdGgodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgRklMRV9TTEFTSDpcbiAgICAgICAgaWYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykge1xuICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJyAmJiAhc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihjb2RlUG9pbnRzLnNsaWNlKHBvaW50ZXIpLmpvaW4oJycpKSkge1xuICAgICAgICAgIGlmIChpc1dpbmRvd3NEcml2ZUxldHRlcihiYXNlLnBhdGhbMF0sIHRydWUpKSB1cmwucGF0aC5wdXNoKGJhc2UucGF0aFswXSk7XG4gICAgICAgICAgZWxzZSB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBjYXNlIEZJTEVfSE9TVDpcbiAgICAgICAgaWYgKGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJykge1xuICAgICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgfSBlbHNlIGlmIChidWZmZXIgPT0gJycpIHtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmYWlsdXJlID0gcGFyc2VIb3N0KHVybCwgYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICAgIGlmICh1cmwuaG9zdCA9PSAnbG9jYWxob3N0JykgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICB9IGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNocjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSF9TVEFSVDpcbiAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpKSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmIGNociAhPSAnXFxcXCcpIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnPycpIHtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKGNociAhPSBFT0YpIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgaWYgKGNociAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBBVEg6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHxcbiAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkgfHxcbiAgICAgICAgICAoIXN0YXRlT3ZlcnJpZGUgJiYgKGNociA9PSAnPycgfHwgY2hyID09ICcjJykpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChpc0RvdWJsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICBzaG9ydGVuVVJMc1BhdGgodXJsKTtcbiAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmICEoY2hyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiAhKGNociA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpKSB7XG4gICAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5wYXRoLmxlbmd0aCAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICAgIGlmICh1cmwuaG9zdCkgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLmNoYXJBdCgwKSArICc6JzsgLy8gbm9ybWFsaXplIHdpbmRvd3MgZHJpdmUgbGV0dGVyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmwucGF0aC5wdXNoKGJ1ZmZlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAoY2hyID09IEVPRiB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycpKSB7XG4gICAgICAgICAgICB3aGlsZSAodXJsLnBhdGgubGVuZ3RoID4gMSAmJiB1cmwucGF0aFswXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmZmVyICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBwYXRoUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDpcbiAgICAgICAgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKGNociAhPSBFT0YpIHtcbiAgICAgICAgICB1cmwucGF0aFswXSArPSBwZXJjZW50RW5jb2RlKGNociwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUVVFUlk6XG4gICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7XG4gICAgICAgICAgaWYgKGNociA9PSBcIidcIiAmJiBpc1NwZWNpYWwodXJsKSkgdXJsLnF1ZXJ5ICs9ICclMjcnO1xuICAgICAgICAgIGVsc2UgaWYgKGNociA9PSAnIycpIHVybC5xdWVyeSArPSAnJTIzJztcbiAgICAgICAgICBlbHNlIHVybC5xdWVyeSArPSBwZXJjZW50RW5jb2RlKGNociwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgRlJBR01FTlQ6XG4gICAgICAgIGlmIChjaHIgIT0gRU9GKSB1cmwuZnJhZ21lbnQgKz0gcGVyY2VudEVuY29kZShjaHIsIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHBvaW50ZXIrKztcbiAgfVxufTtcblxuLy8gYFVSTGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLWNsYXNzXG52YXIgVVJMQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkwodXJsIC8qICwgYmFzZSAqLykge1xuICB2YXIgdGhhdCA9IGFuSW5zdGFuY2UodGhpcywgVVJMQ29uc3RydWN0b3IsICdVUkwnKTtcbiAgdmFyIGJhc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHVybFN0cmluZyA9ICR0b1N0cmluZyh1cmwpO1xuICB2YXIgc3RhdGUgPSBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHsgdHlwZTogJ1VSTCcgfSk7XG4gIHZhciBiYXNlU3RhdGUsIGZhaWx1cmU7XG4gIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoYmFzZSBpbnN0YW5jZW9mIFVSTENvbnN0cnVjdG9yKSBiYXNlU3RhdGUgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKGJhc2UpO1xuICAgIGVsc2Uge1xuICAgICAgZmFpbHVyZSA9IHBhcnNlVVJMKGJhc2VTdGF0ZSA9IHt9LCAkdG9TdHJpbmcoYmFzZSkpO1xuICAgICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICB9XG4gIH1cbiAgZmFpbHVyZSA9IHBhcnNlVVJMKHN0YXRlLCB1cmxTdHJpbmcsIG51bGwsIGJhc2VTdGF0ZSk7XG4gIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gIHZhciBzZWFyY2hQYXJhbXMgPSBzdGF0ZS5zZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gIHZhciBzZWFyY2hQYXJhbXNTdGF0ZSA9IGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUoc2VhcmNoUGFyYW1zKTtcbiAgc2VhcmNoUGFyYW1zU3RhdGUudXBkYXRlU2VhcmNoUGFyYW1zKHN0YXRlLnF1ZXJ5KTtcbiAgc2VhcmNoUGFyYW1zU3RhdGUudXBkYXRlVVJMID0gZnVuY3Rpb24gKCkge1xuICAgIHN0YXRlLnF1ZXJ5ID0gU3RyaW5nKHNlYXJjaFBhcmFtcykgfHwgbnVsbDtcbiAgfTtcbiAgaWYgKCFERVNDUklQVE9SUykge1xuICAgIHRoYXQuaHJlZiA9IHNlcmlhbGl6ZVVSTC5jYWxsKHRoYXQpO1xuICAgIHRoYXQub3JpZ2luID0gZ2V0T3JpZ2luLmNhbGwodGhhdCk7XG4gICAgdGhhdC5wcm90b2NvbCA9IGdldFByb3RvY29sLmNhbGwodGhhdCk7XG4gICAgdGhhdC51c2VybmFtZSA9IGdldFVzZXJuYW1lLmNhbGwodGhhdCk7XG4gICAgdGhhdC5wYXNzd29yZCA9IGdldFBhc3N3b3JkLmNhbGwodGhhdCk7XG4gICAgdGhhdC5ob3N0ID0gZ2V0SG9zdC5jYWxsKHRoYXQpO1xuICAgIHRoYXQuaG9zdG5hbWUgPSBnZXRIb3N0bmFtZS5jYWxsKHRoYXQpO1xuICAgIHRoYXQucG9ydCA9IGdldFBvcnQuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnBhdGhuYW1lID0gZ2V0UGF0aG5hbWUuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnNlYXJjaCA9IGdldFNlYXJjaC5jYWxsKHRoYXQpO1xuICAgIHRoYXQuc2VhcmNoUGFyYW1zID0gZ2V0U2VhcmNoUGFyYW1zLmNhbGwodGhhdCk7XG4gICAgdGhhdC5oYXNoID0gZ2V0SGFzaC5jYWxsKHRoYXQpO1xuICB9XG59O1xuXG52YXIgVVJMUHJvdG90eXBlID0gVVJMQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG52YXIgc2VyaWFsaXplVVJMID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgdmFyIHNjaGVtZSA9IHVybC5zY2hlbWU7XG4gIHZhciB1c2VybmFtZSA9IHVybC51c2VybmFtZTtcbiAgdmFyIHBhc3N3b3JkID0gdXJsLnBhc3N3b3JkO1xuICB2YXIgaG9zdCA9IHVybC5ob3N0O1xuICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICB2YXIgcXVlcnkgPSB1cmwucXVlcnk7XG4gIHZhciBmcmFnbWVudCA9IHVybC5mcmFnbWVudDtcbiAgdmFyIG91dHB1dCA9IHNjaGVtZSArICc6JztcbiAgaWYgKGhvc3QgIT09IG51bGwpIHtcbiAgICBvdXRwdXQgKz0gJy8vJztcbiAgICBpZiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpKSB7XG4gICAgICBvdXRwdXQgKz0gdXNlcm5hbWUgKyAocGFzc3dvcmQgPyAnOicgKyBwYXNzd29yZCA6ICcnKSArICdAJztcbiAgICB9XG4gICAgb3V0cHV0ICs9IHNlcmlhbGl6ZUhvc3QoaG9zdCk7XG4gICAgaWYgKHBvcnQgIT09IG51bGwpIG91dHB1dCArPSAnOicgKyBwb3J0O1xuICB9IGVsc2UgaWYgKHNjaGVtZSA9PSAnZmlsZScpIG91dHB1dCArPSAnLy8nO1xuICBvdXRwdXQgKz0gdXJsLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBwYXRoLmpvaW4oJy8nKSA6ICcnO1xuICBpZiAocXVlcnkgIT09IG51bGwpIG91dHB1dCArPSAnPycgKyBxdWVyeTtcbiAgaWYgKGZyYWdtZW50ICE9PSBudWxsKSBvdXRwdXQgKz0gJyMnICsgZnJhZ21lbnQ7XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuXG52YXIgZ2V0T3JpZ2luID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgdmFyIHNjaGVtZSA9IHVybC5zY2hlbWU7XG4gIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gIGlmIChzY2hlbWUgPT0gJ2Jsb2InKSB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMQ29uc3RydWN0b3Ioc2NoZW1lLnBhdGhbMF0pLm9yaWdpbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9XG4gIGlmIChzY2hlbWUgPT0gJ2ZpbGUnIHx8ICFpc1NwZWNpYWwodXJsKSkgcmV0dXJuICdudWxsJztcbiAgcmV0dXJuIHNjaGVtZSArICc6Ly8nICsgc2VyaWFsaXplSG9zdCh1cmwuaG9zdCkgKyAocG9ydCAhPT0gbnVsbCA/ICc6JyArIHBvcnQgOiAnJyk7XG59O1xuXG52YXIgZ2V0UHJvdG9jb2wgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNjaGVtZSArICc6Jztcbn07XG5cbnZhciBnZXRVc2VybmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykudXNlcm5hbWU7XG59O1xuXG52YXIgZ2V0UGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnBhc3N3b3JkO1xufTtcblxudmFyIGdldEhvc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgaG9zdCA9IHVybC5ob3N0O1xuICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnXG4gICAgOiBwb3J0ID09PSBudWxsID8gc2VyaWFsaXplSG9zdChob3N0KVxuICAgIDogc2VyaWFsaXplSG9zdChob3N0KSArICc6JyArIHBvcnQ7XG59O1xuXG52YXIgZ2V0SG9zdG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBob3N0ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5ob3N0O1xuICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnIDogc2VyaWFsaXplSG9zdChob3N0KTtcbn07XG5cbnZhciBnZXRQb3J0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcG9ydCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykucG9ydDtcbiAgcmV0dXJuIHBvcnQgPT09IG51bGwgPyAnJyA6IFN0cmluZyhwb3J0KTtcbn07XG5cbnZhciBnZXRQYXRobmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gIHJldHVybiB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIHBhdGguam9pbignLycpIDogJyc7XG59O1xuXG52YXIgZ2V0U2VhcmNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnF1ZXJ5O1xuICByZXR1cm4gcXVlcnkgPyAnPycgKyBxdWVyeSA6ICcnO1xufTtcblxudmFyIGdldFNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VhcmNoUGFyYW1zO1xufTtcblxudmFyIGdldEhhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBmcmFnbWVudCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykuZnJhZ21lbnQ7XG4gIHJldHVybiBmcmFnbWVudCA/ICcjJyArIGZyYWdtZW50IDogJyc7XG59O1xuXG52YXIgYWNjZXNzb3JEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldHRlciwgc2V0dGVyKSB7XG4gIHJldHVybiB7IGdldDogZ2V0dGVyLCBzZXQ6IHNldHRlciwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH07XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgZGVmaW5lUHJvcGVydGllcyhVUkxQcm90b3R5cGUsIHtcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ocmVmYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ocmVmXG4gICAgaHJlZjogYWNjZXNzb3JEZXNjcmlwdG9yKHNlcmlhbGl6ZVVSTCwgZnVuY3Rpb24gKGhyZWYpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHVybFN0cmluZyA9ICR0b1N0cmluZyhocmVmKTtcbiAgICAgIHZhciBmYWlsdXJlID0gcGFyc2VVUkwodXJsLCB1cmxTdHJpbmcpO1xuICAgICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICAgIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUodXJsLnNlYXJjaFBhcmFtcykudXBkYXRlU2VhcmNoUGFyYW1zKHVybC5xdWVyeSk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUub3JpZ2luYCBnZXR0ZXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtb3JpZ2luXG4gICAgb3JpZ2luOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0T3JpZ2luKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wcm90b2NvbGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcHJvdG9jb2xcbiAgICBwcm90b2NvbDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFByb3RvY29sLCBmdW5jdGlvbiAocHJvdG9jb2wpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgcGFyc2VVUkwodXJsLCAkdG9TdHJpbmcocHJvdG9jb2wpICsgJzonLCBTQ0hFTUVfU1RBUlQpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnVzZXJuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC11c2VybmFtZVxuICAgIHVzZXJuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0VXNlcm5hbWUsIGZ1bmN0aW9uICh1c2VybmFtZSkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbSgkdG9TdHJpbmcodXNlcm5hbWUpKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgdXJsLnVzZXJuYW1lID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXJsLnVzZXJuYW1lICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wYXNzd29yZGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGFzc3dvcmRcbiAgICBwYXNzd29yZDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBhc3N3b3JkLCBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oJHRvU3RyaW5nKHBhc3N3b3JkKSk7XG4gICAgICBpZiAoY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KHVybCkpIHJldHVybjtcbiAgICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVybC5wYXNzd29yZCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICAgIGhvc3Q6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIb3N0LCBmdW5jdGlvbiAoaG9zdCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAodXJsLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICAgIHBhcnNlVVJMKHVybCwgJHRvU3RyaW5nKGhvc3QpLCBIT1NUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0bmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdG5hbWVcbiAgICBob3N0bmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKGdldEhvc3RuYW1lLCBmdW5jdGlvbiAoaG9zdG5hbWUpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgICBwYXJzZVVSTCh1cmwsICR0b1N0cmluZyhob3N0bmFtZSksIEhPU1ROQU1FKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wb3J0YCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gICAgcG9ydDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBvcnQsIGZ1bmN0aW9uIChwb3J0KSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgcG9ydCA9ICR0b1N0cmluZyhwb3J0KTtcbiAgICAgIGlmIChwb3J0ID09ICcnKSB1cmwucG9ydCA9IG51bGw7XG4gICAgICBlbHNlIHBhcnNlVVJMKHVybCwgcG9ydCwgUE9SVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucGF0aG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhdGhuYW1lXG4gICAgcGF0aG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQYXRobmFtZSwgZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgICAgdXJsLnBhdGggPSBbXTtcbiAgICAgIHBhcnNlVVJMKHVybCwgJHRvU3RyaW5nKHBhdGhuYW1lKSwgUEFUSF9TVEFSVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hcbiAgICBzZWFyY2g6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRTZWFyY2gsIGZ1bmN0aW9uIChzZWFyY2gpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgc2VhcmNoID0gJHRvU3RyaW5nKHNlYXJjaCk7XG4gICAgICBpZiAoc2VhcmNoID09ICcnKSB7XG4gICAgICAgIHVybC5xdWVyeSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJz8nID09IHNlYXJjaC5jaGFyQXQoMCkpIHNlYXJjaCA9IHNlYXJjaC5zbGljZSgxKTtcbiAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgIHBhcnNlVVJMKHVybCwgc2VhcmNoLCBRVUVSWSk7XG4gICAgICB9XG4gICAgICBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHVybC5zZWFyY2hQYXJhbXMpLnVwZGF0ZVNlYXJjaFBhcmFtcyh1cmwucXVlcnkpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaFBhcmFtc2AgZ2V0dGVyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaHBhcmFtc1xuICAgIHNlYXJjaFBhcmFtczogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFNlYXJjaFBhcmFtcyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaGFzaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICAgIGhhc2g6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIYXNoLCBmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBoYXNoID0gJHRvU3RyaW5nKGhhc2gpO1xuICAgICAgaWYgKGhhc2ggPT0gJycpIHtcbiAgICAgICAgdXJsLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCcjJyA9PSBoYXNoLmNoYXJBdCgwKSkgaGFzaCA9IGhhc2guc2xpY2UoMSk7XG4gICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgIHBhcnNlVVJMKHVybCwgaGFzaCwgRlJBR01FTlQpO1xuICAgIH0pXG4gIH0pO1xufVxuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9KU09OJywgZnVuY3Rpb24gdG9KU09OKCkge1xuICByZXR1cm4gc2VyaWFsaXplVVJMLmNhbGwodGhpcyk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jVVJMLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHNlcmlhbGl6ZVVSTC5jYWxsKHRoaXMpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5pZiAoTmF0aXZlVVJMKSB7XG4gIHZhciBuYXRpdmVDcmVhdGVPYmplY3RVUkwgPSBOYXRpdmVVUkwuY3JlYXRlT2JqZWN0VVJMO1xuICB2YXIgbmF0aXZlUmV2b2tlT2JqZWN0VVJMID0gTmF0aXZlVVJMLnJldm9rZU9iamVjdFVSTDtcbiAgLy8gYFVSTC5jcmVhdGVPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML2NyZWF0ZU9iamVjdFVSTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBpZiAobmF0aXZlQ3JlYXRlT2JqZWN0VVJMKSByZWRlZmluZShVUkxDb25zdHJ1Y3RvciwgJ2NyZWF0ZU9iamVjdFVSTCcsIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdFVSTChibG9iKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTC5hcHBseShOYXRpdmVVUkwsIGFyZ3VtZW50cyk7XG4gIH0pO1xuICAvLyBgVVJMLnJldm9rZU9iamVjdFVSTGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvcmV2b2tlT2JqZWN0VVJMXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGlmIChuYXRpdmVSZXZva2VPYmplY3RVUkwpIHJlZGVmaW5lKFVSTENvbnN0cnVjdG9yLCAncmV2b2tlT2JqZWN0VVJMJywgZnVuY3Rpb24gcmV2b2tlT2JqZWN0VVJMKHVybCkge1xuICAgIHJldHVybiBuYXRpdmVSZXZva2VPYmplY3RVUkwuYXBwbHkoTmF0aXZlVVJMLCBhcmd1bWVudHMpO1xuICB9KTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoVVJMQ29uc3RydWN0b3IsICdVUkwnKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIFVSTDogVVJMQ29uc3RydWN0b3Jcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG4kKHsgdGFyZ2V0OiAnVVJMJywgcHJvdG86IHRydWUsIGVudW1lcmFibGU6IHRydWUgfSwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gVVJMLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9XG59KTtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLmJ0bi1jb2xvci1waWNrZXIgLnRleHRbZGF0YS12LTUzMWEwMjZhXXtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBtaW4td2lkdGg6IDYwcHg7XFxufVxcbi5idG4tY29sb3ItcGlja2VyIC5zd2F0Y2hbZGF0YS12LTUzMWEwMjZhXXtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICB3aWR0aDogMTJweDtcXG4gICAgaGVpZ2h0OiAxMnB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XFxufVxcbi5wb3B1cFtkYXRhLXYtNTMxYTAyNmFde1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgei1pbmRleDogMTAwO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjQpO1xcbn1cXG4ucG9wdXAtaW5uZXJbZGF0YS12LTUzMWEwMjZhXXtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB6LWluZGV4OiAxMDA7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9qcy9jb21wb25lbnRzL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBbUVBO0lBQ0EscUJBQUE7SUFDQSxlQUFBO0FBQ0E7QUFFQTtJQUNBLHFCQUFBO0lBQ0EsV0FBQTtJQUNBLFlBQUE7SUFDQSxrQkFBQTtJQUNBLHNCQUFBO0FBQ0E7QUFFQTtFQUNBLGVBQUE7RUFDQSxZQUFBO0VBQ0EsTUFBQTtFQUNBLE9BQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLG9DQUFBO0FBQ0E7QUFFQTtJQUNBLGtCQUFBO0lBQ0EsWUFBQTtBQUNBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXG4gICAgPGRpdiBjbGFzcz1cXFwiaW5saW5lLWNvbnRhaW5lclxcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWNvbG9yLXBpY2tlclxcXCIgQGNsaWNrPVxcXCJvcGVuID0gdHJ1ZVxcXCIgcmVmPVxcXCJidXR0b25cXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzd2F0Y2hcXFwiIDpzdHlsZT1cXFwie2JhY2tncm91bmRDb2xvcjogdmFsdWV9XFxcIi8+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRleHRcXFwiPnt7dmFsdWV9fTwvc3Bhbj5cXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPGRpdiB2LXNob3c9XFxcIm9wZW5cXFwiIGNsYXNzPVxcXCJwb3B1cFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9wdXAtaW5uZXJcXFwiIDpzdHlsZT1cXFwie3RvcDogYCR7eX1weGAsIGxlZnQ6YCR7eH1weGB9XFxcIj5cXG4gICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgIDxQaG90b3Nob3AgXFxuICAgICAgICAgICAgICAgICAgICA6dmFsdWU9XFxcImNvbG9yXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgQGNhbmNlbD1cXFwiY2FuY2VsXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgQGlucHV0PVxcXCJjb2xvciA9ICRldmVudC5oZXhcXFwiXFxuICAgICAgICAgICAgICAgICAgICBAb2s9XFxcImNob29zZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIDpoZWFkPVxcXCJwb3B1cFRpdGxlXFxcIlxcbiAgICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvdGVtcGxhdGU+XFxuXFxuPHNjcmlwdD5cXG5pbXBvcnQgeyBQaG90b3Nob3AgfSBmcm9tICd2dWUtY29sb3InO1xcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgcHJvcHM6IHtcXG4gICAgICAgIHZhbHVlOiB7XFxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHBvcHVwVGl0bGU6IHtcXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIGRhdGEoKSB7XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIG9wZW46IGZhbHNlLFxcbiAgICAgICAgICAgIGNvbG9yOiB0aGlzLnZhbHVlLFxcbiAgICAgICAgICAgIHg6IDAsXFxuICAgICAgICAgICAgeTogMCxcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAgY29tcG9uZW50czoge1xcbiAgICAgICAgUGhvdG9zaG9wLFxcbiAgICB9LFxcbiAgICBtZXRob2RzOiB7XFxuICAgICAgICBjYW5jZWwoKSB7XFxuICAgICAgICAgICAgdGhpcy5jb2xvciA9IHRoaXMudmFsdWU7XFxuICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XFxuICAgICAgICB9LFxcbiAgICAgICAgY2hvb3NlKCkge1xcbiAgICAgICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuY29sb3IpO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICB3YXRjaDoge1xcbiAgICAgICAgb3Blbih2YWx1ZSkge1xcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xcbiAgICAgICAgICAgICAgICB0aGlzLnggPSB0aGlzLiRyZWZzLmJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSB0aGlzLiRyZWZzLmJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB0aGlzLiRyZWZzLmJ1dHRvbi5jbGllbnRIZWlnaHQ7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgfSxcXG59XFxuPC9zY3JpcHQ+XFxuXFxuPHN0eWxlIHNjb3BlZD5cXG4gIC5idG4tY29sb3ItcGlja2VyIC50ZXh0e1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICBtaW4td2lkdGg6IDYwcHg7XFxuICB9XFxuXFxuICAuYnRuLWNvbG9yLXBpY2tlciAuc3dhdGNoe1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICB3aWR0aDogMTJweDtcXG4gICAgICBoZWlnaHQ6IDEycHg7XFxuICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XFxuICB9XFxuXFxuICAucG9wdXB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgei1pbmRleDogMTAwO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC40KTtcXG4gIH1cXG5cXG4gIC5wb3B1cC1pbm5lcntcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgei1pbmRleDogMTAwO1xcbiAgfVxcbjwvc3R5bGU+XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLmhhbWJ1cmdlci1tZW51W2RhdGEtdi00MjYzMzhiOF0ge1xcbiAgICBtYXJnaW46IDEycHggYXV0bztcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2pzL2NvbXBvbmVudHMvTWFpbkFwcC52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQXVTQTtJQUNBLGlCQUFBO0FBQ0FcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcbiAgICA8ZGl2IGlkPVxcXCJjb250YWluZXJcXFwiPlxcblxcbiAgICAgICAgPGhlYWRlciBpZD1cXFwiaGVhZGVyXFxcIj5cXG4gICAgICAgICAgICA8aDE+QWJlbGlhbiBTYW5kcGlsZTwvaDE+XFxuICAgICAgICA8L2hlYWRlcj5cXG5cXG4gICAgICAgIDxhc2lkZSBpZD1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgIDxkaXY+XFxuICAgICAgICAgICAgICAgIDxCdXR0b25Ub2dnbGUgXFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUZXh0PVxcXCJQbGF5XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmVUZXh0PVxcXCJQYXVzZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIGluYWN0aXZlSWNvbj1cXFwiJiM5MjA4O1xcXCJcXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUljb249XFxcIiYjOTY1NDtcXFwiXFxuICAgICAgICAgICAgICAgICAgICBAdG9nZ2xlPVxcXCJkb0xvb3AgPSAhZG9Mb29wXFxcIlxcbiAgICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG5cXFwiIEBjbGljay5wcmV2ZW50PVxcXCJyZXNldFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWh0bWw9XFxcIicmIzg2MzQ7J1xcXCI+PC9zcGFuPiBSZXN0YXJ0XFxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgXFxuICAgICAgICAgICAgPE1lbnVDb2xsYXBzaWJsZSBjbGFzcz1cXFwiZGlzcGxheS1zbSBoYW1idXJnZXItbWVudVxcXCI+XFxuICAgICAgICAgICAgICAgIDxDb250cm9sR3JvdXBTYW5kIEBjbGVhcj1cXFwiY2xlYXJcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDxDb250cm9sR3JvdXBDYW52YXMgLz5cXG4gICAgICAgICAgICA8L01lbnVDb2xsYXBzaWJsZT5cXG5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJkaXNwbGF5LW1kXFxcIj5cXG4gICAgICAgICAgICAgICAgPENvbnRyb2xHcm91cFNhbmQgQGNsZWFyPVxcXCJjbGVhclxcXCIgLz5cXG4gICAgICAgICAgICAgICAgPENvbnRyb2xHcm91cEhlYXRtYXAgLz5cXG4gICAgICAgICAgICAgICAgPENvbnRyb2xHcm91cENhbnZhcyAvPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9hc2lkZT5cXG5cXG4gICAgICAgIDxzZWN0aW9uIGlkPVxcXCJjb250ZW50XFxcIiByZWY9XFxcImNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgIDxDYW52YXNSb290XFxuICAgICAgICAgICAgICAgIDp3aWR0aD1cXFwid2lkdGhcXFwiXFxuICAgICAgICAgICAgICAgIDpoZWlnaHQ9XFxcImhlaWdodFxcXCJcXG4gICAgICAgICAgICAgICAgQG1vdXNlZG93bi5sZWZ0PVxcXCJzZXRJbnRlcmFjdGluZygxMCwgJGV2ZW50KVxcXCJcXG4gICAgICAgICAgICAgICAgQG1vdXNldXAubGVmdD1cXFwiaW50ZXJhY3RpbmcgPSBmYWxzZVxcXCJcXG4gICAgICAgICAgICAgICAgQG1vdXNlbGF2ZT1cXFwiaW50ZXJhY3RpbmcgPSBmYWxzZVxcXCJcXG4gICAgICAgICAgICAgICAgQG1vdXNlbW92ZT1cXFwidXBkYXRlSW50ZXJhY3RpbmcoJGV2ZW50KVxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxDYW52YXNHcmlkSGVhdE1hcCBcXG4gICAgICAgICAgICAgICAgICAgIDpncmlkPVxcXCJzYW5kXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgOmhlaWdodD1cXFwiaGVpZ2h0XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgOndpZHRoPVxcXCJ3aWR0aFxcXCJcXG4gICAgICAgICAgICAgICAgICAgIDpyZXNvbHV0aW9uPVxcXCJyZXNvbHV0aW9uXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgOmNvbG9yU3RlcDA9XFxcImNvbG9yMFxcXCJcXG4gICAgICAgICAgICAgICAgICAgIDpjb2xvclN0ZXAxPVxcXCJjb2xvcjFcXFwiXFxuICAgICAgICAgICAgICAgICAgICA6Y29sb3JTdGVwMj1cXFwiY29sb3IyXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgOmNvbG9yU3RlcDM9XFxcImNvbG9yM1xcXCJcXG4gICAgICAgICAgICAgICAgLz5cXG4gICAgICAgICAgICA8L0NhbnZhc1Jvb3Q+XFxuICAgICAgIDwvc2VjdGlvbj5cXG4gICAgPC9kaXY+XFxuPC90ZW1wbGF0ZT5cXG5cXG48c2NyaXB0PlxcbmltcG9ydCBCdXR0b25Ub2dnbGUgZnJvbSBcXFwiLi9CdXR0b25Ub2dnbGUudnVlXFxcIjtcXG5pbXBvcnQgQ2FudmFzUm9vdCBmcm9tIFxcXCIuL0NhbnZhc1Jvb3QudnVlXFxcIjtcXG5pbXBvcnQgQ2FudmFzR3JpZEhlYXRNYXAgZnJvbSBcXFwiLi9DYW52YXNHcmlkSGVhdE1hcC52dWVcXFwiO1xcbmltcG9ydCBDb250cm9sR3JvdXBTYW5kIGZyb20gXFxcIi4vQ29udHJvbEdyb3VwU2FuZC52dWVcXFwiO1xcbmltcG9ydCBDb250cm9sR3JvdXBIZWF0bWFwIGZyb20gXFxcIi4vQ29udHJvbEdyb3VwSGVhdG1hcC52dWVcXFwiO1xcbmltcG9ydCBDb250cm9sR3JvdXBDYW52YXMgZnJvbSBcXFwiLi9Db250cm9sR3JvdXBDYW52YXMudnVlXFxcIjtcXG5pbXBvcnQgTWVudUNvbGxhcHNpYmxlIGZyb20gXFxcIi4vTWVudUNvbGxhcHNpYmxlLnZ1ZVxcXCI7XFxuaW1wb3J0IHsgcGl4ZWxUb0Nvb3JkLCBjb29yZFRvUGl4ZWwgfSBmcm9tIFxcXCIuLi91dGlsaXRpZXMuanNcXFwiO1xcbmltcG9ydCB7IG1hcFN0YXRlLCBtYXBHZXR0ZXJzLCBtYXBNdXRhdGlvbnMgfSBmcm9tIFxcXCJ2dWV4XFxcIjtcXG5cXG5sZXQgb25SZXNpemVUaW1lcklkID0gdW5kZWZpbmVkO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIGNvbXBvbmVudHM6IHtcXG4gICAgQnV0dG9uVG9nZ2xlLFxcbiAgICBDYW52YXNSb290LFxcbiAgICBDYW52YXNHcmlkSGVhdE1hcCxcXG4gICAgQ29udHJvbEdyb3VwU2FuZCxcXG4gICAgQ29udHJvbEdyb3VwSGVhdG1hcCxcXG4gICAgQ29udHJvbEdyb3VwQ2FudmFzLFxcbiAgICBNZW51Q29sbGFwc2libGUsXFxuICB9LFxcblxcbiAgZGF0YSgpIHtcXG4gICAgcmV0dXJuIHtcXG4gICAgICBpbnRlcmFjdGluZzogZmFsc2UsXFxuICAgICAgaW50ZXJhY3RpbmdYOiBudWxsLFxcbiAgICAgIGludGVyYWN0aW5nWTogbnVsbCxcXG4gICAgICBpbnRlcmFjdGluZ0Ftb3VudDogMTAsXFxuICAgICAgZG9Mb29wOiB0cnVlLFxcbiAgICAgIHRpbWVvdXQ6IG51bGxcXG4gICAgfTtcXG4gIH0sXFxuXFxuICBjb21wdXRlZDoge1xcbiAgICAuLi5tYXBTdGF0ZShcXFwiaGVhdG1hcFxcXCIsIFtcXFwiY29sb3IwXFxcIiwgXFxcImNvbG9yMVxcXCIsIFxcXCJjb2xvcjJcXFwiLCBcXFwiY29sb3IzXFxcIl0pLFxcbiAgICAuLi5tYXBTdGF0ZShcXFwiY2FudmFzXFxcIiwgW1xcXCJ3aWR0aFxcXCIsIFxcXCJoZWlnaHRcXFwiLCBcXFwicmVzb2x1dGlvblxcXCJdKSxcXG4gICAgLi4ubWFwR2V0dGVycyhcXFwiY2FudmFzXFxcIiwgW1xcbiAgICAgICAgXFxcIm1pbldpZHRoXFxcIixcXG4gICAgICAgIFxcXCJtYXhXaWR0aFxcXCIsXFxuICAgICAgICBcXFwibWluSGVpZ2h0XFxcIixcXG4gICAgICAgIFxcXCJtYXhIZWlnaHRcXFwiLFxcbiAgICAgICAgXFxcIm1pblJlc29sdXRpb25cXFwiLFxcbiAgICAgICAgXFxcIm1heFJlc29sdXRpb25cXFwiLFxcbiAgICAgICAgXFxcImNvbHNcXFwiLFxcbiAgICAgICAgXFxcInJvd3NcXFwiXFxuICAgIF0pLFxcbiAgICAuLi5tYXBTdGF0ZShcXFwic2FuZFxcXCIsIFtcXFwiYmFzZVNhbmRcXFwiLCBcXFwic3RhcnRpbmdTYW5kXFxcIiwgXFxcInNhbmRcXFwiXSksXFxuICB9LFxcbiAgbWV0aG9kczoge1xcbiAgICAuLi5tYXBNdXRhdGlvbnMoXFxcImNhbnZhc1xcXCIsIFtcXFwic2V0SGVpZ2h0XFxcIiwgXFxcInNldFdpZHRoXFxcIiwgXFxcInNldFJlc29sdXRpb25cXFwiXSksXFxuICAgIC4uLm1hcE11dGF0aW9ucyhcXFwic2FuZFxcXCIsIFtcXFwic2V0U2FuZFxcXCIsIFxcXCJ1cGRhdGVTYW5kXFxcIl0pLFxcbiAgICBjb25zdHJhaW5DYW52YXMoZ3Jvdykge1xcbiAgICAgICAgY29uc3QgYW1vdW50ID0gZ3JvdyA/IHRoaXMucmVzb2x1dGlvbiA6IC10aGlzLnJlc29sdXRpb247XFxuICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KFxcbiAgICAgICAgICAgIHRoaXMubWluV2lkdGgsXFxuICAgICAgICAgICAgTWF0aC5taW4odGhpcy5tYXhXaWR0aCwgdGhpcy53aWR0aCArIGFtb3VudClcXG4gICAgICAgICk7XFxuICAgICAgICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heChcXG4gICAgICAgICAgICB0aGlzLm1pbkhlaWdodCxcXG4gICAgICAgICAgICBNYXRoLm1pbih0aGlzLm1heEhlaWdodCwgdGhpcy5oZWlnaHQgKyBhbW91bnQpXFxuICAgICAgICApO1xcblxcbiAgICAgICAgaWYgKHRoaXMuY29scyAlIDIgPT09IDAgfHwgdGhpcy53aWR0aCA+IHRoaXMubWF4V2lkdGggfHwgdGhpcy53aWR0aCA8IHRoaXMubWluSGVpZ2h0KSB7XFxuICAgICAgICAgICAgdGhpcy5zZXRXaWR0aCh3aWR0aCk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAodGhpcy5yb3dzICUgMiA9PT0gMCB8fCB0aGlzLmhlaWdodCA+IHRoaXMubWF4SGVpZ2h0IHx8IHRoaXMuaGVpZ2h0IDwgdGhpcy5taW5IZWlnaHQpIHtcXG4gICAgICAgICAgICB0aGlzLnNldEhlaWdodChoZWlnaHQpO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICBzZXRJbnRlcmFjdGluZyhhbW91bnQsIGUpIHtcXG4gICAgICAodGhpcy5pbnRlcmFjdGluZyA9IHRydWUpLCB0aGlzLnVwZGF0ZUludGVyYWN0aW5nKGUpO1xcbiAgICAgIHRoaXMuaW50ZXJhY3RpbmdBbW91bnQgPSBhbW91bnQ7XFxuICAgIH0sXFxuICAgIHVwZGF0ZUludGVyYWN0aW5nKGUpIHtcXG4gICAgICBsZXQgeCA9IGUub2Zmc2V0WCB8fCBlLmxheWVyWDtcXG5cXG4gICAgICBsZXQgeSA9IGUub2Zmc2V0WSB8fCBlLmxheWVyWTtcXG5cXG4gICAgICB4ID0gTWF0aC5yb3VuZCh4IC8gdGhpcy5yZXNvbHV0aW9uKTtcXG5cXG4gICAgICBpZiAoeCA+IDAgJiYgeCA8IHRoaXMuY29scykge1xcbiAgICAgICAgdGhpcy5pbnRlcmFjdGluZ1ggPSB4O1xcbiAgICAgIH1cXG5cXG4gICAgICB5ID0gTWF0aC5yb3VuZCh5IC8gdGhpcy5yZXNvbHV0aW9uKTtcXG5cXG4gICAgICBpZiAoeSA+IDAgJiYgeSA8IHRoaXMucm93cykge1xcbiAgICAgICAgdGhpcy5pbnRlcmFjdGluZ1kgPSB5O1xcbiAgICAgIH1cXG4gICAgfSxcXG4gICAgY2xlYXIoKSB7XFxuICAgICAgY29uc3Qgc2FuZCA9IG5ldyBBcnJheSh0aGlzLnJvd3MgKiB0aGlzLmNvbHMpO1xcbiAgICAgIHNhbmQuZmlsbCh0aGlzLmJhc2VTYW5kKTtcXG4gICAgICB0aGlzLnNldFNhbmQoc2FuZCk7XFxuICAgIH0sXFxuICAgIHJlc2V0KCkge1xcbiAgICAgIHRoaXMuY2xlYXIoKTtcXG4gICAgICBsZXQgbWlkZGxlID0gY29vcmRUb1BpeGVsKFxcbiAgICAgICAgTWF0aC5mbG9vcih0aGlzLmNvbHMgLyAyKSxcXG4gICAgICAgIE1hdGguZmxvb3IodGhpcy5yb3dzIC8gMiksXFxuICAgICAgICB0aGlzLmNvbHNcXG4gICAgICApO1xcblxcbiAgICAgIHRoaXMudXBkYXRlU2FuZCh7IGlkeDogbWlkZGxlLCBhbW91bnQ6IHRoaXMuc3RhcnRpbmdTYW5kIH0pO1xcbiAgICB9LFxcbiAgICBvcHRpbWlzZUNhbnZhcygpIHtcXG4gICAgICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IHRoaXMuJHJlZnMuY29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcXG5cXG4gICAgICAgIGNvbnN0IGRpbWVuc2lvbiA9IE1hdGguZmxvb3IoTWF0aC5taW4od2lkdGgsIGhlaWdodCkpO1xcblxcbiAgICAgICAgbGV0IHJlc29sdXRpb24gPSBNYXRoLnJvdW5kKDAuMDEyNSAqIGRpbWVuc2lvbik7XFxuICAgICAgICByZXNvbHV0aW9uID0gTWF0aC5taW4ocmVzb2x1dGlvbiwgdGhpcy5tYXhSZXNvbHV0aW9uKTtcXG4gICAgICAgIHJlc29sdXRpb24gPSBNYXRoLm1heChyZXNvbHV0aW9uLCB0aGlzLm1pblJlc29sdXRpb24pO1xcblxcbiAgICAgICAgdGhpcy5zZXRXaWR0aChkaW1lbnNpb24pO1xcbiAgICAgICAgdGhpcy5zZXRIZWlnaHQoZGltZW5zaW9uKTtcXG4gICAgICAgIHRoaXMuc2V0UmVzb2x1dGlvbihyZXNvbHV0aW9uKTtcXG4gICAgfSxcXG4gICAgb25SZXNpemUoKSB7XFxuICAgICAgICBjbGVhclRpbWVvdXQob25SZXNpemVUaW1lcklkKTtcXG4gICAgICAgIG9uUmVzaXplVGltZXJJZCA9IHNldFRpbWVvdXQoXFxuICAgICAgICAgICAgKCkgPT4ge1xcbiAgICAgICAgICAgICAgIHRoaXMub3B0aW1pc2VDYW52YXMoKVxcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgMTAwXFxuICAgICAgICApO1xcbiAgICB9LFxcbiAgICAkX3NldFVwKCkge1xcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplKTtcXG4gICAgICB0aGlzLm9wdGltaXNlQ2FudmFzKCk7XFxuICAgICAgdGhpcy5yZXNldCgpO1xcbiAgICB9LFxcbiAgICAkX3VwZGF0ZSgpIHtcXG4gICAgICBpZiAodGhpcy5pbnRlcmFjdGluZykge1xcbiAgICAgICAgY29uc3QgaWR4ID0gY29vcmRUb1BpeGVsKFxcbiAgICAgICAgICB0aGlzLmludGVyYWN0aW5nWCxcXG4gICAgICAgICAgdGhpcy5pbnRlcmFjdGluZ1ksXFxuICAgICAgICAgIHRoaXMuY29sc1xcbiAgICAgICAgKTtcXG5cXG4gICAgICAgIHRoaXMudXBkYXRlU2FuZCh7XFxuICAgICAgICAgIGlkeCxcXG4gICAgICAgICAgYW1vdW50OiAodGhpcy5zYW5kW2lkeF0gKz0gdGhpcy5pbnRlcmFjdGluZ0Ftb3VudClcXG4gICAgICAgIH0pO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLiRfdG9wcGxlKCk7XFxuICAgIH0sXFxuICAgICRfdG9wcGxlKCkge1xcbiAgICAgIGxldCBuZXh0U2FuZCA9IEFycmF5LmZyb20odGhpcy5zYW5kKTtcXG5cXG4gICAgICB0aGlzLnNhbmQuZm9yRWFjaCgoZ3JhaW5zLCBpZHgpID0+IHtcXG4gICAgICAgIGlmIChncmFpbnMgPj0gNCkge1xcbiAgICAgICAgICBuZXh0U2FuZFtpZHhdID0gbmV4dFNhbmRbaWR4XSAtIDQ7XFxuXFxuICAgICAgICAgIGxldCB7IHgsIHkgfSA9IHBpeGVsVG9Db29yZChpZHgsIHRoaXMuY29scyk7XFxuXFxuICAgICAgICAgIGlmICh4ID4gMCkge1xcbiAgICAgICAgICAgIGxldCBzaWJsaW5nSWR4ID0gY29vcmRUb1BpeGVsKHggLSAxLCB5LCB0aGlzLmNvbHMpO1xcblxcbiAgICAgICAgICAgIG5leHRTYW5kW3NpYmxpbmdJZHhdID0gbmV4dFNhbmRbc2libGluZ0lkeF0gKyAxO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGlmICh4IDwgdGhpcy5jb2xzIC0gMSkge1xcbiAgICAgICAgICAgIGxldCBzaWJsaW5nSWR4ID0gY29vcmRUb1BpeGVsKHggKyAxLCB5LCB0aGlzLmNvbHMpO1xcblxcbiAgICAgICAgICAgIG5leHRTYW5kW3NpYmxpbmdJZHhdID0gbmV4dFNhbmRbc2libGluZ0lkeF0gKyAxO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGlmICh5ID4gMCkge1xcbiAgICAgICAgICAgIGxldCBzaWJsaW5nSWR4ID0gY29vcmRUb1BpeGVsKHgsIHkgLSAxLCB0aGlzLmNvbHMpO1xcblxcbiAgICAgICAgICAgIG5leHRTYW5kW3NpYmxpbmdJZHhdID0gbmV4dFNhbmRbc2libGluZ0lkeF0gKyAxO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGlmICh5IDwgdGhpcy5yb3dzIC0gMSkge1xcbiAgICAgICAgICAgIGxldCBzaWJsaW5nSWR4ID0gY29vcmRUb1BpeGVsKHgsIHkgKyAxLCB0aGlzLmNvbHMpO1xcblxcbiAgICAgICAgICAgIG5leHRTYW5kW3NpYmxpbmdJZHhdID0gbmV4dFNhbmRbc2libGluZ0lkeF0gKyAxO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuXFxuICAgICAgdGhpcy5zZXRTYW5kKG5leHRTYW5kKTtcXG4gICAgfSxcXG4gICAgJF9sb29wKCkge1xcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XFxuICAgICAgICB0aGlzLiRfdXBkYXRlKCk7XFxuXFxuICAgICAgICBpZiAodGhpcy5kb0xvb3ApIHtcXG4gICAgICAgICAgdGhpcy4kX2xvb3AoKTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSxcXG4gIHdhdGNoOiB7XFxuICAgIGRvTG9vcCh2YWx1ZSkge1xcbiAgICAgIGlmICh2YWx1ZSkge1xcbiAgICAgICAgdGhpcy4kX2xvb3AoKTtcXG4gICAgICB9XFxuICAgIH0sXFxuICAgIHJlc29sdXRpb24odmFsdWUsIG9sZFZhbHVlKSB7XFxuICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xcbiAgICAgIG9sZFZhbHVlID0gcGFyc2VJbnQob2xkVmFsdWUsIDEwKTtcXG4gICAgICB0aGlzLmNvbnN0cmFpbkNhbnZhcyh2YWx1ZSA+IG9sZFZhbHVlKTtcXG4gICAgICB0aGlzLnJlc2V0KCk7XFxuICAgIH0sXFxuICAgIHdpZHRoKHZhbHVlLCBvbGRWYWx1ZSkge1xcbiAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcXG4gICAgICBvbGRWYWx1ZSA9IHBhcnNlSW50KG9sZFZhbHVlLCAxMCk7XFxuICAgICAgdGhpcy5jb25zdHJhaW5DYW52YXModmFsdWUgPiBvbGRWYWx1ZSk7XFxuICAgICAgdGhpcy5yZXNldCgpO1xcbiAgICB9LFxcblxcbiAgICBoZWlnaHQodmFsdWUsIG9sZFZhbHVlKSB7XFxuICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xcbiAgICAgIG9sZFZhbHVlID0gcGFyc2VJbnQob2xkVmFsdWUsIDEwKTtcXG4gICAgICB0aGlzLmNvbnN0cmFpbkNhbnZhcyh2YWx1ZSA+IG9sZFZhbHVlKTtcXG4gICAgICB0aGlzLnJlc2V0KCk7XFxuICAgIH1cXG4gIH0sXFxuICBtb3VudGVkKCkge1xcbiAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpIHtcXG4gICAgICB0aGlzLiRfc2V0VXAoKTtcXG5cXG4gICAgICB0aGlzLiRfbG9vcCgpO1xcbiAgICB9KTtcXG4gIH0sXFxuICBiZWZvcmVEZXN0cm95KCkge1xcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplKTtcXG4gIH1cXG59O1xcbjwvc2NyaXB0PlxcblxcbjxzdHlsZSBzY29wZWQ+XFxuICAgIC5oYW1idXJnZXItbWVudSB7XFxuICAgICAgICBtYXJnaW46IDEycHggYXV0bztcXG4gICAgfVxcbjwvc3R5bGU+XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLmhhbWJ1cmdlcltkYXRhLXYtNzI5ZTRjZDddIHtcXG4gICAgd2lkdGg6IDI4cHg7XFxuICAgIGhlaWdodDogMThweDtcXG59XFxuLmhhbWJ1cmdlciAuaG9yaXpvbnRhbC1iYXJbZGF0YS12LTcyOWU0Y2Q3XXtcXG4gICAgd2lkdGg6IDc1JTtcXG4gICAgaGVpZ2h0OiAycHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMjI7XFxuICAgIG1hcmdpbjogNHB4IGF1dG87XFxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4xcywgdHJhbnNmb3JtIDAuMjVzO1xcbn1cXG4uaGFtYnVyZ2VyLmFjdGl2ZSAuaG9yaXpvbnRhbC1iYXJbZGF0YS12LTcyOWU0Y2Q3XTpmaXJzdC1jaGlsZCB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZykgdHJhbnNsYXRlKC00cHgsIDRweCk7XFxufVxcbi5oYW1idXJnZXIuYWN0aXZlIC5ob3Jpem9udGFsLWJhcltkYXRhLXYtNzI5ZTRjZDddOm50aC1jaGlsZChldmVuKSB7XFxuICAgIG9wYWNpdHk6IDA7XFxufVxcbi5oYW1idXJnZXIuYWN0aXZlIC5ob3Jpem9udGFsLWJhcltkYXRhLXYtNzI5ZTRjZDddOmxhc3QtY2hpbGQge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgdHJhbnNsYXRlKC00cHgsIC00cHgpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvanMvY29tcG9uZW50cy9NZW51Q29sbGFwc2libGUudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUEwQkE7SUFDQSxXQUFBO0lBQ0EsWUFBQTtBQUNBO0FBRUE7SUFDQSxVQUFBO0lBQ0EsV0FBQTtJQUNBLHNCQUFBO0lBQ0EsZ0JBQUE7SUFDQSx5Q0FBQTtBQUNBO0FBRUE7SUFDQSw4Q0FBQTtBQUNBO0FBRUE7SUFDQSxVQUFBO0FBQ0E7QUFFQTtJQUNBLDhDQUFBO0FBQ0FcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcbiAgICA8ZGl2PlxcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuXFxcIiBAY2xpY2sucHJldmVudD1cXFwiYWN0aXZlID0gIWFjdGl2ZVxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaGFtYnVyZ2VyXFxcIiA6Y2xhc3M9XFxcInthY3RpdmV9XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaG9yaXpvbnRhbC1iYXJcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJob3Jpem9udGFsLWJhclxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImhvcml6b250YWwtYmFyXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPGRpdiB2LXNob3c9XFxcImFjdGl2ZVxcXCI+XFxuICAgICAgICAgICAgPHNsb3QgLz5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQ+XFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICBkYXRhKCkge1xcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICBhY3RpdmU6IGZhbHNlLFxcbiAgICAgICAgfTtcXG4gICAgfVxcbn1cXG48L3NjcmlwdD5cXG5cXG48c3R5bGUgc2NvcGVkPlxcbiAgICAuaGFtYnVyZ2VyIHtcXG4gICAgICAgIHdpZHRoOiAyOHB4O1xcbiAgICAgICAgaGVpZ2h0OiAxOHB4O1xcbiAgICB9XFxuXFxuICAgIC5oYW1idXJnZXIgLmhvcml6b250YWwtYmFye1xcbiAgICAgICAgd2lkdGg6IDc1JTtcXG4gICAgICAgIGhlaWdodDogMnB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjtcXG4gICAgICAgIG1hcmdpbjogNHB4IGF1dG87XFxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMXMsIHRyYW5zZm9ybSAwLjI1cztcXG4gICAgfVxcblxcbiAgICAuaGFtYnVyZ2VyLmFjdGl2ZSAuaG9yaXpvbnRhbC1iYXI6Zmlyc3QtY2hpbGQge1xcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKSB0cmFuc2xhdGUoLTRweCwgNHB4KTtcXG4gICAgfVxcblxcbiAgICAuaGFtYnVyZ2VyLmFjdGl2ZSAuaG9yaXpvbnRhbC1iYXI6bnRoLWNoaWxkKGV2ZW4pIHtcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxuICAgIH1cXG5cXG4gICAgLmhhbWJ1cmdlci5hY3RpdmUgLmhvcml6b250YWwtYmFyOmxhc3QtY2hpbGQge1xcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpIHRyYW5zbGF0ZSgtNHB4LCAtNHB4KTtcXG4gICAgfVxcbjwvc3R5bGU+XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2J1dHRvbnMuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9ybXMuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8yX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ3JpZC5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzNfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNwb25zaXZlLmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfNF9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3R5cG9ncmFwaHkuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMV9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMl9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfM19fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfNF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdHtcXG4gICAgLS1icmFuZC1wcmltYXJ5LWh1ZTogNTM7XFxuICAgIC0tYnJhbmQtcHJpbWFyeS1zYXR1cmF0aW9uOiA5MCU7XFxuICAgIC0tYnJhbmQtcHJpbWFyeS1saWdodG5lc3M6IDQ5JTtcXG4gICAgLS1icmFuZC1wcmltYXJ5OiBoc2wodmFyKC0tYnJhbmQtcHJpbWFyeS1odWUpLCB2YXIoLS1icmFuZC1wcmltYXJ5LXNhdHVyYXRpb24pLCB2YXIoLS1icmFuZC1wcmltYXJ5LWxpZ2h0bmVzcykpO1xcblxcbiAgICAtLWJyYW5kLXNlY29uZGFyeS1odWU6IDI1MTtcXG4gICAgLS1icmFuZC1zZWNvbmRhcnktc2F0dXJhdGlvbjogNSU7XFxuICAgIC0tYnJhbmQtc2Vjb25kYXJ5LWxpZ2h0bmVzczogNjAlO1xcbiAgICAtLWJyYW5kLXNlY29uZGFyeTogaHNsKHZhcigtLWJyYW5kLXNlY29uZGFyeS1odWUpLCB2YXIoLS1icmFuZC1zZWNvbmRhcnktc2F0dXJhdGlvbiksIHZhcigtLWJyYW5kLXNlY29uZGFyeS1saWdodG5lc3MpKTtcXG5cXG4gICAgLS1icmFuZC10ZXJ0aWFyeS1odWU6IDA7XFxuICAgIC0tYnJhbmQtdGVydGlhcnktc2F0dXJhdGlvbjogMCU7XFxuICAgIC0tYnJhbmQtdGVydGlhcnktbGlnaHRuZXNzOiAxMyU7XFxuICAgIC0tYnJhbmQtdGVydGlhcnk6IGhzbCh2YXIoLS1icmFuZC10ZXJ0aWFyeS1odWUpLCB2YXIoLS1icmFuZC10ZXJ0aWFyeS1zYXR1cmF0aW9uKSwgdmFyKC0tYnJhbmQtdGVydGlhcnktbGlnaHRuZXNzKSk7XFxuXFxuICAgIC0tdGV4dC1jb2xvci1odWU6IDA7XFxuICAgIC0tdGV4dC1jb2xvci1zYXR1cmF0aW9uOiAwJTtcXG4gICAgLS10ZXh0LWNvbG9yLWxpZ2h0bmVzczogOTMlO1xcbiAgICAtLXRleHQtY29sb3I6IGhzbCh2YXIoLS10ZXh0LWNvbG9yLWh1ZSksIHZhcigtLXRleHQtY29sb3Itc2F0dXJhdGlvbiksIHZhcigtLXRleHQtY29sb3ItbGlnaHRuZXNzKSk7XFxufVxcblxcbmJvZHkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1icmFuZC10ZXJ0aWFyeSk7XFxuICAgIGZvbnQtZmFtaWx5OiAnSW5jb25zb2xhdGEnLCBtb25vc3BhY2U7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgICBtYXJnaW46IDA7XFxufVxcblxcbi5pbmxpbmUtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2NDBweCkge1xcbiAgICBib2R5IHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJyYW5kLXNlY29uZGFyeSk7XFxuICAgIH1cXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9hcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQU1BO0lBQ0ksdUJBQXVCO0lBQ3ZCLCtCQUErQjtJQUMvQiw4QkFBOEI7SUFDOUIsK0dBQStHOztJQUUvRywwQkFBMEI7SUFDMUIsZ0NBQWdDO0lBQ2hDLGdDQUFnQztJQUNoQyx1SEFBdUg7O0lBRXZILHVCQUF1QjtJQUN2QiwrQkFBK0I7SUFDL0IsK0JBQStCO0lBQy9CLG1IQUFtSDs7SUFFbkgsbUJBQW1CO0lBQ25CLDJCQUEyQjtJQUMzQiwyQkFBMkI7SUFDM0IsbUdBQW1HO0FBQ3ZHOztBQUVBO0lBQ0ksdUNBQXVDO0lBQ3ZDLHFDQUFxQztJQUNyQyx3QkFBd0I7SUFDeEIsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSTtRQUNJLHdDQUF3QztJQUM1QztBQUNKXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgJ2J1dHRvbnMuY3NzJztcXG5AaW1wb3J0ICdmb3Jtcy5jc3MnO1xcbkBpbXBvcnQgJ2dyaWQuY3NzJztcXG5AaW1wb3J0ICdyZXNwb25zaXZlLmNzcyc7XFxuQGltcG9ydCAndHlwb2dyYXBoeS5jc3MnO1xcblxcbjpyb290e1xcbiAgICAtLWJyYW5kLXByaW1hcnktaHVlOiA1MztcXG4gICAgLS1icmFuZC1wcmltYXJ5LXNhdHVyYXRpb246IDkwJTtcXG4gICAgLS1icmFuZC1wcmltYXJ5LWxpZ2h0bmVzczogNDklO1xcbiAgICAtLWJyYW5kLXByaW1hcnk6IGhzbCh2YXIoLS1icmFuZC1wcmltYXJ5LWh1ZSksIHZhcigtLWJyYW5kLXByaW1hcnktc2F0dXJhdGlvbiksIHZhcigtLWJyYW5kLXByaW1hcnktbGlnaHRuZXNzKSk7XFxuXFxuICAgIC0tYnJhbmQtc2Vjb25kYXJ5LWh1ZTogMjUxO1xcbiAgICAtLWJyYW5kLXNlY29uZGFyeS1zYXR1cmF0aW9uOiA1JTtcXG4gICAgLS1icmFuZC1zZWNvbmRhcnktbGlnaHRuZXNzOiA2MCU7XFxuICAgIC0tYnJhbmQtc2Vjb25kYXJ5OiBoc2wodmFyKC0tYnJhbmQtc2Vjb25kYXJ5LWh1ZSksIHZhcigtLWJyYW5kLXNlY29uZGFyeS1zYXR1cmF0aW9uKSwgdmFyKC0tYnJhbmQtc2Vjb25kYXJ5LWxpZ2h0bmVzcykpO1xcblxcbiAgICAtLWJyYW5kLXRlcnRpYXJ5LWh1ZTogMDtcXG4gICAgLS1icmFuZC10ZXJ0aWFyeS1zYXR1cmF0aW9uOiAwJTtcXG4gICAgLS1icmFuZC10ZXJ0aWFyeS1saWdodG5lc3M6IDEzJTtcXG4gICAgLS1icmFuZC10ZXJ0aWFyeTogaHNsKHZhcigtLWJyYW5kLXRlcnRpYXJ5LWh1ZSksIHZhcigtLWJyYW5kLXRlcnRpYXJ5LXNhdHVyYXRpb24pLCB2YXIoLS1icmFuZC10ZXJ0aWFyeS1saWdodG5lc3MpKTtcXG5cXG4gICAgLS10ZXh0LWNvbG9yLWh1ZTogMDtcXG4gICAgLS10ZXh0LWNvbG9yLXNhdHVyYXRpb246IDAlO1xcbiAgICAtLXRleHQtY29sb3ItbGlnaHRuZXNzOiA5MyU7XFxuICAgIC0tdGV4dC1jb2xvcjogaHNsKHZhcigtLXRleHQtY29sb3ItaHVlKSwgdmFyKC0tdGV4dC1jb2xvci1zYXR1cmF0aW9uKSwgdmFyKC0tdGV4dC1jb2xvci1saWdodG5lc3MpKTtcXG59XFxuXFxuYm9keSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJyYW5kLXRlcnRpYXJ5KTtcXG4gICAgZm9udC1mYW1pbHk6ICdJbmNvbnNvbGF0YScsIG1vbm9zcGFjZTtcXG4gICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxuICAgIG1hcmdpbjogMDtcXG59XFxuXFxuLmlubGluZS1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MHB4KSB7XFxuICAgIGJvZHkge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYnJhbmQtc2Vjb25kYXJ5KTtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYnRuIHtcXG4gICAgLS1idG4tYmc6IGhzbCh2YXIoLS1icmFuZC1zZWNvbmRhcnktaHVlKSwgdmFyKC0tYnJhbmQtc2Vjb25kYXJ5LXNhdHVyYXRpb24pLCA4MCUpO1xcbiAgICAtLWJ0bi1iZy1ob3ZlcjogdmFyKC0tYnJhbmQtc2Vjb25kYXJ5KTtcXG4gICAgLS1idG4tYmctZm9jdXM6IHZhcigtLWJ0bi1iZy1ob3Zlcik7XFxuICAgIC0tYnRuLWZnOiB2YXIoLS1icmFuZC10ZXJ0aWFyeSk7XFxuICAgIC0tYnRuLWZnLWhvdmVyOiB2YXIoLS1icmFuZC1wcmltYXJ5KTtcXG4gICAgLS1idG4tZmctZm9jdXM6IHZhcigtLWJyYW5kLXByaW1hcnkpO1xcbiAgICAtLWJ0bi1ib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1icmFuZC1zZWNvbmRhcnkpO1xcbiAgICAtLWJ0bi1ib3JkZXItZm9jdXM6IDFweCBzb2xpZCB2YXIoLS1icmFuZC1wcmltYXJ5KTtcXG4gICAgLS1idG4tcGFkZGluZzogNHB4IDhweDtcXG4gICAgLS1idG4tbWFyZ2luOiAxcHggMnB4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBwYWRkaW5nOiB2YXIoLS1idG4tcGFkZGluZyk7XFxuICAgIG1hcmdpbjogdmFyKC0tYnRuLW1hcmdpbik7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gICAgY29sb3I6IHZhcigtLWJ0bi1mZyk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJ0bi1iZyk7XFxuICAgIGJvcmRlcjogdmFyKC0tYnRuLWJvcmRlcik7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjE1cyBlYXNlLWluLW91dCxcXG4gICAgICAgICAgICAgICAgY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsXFxuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dDtcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuIC5idG46aG92ZXJ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJ0bi1iZy1ob3Zlcik7XFxuICAgIGNvbG9yOiB2YXIoLS1idG4tZmctaG92ZXIpO1xcbn1cXG5cXG4uYnRuOmFjdGl2ZSwgLmJ0bjpmb2N1c3tcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYnRuLWJnLWZvY3VzKTtcXG4gICAgY29sb3I6IHZhcigtLWJ0bi1mZy1mb2N1cyk7XFxuICAgIGJvcmRlcjogdmFyKC0tYnRuLWJvcmRlci1mb2N1cyk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvYnV0dG9ucy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxpRkFBaUY7SUFDakYsc0NBQXNDO0lBQ3RDLG1DQUFtQztJQUNuQywrQkFBK0I7SUFDL0Isb0NBQW9DO0lBQ3BDLG9DQUFvQztJQUNwQyw4Q0FBOEM7SUFDOUMsa0RBQWtEO0lBQ2xELHNCQUFzQjtJQUN0QixxQkFBcUI7SUFDckIsc0JBQXNCO0lBQ3RCLDJCQUEyQjtJQUMzQix5QkFBeUI7SUFDekIscUJBQXFCO0lBQ3JCLG9CQUFvQjtJQUNwQiwrQkFBK0I7SUFDL0IseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQjs7OENBRTBDO0lBQzFDLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsYUFBYTtBQUNqQjs7Q0FFQztJQUNHLHFDQUFxQztJQUNyQywwQkFBMEI7QUFDOUI7O0FBRUE7SUFDSSxxQ0FBcUM7SUFDckMsMEJBQTBCO0lBQzFCLCtCQUErQjtBQUNuQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuYnRuIHtcXG4gICAgLS1idG4tYmc6IGhzbCh2YXIoLS1icmFuZC1zZWNvbmRhcnktaHVlKSwgdmFyKC0tYnJhbmQtc2Vjb25kYXJ5LXNhdHVyYXRpb24pLCA4MCUpO1xcbiAgICAtLWJ0bi1iZy1ob3ZlcjogdmFyKC0tYnJhbmQtc2Vjb25kYXJ5KTtcXG4gICAgLS1idG4tYmctZm9jdXM6IHZhcigtLWJ0bi1iZy1ob3Zlcik7XFxuICAgIC0tYnRuLWZnOiB2YXIoLS1icmFuZC10ZXJ0aWFyeSk7XFxuICAgIC0tYnRuLWZnLWhvdmVyOiB2YXIoLS1icmFuZC1wcmltYXJ5KTtcXG4gICAgLS1idG4tZmctZm9jdXM6IHZhcigtLWJyYW5kLXByaW1hcnkpO1xcbiAgICAtLWJ0bi1ib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1icmFuZC1zZWNvbmRhcnkpO1xcbiAgICAtLWJ0bi1ib3JkZXItZm9jdXM6IDFweCBzb2xpZCB2YXIoLS1icmFuZC1wcmltYXJ5KTtcXG4gICAgLS1idG4tcGFkZGluZzogNHB4IDhweDtcXG4gICAgLS1idG4tbWFyZ2luOiAxcHggMnB4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBwYWRkaW5nOiB2YXIoLS1idG4tcGFkZGluZyk7XFxuICAgIG1hcmdpbjogdmFyKC0tYnRuLW1hcmdpbik7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gICAgY29sb3I6IHZhcigtLWJ0bi1mZyk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJ0bi1iZyk7XFxuICAgIGJvcmRlcjogdmFyKC0tYnRuLWJvcmRlcik7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjE1cyBlYXNlLWluLW91dCxcXG4gICAgICAgICAgICAgICAgY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsXFxuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dDtcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuIC5idG46aG92ZXJ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJ0bi1iZy1ob3Zlcik7XFxuICAgIGNvbG9yOiB2YXIoLS1idG4tZmctaG92ZXIpO1xcbn1cXG5cXG4uYnRuOmFjdGl2ZSwgLmJ0bjpmb2N1c3tcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYnRuLWJnLWZvY3VzKTtcXG4gICAgY29sb3I6IHZhcigtLWJ0bi1mZy1mb2N1cyk7XFxuICAgIGJvcmRlcjogdmFyKC0tYnRuLWJvcmRlci1mb2N1cyk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImZpZWxkc2V0LmNvbnRyb2wtZ3JvdXB7XFxuICAgIC0tZmllbGRzZXQtYmc6IGhzbCh2YXIoLS1icmFuZC1zZWNvbmRhcnktaHVlKSwgdmFyKC0tYnJhbmQtc2Vjb25kYXJ5LXNhdHVyYXRpb24pLCA3MCUpO1xcbiAgICAtLWZpZWxkc2V0LWJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJyYW5kLXByaW1hcnkpO1xcbiAgICAtLWZpZWxkc2V0LW1hcmdpbjogMThweCBhdXRvO1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1maWVsZHNldC1iZyk7XFxuICAgIGNvbG9yOiB2YXIoLS1icmFuZC10ZXJ0aWFyeSk7XFxuICAgIGJvcmRlcjogdmFyKC0tZmllbGRzZXQtYm9yZGVyKTtcXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgICBtYXJnaW46IHZhcigtLWZpZWxkc2V0LW1hcmdpbilcXG59XFxuXFxuZmllbGRzZXQuY29udHJvbC1ncm91cCBsZWdlbmR7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcXG4gICAgdGV4dC1zaGFkb3c6IDAgMCAycHggdmFyKC0tYnJhbmQtdGVydGlhcnkpO1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2Zvcm1zLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHNGQUFzRjtJQUN0RixpREFBaUQ7SUFDakQsNEJBQTRCOztJQUU1QixvQ0FBb0M7SUFDcEMsNEJBQTRCO0lBQzVCLDhCQUE4QjtJQUM5QixrQkFBa0I7SUFDbEI7QUFDSjs7QUFFQTtJQUNJLHdCQUF3QjtJQUN4QiwwQ0FBMEM7SUFDMUMsZ0JBQWdCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImZpZWxkc2V0LmNvbnRyb2wtZ3JvdXB7XFxuICAgIC0tZmllbGRzZXQtYmc6IGhzbCh2YXIoLS1icmFuZC1zZWNvbmRhcnktaHVlKSwgdmFyKC0tYnJhbmQtc2Vjb25kYXJ5LXNhdHVyYXRpb24pLCA3MCUpO1xcbiAgICAtLWZpZWxkc2V0LWJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJyYW5kLXByaW1hcnkpO1xcbiAgICAtLWZpZWxkc2V0LW1hcmdpbjogMThweCBhdXRvO1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1maWVsZHNldC1iZyk7XFxuICAgIGNvbG9yOiB2YXIoLS1icmFuZC10ZXJ0aWFyeSk7XFxuICAgIGJvcmRlcjogdmFyKC0tZmllbGRzZXQtYm9yZGVyKTtcXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgICBtYXJnaW46IHZhcigtLWZpZWxkc2V0LW1hcmdpbilcXG59XFxuXFxuZmllbGRzZXQuY29udHJvbC1ncm91cCBsZWdlbmR7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcXG4gICAgdGV4dC1zaGFkb3c6IDAgMCAycHggdmFyKC0tYnJhbmQtdGVydGlhcnkpO1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIjY29udGFpbmVye1xcbiAgICAtLWNvbnRhaW5lci1wYWRkaW5nOiAyNHB4O1xcbiAgICAtLWNvbnRhaW5lci1tYXJnaW4tbWQ6IDE4cHg7XFxuICAgIC0tY29udHJvbHMtd2lkdGgtbWQ6IDI1MHB4O1xcblxcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiAnaGVhZGVyJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAnY29udHJvbHMnXFxuICAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50JztcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDIuNWVtIGF1dG8gMWZyO1xcbiAgICBncmlkLWdhcDogMnZoIDR2dztcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYnJhbmQtdGVydGlhcnkpO1xcbiAgICB0cmFuc2l0aW9uOiBtYXJnaW4gMC4yNXMgZWFzZTtcXG4gICAgcGFkZGluZzogdmFyKC0tY29udGFpbmVyLXBhZGRpbmcpO1xcbiAgICBtaW4taGVpZ2h0OiBjYWxjKDEwMHZoIC0gKHZhcigtLWNvbnRhaW5lci1tYXJnaW4tbWQpKjIpIC0gKHZhcigtLWNvbnRhaW5lci1wYWRkaW5nKSoyKSk7XFxufVxcblxcbiNoZWFkZXJ7XFxuICAgIGdyaWQtYXJlYTogaGVhZGVyO1xcbiAgICB0cmFuc2l0aW9uOiBub25lO1xcbn1cXG5cXG4jY29udHJvbHN7XFxuICAgIHRyYW5zaXRpb246IG5vbmU7XFxuICAgIGdyaWQtYXJlYTogY29udHJvbHM7XFxuICAgIHotaW5kZXg6IDI7XFxufVxcblxcbiNjb250ZW50e1xcbiAgICB0cmFuc2l0aW9uOiBub25lO1xcbiAgICBncmlkLWFyZWE6IGNvbnRlbnQ7XFxuICAgIHotaW5kZXg6IDE7XFxuICAgIG1heC13aWR0aDogY2FsYyg5MHZ3IC0gdmFyKC0tY29udGFpbmVyLXBhZGRpbmcpKTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBtYXJnaW46IDAgYXV0bztcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZzogMCAwIDEycHggMDtcXG4gICAgb3ZlcmZsb3cteDogYXV0bztcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcXG4gICAgI2NvbnRhaW5lcntcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICdoZWFkZXIgaGVhZGVyJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRyb2xzIGNvbnRlbnQnO1xcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiB2YXIoLS1jb250cm9scy13aWR0aC1tZCkgMWZyO1xcbiAgICAgICAgbWFyZ2luOiB2YXIoLS1jb250YWluZXItbWFyZ2luLW1kKTtcXG4gICAgICAgIGJveC1zaGFkb3c6IDVweCA1cHggNXB4IDBweCBoc2wodmFyKC0tYnJhbmQtdGVydGlhcnktaHVlKSwgdmFyKC0tYnJhbmQtdGVydGlhcnktc2F0dXJhdGlvbiksIDYlKTtcXG4gICAgfVxcblxcbiAgICAjY29udGVudHtcXG4gICAgICAgIG1heC13aWR0aDogY2FsYygxMDB2dyAtIHZhcigtLWNvbnRyb2xzLXdpZHRoLW1kKSk7XFxuICAgICAgICBwYWRkaW5nOiAwO1xcbiAgICAgICAgbWFyZ2luOiAwO1xcbiAgICB9XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvZ3JpZC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSx5QkFBeUI7SUFDekIsMkJBQTJCO0lBQzNCLDBCQUEwQjs7SUFFMUIsYUFBYTtJQUNiOztrQ0FFOEI7SUFDOUIsMkJBQTJCO0lBQzNCLGtDQUFrQztJQUNsQyxpQkFBaUI7SUFDakIsdUNBQXVDO0lBQ3ZDLDZCQUE2QjtJQUM3QixpQ0FBaUM7SUFDakMsdUZBQXVGO0FBQzNGOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsVUFBVTtBQUNkOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1YsZ0RBQWdEO0lBQ2hELFlBQVk7SUFDWixjQUFjO0lBQ2Qsc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSTtRQUNJOytDQUN1QztRQUN2QyxtREFBbUQ7UUFDbkQsa0NBQWtDO1FBQ2xDLGdHQUFnRztJQUNwRzs7SUFFQTtRQUNJLGlEQUFpRDtRQUNqRCxVQUFVO1FBQ1YsU0FBUztJQUNiO0FBQ0pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiI2NvbnRhaW5lcntcXG4gICAgLS1jb250YWluZXItcGFkZGluZzogMjRweDtcXG4gICAgLS1jb250YWluZXItbWFyZ2luLW1kOiAxOHB4O1xcbiAgICAtLWNvbnRyb2xzLXdpZHRoLW1kOiAyNTBweDtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogJ2hlYWRlcidcXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRyb2xzJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudCc7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTAwJTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAyLjVlbSBhdXRvIDFmcjtcXG4gICAgZ3JpZC1nYXA6IDJ2aCA0dnc7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJyYW5kLXRlcnRpYXJ5KTtcXG4gICAgdHJhbnNpdGlvbjogbWFyZ2luIDAuMjVzIGVhc2U7XFxuICAgIHBhZGRpbmc6IHZhcigtLWNvbnRhaW5lci1wYWRkaW5nKTtcXG4gICAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtICh2YXIoLS1jb250YWluZXItbWFyZ2luLW1kKSoyKSAtICh2YXIoLS1jb250YWluZXItcGFkZGluZykqMikpO1xcbn1cXG5cXG4jaGVhZGVye1xcbiAgICBncmlkLWFyZWE6IGhlYWRlcjtcXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcXG59XFxuXFxuI2NvbnRyb2xze1xcbiAgICB0cmFuc2l0aW9uOiBub25lO1xcbiAgICBncmlkLWFyZWE6IGNvbnRyb2xzO1xcbiAgICB6LWluZGV4OiAyO1xcbn1cXG5cXG4jY29udGVudHtcXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcXG4gICAgZ3JpZC1hcmVhOiBjb250ZW50O1xcbiAgICB6LWluZGV4OiAxO1xcbiAgICBtYXgtd2lkdGg6IGNhbGMoOTB2dyAtIHZhcigtLWNvbnRhaW5lci1wYWRkaW5nKSk7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIHBhZGRpbmc6IDAgMCAxMnB4IDA7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MHB4KSB7XFxuICAgICNjb250YWluZXJ7XFxuICAgICAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiAnaGVhZGVyIGhlYWRlcidcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb250cm9scyBjb250ZW50JztcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogdmFyKC0tY29udHJvbHMtd2lkdGgtbWQpIDFmcjtcXG4gICAgICAgIG1hcmdpbjogdmFyKC0tY29udGFpbmVyLW1hcmdpbi1tZCk7XFxuICAgICAgICBib3gtc2hhZG93OiA1cHggNXB4IDVweCAwcHggaHNsKHZhcigtLWJyYW5kLXRlcnRpYXJ5LWh1ZSksIHZhcigtLWJyYW5kLXRlcnRpYXJ5LXNhdHVyYXRpb24pLCA2JSk7XFxuICAgIH1cXG5cXG4gICAgI2NvbnRlbnR7XFxuICAgICAgICBtYXgtd2lkdGg6IGNhbGMoMTAwdncgLSB2YXIoLS1jb250cm9scy13aWR0aC1tZCkpO1xcbiAgICAgICAgcGFkZGluZzogMDtcXG4gICAgICAgIG1hcmdpbjogMDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZGlzcGxheS1zbSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uZGlzcGxheS1tZCB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MHB4KSB7XFxuICAgIC5kaXNwbGF5LXNtIHtcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIH1cXG5cXG4gICAgLmRpc3BsYXktbWQge1xcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgIH1cXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9yZXNwb25zaXZlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0k7UUFDSSxhQUFhO0lBQ2pCOztJQUVBO1FBQ0ksY0FBYztJQUNsQjtBQUNKXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5kaXNwbGF5LXNtIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5kaXNwbGF5LW1kIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcXG4gICAgLmRpc3BsYXktc20ge1xcbiAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgfVxcblxcbiAgICAuZGlzcGxheS1tZCB7XFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcXG4gICAgbWFyZ2luOiAwLjI1ZW0gMDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy90eXBvZ3JhcGh5LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGdCQUFnQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcXG4gICAgbWFyZ2luOiAwLjI1ZW0gMDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciAmJiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdKTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlZ1ZUNvbG9yPXQoKTplLlZ1ZUNvbG9yPXQoKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQocil7aWYobltyXSlyZXR1cm4gbltyXS5leHBvcnRzO3ZhciBpPW5bcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLHQpLGkubD0hMCxpLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIHQubT1lLHQuYz1uLHQuZD1mdW5jdGlvbihlLG4scil7dC5vKGUsbil8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LHQubj1mdW5jdGlvbihlKXt2YXIgbj1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gdC5kKG4sXCJhXCIsbiksbn0sdC5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSx0LnA9XCJcIix0KHQucz02MCl9KFtmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oZSx0KXt2YXIgbj1lWzFdfHxcIlwiLGk9ZVszXTtpZighaSlyZXR1cm4gbjtpZih0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hKXt2YXIgbz1yKGkpO3JldHVybltuXS5jb25jYXQoaS5zb3VyY2VzLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cIi8qIyBzb3VyY2VVUkw9XCIraS5zb3VyY2VSb290K2UrXCIgKi9cIn0pKS5jb25jYXQoW29dKS5qb2luKFwiXFxuXCIpfXJldHVybltuXS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIHIoZSl7cmV0dXJuXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoZSkpKSkrXCIgKi9cIn1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odCl7dmFyIHI9bih0LGUpO3JldHVybiB0WzJdP1wiQG1lZGlhIFwiK3RbMl0rXCJ7XCIrcitcIn1cIjpyfSkuam9pbihcIlwiKX0sdC5pPWZ1bmN0aW9uKGUsbil7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPVtbbnVsbCxlLFwiXCJdXSk7Zm9yKHZhciByPXt9LGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7dmFyIG89dGhpc1tpXVswXTtcIm51bWJlclwiPT10eXBlb2YgbyYmKHJbb109ITApfWZvcihpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciBhPWVbaV07XCJudW1iZXJcIj09dHlwZW9mIGFbMF0mJnJbYVswXV18fChuJiYhYVsyXT9hWzJdPW46biYmKGFbMl09XCIoXCIrYVsyXStcIikgYW5kIChcIituK1wiKVwiKSx0LnB1c2goYSkpfX0sdH19LGZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgbj1lW3RdLHI9dVtuLmlkXTtpZihyKXtyLnJlZnMrKztmb3IodmFyIGk9MDtpPHIucGFydHMubGVuZ3RoO2krKylyLnBhcnRzW2ldKG4ucGFydHNbaV0pO2Zvcig7aTxuLnBhcnRzLmxlbmd0aDtpKyspci5wYXJ0cy5wdXNoKG8obi5wYXJ0c1tpXSkpO3IucGFydHMubGVuZ3RoPm4ucGFydHMubGVuZ3RoJiYoci5wYXJ0cy5sZW5ndGg9bi5wYXJ0cy5sZW5ndGgpfWVsc2V7Zm9yKHZhciBhPVtdLGk9MDtpPG4ucGFydHMubGVuZ3RoO2krKylhLnB1c2gobyhuLnBhcnRzW2ldKSk7dVtuLmlkXT17aWQ6bi5pZCxyZWZzOjEscGFydHM6YX19fX1mdW5jdGlvbiBpKCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3JldHVybiBlLnR5cGU9XCJ0ZXh0L2Nzc1wiLGYuYXBwZW5kQ2hpbGQoZSksZX1mdW5jdGlvbiBvKGUpe3ZhciB0LG4scj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbXCIrYisnfj1cIicrZS5pZCsnXCJdJyk7aWYocil7aWYocClyZXR1cm4gdjtyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocil9aWYoeCl7dmFyIG89aCsrO3I9ZHx8KGQ9aSgpKSx0PWEuYmluZChudWxsLHIsbywhMSksbj1hLmJpbmQobnVsbCxyLG8sITApfWVsc2Ugcj1pKCksdD1zLmJpbmQobnVsbCxyKSxuPWZ1bmN0aW9uKCl7ci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHIpfTtyZXR1cm4gdChlKSxmdW5jdGlvbihyKXtpZihyKXtpZihyLmNzcz09PWUuY3NzJiZyLm1lZGlhPT09ZS5tZWRpYSYmci5zb3VyY2VNYXA9PT1lLnNvdXJjZU1hcClyZXR1cm47dChlPXIpfWVsc2UgbigpfX1mdW5jdGlvbiBhKGUsdCxuLHIpe3ZhciBpPW4/XCJcIjpyLmNzcztpZihlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9bSh0LGkpO2Vsc2V7dmFyIG89ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoaSksYT1lLmNoaWxkTm9kZXM7YVt0XSYmZS5yZW1vdmVDaGlsZChhW3RdKSxhLmxlbmd0aD9lLmluc2VydEJlZm9yZShvLGFbdF0pOmUuYXBwZW5kQ2hpbGQobyl9fWZ1bmN0aW9uIHMoZSx0KXt2YXIgbj10LmNzcyxyPXQubWVkaWEsaT10LnNvdXJjZU1hcDtpZihyJiZlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsciksZy5zc3JJZCYmZS5zZXRBdHRyaWJ1dGUoYix0LmlkKSxpJiYobis9XCJcXG4vKiMgc291cmNlVVJMPVwiK2kuc291cmNlc1swXStcIiAqL1wiLG4rPVwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShpKSkpKStcIiAqL1wiKSxlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9bjtlbHNle2Zvcig7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSl9fXZhciBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgREVCVUcmJkRFQlVHJiYhYyl0aHJvdyBuZXcgRXJyb3IoXCJ2dWUtc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQuIFVzZSB7IHRhcmdldDogJ25vZGUnIH0gaW4geW91ciBXZWJwYWNrIGNvbmZpZyB0byBpbmRpY2F0ZSBhIHNlcnZlci1yZW5kZXJpbmcgZW52aXJvbm1lbnQuXCIpO3ZhciBsPW4oNjQpLHU9e30sZj1jJiYoZG9jdW1lbnQuaGVhZHx8ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdKSxkPW51bGwsaD0wLHA9ITEsdj1mdW5jdGlvbigpe30sZz1udWxsLGI9XCJkYXRhLXZ1ZS1zc3ItaWRcIix4PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJi9tc2llIFs2LTldXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLGkpe3A9bixnPWl8fHt9O3ZhciBvPWwoZSx0KTtyZXR1cm4gcihvKSxmdW5jdGlvbih0KXtmb3IodmFyIG49W10saT0wO2k8by5sZW5ndGg7aSsrKXt2YXIgYT1vW2ldLHM9dVthLmlkXTtzLnJlZnMtLSxuLnB1c2gocyl9dD8obz1sKGUsdCkscihvKSk6bz1bXTtmb3IodmFyIGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIHM9bltpXTtpZigwPT09cy5yZWZzKXtmb3IodmFyIGM9MDtjPHMucGFydHMubGVuZ3RoO2MrKylzLnBhcnRzW2NdKCk7ZGVsZXRlIHVbcy5pZF19fX19O3ZhciBtPWZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuIGZ1bmN0aW9uKHQsbil7cmV0dXJuIGVbdF09bixlLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfX0oKX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpLG8pe3ZhciBhLHM9ZT1lfHx7fSxjPXR5cGVvZiBlLmRlZmF1bHQ7XCJvYmplY3RcIiE9PWMmJlwiZnVuY3Rpb25cIiE9PWN8fChhPWUscz1lLmRlZmF1bHQpO3ZhciBsPVwiZnVuY3Rpb25cIj09dHlwZW9mIHM/cy5vcHRpb25zOnM7dCYmKGwucmVuZGVyPXQucmVuZGVyLGwuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGwuX2NvbXBpbGVkPSEwKSxuJiYobC5mdW5jdGlvbmFsPSEwKSxpJiYobC5fc2NvcGVJZD1pKTt2YXIgdTtpZihvPyh1PWZ1bmN0aW9uKGUpe2U9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0LGV8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwoZT1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxyJiZyLmNhbGwodGhpcyxlKSxlJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cyYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxsLl9zc3JSZWdpc3Rlcj11KTpyJiYodT1yKSx1KXt2YXIgZj1sLmZ1bmN0aW9uYWwsZD1mP2wucmVuZGVyOmwuYmVmb3JlQ3JlYXRlO2Y/KGwuX2luamVjdFN0eWxlcz11LGwucmVuZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuY2FsbCh0KSxkKGUsdCl9KTpsLmJlZm9yZUNyZWF0ZT1kP1tdLmNvbmNhdChkLHUpOlt1XX1yZXR1cm57ZXNNb2R1bGU6YSxleHBvcnRzOnMsb3B0aW9uczpsfX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUsdCl7dmFyIG4scj1lJiZlLmE7IShuPWUmJmUuaHNsPygwLG8uZGVmYXVsdCkoZS5oc2wpOmUmJmUuaGV4JiZlLmhleC5sZW5ndGg+MD8oMCxvLmRlZmF1bHQpKGUuaGV4KTplJiZlLmhzdj8oMCxvLmRlZmF1bHQpKGUuaHN2KTplJiZlLnJnYmE/KDAsby5kZWZhdWx0KShlLnJnYmEpOmUmJmUucmdiPygwLG8uZGVmYXVsdCkoZS5yZ2IpOigwLG8uZGVmYXVsdCkoZSkpfHx2b2lkIDAhPT1uLl9hJiZudWxsIT09bi5fYXx8bi5zZXRBbHBoYShyfHwxKTt2YXIgaT1uLnRvSHNsKCksYT1uLnRvSHN2KCk7cmV0dXJuIDA9PT1pLnMmJihhLmg9aS5oPWUuaHx8ZS5oc2wmJmUuaHNsLmh8fHR8fDApLHtoc2w6aSxoZXg6bi50b0hleFN0cmluZygpLnRvVXBwZXJDYXNlKCksaGV4ODpuLnRvSGV4OFN0cmluZygpLnRvVXBwZXJDYXNlKCkscmdiYTpuLnRvUmdiKCksaHN2OmEsb2xkSHVlOmUuaHx8dHx8aS5oLHNvdXJjZTplLnNvdXJjZSxhOmUuYXx8bi5nZXRBbHBoYSgpfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDY1KSxvPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0oaSk7dC5kZWZhdWx0PXtwcm9wczpbXCJ2YWx1ZVwiXSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3ZhbDpyKHRoaXMudmFsdWUpfX0sY29tcHV0ZWQ6e2NvbG9yczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy52YWw9ZSx0aGlzLiRlbWl0KFwiaW5wdXRcIixlKX19fSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy52YWw9cihlKX19LG1ldGhvZHM6e2NvbG9yQ2hhbmdlOmZ1bmN0aW9uKGUsdCl7dGhpcy5vbGRIdWU9dGhpcy5jb2xvcnMuaHNsLmgsdGhpcy5jb2xvcnM9cihlLHR8fHRoaXMub2xkSHVlKX0saXNWYWxpZEhleDpmdW5jdGlvbihlKXtyZXR1cm4oMCxvLmRlZmF1bHQpKGUpLmlzVmFsaWQoKX0sc2ltcGxlQ2hlY2tGb3JWYWxpZENvbG9yOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXCJyXCIsXCJnXCIsXCJiXCIsXCJhXCIsXCJoXCIsXCJzXCIsXCJsXCIsXCJ2XCJdLG49MCxyPTAsaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbz10W2ldO2Vbb10mJihuKyssaXNOYU4oZVtvXSl8fHIrKyl9aWYobj09PXIpcmV0dXJuIGV9LHBhbGV0dGVVcHBlckNhc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRvVXBwZXJDYXNlKCl9KX0saXNUcmFuc3BhcmVudDpmdW5jdGlvbihlKXtyZXR1cm4gMD09PSgwLG8uZGVmYXVsdCkoZSkuZ2V0QWxwaGEoKX19fX0sZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmV4cG9ydHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XCJudW1iZXJcIj09dHlwZW9mIF9fZyYmKF9fZz1uKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y3x8big2Nil9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9bigzNiksbz1uLm4oaSk7Zm9yKHZhciBhIGluIGkpXCJkZWZhdWx0XCIhPT1hJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGlbZV19KX0oYSk7dmFyIHM9big2OCksYz0hMSxsPW4oMiksdT1yLGY9bChvLmEscy5hLCExLHUsbnVsbCxudWxsKTtmLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvY29tbW9uL0VkaXRhYmxlSW5wdXQudnVlXCIsdC5kZWZhdWx0PWYuZXhwb3J0c30sZnVuY3Rpb24oZSx0KXt2YXIgbj17fS5oYXNPd25Qcm9wZXJ0eTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jYWxsKGUsdCl9fSxmdW5jdGlvbihlLHQsbil7dmFyIHI9big4KSxpPW4oMTgpO2UuZXhwb3J0cz1uKDkpP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gci5mKGUsdCxpKDEsbikpfTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGVbdF09bixlfX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMTYpLGk9big0Miksbz1uKDI1KSxhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt0LmY9big5KT9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oZSx0LG4pe2lmKHIoZSksdD1vKHQsITApLHIobiksaSl0cnl7cmV0dXJuIGEoZSx0LG4pfWNhdGNoKGUpe31pZihcImdldFwiaW4gbnx8XCJzZXRcImluIG4pdGhyb3cgVHlwZUVycm9yKFwiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhXCIpO3JldHVyblwidmFsdWVcImluIG4mJihlW3RdPW4udmFsdWUpLGV9fSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPSFuKDE3KShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oOTApLGk9bigyNCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiByKGkoZSkpfX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMjkpKFwid2tzXCIpLGk9bigxOSksbz1uKDQpLlN5bWJvbCxhPVwiZnVuY3Rpb25cIj09dHlwZW9mIG87KGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gcltlXXx8KHJbZV09YSYmb1tlXXx8KGE/bzppKShcIlN5bWJvbC5cIitlKSl9KS5zdG9yZT1yfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZT9udWxsIT09ZTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y3x8bigxMTEpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW4oNTEpLG89bi5uKGkpO2Zvcih2YXIgYSBpbiBpKVwiZGVmYXVsdFwiIT09YSYmZnVuY3Rpb24oZSl7bi5kKHQsZSxmdW5jdGlvbigpe3JldHVybiBpW2VdfSl9KGEpO3ZhciBzPW4oMTEzKSxjPSExLGw9bigyKSx1PXIsZj1sKG8uYSxzLmEsITEsdSxudWxsLG51bGwpO2Yub3B0aW9ucy5fX2ZpbGU9XCJzcmMvY29tcG9uZW50cy9jb21tb24vSHVlLnZ1ZVwiLHQuZGVmYXVsdD1mLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSEwfSxmdW5jdGlvbihlLHQpe3ZhciBuPWUuZXhwb3J0cz17dmVyc2lvbjpcIjIuNi4xMVwifTtcIm51bWJlclwiPT10eXBlb2YgX19lJiYoX19lPW4pfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigxMik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFyKGUpKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhbiBvYmplY3QhXCIpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiEhZSgpfWNhdGNoKGUpe3JldHVybiEwfX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnR9fX0sZnVuY3Rpb24oZSx0KXt2YXIgbj0wLHI9TWF0aC5yYW5kb20oKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuXCJTeW1ib2woXCIuY29uY2F0KHZvaWQgMD09PWU/XCJcIjplLFwiKV9cIiwoKytuK3IpLnRvU3RyaW5nKDM2KSl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtjfHxuKDEyMyl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9big1NCksbz1uLm4oaSk7Zm9yKHZhciBhIGluIGkpXCJkZWZhdWx0XCIhPT1hJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGlbZV19KX0oYSk7dmFyIHM9bigxMjcpLGM9ITEsbD1uKDIpLHU9cixmPWwoby5hLHMuYSwhMSx1LG51bGwsbnVsbCk7Zi5vcHRpb25zLl9fZmlsZT1cInNyYy9jb21wb25lbnRzL2NvbW1vbi9TYXR1cmF0aW9uLnZ1ZVwiLHQuZGVmYXVsdD1mLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oMTI4KX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDU1KSxvPW4ubihpKTtmb3IodmFyIGEgaW4gaSlcImRlZmF1bHRcIiE9PWEmJmZ1bmN0aW9uKGUpe24uZCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gaVtlXX0pfShhKTt2YXIgcz1uKDEzMyksYz0hMSxsPW4oMiksdT1yLGY9bChvLmEscy5hLCExLHUsbnVsbCxudWxsKTtmLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvY29tbW9uL0FscGhhLnZ1ZVwiLHQuZGVmYXVsdD1mLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oMTMwKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDU2KSxvPW4ubihpKTtmb3IodmFyIGEgaW4gaSlcImRlZmF1bHRcIiE9PWEmJmZ1bmN0aW9uKGUpe24uZCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gaVtlXX0pfShhKTt2YXIgcz1uKDEzMiksYz0hMSxsPW4oMiksdT1yLGY9bChvLmEscy5hLCExLHUsbnVsbCxudWxsKTtmLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvY29tbW9uL0NoZWNrYm9hcmQudnVlXCIsdC5kZWZhdWx0PWYuZXhwb3J0c30sZnVuY3Rpb24oZSx0KXt2YXIgbj1NYXRoLmNlaWwscj1NYXRoLmZsb29yO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaXNOYU4oZT0rZSk/MDooZT4wP3I6bikoZSl9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PWUpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiK2UpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMTIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKCFyKGUpKXJldHVybiBlO3ZhciBuLGk7aWYodCYmXCJmdW5jdGlvblwiPT10eXBlb2Yobj1lLnRvU3RyaW5nKSYmIXIoaT1uLmNhbGwoZSkpKXJldHVybiBpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mKG49ZS52YWx1ZU9mKSYmIXIoaT1uLmNhbGwoZSkpKXJldHVybiBpO2lmKCF0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZihuPWUudG9TdHJpbmcpJiYhcihpPW4uY2FsbChlKSkpcmV0dXJuIGk7dGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9e319LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDQ2KSxpPW4oMzApO2UuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7cmV0dXJuIHIoZSxpKX19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDI5KShcImtleXNcIiksaT1uKDE5KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHJbZV18fChyW2VdPWkoZSkpfX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMTUpLGk9big0KSxvPWlbXCJfX2NvcmUtanNfc2hhcmVkX19cIl18fChpW1wiX19jb3JlLWpzX3NoYXJlZF9fXCJdPXt9KTsoZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG9bZV18fChvW2VdPXZvaWQgMCE9PXQ/dDp7fSl9KShcInZlcnNpb25zXCIsW10pLnB1c2goe3ZlcnNpb246ci52ZXJzaW9uLG1vZGU6bigxNCk/XCJwdXJlXCI6XCJnbG9iYWxcIixjb3B5cmlnaHQ6XCLCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpXCJ9KX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9XCJjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2ZcIi5zcGxpdChcIixcIil9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDgpLmYsaT1uKDYpLG89bigxMSkoXCJ0b1N0cmluZ1RhZ1wiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4pe2UmJiFpKGU9bj9lOmUucHJvdG90eXBlLG8pJiZyKGUsbyx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnR9KX19LGZ1bmN0aW9uKGUsdCxuKXt0LmY9bigxMSl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDQpLGk9bigxNSksbz1uKDE0KSxhPW4oMzIpLHM9big4KS5mO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1pLlN5bWJvbHx8KGkuU3ltYm9sPW8/e306ci5TeW1ib2x8fHt9KTtcIl9cIj09ZS5jaGFyQXQoMCl8fGUgaW4gdHx8cyh0LGUse3ZhbHVlOmEuZihlKX0pfX0sZnVuY3Rpb24oZSx0KXt0LmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDMpLG89cihpKSxhPW4oNSkscz1yKGEpLGM9W1wiIzRENEQ0RFwiLFwiIzk5OTk5OVwiLFwiI0ZGRkZGRlwiLFwiI0Y0NEUzQlwiLFwiI0ZFOTIwMFwiLFwiI0ZDREMwMFwiLFwiI0RCREYwMFwiLFwiI0E0REQwMFwiLFwiIzY4Q0NDQVwiLFwiIzczRDhGRlwiLFwiI0FFQTFGRlwiLFwiI0ZEQTFGRlwiLFwiIzMzMzMzM1wiLFwiIzgwODA4MFwiLFwiI0NDQ0NDQ1wiLFwiI0QzMzExNVwiLFwiI0UyNzMwMFwiLFwiI0ZDQzQwMFwiLFwiI0IwQkMwMFwiLFwiIzY4QkMwMFwiLFwiIzE2QTVBNVwiLFwiIzAwOUNFMFwiLFwiIzdCNjRGRlwiLFwiI0ZBMjhGRlwiLFwiIzAwMDAwMFwiLFwiIzY2NjY2NlwiLFwiI0IzQjNCM1wiLFwiIzlGMDUwMFwiLFwiI0M0NTEwMFwiLFwiI0ZCOUUwMFwiLFwiIzgwODkwMFwiLFwiIzE5NEQzM1wiLFwiIzBDNzk3RFwiLFwiIzAwNjJCMVwiLFwiIzY1MzI5NFwiLFwiI0FCMTQ5RVwiXTt0LmRlZmF1bHQ9e25hbWU6XCJDb21wYWN0XCIsbWl4aW5zOltvLmRlZmF1bHRdLHByb3BzOntwYWxldHRlOnt0eXBlOkFycmF5LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gY319fSxjb21wb25lbnRzOntcImVkLWluXCI6cy5kZWZhdWx0fSxjb21wdXRlZDp7cGljazpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbG9ycy5oZXgudG9VcHBlckNhc2UoKX19LG1ldGhvZHM6e2hhbmRsZXJDbGljazpmdW5jdGlvbihlKXt0aGlzLmNvbG9yQ2hhbmdlKHtoZXg6ZSxzb3VyY2U6XCJoZXhcIn0pfX19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PXtuYW1lOlwiZWRpdGFibGVJbnB1dFwiLHByb3BzOntsYWJlbDpTdHJpbmcsbGFiZWxUZXh0OlN0cmluZyxkZXNjOlN0cmluZyx2YWx1ZTpbU3RyaW5nLE51bWJlcl0sbWF4Ok51bWJlcixtaW46TnVtYmVyLGFycm93T2Zmc2V0Ont0eXBlOk51bWJlcixkZWZhdWx0OjF9fSxjb21wdXRlZDp7dmFsOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZX0sc2V0OmZ1bmN0aW9uKGUpe2lmKCEodm9pZCAwIT09dGhpcy5tYXgmJitlPnRoaXMubWF4KSlyZXR1cm4gZTt0aGlzLiRyZWZzLmlucHV0LnZhbHVlPXRoaXMubWF4fX0sbGFiZWxJZDpmdW5jdGlvbigpe3JldHVyblwiaW5wdXRfX2xhYmVsX19cIit0aGlzLmxhYmVsK1wiX19cIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc2xpY2UoMiw1KX0sbGFiZWxTcGFuVGV4dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxhYmVsVGV4dHx8dGhpcy5sYWJlbH19LG1ldGhvZHM6e3VwZGF0ZTpmdW5jdGlvbihlKXt0aGlzLmhhbmRsZUNoYW5nZShlLnRhcmdldC52YWx1ZSl9LGhhbmRsZUNoYW5nZTpmdW5jdGlvbihlKXt2YXIgdD17fTt0W3RoaXMubGFiZWxdPWUsdm9pZCAwPT09dC5oZXgmJnZvaWQgMD09PXRbXCIjXCJdP3RoaXMuJGVtaXQoXCJjaGFuZ2VcIix0KTplLmxlbmd0aD41JiZ0aGlzLiRlbWl0KFwiY2hhbmdlXCIsdCl9LGhhbmRsZUtleURvd246ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy52YWwsbj1OdW1iZXIodCk7aWYobil7dmFyIHI9dGhpcy5hcnJvd09mZnNldHx8MTszOD09PWUua2V5Q29kZSYmKHQ9bityLHRoaXMuaGFuZGxlQ2hhbmdlKHQpLGUucHJldmVudERlZmF1bHQoKSksNDA9PT1lLmtleUNvZGUmJih0PW4tcix0aGlzLmhhbmRsZUNoYW5nZSh0KSxlLnByZXZlbnREZWZhdWx0KCkpfX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPW4oMyksaT1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KHIpLG89W1wiI0ZGRkZGRlwiLFwiI0YyRjJGMlwiLFwiI0U2RTZFNlwiLFwiI0Q5RDlEOVwiLFwiI0NDQ0NDQ1wiLFwiI0JGQkZCRlwiLFwiI0IzQjNCM1wiLFwiI0E2QTZBNlwiLFwiIzk5OTk5OVwiLFwiIzhDOEM4Q1wiLFwiIzgwODA4MFwiLFwiIzczNzM3M1wiLFwiIzY2NjY2NlwiLFwiIzU5NTk1OVwiLFwiIzRENEQ0RFwiLFwiIzQwNDA0MFwiLFwiIzMzMzMzM1wiLFwiIzI2MjYyNlwiLFwiIzBEMEQwRFwiLFwiIzAwMDAwMFwiXTt0LmRlZmF1bHQ9e25hbWU6XCJHcmF5c2NhbGVcIixtaXhpbnM6W2kuZGVmYXVsdF0scHJvcHM6e3BhbGV0dGU6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybiBvfX19LGNvbXBvbmVudHM6e30sY29tcHV0ZWQ6e3BpY2s6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb2xvcnMuaGV4LnRvVXBwZXJDYXNlKCl9fSxtZXRob2RzOntoYW5kbGVyQ2xpY2s6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvckNoYW5nZSh7aGV4OmUsc291cmNlOlwiaGV4XCJ9KX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW4oNSksbz1yKGkpLGE9bigzKSxzPXIoYSk7dC5kZWZhdWx0PXtuYW1lOlwiTWF0ZXJpYWxcIixtaXhpbnM6W3MuZGVmYXVsdF0sY29tcG9uZW50czp7XCJlZC1pblwiOm8uZGVmYXVsdH0sbWV0aG9kczp7b25DaGFuZ2U6ZnVuY3Rpb24oZSl7ZSYmKGUuaGV4P3RoaXMuaXNWYWxpZEhleChlLmhleCkmJnRoaXMuY29sb3JDaGFuZ2Uoe2hleDplLmhleCxzb3VyY2U6XCJoZXhcIn0pOihlLnJ8fGUuZ3x8ZS5iKSYmdGhpcy5jb2xvckNoYW5nZSh7cjplLnJ8fHRoaXMuY29sb3JzLnJnYmEucixnOmUuZ3x8dGhpcy5jb2xvcnMucmdiYS5nLGI6ZS5ifHx0aGlzLmNvbG9ycy5yZ2JhLmIsYTplLmF8fHRoaXMuY29sb3JzLnJnYmEuYSxzb3VyY2U6XCJyZ2JhXCJ9KSl9fX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDgxKSxvPXIoaSksYT1uKDMpLHM9cihhKSxjPW4oMTMpLGw9cihjKTt0LmRlZmF1bHQ9e25hbWU6XCJTbGlkZXJcIixtaXhpbnM6W3MuZGVmYXVsdF0scHJvcHM6e3N3YXRjaGVzOnt0eXBlOkFycmF5LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm5be3M6LjUsbDouOH0se3M6LjUsbDouNjV9LHtzOi41LGw6LjV9LHtzOi41LGw6LjM1fSx7czouNSxsOi4yfV19fX0sY29tcG9uZW50czp7aHVlOmwuZGVmYXVsdH0sY29tcHV0ZWQ6e25vcm1hbGl6ZWRTd2F0Y2hlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN3YXRjaGVzLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiIT09KHZvaWQgMD09PWU/XCJ1bmRlZmluZWRcIjooMCxvLmRlZmF1bHQpKGUpKT97czouNSxsOmV9OmV9KX19LG1ldGhvZHM6e2lzQWN0aXZlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5jb2xvcnMuaHNsO3JldHVybiAxPT09bi5sJiYxPT09ZS5sfHwoMD09PW4ubCYmMD09PWUubHx8TWF0aC5hYnMobi5sLWUubCk8LjAxJiZNYXRoLmFicyhuLnMtZS5zKTwuMDEpfSxodWVDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvckNoYW5nZShlKX0saGFuZGxlU3dDbGljazpmdW5jdGlvbihlLHQpe3RoaXMuY29sb3JDaGFuZ2Uoe2g6dGhpcy5jb2xvcnMuaHNsLmgsczp0LnMsbDp0Lmwsc291cmNlOlwiaHNsXCJ9KX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMTQpLGk9big0MSksbz1uKDQ0KSxhPW4oNykscz1uKDI2KSxjPW4oODgpLGw9bigzMSksdT1uKDk1KSxmPW4oMTEpKFwiaXRlcmF0b3JcIiksZD0hKFtdLmtleXMmJlwibmV4dFwiaW5bXS5rZXlzKCkpLGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHAsdixnLGIpe2Mobix0LHApO3ZhciB4LG0sXyx3PWZ1bmN0aW9uKGUpe2lmKCFkJiZlIGluIEYpcmV0dXJuIEZbZV07c3dpdGNoKGUpe2Nhc2VcImtleXNcIjpjYXNlXCJ2YWx1ZXNcIjpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4odGhpcyxlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKHRoaXMsZSl9fSx5PXQrXCIgSXRlcmF0b3JcIixDPVwidmFsdWVzXCI9PXYsaz0hMSxGPWUucHJvdG90eXBlLFM9RltmXXx8RltcIkBAaXRlcmF0b3JcIl18fHYmJkZbdl0sQT1TfHx3KHYpLE89dj9DP3coXCJlbnRyaWVzXCIpOkE6dm9pZCAwLEU9XCJBcnJheVwiPT10P0YuZW50cmllc3x8UzpTO2lmKEUmJihfPXUoRS5jYWxsKG5ldyBlKSkpIT09T2JqZWN0LnByb3RvdHlwZSYmXy5uZXh0JiYobChfLHksITApLHJ8fFwiZnVuY3Rpb25cIj09dHlwZW9mIF9bZl18fGEoXyxmLGgpKSxDJiZTJiZcInZhbHVlc1wiIT09Uy5uYW1lJiYoaz0hMCxBPWZ1bmN0aW9uKCl7cmV0dXJuIFMuY2FsbCh0aGlzKX0pLHImJiFifHwhZCYmIWsmJkZbZl18fGEoRixmLEEpLHNbdF09QSxzW3ldPWgsdilpZih4PXt2YWx1ZXM6Qz9BOncoXCJ2YWx1ZXNcIiksa2V5czpnP0E6dyhcImtleXNcIiksZW50cmllczpPfSxiKWZvcihtIGluIHgpbSBpbiBGfHxvKEYsbSx4W21dKTtlbHNlIGkoaS5QK2kuRiooZHx8ayksdCx4KTtyZXR1cm4geH19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDQpLGk9bigxNSksbz1uKDg2KSxhPW4oNykscz1uKDYpLGM9ZnVuY3Rpb24oZSx0LG4pe3ZhciBsLHUsZixkPWUmYy5GLGg9ZSZjLkcscD1lJmMuUyx2PWUmYy5QLGc9ZSZjLkIsYj1lJmMuVyx4PWg/aTppW3RdfHwoaVt0XT17fSksbT14LnByb3RvdHlwZSxfPWg/cjpwP3JbdF06KHJbdF18fHt9KS5wcm90b3R5cGU7aCYmKG49dCk7Zm9yKGwgaW4gbikodT0hZCYmXyYmdm9pZCAwIT09X1tsXSkmJnMoeCxsKXx8KGY9dT9fW2xdOm5bbF0seFtsXT1oJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBfW2xdP25bbF06ZyYmdT9vKGYscik6YiYmX1tsXT09Zj9mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbih0LG4scil7aWYodGhpcyBpbnN0YW5jZW9mIGUpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyBlO2Nhc2UgMTpyZXR1cm4gbmV3IGUodCk7Y2FzZSAyOnJldHVybiBuZXcgZSh0LG4pfXJldHVybiBuZXcgZSh0LG4scil9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gdC5wcm90b3R5cGU9ZS5wcm90b3R5cGUsdH0oZik6diYmXCJmdW5jdGlvblwiPT10eXBlb2YgZj9vKEZ1bmN0aW9uLmNhbGwsZik6Zix2JiYoKHgudmlydHVhbHx8KHgudmlydHVhbD17fSkpW2xdPWYsZSZjLlImJm0mJiFtW2xdJiZhKG0sbCxmKSkpfTtjLkY9MSxjLkc9MixjLlM9NCxjLlA9OCxjLkI9MTYsYy5XPTMyLGMuVT02NCxjLlI9MTI4LGUuZXhwb3J0cz1jfSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPSFuKDkpJiYhbigxNykoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KG4oNDMpKFwiZGl2XCIpLFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDEyKSxpPW4oNCkuZG9jdW1lbnQsbz1yKGkpJiZyKGkuY3JlYXRlRWxlbWVudCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBvP2kuY3JlYXRlRWxlbWVudChlKTp7fX19LGZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9big3KX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMTYpLGk9big4OSksbz1uKDMwKSxhPW4oMjgpKFwiSUVfUFJPVE9cIikscz1mdW5jdGlvbigpe30sYz1mdW5jdGlvbigpe3ZhciBlLHQ9big0MykoXCJpZnJhbWVcIikscj1vLmxlbmd0aDtmb3IodC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLG4oOTQpLmFwcGVuZENoaWxkKHQpLHQuc3JjPVwiamF2YXNjcmlwdDpcIixlPXQuY29udGVudFdpbmRvdy5kb2N1bWVudCxlLm9wZW4oKSxlLndyaXRlKFwiPHNjcmlwdD5kb2N1bWVudC5GPU9iamVjdDxcXC9zY3JpcHQ+XCIpLGUuY2xvc2UoKSxjPWUuRjtyLS07KWRlbGV0ZSBjLnByb3RvdHlwZVtvW3JdXTtyZXR1cm4gYygpfTtlLmV4cG9ydHM9T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4gbnVsbCE9PWU/KHMucHJvdG90eXBlPXIoZSksbj1uZXcgcyxzLnByb3RvdHlwZT1udWxsLG5bYV09ZSk6bj1jKCksdm9pZCAwPT09dD9uOmkobix0KX19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDYpLGk9bigxMCksbz1uKDkxKSghMSksYT1uKDI4KShcIklFX1BST1RPXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuLHM9aShlKSxjPTAsbD1bXTtmb3IobiBpbiBzKW4hPWEmJnIocyxuKSYmbC5wdXNoKG4pO2Zvcig7dC5sZW5ndGg+YzspcihzLG49dFtjKytdKSYmKH5vKGwsbil8fGwucHVzaChuKSk7cmV0dXJuIGx9fSxmdW5jdGlvbihlLHQpe3ZhciBuPXt9LnRvU3RyaW5nO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbi5jYWxsKGUpLnNsaWNlKDgsLTEpfX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMjQpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0KHIoZSkpfX0sZnVuY3Rpb24oZSx0KXt0LmY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNDYpLGk9bigzMCkuY29uY2F0KFwibGVuZ3RoXCIsXCJwcm90b3R5cGVcIik7dC5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbihlKXtyZXR1cm4gcihlLGkpfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD17bmFtZTpcIkh1ZVwiLHByb3BzOnt2YWx1ZTpPYmplY3QsZGlyZWN0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiaG9yaXpvbnRhbFwifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntvbGRIdWU6MCxwdWxsRGlyZWN0aW9uOlwiXCJ9fSxjb21wdXRlZDp7Y29sb3JzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy52YWx1ZS5oc2wuaDtyZXR1cm4gMCE9PWUmJmUtdGhpcy5vbGRIdWU+MCYmKHRoaXMucHVsbERpcmVjdGlvbj1cInJpZ2h0XCIpLDAhPT1lJiZlLXRoaXMub2xkSHVlPDAmJih0aGlzLnB1bGxEaXJlY3Rpb249XCJsZWZ0XCIpLHRoaXMub2xkSHVlPWUsdGhpcy52YWx1ZX0sZGlyZWN0aW9uQ2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm57XCJ2Yy1odWUtLWhvcml6b250YWxcIjpcImhvcml6b250YWxcIj09PXRoaXMuZGlyZWN0aW9uLFwidmMtaHVlLS12ZXJ0aWNhbFwiOlwidmVydGljYWxcIj09PXRoaXMuZGlyZWN0aW9ufX0scG9pbnRlclRvcDpmdW5jdGlvbigpe3JldHVyblwidmVydGljYWxcIj09PXRoaXMuZGlyZWN0aW9uPzA9PT10aGlzLmNvbG9ycy5oc2wuaCYmXCJyaWdodFwiPT09dGhpcy5wdWxsRGlyZWN0aW9uPzA6LTEwMCp0aGlzLmNvbG9ycy5oc2wuaC8zNjArMTAwK1wiJVwiOjB9LHBvaW50ZXJMZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuXCJ2ZXJ0aWNhbFwiPT09dGhpcy5kaXJlY3Rpb24/MDowPT09dGhpcy5jb2xvcnMuaHNsLmgmJlwicmlnaHRcIj09PXRoaXMucHVsbERpcmVjdGlvbj9cIjEwMCVcIjoxMDAqdGhpcy5jb2xvcnMuaHNsLmgvMzYwK1wiJVwifX0sbWV0aG9kczp7aGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGUsdCl7IXQmJmUucHJldmVudERlZmF1bHQoKTt2YXIgbj10aGlzLiRyZWZzLmNvbnRhaW5lcjtpZihuKXt2YXIgcixpLG89bi5jbGllbnRXaWR0aCxhPW4uY2xpZW50SGVpZ2h0LHM9bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0K3dpbmRvdy5wYWdlWE9mZnNldCxjPW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wK3dpbmRvdy5wYWdlWU9mZnNldCxsPWUucGFnZVh8fChlLnRvdWNoZXM/ZS50b3VjaGVzWzBdLnBhZ2VYOjApLHU9ZS5wYWdlWXx8KGUudG91Y2hlcz9lLnRvdWNoZXNbMF0ucGFnZVk6MCksZj1sLXMsZD11LWM7XCJ2ZXJ0aWNhbFwiPT09dGhpcy5kaXJlY3Rpb24/KGQ8MD9yPTM2MDpkPmE/cj0wOihpPS0xMDAqZC9hKzEwMCxyPTM2MCppLzEwMCksdGhpcy5jb2xvcnMuaHNsLmghPT1yJiZ0aGlzLiRlbWl0KFwiY2hhbmdlXCIse2g6cixzOnRoaXMuY29sb3JzLmhzbC5zLGw6dGhpcy5jb2xvcnMuaHNsLmwsYTp0aGlzLmNvbG9ycy5oc2wuYSxzb3VyY2U6XCJoc2xcIn0pKTooZjwwP3I9MDpmPm8/cj0zNjA6KGk9MTAwKmYvbyxyPTM2MCppLzEwMCksdGhpcy5jb2xvcnMuaHNsLmghPT1yJiZ0aGlzLiRlbWl0KFwiY2hhbmdlXCIse2g6cixzOnRoaXMuY29sb3JzLmhzbC5zLGw6dGhpcy5jb2xvcnMuaHNsLmwsYTp0aGlzLmNvbG9ycy5oc2wuYSxzb3VyY2U6XCJoc2xcIn0pKX19LGhhbmRsZU1vdXNlRG93bjpmdW5jdGlvbihlKXt0aGlzLmhhbmRsZUNoYW5nZShlLCEwKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlQ2hhbmdlKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApfSxoYW5kbGVNb3VzZVVwOmZ1bmN0aW9uKGUpe3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKX0sdW5iaW5kRXZlbnRMaXN0ZW5lcnM6ZnVuY3Rpb24oKXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlQ2hhbmdlKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApfX19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9bigxMTgpLG89cihpKSxhPW4oMykscz1yKGEpLGM9W1wicmVkXCIsXCJwaW5rXCIsXCJwdXJwbGVcIixcImRlZXBQdXJwbGVcIixcImluZGlnb1wiLFwiYmx1ZVwiLFwibGlnaHRCbHVlXCIsXCJjeWFuXCIsXCJ0ZWFsXCIsXCJncmVlblwiLFwibGlnaHRHcmVlblwiLFwibGltZVwiLFwieWVsbG93XCIsXCJhbWJlclwiLFwib3JhbmdlXCIsXCJkZWVwT3JhbmdlXCIsXCJicm93blwiLFwiYmx1ZUdyZXlcIixcImJsYWNrXCJdLGw9W1wiOTAwXCIsXCI3MDBcIixcIjUwMFwiLFwiMzAwXCIsXCIxMDBcIl0sdT1mdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiBjLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG49W107XCJibGFja1wiPT09dC50b0xvd2VyQ2FzZSgpfHxcIndoaXRlXCI9PT10LnRvTG93ZXJDYXNlKCk/bj1uLmNvbmNhdChbXCIjMDAwMDAwXCIsXCIjRkZGRkZGXCJdKTpsLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHI9by5kZWZhdWx0W3RdW2VdO24ucHVzaChyLnRvVXBwZXJDYXNlKCkpfSksZS5wdXNoKG4pfSksZX0oKTt0LmRlZmF1bHQ9e25hbWU6XCJTd2F0Y2hlc1wiLG1peGluczpbcy5kZWZhdWx0XSxwcm9wczp7cGFsZXR0ZTp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9fX0sY29tcHV0ZWQ6e3BpY2s6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb2xvcnMuaGV4fX0sbWV0aG9kczp7ZXF1YWw6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9Mb3dlckNhc2UoKT09PXRoaXMuY29sb3JzLmhleC50b0xvd2VyQ2FzZSgpfSxoYW5kbGVyQ2xpY2s6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvckNoYW5nZSh7aGV4OmUsc291cmNlOlwiaGV4XCJ9KX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW4oMyksbz1yKGkpLGE9big1KSxzPXIoYSksYz1uKDIwKSxsPXIoYyksdT1uKDEzKSxmPXIodSksZD1uKDIxKSxoPXIoZCk7dC5kZWZhdWx0PXtuYW1lOlwiUGhvdG9zaG9wXCIsbWl4aW5zOltvLmRlZmF1bHRdLHByb3BzOntoZWFkOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiQ29sb3IgUGlja2VyXCJ9LGRpc2FibGVGaWVsZHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxoYXNSZXNldEJ1dHRvbjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGFjY2VwdExhYmVsOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiT0tcIn0sY2FuY2VsTGFiZWw6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJDYW5jZWxcIn0scmVzZXRMYWJlbDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlJlc2V0XCJ9LG5ld0xhYmVsOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwibmV3XCJ9LGN1cnJlbnRMYWJlbDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImN1cnJlbnRcIn19LGNvbXBvbmVudHM6e3NhdHVyYXRpb246bC5kZWZhdWx0LGh1ZTpmLmRlZmF1bHQsYWxwaGE6aC5kZWZhdWx0LFwiZWQtaW5cIjpzLmRlZmF1bHR9LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudENvbG9yOlwiI0ZGRlwifX0sY29tcHV0ZWQ6e2hzdjpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY29sb3JzLmhzdjtyZXR1cm57aDplLmgudG9GaXhlZCgpLHM6KDEwMCplLnMpLnRvRml4ZWQoKSx2OigxMDAqZS52KS50b0ZpeGVkKCl9fSxoZXg6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbG9ycy5oZXg7cmV0dXJuIGUmJmUucmVwbGFjZShcIiNcIixcIlwiKX19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmN1cnJlbnRDb2xvcj10aGlzLmNvbG9ycy5oZXh9LG1ldGhvZHM6e2NoaWxkQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMuY29sb3JDaGFuZ2UoZSl9LGlucHV0Q2hhbmdlOmZ1bmN0aW9uKGUpe2UmJihlW1wiI1wiXT90aGlzLmlzVmFsaWRIZXgoZVtcIiNcIl0pJiZ0aGlzLmNvbG9yQ2hhbmdlKHtoZXg6ZVtcIiNcIl0sc291cmNlOlwiaGV4XCJ9KTplLnJ8fGUuZ3x8ZS5ifHxlLmE/dGhpcy5jb2xvckNoYW5nZSh7cjplLnJ8fHRoaXMuY29sb3JzLnJnYmEucixnOmUuZ3x8dGhpcy5jb2xvcnMucmdiYS5nLGI6ZS5ifHx0aGlzLmNvbG9ycy5yZ2JhLmIsYTplLmF8fHRoaXMuY29sb3JzLnJnYmEuYSxzb3VyY2U6XCJyZ2JhXCJ9KTooZS5ofHxlLnN8fGUudikmJnRoaXMuY29sb3JDaGFuZ2Uoe2g6ZS5ofHx0aGlzLmNvbG9ycy5oc3YuaCxzOmUucy8xMDB8fHRoaXMuY29sb3JzLmhzdi5zLHY6ZS52LzEwMHx8dGhpcy5jb2xvcnMuaHN2LnYsc291cmNlOlwiaHN2XCJ9KSl9LGNsaWNrQ3VycmVudENvbG9yOmZ1bmN0aW9uKCl7dGhpcy5jb2xvckNoYW5nZSh7aGV4OnRoaXMuY3VycmVudENvbG9yLHNvdXJjZTpcImhleFwifSl9LGhhbmRsZUFjY2VwdDpmdW5jdGlvbigpe3RoaXMuJGVtaXQoXCJva1wiKX0saGFuZGxlQ2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdChcImNhbmNlbFwiKX0saGFuZGxlUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KFwicmVzZXRcIil9fX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDEyNSksbz1yKGkpLGE9bigxMjYpLHM9cihhKTt0LmRlZmF1bHQ9e25hbWU6XCJTYXR1cmF0aW9uXCIscHJvcHM6e3ZhbHVlOk9iamVjdH0sY29tcHV0ZWQ6e2NvbG9yczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfSxiZ0NvbG9yOmZ1bmN0aW9uKCl7cmV0dXJuXCJoc2woXCIrdGhpcy5jb2xvcnMuaHN2LmgrXCIsIDEwMCUsIDUwJSlcIn0scG9pbnRlclRvcDpmdW5jdGlvbigpe3JldHVybi0xMDAqdGhpcy5jb2xvcnMuaHN2LnYrMSsxMDArXCIlXCJ9LHBvaW50ZXJMZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIDEwMCp0aGlzLmNvbG9ycy5oc3YucytcIiVcIn19LG1ldGhvZHM6e3Rocm90dGxlOigwLHMuZGVmYXVsdCkoZnVuY3Rpb24oZSx0KXtlKHQpfSwyMCx7bGVhZGluZzohMCx0cmFpbGluZzohMX0pLGhhbmRsZUNoYW5nZTpmdW5jdGlvbihlLHQpeyF0JiZlLnByZXZlbnREZWZhdWx0KCk7dmFyIG49dGhpcy4kcmVmcy5jb250YWluZXI7aWYobil7dmFyIHI9bi5jbGllbnRXaWR0aCxpPW4uY2xpZW50SGVpZ2h0LGE9bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0K3dpbmRvdy5wYWdlWE9mZnNldCxzPW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wK3dpbmRvdy5wYWdlWU9mZnNldCxjPWUucGFnZVh8fChlLnRvdWNoZXM/ZS50b3VjaGVzWzBdLnBhZ2VYOjApLGw9ZS5wYWdlWXx8KGUudG91Y2hlcz9lLnRvdWNoZXNbMF0ucGFnZVk6MCksdT0oMCxvLmRlZmF1bHQpKGMtYSwwLHIpLGY9KDAsby5kZWZhdWx0KShsLXMsMCxpKSxkPXUvcixoPSgwLG8uZGVmYXVsdCkoLWYvaSsxLDAsMSk7dGhpcy50aHJvdHRsZSh0aGlzLm9uQ2hhbmdlLHtoOnRoaXMuY29sb3JzLmhzdi5oLHM6ZCx2OmgsYTp0aGlzLmNvbG9ycy5oc3YuYSxzb3VyY2U6XCJoc3ZhXCJ9KX19LG9uQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMuJGVtaXQoXCJjaGFuZ2VcIixlKX0saGFuZGxlTW91c2VEb3duOmZ1bmN0aW9uKGUpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsdGhpcy5oYW5kbGVDaGFuZ2UpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLHRoaXMuaGFuZGxlQ2hhbmdlKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApfSxoYW5kbGVNb3VzZVVwOmZ1bmN0aW9uKGUpe3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKX0sdW5iaW5kRXZlbnRMaXN0ZW5lcnM6ZnVuY3Rpb24oKXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlQ2hhbmdlKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLmhhbmRsZUNoYW5nZSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVNb3VzZVVwKX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPW4oMjIpLGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShyKTt0LmRlZmF1bHQ9e25hbWU6XCJBbHBoYVwiLHByb3BzOnt2YWx1ZTpPYmplY3Qsb25DaGFuZ2U6RnVuY3Rpb259LGNvbXBvbmVudHM6e2NoZWNrYm9hcmQ6aS5kZWZhdWx0fSxjb21wdXRlZDp7Y29sb3JzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWV9LGdyYWRpZW50Q29sb3I6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbG9ycy5yZ2JhLHQ9W2UucixlLmcsZS5iXS5qb2luKFwiLFwiKTtyZXR1cm5cImxpbmVhci1ncmFkaWVudCh0byByaWdodCwgcmdiYShcIit0K1wiLCAwKSAwJSwgcmdiYShcIit0K1wiLCAxKSAxMDAlKVwifX0sbWV0aG9kczp7aGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGUsdCl7IXQmJmUucHJldmVudERlZmF1bHQoKTt2YXIgbj10aGlzLiRyZWZzLmNvbnRhaW5lcjtpZihuKXt2YXIgcixpPW4uY2xpZW50V2lkdGgsbz1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQrd2luZG93LnBhZ2VYT2Zmc2V0LGE9ZS5wYWdlWHx8KGUudG91Y2hlcz9lLnRvdWNoZXNbMF0ucGFnZVg6MCkscz1hLW87cj1zPDA/MDpzPmk/MTpNYXRoLnJvdW5kKDEwMCpzL2kpLzEwMCx0aGlzLmNvbG9ycy5hIT09ciYmdGhpcy4kZW1pdChcImNoYW5nZVwiLHtoOnRoaXMuY29sb3JzLmhzbC5oLHM6dGhpcy5jb2xvcnMuaHNsLnMsbDp0aGlzLmNvbG9ycy5oc2wubCxhOnIsc291cmNlOlwicmdiYVwifSl9fSxoYW5kbGVNb3VzZURvd246ZnVuY3Rpb24oZSl7dGhpcy5oYW5kbGVDaGFuZ2UoZSwhMCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIix0aGlzLmhhbmRsZUNoYW5nZSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVNb3VzZVVwKX0saGFuZGxlTW91c2VVcDpmdW5jdGlvbigpe3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKX0sdW5iaW5kRXZlbnRMaXN0ZW5lcnM6ZnVuY3Rpb24oKXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlQ2hhbmdlKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApfX19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlLHQsbil7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50KXJldHVybiBudWxsO3ZhciByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7ci53aWR0aD1yLmhlaWdodD0yKm47dmFyIGk9ci5nZXRDb250ZXh0KFwiMmRcIik7cmV0dXJuIGk/KGkuZmlsbFN0eWxlPWUsaS5maWxsUmVjdCgwLDAsci53aWR0aCxyLmhlaWdodCksaS5maWxsU3R5bGU9dCxpLmZpbGxSZWN0KDAsMCxuLG4pLGkudHJhbnNsYXRlKG4sbiksaS5maWxsUmVjdCgwLDAsbixuKSxyLnRvRGF0YVVSTCgpKTpudWxsfWZ1bmN0aW9uIGkoZSx0LG4pe3ZhciBpPWUrXCIsXCIrdCtcIixcIituO2lmKG9baV0pcmV0dXJuIG9baV07dmFyIGE9cihlLHQsbik7cmV0dXJuIG9baV09YSxhfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXt9O3QuZGVmYXVsdD17bmFtZTpcIkNoZWNrYm9hcmRcIixwcm9wczp7c2l6ZTp7dHlwZTpbTnVtYmVyLFN0cmluZ10sZGVmYXVsdDo4fSx3aGl0ZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIiNmZmZcIn0sZ3JleTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIiNlNmU2ZTZcIn19LGNvbXB1dGVkOntiZ1N0eWxlOmZ1bmN0aW9uKCl7cmV0dXJue1wiYmFja2dyb3VuZC1pbWFnZVwiOlwidXJsKFwiK2kodGhpcy53aGl0ZSx0aGlzLmdyZXksdGhpcy5zaXplKStcIilcIn19fX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDMpLG89cihpKSxhPW4oNSkscz1yKGEpLGM9bigyMCksbD1yKGMpLHU9bigxMyksZj1yKHUpLGQ9bigyMSksaD1yKGQpLHA9bigyMiksdj1yKHApLGc9W1wiI0QwMDIxQlwiLFwiI0Y1QTYyM1wiLFwiI0Y4RTcxQ1wiLFwiIzhCNTcyQVwiLFwiIzdFRDMyMVwiLFwiIzQxNzUwNVwiLFwiI0JEMTBFMFwiLFwiIzkwMTNGRVwiLFwiIzRBOTBFMlwiLFwiIzUwRTNDMlwiLFwiI0I4RTk4NlwiLFwiIzAwMDAwMFwiLFwiIzRBNEE0QVwiLFwiIzlCOUI5QlwiLFwiI0ZGRkZGRlwiLFwicmdiYSgwLDAsMCwwKVwiXTt0LmRlZmF1bHQ9e25hbWU6XCJTa2V0Y2hcIixtaXhpbnM6W28uZGVmYXVsdF0sY29tcG9uZW50czp7c2F0dXJhdGlvbjpsLmRlZmF1bHQsaHVlOmYuZGVmYXVsdCxhbHBoYTpoLmRlZmF1bHQsXCJlZC1pblwiOnMuZGVmYXVsdCxjaGVja2JvYXJkOnYuZGVmYXVsdH0scHJvcHM6e3ByZXNldENvbG9yczp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGd9fSxkaXNhYmxlQWxwaGE6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxkaXNhYmxlRmllbGRzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LGNvbXB1dGVkOntoZXg6ZnVuY3Rpb24oKXt2YXIgZT12b2lkIDA7cmV0dXJuIGU9dGhpcy5jb2xvcnMuYTwxP3RoaXMuY29sb3JzLmhleDg6dGhpcy5jb2xvcnMuaGV4LGUucmVwbGFjZShcIiNcIixcIlwiKX0sYWN0aXZlQ29sb3I6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbG9ycy5yZ2JhO3JldHVyblwicmdiYShcIitbZS5yLGUuZyxlLmIsZS5hXS5qb2luKFwiLFwiKStcIilcIn19LG1ldGhvZHM6e2hhbmRsZVByZXNldDpmdW5jdGlvbihlKXt0aGlzLmNvbG9yQ2hhbmdlKHtoZXg6ZSxzb3VyY2U6XCJoZXhcIn0pfSxjaGlsZENoYW5nZTpmdW5jdGlvbihlKXt0aGlzLmNvbG9yQ2hhbmdlKGUpfSxpbnB1dENoYW5nZTpmdW5jdGlvbihlKXtlJiYoZS5oZXg/dGhpcy5pc1ZhbGlkSGV4KGUuaGV4KSYmdGhpcy5jb2xvckNoYW5nZSh7aGV4OmUuaGV4LHNvdXJjZTpcImhleFwifSk6KGUucnx8ZS5nfHxlLmJ8fGUuYSkmJnRoaXMuY29sb3JDaGFuZ2Uoe3I6ZS5yfHx0aGlzLmNvbG9ycy5yZ2JhLnIsZzplLmd8fHRoaXMuY29sb3JzLnJnYmEuZyxiOmUuYnx8dGhpcy5jb2xvcnMucmdiYS5iLGE6ZS5hfHx0aGlzLmNvbG9ycy5yZ2JhLmEsc291cmNlOlwicmdiYVwifSkpfX19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9bigzKSxvPXIoaSksYT1uKDUpLHM9cihhKSxjPW4oMjApLGw9cihjKSx1PW4oMTMpLGY9cih1KSxkPW4oMjEpLGg9cihkKSxwPW4oMjIpLHY9cihwKTt0LmRlZmF1bHQ9e25hbWU6XCJDaHJvbWVcIixtaXhpbnM6W28uZGVmYXVsdF0scHJvcHM6e2Rpc2FibGVBbHBoYTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGRpc2FibGVGaWVsZHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sY29tcG9uZW50czp7c2F0dXJhdGlvbjpsLmRlZmF1bHQsaHVlOmYuZGVmYXVsdCxhbHBoYTpoLmRlZmF1bHQsXCJlZC1pblwiOnMuZGVmYXVsdCxjaGVja2JvYXJkOnYuZGVmYXVsdH0sZGF0YTpmdW5jdGlvbigpe3JldHVybntmaWVsZHNJbmRleDowLGhpZ2hsaWdodDohMX19LGNvbXB1dGVkOntoc2w6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbG9ycy5oc2wsdD1lLmgsbj1lLnMscj1lLmw7cmV0dXJue2g6dC50b0ZpeGVkKCksczooMTAwKm4pLnRvRml4ZWQoKStcIiVcIixsOigxMDAqcikudG9GaXhlZCgpK1wiJVwifX0sYWN0aXZlQ29sb3I6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbG9ycy5yZ2JhO3JldHVyblwicmdiYShcIitbZS5yLGUuZyxlLmIsZS5hXS5qb2luKFwiLFwiKStcIilcIn0saGFzQWxwaGE6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb2xvcnMuYTwxfX0sbWV0aG9kczp7Y2hpbGRDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvckNoYW5nZShlKX0saW5wdXRDaGFuZ2U6ZnVuY3Rpb24oZSl7aWYoZSlpZihlLmhleCl0aGlzLmlzVmFsaWRIZXgoZS5oZXgpJiZ0aGlzLmNvbG9yQ2hhbmdlKHtoZXg6ZS5oZXgsc291cmNlOlwiaGV4XCJ9KTtlbHNlIGlmKGUucnx8ZS5nfHxlLmJ8fGUuYSl0aGlzLmNvbG9yQ2hhbmdlKHtyOmUucnx8dGhpcy5jb2xvcnMucmdiYS5yLGc6ZS5nfHx0aGlzLmNvbG9ycy5yZ2JhLmcsYjplLmJ8fHRoaXMuY29sb3JzLnJnYmEuYixhOmUuYXx8dGhpcy5jb2xvcnMucmdiYS5hLHNvdXJjZTpcInJnYmFcIn0pO2Vsc2UgaWYoZS5ofHxlLnN8fGUubCl7dmFyIHQ9ZS5zP2Uucy5yZXBsYWNlKFwiJVwiLFwiXCIpLzEwMDp0aGlzLmNvbG9ycy5oc2wucyxuPWUubD9lLmwucmVwbGFjZShcIiVcIixcIlwiKS8xMDA6dGhpcy5jb2xvcnMuaHNsLmw7dGhpcy5jb2xvckNoYW5nZSh7aDplLmh8fHRoaXMuY29sb3JzLmhzbC5oLHM6dCxsOm4sc291cmNlOlwiaHNsXCJ9KX19LHRvZ2dsZVZpZXdzOmZ1bmN0aW9uKCl7aWYodGhpcy5maWVsZHNJbmRleD49MilyZXR1cm4gdm9pZCh0aGlzLmZpZWxkc0luZGV4PTApO3RoaXMuZmllbGRzSW5kZXgrK30sc2hvd0hpZ2hsaWdodDpmdW5jdGlvbigpe3RoaXMuaGlnaGxpZ2h0PSEwfSxoaWRlSGlnaGxpZ2h0OmZ1bmN0aW9uKCl7dGhpcy5oaWdobGlnaHQ9ITF9fX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDUpLG89cihpKSxhPW4oMykscz1yKGEpLGM9W1wiI0ZGNjkwMFwiLFwiI0ZDQjkwMFwiLFwiIzdCRENCNVwiLFwiIzAwRDA4NFwiLFwiIzhFRDFGQ1wiLFwiIzA2OTNFM1wiLFwiI0FCQjhDM1wiLFwiI0VCMTQ0Q1wiLFwiI0Y3OERBN1wiLFwiIzk5MDBFRlwiXTt0LmRlZmF1bHQ9e25hbWU6XCJUd2l0dGVyXCIsbWl4aW5zOltzLmRlZmF1bHRdLGNvbXBvbmVudHM6e2VkaXRhYmxlSW5wdXQ6by5kZWZhdWx0fSxwcm9wczp7d2lkdGg6e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6Mjc2fSxkZWZhdWx0Q29sb3JzOnt0eXBlOkFycmF5LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gY319LHRyaWFuZ2xlOntkZWZhdWx0OlwidG9wLWxlZnRcIix2YWxpZGF0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuW1wiaGlkZVwiLFwidG9wLWxlZnRcIixcInRvcC1yaWdodFwiXS5pbmNsdWRlcyhlKX19fSxjb21wdXRlZDp7aHN2OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jb2xvcnMuaHN2O3JldHVybntoOmUuaC50b0ZpeGVkKCksczooMTAwKmUucykudG9GaXhlZCgpLHY6KDEwMCplLnYpLnRvRml4ZWQoKX19LGhleDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY29sb3JzLmhleDtyZXR1cm4gZSYmZS5yZXBsYWNlKFwiI1wiLFwiXCIpfX0sbWV0aG9kczp7ZXF1YWw6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9Mb3dlckNhc2UoKT09PXRoaXMuY29sb3JzLmhleC50b0xvd2VyQ2FzZSgpfSxoYW5kbGVyQ2xpY2s6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvckNoYW5nZSh7aGV4OmUsc291cmNlOlwiaGV4XCJ9KX0saW5wdXRDaGFuZ2U6ZnVuY3Rpb24oZSl7ZSYmKGVbXCIjXCJdP3RoaXMuaXNWYWxpZEhleChlW1wiI1wiXSkmJnRoaXMuY29sb3JDaGFuZ2Uoe2hleDplW1wiI1wiXSxzb3VyY2U6XCJoZXhcIn0pOmUucnx8ZS5nfHxlLmJ8fGUuYT90aGlzLmNvbG9yQ2hhbmdlKHtyOmUucnx8dGhpcy5jb2xvcnMucmdiYS5yLGc6ZS5nfHx0aGlzLmNvbG9ycy5yZ2JhLmcsYjplLmJ8fHRoaXMuY29sb3JzLnJnYmEuYixhOmUuYXx8dGhpcy5jb2xvcnMucmdiYS5hLHNvdXJjZTpcInJnYmFcIn0pOihlLmh8fGUuc3x8ZS52KSYmdGhpcy5jb2xvckNoYW5nZSh7aDplLmh8fHRoaXMuY29sb3JzLmhzdi5oLHM6ZS5zLzEwMHx8dGhpcy5jb2xvcnMuaHN2LnMsdjplLnYvMTAwfHx0aGlzLmNvbG9ycy5oc3Yudixzb3VyY2U6XCJoc3ZcIn0pKX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBpPW4oNjEpLG89cihpKSxhPW4oNzApLHM9cihhKSxjPW4oNzQpLGw9cihjKSx1PW4oNzgpLGY9cih1KSxkPW4oMTE1KSxoPXIoZCkscD1uKDEyMCksdj1yKHApLGc9bigxMzUpLGI9cihnKSx4PW4oMTM5KSxtPXIoeCksXz1uKDE0Myksdz1yKF8pLHk9bigyMSksQz1yKHkpLGs9bigyMiksRj1yKGspLFM9big1KSxBPXIoUyksTz1uKDEzKSxFPXIoTyksTT1uKDIwKSxqPXIoTSksTD1uKDMpLFA9cihMKSxSPXt2ZXJzaW9uOlwiMi44LjFcIixDb21wYWN0Om8uZGVmYXVsdCxHcmF5c2NhbGU6cy5kZWZhdWx0LFR3aXR0ZXI6dy5kZWZhdWx0LE1hdGVyaWFsOmwuZGVmYXVsdCxTbGlkZXI6Zi5kZWZhdWx0LFN3YXRjaGVzOmguZGVmYXVsdCxQaG90b3Nob3A6di5kZWZhdWx0LFNrZXRjaDpiLmRlZmF1bHQsQ2hyb21lOm0uZGVmYXVsdCxBbHBoYTpDLmRlZmF1bHQsQ2hlY2tib2FyZDpGLmRlZmF1bHQsRWRpdGFibGVJbnB1dDpBLmRlZmF1bHQsSHVlOkUuZGVmYXVsdCxTYXR1cmF0aW9uOmouZGVmYXVsdCxDb2xvck1peGluOlAuZGVmYXVsdH07ZS5leHBvcnRzPVJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oNjIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW4oMzUpLG89bi5uKGkpO2Zvcih2YXIgYSBpbiBpKVwiZGVmYXVsdFwiIT09YSYmZnVuY3Rpb24oZSl7bi5kKHQsZSxmdW5jdGlvbigpe3JldHVybiBpW2VdfSl9KGEpO3ZhciBzPW4oNjkpLGM9ITEsbD1uKDIpLHU9cixmPWwoby5hLHMuYSwhMSx1LG51bGwsbnVsbCk7Zi5vcHRpb25zLl9fZmlsZT1cInNyYy9jb21wb25lbnRzL0NvbXBhY3QudnVlXCIsdC5kZWZhdWx0PWYuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNjMpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCI2Y2U4YTVhOFwiLHIsITEse30pfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksXCJcXG4udmMtY29tcGFjdCB7XFxuICBwYWRkaW5nLXRvcDogNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiA1cHg7XFxuICB3aWR0aDogMjQ1cHg7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm94LXNoYWRvdzogMCAycHggMTBweCByZ2JhKDAsMCwwLC4xMiksIDAgMnB4IDVweCByZ2JhKDAsMCwwLC4xNik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG4udmMtY29tcGFjdC1jb2xvcnMge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxufVxcbi52Yy1jb21wYWN0LWNvbG9yLWl0ZW0ge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIHdpZHRoOiAxNXB4O1xcbiAgaGVpZ2h0OiAxNXB4O1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBtYXJnaW4tcmlnaHQ6IDVweDtcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnZjLWNvbXBhY3QtY29sb3ItaXRlbS0td2hpdGUge1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICNkZGQ7XFxufVxcbi52Yy1jb21wYWN0LWNvbG9yLWl0ZW0tLXdoaXRlIC52Yy1jb21wYWN0LWRvdCB7XFxuICBiYWNrZ3JvdW5kOiAjMDAwO1xcbn1cXG4udmMtY29tcGFjdC1kb3Qge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1cHg7XFxuICByaWdodDogNXB4O1xcbiAgYm90dG9tOiA1cHg7XFxuICBsZWZ0OiA1cHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBvcGFjaXR5OiAxO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG59XFxuXCIsXCJcIl0pfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bXSxyPXt9LGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG89dFtpXSxhPW9bMF0scz1vWzFdLGM9b1syXSxsPW9bM10sdT17aWQ6ZStcIjpcIitpLGNzczpzLG1lZGlhOmMsc291cmNlTWFwOmx9O3JbYV0/clthXS5wYXJ0cy5wdXNoKHUpOm4ucHVzaChyW2FdPXtpZDphLHBhcnRzOlt1XX0pfXJldHVybiBufX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByOyFmdW5jdGlvbihpKXtmdW5jdGlvbiBvKGUsdCl7aWYoZT1lfHxcIlwiLHQ9dHx8e30sZSBpbnN0YW5jZW9mIG8pcmV0dXJuIGU7aWYoISh0aGlzIGluc3RhbmNlb2YgbykpcmV0dXJuIG5ldyBvKGUsdCk7dmFyIG49YShlKTt0aGlzLl9vcmlnaW5hbElucHV0PWUsdGhpcy5fcj1uLnIsdGhpcy5fZz1uLmcsdGhpcy5fYj1uLmIsdGhpcy5fYT1uLmEsdGhpcy5fcm91bmRBPUcoMTAwKnRoaXMuX2EpLzEwMCx0aGlzLl9mb3JtYXQ9dC5mb3JtYXR8fG4uZm9ybWF0LHRoaXMuX2dyYWRpZW50VHlwZT10LmdyYWRpZW50VHlwZSx0aGlzLl9yPDEmJih0aGlzLl9yPUcodGhpcy5fcikpLHRoaXMuX2c8MSYmKHRoaXMuX2c9Ryh0aGlzLl9nKSksdGhpcy5fYjwxJiYodGhpcy5fYj1HKHRoaXMuX2IpKSx0aGlzLl9vaz1uLm9rLHRoaXMuX3RjX2lkPVUrK31mdW5jdGlvbiBhKGUpe3ZhciB0PXtyOjAsZzowLGI6MH0sbj0xLHI9bnVsbCxpPW51bGwsbz1udWxsLGE9ITEsYz0hMTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9TihlKSksXCJvYmplY3RcIj09dHlwZW9mIGUmJihIKGUucikmJkgoZS5nKSYmSChlLmIpPyh0PXMoZS5yLGUuZyxlLmIpLGE9ITAsYz1cIiVcIj09PVN0cmluZyhlLnIpLnN1YnN0cigtMSk/XCJwcmdiXCI6XCJyZ2JcIik6SChlLmgpJiZIKGUucykmJkgoZS52KT8ocj1EKGUucyksaT1EKGUudiksdD1mKGUuaCxyLGkpLGE9ITAsYz1cImhzdlwiKTpIKGUuaCkmJkgoZS5zKSYmSChlLmwpJiYocj1EKGUucyksbz1EKGUubCksdD1sKGUuaCxyLG8pLGE9ITAsYz1cImhzbFwiKSxlLmhhc093blByb3BlcnR5KFwiYVwiKSYmKG49ZS5hKSksbj1PKG4pLHtvazphLGZvcm1hdDplLmZvcm1hdHx8YyxyOlYoMjU1LHEodC5yLDApKSxnOlYoMjU1LHEodC5nLDApKSxiOlYoMjU1LHEodC5iLDApKSxhOm59fWZ1bmN0aW9uIHMoZSx0LG4pe3JldHVybntyOjI1NSpFKGUsMjU1KSxnOjI1NSpFKHQsMjU1KSxiOjI1NSpFKG4sMjU1KX19ZnVuY3Rpb24gYyhlLHQsbil7ZT1FKGUsMjU1KSx0PUUodCwyNTUpLG49RShuLDI1NSk7dmFyIHIsaSxvPXEoZSx0LG4pLGE9VihlLHQsbikscz0obythKS8yO2lmKG89PWEpcj1pPTA7ZWxzZXt2YXIgYz1vLWE7c3dpdGNoKGk9cz4uNT9jLygyLW8tYSk6Yy8obythKSxvKXtjYXNlIGU6cj0odC1uKS9jKyh0PG4/NjowKTticmVhaztjYXNlIHQ6cj0obi1lKS9jKzI7YnJlYWs7Y2FzZSBuOnI9KGUtdCkvYys0fXIvPTZ9cmV0dXJue2g6cixzOmksbDpzfX1mdW5jdGlvbiBsKGUsdCxuKXtmdW5jdGlvbiByKGUsdCxuKXtyZXR1cm4gbjwwJiYobis9MSksbj4xJiYobi09MSksbjwxLzY/ZSs2Kih0LWUpKm46bjwuNT90Om48Mi8zP2UrKHQtZSkqKDIvMy1uKSo2OmV9dmFyIGksbyxhO2lmKGU9RShlLDM2MCksdD1FKHQsMTAwKSxuPUUobiwxMDApLDA9PT10KWk9bz1hPW47ZWxzZXt2YXIgcz1uPC41P24qKDErdCk6bit0LW4qdCxjPTIqbi1zO2k9cihjLHMsZSsxLzMpLG89cihjLHMsZSksYT1yKGMscyxlLTEvMyl9cmV0dXJue3I6MjU1KmksZzoyNTUqbyxiOjI1NSphfX1mdW5jdGlvbiB1KGUsdCxuKXtlPUUoZSwyNTUpLHQ9RSh0LDI1NSksbj1FKG4sMjU1KTt2YXIgcixpLG89cShlLHQsbiksYT1WKGUsdCxuKSxzPW8sYz1vLWE7aWYoaT0wPT09bz8wOmMvbyxvPT1hKXI9MDtlbHNle3N3aXRjaChvKXtjYXNlIGU6cj0odC1uKS9jKyh0PG4/NjowKTticmVhaztjYXNlIHQ6cj0obi1lKS9jKzI7YnJlYWs7Y2FzZSBuOnI9KGUtdCkvYys0fXIvPTZ9cmV0dXJue2g6cixzOmksdjpzfX1mdW5jdGlvbiBmKGUsdCxuKXtlPTYqRShlLDM2MCksdD1FKHQsMTAwKSxuPUUobiwxMDApO3ZhciByPWkuZmxvb3IoZSksbz1lLXIsYT1uKigxLXQpLHM9biooMS1vKnQpLGM9biooMS0oMS1vKSp0KSxsPXIlNjtyZXR1cm57cjoyNTUqW24scyxhLGEsYyxuXVtsXSxnOjI1NSpbYyxuLG4scyxhLGFdW2xdLGI6MjU1KlthLGEsYyxuLG4sc11bbF19fWZ1bmN0aW9uIGQoZSx0LG4scil7dmFyIGk9W1IoRyhlKS50b1N0cmluZygxNikpLFIoRyh0KS50b1N0cmluZygxNikpLFIoRyhuKS50b1N0cmluZygxNikpXTtyZXR1cm4gciYmaVswXS5jaGFyQXQoMCk9PWlbMF0uY2hhckF0KDEpJiZpWzFdLmNoYXJBdCgwKT09aVsxXS5jaGFyQXQoMSkmJmlbMl0uY2hhckF0KDApPT1pWzJdLmNoYXJBdCgxKT9pWzBdLmNoYXJBdCgwKStpWzFdLmNoYXJBdCgwKStpWzJdLmNoYXJBdCgwKTppLmpvaW4oXCJcIil9ZnVuY3Rpb24gaChlLHQsbixyLGkpe3ZhciBvPVtSKEcoZSkudG9TdHJpbmcoMTYpKSxSKEcodCkudG9TdHJpbmcoMTYpKSxSKEcobikudG9TdHJpbmcoMTYpKSxSKEIocikpXTtyZXR1cm4gaSYmb1swXS5jaGFyQXQoMCk9PW9bMF0uY2hhckF0KDEpJiZvWzFdLmNoYXJBdCgwKT09b1sxXS5jaGFyQXQoMSkmJm9bMl0uY2hhckF0KDApPT1vWzJdLmNoYXJBdCgxKSYmb1szXS5jaGFyQXQoMCk9PW9bM10uY2hhckF0KDEpP29bMF0uY2hhckF0KDApK29bMV0uY2hhckF0KDApK29bMl0uY2hhckF0KDApK29bM10uY2hhckF0KDApOm8uam9pbihcIlwiKX1mdW5jdGlvbiBwKGUsdCxuLHIpe3JldHVybltSKEIocikpLFIoRyhlKS50b1N0cmluZygxNikpLFIoRyh0KS50b1N0cmluZygxNikpLFIoRyhuKS50b1N0cmluZygxNikpXS5qb2luKFwiXCIpfWZ1bmN0aW9uIHYoZSx0KXt0PTA9PT10PzA6dHx8MTA7dmFyIG49byhlKS50b0hzbCgpO3JldHVybiBuLnMtPXQvMTAwLG4ucz1NKG4ucyksbyhuKX1mdW5jdGlvbiBnKGUsdCl7dD0wPT09dD8wOnR8fDEwO3ZhciBuPW8oZSkudG9Ic2woKTtyZXR1cm4gbi5zKz10LzEwMCxuLnM9TShuLnMpLG8obil9ZnVuY3Rpb24gYihlKXtyZXR1cm4gbyhlKS5kZXNhdHVyYXRlKDEwMCl9ZnVuY3Rpb24geChlLHQpe3Q9MD09PXQ/MDp0fHwxMDt2YXIgbj1vKGUpLnRvSHNsKCk7cmV0dXJuIG4ubCs9dC8xMDAsbi5sPU0obi5sKSxvKG4pfWZ1bmN0aW9uIG0oZSx0KXt0PTA9PT10PzA6dHx8MTA7dmFyIG49byhlKS50b1JnYigpO3JldHVybiBuLnI9cSgwLFYoMjU1LG4uci1HKC10LzEwMCoyNTUpKSksbi5nPXEoMCxWKDI1NSxuLmctRygtdC8xMDAqMjU1KSkpLG4uYj1xKDAsVigyNTUsbi5iLUcoLXQvMTAwKjI1NSkpKSxvKG4pfWZ1bmN0aW9uIF8oZSx0KXt0PTA9PT10PzA6dHx8MTA7dmFyIG49byhlKS50b0hzbCgpO3JldHVybiBuLmwtPXQvMTAwLG4ubD1NKG4ubCksbyhuKX1mdW5jdGlvbiB3KGUsdCl7dmFyIG49byhlKS50b0hzbCgpLHI9KG4uaCt0KSUzNjA7cmV0dXJuIG4uaD1yPDA/MzYwK3I6cixvKG4pfWZ1bmN0aW9uIHkoZSl7dmFyIHQ9byhlKS50b0hzbCgpO3JldHVybiB0Lmg9KHQuaCsxODApJTM2MCxvKHQpfWZ1bmN0aW9uIEMoZSl7dmFyIHQ9byhlKS50b0hzbCgpLG49dC5oO3JldHVybltvKGUpLG8oe2g6KG4rMTIwKSUzNjAsczp0LnMsbDp0Lmx9KSxvKHtoOihuKzI0MCklMzYwLHM6dC5zLGw6dC5sfSldfWZ1bmN0aW9uIGsoZSl7dmFyIHQ9byhlKS50b0hzbCgpLG49dC5oO3JldHVybltvKGUpLG8oe2g6KG4rOTApJTM2MCxzOnQucyxsOnQubH0pLG8oe2g6KG4rMTgwKSUzNjAsczp0LnMsbDp0Lmx9KSxvKHtoOihuKzI3MCklMzYwLHM6dC5zLGw6dC5sfSldfWZ1bmN0aW9uIEYoZSl7dmFyIHQ9byhlKS50b0hzbCgpLG49dC5oO3JldHVybltvKGUpLG8oe2g6KG4rNzIpJTM2MCxzOnQucyxsOnQubH0pLG8oe2g6KG4rMjE2KSUzNjAsczp0LnMsbDp0Lmx9KV19ZnVuY3Rpb24gUyhlLHQsbil7dD10fHw2LG49bnx8MzA7dmFyIHI9byhlKS50b0hzbCgpLGk9MzYwL24sYT1bbyhlKV07Zm9yKHIuaD0oci5oLShpKnQ+PjEpKzcyMCklMzYwOy0tdDspci5oPShyLmgraSklMzYwLGEucHVzaChvKHIpKTtyZXR1cm4gYX1mdW5jdGlvbiBBKGUsdCl7dD10fHw2O2Zvcih2YXIgbj1vKGUpLnRvSHN2KCkscj1uLmgsaT1uLnMsYT1uLnYscz1bXSxjPTEvdDt0LS07KXMucHVzaChvKHtoOnIsczppLHY6YX0pKSxhPShhK2MpJTE7cmV0dXJuIHN9ZnVuY3Rpb24gTyhlKXtyZXR1cm4gZT1wYXJzZUZsb2F0KGUpLChpc05hTihlKXx8ZTwwfHxlPjEpJiYoZT0xKSxlfWZ1bmN0aW9uIEUoZSx0KXtMKGUpJiYoZT1cIjEwMCVcIik7dmFyIG49UChlKTtyZXR1cm4gZT1WKHQscSgwLHBhcnNlRmxvYXQoZSkpKSxuJiYoZT1wYXJzZUludChlKnQsMTApLzEwMCksaS5hYnMoZS10KTwxZS02PzE6ZSV0L3BhcnNlRmxvYXQodCl9ZnVuY3Rpb24gTShlKXtyZXR1cm4gVigxLHEoMCxlKSl9ZnVuY3Rpb24gaihlKXtyZXR1cm4gcGFyc2VJbnQoZSwxNil9ZnVuY3Rpb24gTChlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPWUuaW5kZXhPZihcIi5cIikmJjE9PT1wYXJzZUZsb2F0KGUpfWZ1bmN0aW9uIFAoZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJi0xIT1lLmluZGV4T2YoXCIlXCIpfWZ1bmN0aW9uIFIoZSl7cmV0dXJuIDE9PWUubGVuZ3RoP1wiMFwiK2U6XCJcIitlfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIGU8PTEmJihlPTEwMCplK1wiJVwiKSxlfWZ1bmN0aW9uIEIoZSl7cmV0dXJuIGkucm91bmQoMjU1KnBhcnNlRmxvYXQoZSkpLnRvU3RyaW5nKDE2KX1mdW5jdGlvbiBUKGUpe3JldHVybiBqKGUpLzI1NX1mdW5jdGlvbiBIKGUpe3JldHVybiEhSi5DU1NfVU5JVC5leGVjKGUpfWZ1bmN0aW9uIE4oZSl7ZT1lLnJlcGxhY2UoSSxcIlwiKS5yZXBsYWNlKCQsXCJcIikudG9Mb3dlckNhc2UoKTt2YXIgdD0hMTtpZihXW2VdKWU9V1tlXSx0PSEwO2Vsc2UgaWYoXCJ0cmFuc3BhcmVudFwiPT1lKXJldHVybntyOjAsZzowLGI6MCxhOjAsZm9ybWF0OlwibmFtZVwifTt2YXIgbjtyZXR1cm4obj1KLnJnYi5leGVjKGUpKT97cjpuWzFdLGc6blsyXSxiOm5bM119OihuPUoucmdiYS5leGVjKGUpKT97cjpuWzFdLGc6blsyXSxiOm5bM10sYTpuWzRdfToobj1KLmhzbC5leGVjKGUpKT97aDpuWzFdLHM6blsyXSxsOm5bM119OihuPUouaHNsYS5leGVjKGUpKT97aDpuWzFdLHM6blsyXSxsOm5bM10sYTpuWzRdfToobj1KLmhzdi5leGVjKGUpKT97aDpuWzFdLHM6blsyXSx2Om5bM119OihuPUouaHN2YS5leGVjKGUpKT97aDpuWzFdLHM6blsyXSx2Om5bM10sYTpuWzRdfToobj1KLmhleDguZXhlYyhlKSk/e3I6aihuWzFdKSxnOmooblsyXSksYjpqKG5bM10pLGE6VChuWzRdKSxmb3JtYXQ6dD9cIm5hbWVcIjpcImhleDhcIn06KG49Si5oZXg2LmV4ZWMoZSkpP3tyOmooblsxXSksZzpqKG5bMl0pLGI6aihuWzNdKSxmb3JtYXQ6dD9cIm5hbWVcIjpcImhleFwifToobj1KLmhleDQuZXhlYyhlKSk/e3I6aihuWzFdK1wiXCIrblsxXSksZzpqKG5bMl0rXCJcIituWzJdKSxiOmooblszXStcIlwiK25bM10pLGE6VChuWzRdK1wiXCIrbls0XSksZm9ybWF0OnQ/XCJuYW1lXCI6XCJoZXg4XCJ9OiEhKG49Si5oZXgzLmV4ZWMoZSkpJiZ7cjpqKG5bMV0rXCJcIituWzFdKSxnOmooblsyXStcIlwiK25bMl0pLGI6aihuWzNdK1wiXCIrblszXSksZm9ybWF0OnQ/XCJuYW1lXCI6XCJoZXhcIn19ZnVuY3Rpb24geihlKXt2YXIgdCxuO3JldHVybiBlPWV8fHtsZXZlbDpcIkFBXCIsc2l6ZTpcInNtYWxsXCJ9LHQ9KGUubGV2ZWx8fFwiQUFcIikudG9VcHBlckNhc2UoKSxuPShlLnNpemV8fFwic21hbGxcIikudG9Mb3dlckNhc2UoKSxcIkFBXCIhPT10JiZcIkFBQVwiIT09dCYmKHQ9XCJBQVwiKSxcInNtYWxsXCIhPT1uJiZcImxhcmdlXCIhPT1uJiYobj1cInNtYWxsXCIpLHtsZXZlbDp0LHNpemU6bn19dmFyIEk9L15cXHMrLywkPS9cXHMrJC8sVT0wLEc9aS5yb3VuZCxWPWkubWluLHE9aS5tYXgsWD1pLnJhbmRvbTtvLnByb3RvdHlwZT17aXNEYXJrOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0QnJpZ2h0bmVzcygpPDEyOH0saXNMaWdodDpmdW5jdGlvbigpe3JldHVybiF0aGlzLmlzRGFyaygpfSxpc1ZhbGlkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29rfSxnZXRPcmlnaW5hbElucHV0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29yaWdpbmFsSW5wdXR9LGdldEZvcm1hdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9mb3JtYXR9LGdldEFscGhhOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2F9LGdldEJyaWdodG5lc3M6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnRvUmdiKCk7cmV0dXJuKDI5OSplLnIrNTg3KmUuZysxMTQqZS5iKS8xZTN9LGdldEx1bWluYW5jZTpmdW5jdGlvbigpe3ZhciBlLHQsbixyLG8sYSxzPXRoaXMudG9SZ2IoKTtyZXR1cm4gZT1zLnIvMjU1LHQ9cy5nLzI1NSxuPXMuYi8yNTUscj1lPD0uMDM5Mjg/ZS8xMi45MjppLnBvdygoZSsuMDU1KS8xLjA1NSwyLjQpLG89dDw9LjAzOTI4P3QvMTIuOTI6aS5wb3coKHQrLjA1NSkvMS4wNTUsMi40KSxhPW48PS4wMzkyOD9uLzEyLjkyOmkucG93KChuKy4wNTUpLzEuMDU1LDIuNCksLjIxMjYqcisuNzE1MipvKy4wNzIyKmF9LHNldEFscGhhOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9hPU8oZSksdGhpcy5fcm91bmRBPUcoMTAwKnRoaXMuX2EpLzEwMCx0aGlzfSx0b0hzdjpmdW5jdGlvbigpe3ZhciBlPXUodGhpcy5fcix0aGlzLl9nLHRoaXMuX2IpO3JldHVybntoOjM2MCplLmgsczplLnMsdjplLnYsYTp0aGlzLl9hfX0sdG9Ic3ZTdHJpbmc6ZnVuY3Rpb24oKXt2YXIgZT11KHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iKSx0PUcoMzYwKmUuaCksbj1HKDEwMCplLnMpLHI9RygxMDAqZS52KTtyZXR1cm4gMT09dGhpcy5fYT9cImhzdihcIit0K1wiLCBcIituK1wiJSwgXCIrcitcIiUpXCI6XCJoc3ZhKFwiK3QrXCIsIFwiK24rXCIlLCBcIityK1wiJSwgXCIrdGhpcy5fcm91bmRBK1wiKVwifSx0b0hzbDpmdW5jdGlvbigpe3ZhciBlPWModGhpcy5fcix0aGlzLl9nLHRoaXMuX2IpO3JldHVybntoOjM2MCplLmgsczplLnMsbDplLmwsYTp0aGlzLl9hfX0sdG9Ic2xTdHJpbmc6ZnVuY3Rpb24oKXt2YXIgZT1jKHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iKSx0PUcoMzYwKmUuaCksbj1HKDEwMCplLnMpLHI9RygxMDAqZS5sKTtyZXR1cm4gMT09dGhpcy5fYT9cImhzbChcIit0K1wiLCBcIituK1wiJSwgXCIrcitcIiUpXCI6XCJoc2xhKFwiK3QrXCIsIFwiK24rXCIlLCBcIityK1wiJSwgXCIrdGhpcy5fcm91bmRBK1wiKVwifSx0b0hleDpmdW5jdGlvbihlKXtyZXR1cm4gZCh0aGlzLl9yLHRoaXMuX2csdGhpcy5fYixlKX0sdG9IZXhTdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuXCIjXCIrdGhpcy50b0hleChlKX0sdG9IZXg4OmZ1bmN0aW9uKGUpe3JldHVybiBoKHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iLHRoaXMuX2EsZSl9LHRvSGV4OFN0cmluZzpmdW5jdGlvbihlKXtyZXR1cm5cIiNcIit0aGlzLnRvSGV4OChlKX0sdG9SZ2I6ZnVuY3Rpb24oKXtyZXR1cm57cjpHKHRoaXMuX3IpLGc6Ryh0aGlzLl9nKSxiOkcodGhpcy5fYiksYTp0aGlzLl9hfX0sdG9SZ2JTdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gMT09dGhpcy5fYT9cInJnYihcIitHKHRoaXMuX3IpK1wiLCBcIitHKHRoaXMuX2cpK1wiLCBcIitHKHRoaXMuX2IpK1wiKVwiOlwicmdiYShcIitHKHRoaXMuX3IpK1wiLCBcIitHKHRoaXMuX2cpK1wiLCBcIitHKHRoaXMuX2IpK1wiLCBcIit0aGlzLl9yb3VuZEErXCIpXCJ9LHRvUGVyY2VudGFnZVJnYjpmdW5jdGlvbigpe3JldHVybntyOkcoMTAwKkUodGhpcy5fciwyNTUpKStcIiVcIixnOkcoMTAwKkUodGhpcy5fZywyNTUpKStcIiVcIixiOkcoMTAwKkUodGhpcy5fYiwyNTUpKStcIiVcIixhOnRoaXMuX2F9fSx0b1BlcmNlbnRhZ2VSZ2JTdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gMT09dGhpcy5fYT9cInJnYihcIitHKDEwMCpFKHRoaXMuX3IsMjU1KSkrXCIlLCBcIitHKDEwMCpFKHRoaXMuX2csMjU1KSkrXCIlLCBcIitHKDEwMCpFKHRoaXMuX2IsMjU1KSkrXCIlKVwiOlwicmdiYShcIitHKDEwMCpFKHRoaXMuX3IsMjU1KSkrXCIlLCBcIitHKDEwMCpFKHRoaXMuX2csMjU1KSkrXCIlLCBcIitHKDEwMCpFKHRoaXMuX2IsMjU1KSkrXCIlLCBcIit0aGlzLl9yb3VuZEErXCIpXCJ9LHRvTmFtZTpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5fYT9cInRyYW5zcGFyZW50XCI6ISh0aGlzLl9hPDEpJiYoWVtkKHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iLCEwKV18fCExKX0sdG9GaWx0ZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9XCIjXCIrcCh0aGlzLl9yLHRoaXMuX2csdGhpcy5fYix0aGlzLl9hKSxuPXQscj10aGlzLl9ncmFkaWVudFR5cGU/XCJHcmFkaWVudFR5cGUgPSAxLCBcIjpcIlwiO2lmKGUpe3ZhciBpPW8oZSk7bj1cIiNcIitwKGkuX3IsaS5fZyxpLl9iLGkuX2EpfXJldHVyblwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KFwiK3IrXCJzdGFydENvbG9yc3RyPVwiK3QrXCIsZW5kQ29sb3JzdHI9XCIrbitcIilcIn0sdG9TdHJpbmc6ZnVuY3Rpb24oZSl7dmFyIHQ9ISFlO2U9ZXx8dGhpcy5fZm9ybWF0O3ZhciBuPSExLHI9dGhpcy5fYTwxJiZ0aGlzLl9hPj0wO3JldHVybiB0fHwhcnx8XCJoZXhcIiE9PWUmJlwiaGV4NlwiIT09ZSYmXCJoZXgzXCIhPT1lJiZcImhleDRcIiE9PWUmJlwiaGV4OFwiIT09ZSYmXCJuYW1lXCIhPT1lPyhcInJnYlwiPT09ZSYmKG49dGhpcy50b1JnYlN0cmluZygpKSxcInByZ2JcIj09PWUmJihuPXRoaXMudG9QZXJjZW50YWdlUmdiU3RyaW5nKCkpLFwiaGV4XCIhPT1lJiZcImhleDZcIiE9PWV8fChuPXRoaXMudG9IZXhTdHJpbmcoKSksXCJoZXgzXCI9PT1lJiYobj10aGlzLnRvSGV4U3RyaW5nKCEwKSksXCJoZXg0XCI9PT1lJiYobj10aGlzLnRvSGV4OFN0cmluZyghMCkpLFwiaGV4OFwiPT09ZSYmKG49dGhpcy50b0hleDhTdHJpbmcoKSksXCJuYW1lXCI9PT1lJiYobj10aGlzLnRvTmFtZSgpKSxcImhzbFwiPT09ZSYmKG49dGhpcy50b0hzbFN0cmluZygpKSxcImhzdlwiPT09ZSYmKG49dGhpcy50b0hzdlN0cmluZygpKSxufHx0aGlzLnRvSGV4U3RyaW5nKCkpOlwibmFtZVwiPT09ZSYmMD09PXRoaXMuX2E/dGhpcy50b05hbWUoKTp0aGlzLnRvUmdiU3RyaW5nKCl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG8odGhpcy50b1N0cmluZygpKX0sX2FwcGx5TW9kaWZpY2F0aW9uOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5hcHBseShudWxsLFt0aGlzXS5jb25jYXQoW10uc2xpY2UuY2FsbCh0KSkpO3JldHVybiB0aGlzLl9yPW4uX3IsdGhpcy5fZz1uLl9nLHRoaXMuX2I9bi5fYix0aGlzLnNldEFscGhhKG4uX2EpLHRoaXN9LGxpZ2h0ZW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oeCxhcmd1bWVudHMpfSxicmlnaHRlbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihtLGFyZ3VtZW50cyl9LGRhcmtlbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihfLGFyZ3VtZW50cyl9LGRlc2F0dXJhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24odixhcmd1bWVudHMpfSxzYXR1cmF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihnLGFyZ3VtZW50cyl9LGdyZXlzY2FsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihiLGFyZ3VtZW50cyl9LHNwaW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24odyxhcmd1bWVudHMpfSxfYXBwbHlDb21iaW5hdGlvbjpmdW5jdGlvbihlLHQpe3JldHVybiBlLmFwcGx5KG51bGwsW3RoaXNdLmNvbmNhdChbXS5zbGljZS5jYWxsKHQpKSl9LGFuYWxvZ291czpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKFMsYXJndW1lbnRzKX0sY29tcGxlbWVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHksYXJndW1lbnRzKX0sbW9ub2Nocm9tYXRpYzpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKEEsYXJndW1lbnRzKX0sc3BsaXRjb21wbGVtZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24oRixhcmd1bWVudHMpfSx0cmlhZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKEMsYXJndW1lbnRzKX0sdGV0cmFkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24oayxhcmd1bWVudHMpfX0sby5mcm9tUmF0aW89ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7dmFyIG49e307Zm9yKHZhciByIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShyKSYmKG5bcl09XCJhXCI9PT1yP2Vbcl06RChlW3JdKSk7ZT1ufXJldHVybiBvKGUsdCl9LG8uZXF1YWxzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuISghZXx8IXQpJiZvKGUpLnRvUmdiU3RyaW5nKCk9PW8odCkudG9SZ2JTdHJpbmcoKX0sby5yYW5kb209ZnVuY3Rpb24oKXtyZXR1cm4gby5mcm9tUmF0aW8oe3I6WCgpLGc6WCgpLGI6WCgpfSl9LG8ubWl4PWZ1bmN0aW9uKGUsdCxuKXtuPTA9PT1uPzA6bnx8NTA7dmFyIHI9byhlKS50b1JnYigpLGk9byh0KS50b1JnYigpLGE9bi8xMDA7cmV0dXJuIG8oe3I6KGkuci1yLnIpKmErci5yLGc6KGkuZy1yLmcpKmErci5nLGI6KGkuYi1yLmIpKmErci5iLGE6KGkuYS1yLmEpKmErci5hfSl9LG8ucmVhZGFiaWxpdHk9ZnVuY3Rpb24oZSx0KXt2YXIgbj1vKGUpLHI9byh0KTtyZXR1cm4oaS5tYXgobi5nZXRMdW1pbmFuY2UoKSxyLmdldEx1bWluYW5jZSgpKSsuMDUpLyhpLm1pbihuLmdldEx1bWluYW5jZSgpLHIuZ2V0THVtaW5hbmNlKCkpKy4wNSl9LG8uaXNSZWFkYWJsZT1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxhPW8ucmVhZGFiaWxpdHkoZSx0KTtzd2l0Y2goaT0hMSxyPXoobiksci5sZXZlbCtyLnNpemUpe2Nhc2VcIkFBc21hbGxcIjpjYXNlXCJBQUFsYXJnZVwiOmk9YT49NC41O2JyZWFrO2Nhc2VcIkFBbGFyZ2VcIjppPWE+PTM7YnJlYWs7Y2FzZVwiQUFBc21hbGxcIjppPWE+PTd9cmV0dXJuIGl9LG8ubW9zdFJlYWRhYmxlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLGEscyxjPW51bGwsbD0wO249bnx8e30saT1uLmluY2x1ZGVGYWxsYmFja0NvbG9ycyxhPW4ubGV2ZWwscz1uLnNpemU7Zm9yKHZhciB1PTA7dTx0Lmxlbmd0aDt1KyspKHI9by5yZWFkYWJpbGl0eShlLHRbdV0pKT5sJiYobD1yLGM9byh0W3VdKSk7cmV0dXJuIG8uaXNSZWFkYWJsZShlLGMse2xldmVsOmEsc2l6ZTpzfSl8fCFpP2M6KG4uaW5jbHVkZUZhbGxiYWNrQ29sb3JzPSExLG8ubW9zdFJlYWRhYmxlKGUsW1wiI2ZmZlwiLFwiIzAwMFwiXSxuKSl9O3ZhciBXPW8ubmFtZXM9e2FsaWNlYmx1ZTpcImYwZjhmZlwiLGFudGlxdWV3aGl0ZTpcImZhZWJkN1wiLGFxdWE6XCIwZmZcIixhcXVhbWFyaW5lOlwiN2ZmZmQ0XCIsYXp1cmU6XCJmMGZmZmZcIixiZWlnZTpcImY1ZjVkY1wiLGJpc3F1ZTpcImZmZTRjNFwiLGJsYWNrOlwiMDAwXCIsYmxhbmNoZWRhbG1vbmQ6XCJmZmViY2RcIixibHVlOlwiMDBmXCIsYmx1ZXZpb2xldDpcIjhhMmJlMlwiLGJyb3duOlwiYTUyYTJhXCIsYnVybHl3b29kOlwiZGViODg3XCIsYnVybnRzaWVubmE6XCJlYTdlNWRcIixjYWRldGJsdWU6XCI1ZjllYTBcIixjaGFydHJldXNlOlwiN2ZmZjAwXCIsY2hvY29sYXRlOlwiZDI2OTFlXCIsY29yYWw6XCJmZjdmNTBcIixjb3JuZmxvd2VyYmx1ZTpcIjY0OTVlZFwiLGNvcm5zaWxrOlwiZmZmOGRjXCIsY3JpbXNvbjpcImRjMTQzY1wiLGN5YW46XCIwZmZcIixkYXJrYmx1ZTpcIjAwMDA4YlwiLGRhcmtjeWFuOlwiMDA4YjhiXCIsZGFya2dvbGRlbnJvZDpcImI4ODYwYlwiLGRhcmtncmF5OlwiYTlhOWE5XCIsZGFya2dyZWVuOlwiMDA2NDAwXCIsZGFya2dyZXk6XCJhOWE5YTlcIixkYXJra2hha2k6XCJiZGI3NmJcIixkYXJrbWFnZW50YTpcIjhiMDA4YlwiLGRhcmtvbGl2ZWdyZWVuOlwiNTU2YjJmXCIsZGFya29yYW5nZTpcImZmOGMwMFwiLGRhcmtvcmNoaWQ6XCI5OTMyY2NcIixkYXJrcmVkOlwiOGIwMDAwXCIsZGFya3NhbG1vbjpcImU5OTY3YVwiLGRhcmtzZWFncmVlbjpcIjhmYmM4ZlwiLGRhcmtzbGF0ZWJsdWU6XCI0ODNkOGJcIixkYXJrc2xhdGVncmF5OlwiMmY0ZjRmXCIsZGFya3NsYXRlZ3JleTpcIjJmNGY0ZlwiLGRhcmt0dXJxdW9pc2U6XCIwMGNlZDFcIixkYXJrdmlvbGV0OlwiOTQwMGQzXCIsZGVlcHBpbms6XCJmZjE0OTNcIixkZWVwc2t5Ymx1ZTpcIjAwYmZmZlwiLGRpbWdyYXk6XCI2OTY5NjlcIixkaW1ncmV5OlwiNjk2OTY5XCIsZG9kZ2VyYmx1ZTpcIjFlOTBmZlwiLGZpcmVicmljazpcImIyMjIyMlwiLGZsb3JhbHdoaXRlOlwiZmZmYWYwXCIsZm9yZXN0Z3JlZW46XCIyMjhiMjJcIixmdWNoc2lhOlwiZjBmXCIsZ2FpbnNib3JvOlwiZGNkY2RjXCIsZ2hvc3R3aGl0ZTpcImY4ZjhmZlwiLGdvbGQ6XCJmZmQ3MDBcIixnb2xkZW5yb2Q6XCJkYWE1MjBcIixncmF5OlwiODA4MDgwXCIsZ3JlZW46XCIwMDgwMDBcIixncmVlbnllbGxvdzpcImFkZmYyZlwiLGdyZXk6XCI4MDgwODBcIixob25leWRldzpcImYwZmZmMFwiLGhvdHBpbms6XCJmZjY5YjRcIixpbmRpYW5yZWQ6XCJjZDVjNWNcIixpbmRpZ286XCI0YjAwODJcIixpdm9yeTpcImZmZmZmMFwiLGtoYWtpOlwiZjBlNjhjXCIsbGF2ZW5kZXI6XCJlNmU2ZmFcIixsYXZlbmRlcmJsdXNoOlwiZmZmMGY1XCIsbGF3bmdyZWVuOlwiN2NmYzAwXCIsbGVtb25jaGlmZm9uOlwiZmZmYWNkXCIsbGlnaHRibHVlOlwiYWRkOGU2XCIsbGlnaHRjb3JhbDpcImYwODA4MFwiLGxpZ2h0Y3lhbjpcImUwZmZmZlwiLGxpZ2h0Z29sZGVucm9keWVsbG93OlwiZmFmYWQyXCIsbGlnaHRncmF5OlwiZDNkM2QzXCIsbGlnaHRncmVlbjpcIjkwZWU5MFwiLGxpZ2h0Z3JleTpcImQzZDNkM1wiLGxpZ2h0cGluazpcImZmYjZjMVwiLGxpZ2h0c2FsbW9uOlwiZmZhMDdhXCIsbGlnaHRzZWFncmVlbjpcIjIwYjJhYVwiLGxpZ2h0c2t5Ymx1ZTpcIjg3Y2VmYVwiLGxpZ2h0c2xhdGVncmF5OlwiNzg5XCIsbGlnaHRzbGF0ZWdyZXk6XCI3ODlcIixsaWdodHN0ZWVsYmx1ZTpcImIwYzRkZVwiLGxpZ2h0eWVsbG93OlwiZmZmZmUwXCIsbGltZTpcIjBmMFwiLGxpbWVncmVlbjpcIjMyY2QzMlwiLGxpbmVuOlwiZmFmMGU2XCIsbWFnZW50YTpcImYwZlwiLG1hcm9vbjpcIjgwMDAwMFwiLG1lZGl1bWFxdWFtYXJpbmU6XCI2NmNkYWFcIixtZWRpdW1ibHVlOlwiMDAwMGNkXCIsbWVkaXVtb3JjaGlkOlwiYmE1NWQzXCIsbWVkaXVtcHVycGxlOlwiOTM3MGRiXCIsbWVkaXVtc2VhZ3JlZW46XCIzY2IzNzFcIixtZWRpdW1zbGF0ZWJsdWU6XCI3YjY4ZWVcIixtZWRpdW1zcHJpbmdncmVlbjpcIjAwZmE5YVwiLG1lZGl1bXR1cnF1b2lzZTpcIjQ4ZDFjY1wiLG1lZGl1bXZpb2xldHJlZDpcImM3MTU4NVwiLG1pZG5pZ2h0Ymx1ZTpcIjE5MTk3MFwiLG1pbnRjcmVhbTpcImY1ZmZmYVwiLG1pc3R5cm9zZTpcImZmZTRlMVwiLG1vY2Nhc2luOlwiZmZlNGI1XCIsbmF2YWpvd2hpdGU6XCJmZmRlYWRcIixuYXZ5OlwiMDAwMDgwXCIsb2xkbGFjZTpcImZkZjVlNlwiLG9saXZlOlwiODA4MDAwXCIsb2xpdmVkcmFiOlwiNmI4ZTIzXCIsb3JhbmdlOlwiZmZhNTAwXCIsb3JhbmdlcmVkOlwiZmY0NTAwXCIsb3JjaGlkOlwiZGE3MGQ2XCIscGFsZWdvbGRlbnJvZDpcImVlZThhYVwiLHBhbGVncmVlbjpcIjk4ZmI5OFwiLHBhbGV0dXJxdW9pc2U6XCJhZmVlZWVcIixwYWxldmlvbGV0cmVkOlwiZGI3MDkzXCIscGFwYXlhd2hpcDpcImZmZWZkNVwiLHBlYWNocHVmZjpcImZmZGFiOVwiLHBlcnU6XCJjZDg1M2ZcIixwaW5rOlwiZmZjMGNiXCIscGx1bTpcImRkYTBkZFwiLHBvd2RlcmJsdWU6XCJiMGUwZTZcIixwdXJwbGU6XCI4MDAwODBcIixyZWJlY2NhcHVycGxlOlwiNjYzMzk5XCIscmVkOlwiZjAwXCIscm9zeWJyb3duOlwiYmM4ZjhmXCIscm95YWxibHVlOlwiNDE2OWUxXCIsc2FkZGxlYnJvd246XCI4YjQ1MTNcIixzYWxtb246XCJmYTgwNzJcIixzYW5keWJyb3duOlwiZjRhNDYwXCIsc2VhZ3JlZW46XCIyZThiNTdcIixzZWFzaGVsbDpcImZmZjVlZVwiLHNpZW5uYTpcImEwNTIyZFwiLHNpbHZlcjpcImMwYzBjMFwiLHNreWJsdWU6XCI4N2NlZWJcIixzbGF0ZWJsdWU6XCI2YTVhY2RcIixzbGF0ZWdyYXk6XCI3MDgwOTBcIixzbGF0ZWdyZXk6XCI3MDgwOTBcIixzbm93OlwiZmZmYWZhXCIsc3ByaW5nZ3JlZW46XCIwMGZmN2ZcIixzdGVlbGJsdWU6XCI0NjgyYjRcIix0YW46XCJkMmI0OGNcIix0ZWFsOlwiMDA4MDgwXCIsdGhpc3RsZTpcImQ4YmZkOFwiLHRvbWF0bzpcImZmNjM0N1wiLHR1cnF1b2lzZTpcIjQwZTBkMFwiLHZpb2xldDpcImVlODJlZVwiLHdoZWF0OlwiZjVkZWIzXCIsd2hpdGU6XCJmZmZcIix3aGl0ZXNtb2tlOlwiZjVmNWY1XCIseWVsbG93OlwiZmYwXCIseWVsbG93Z3JlZW46XCI5YWNkMzJcIn0sWT1vLmhleE5hbWVzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W2Vbbl1dPW4pO3JldHVybiB0fShXKSxKPWZ1bmN0aW9uKCl7dmFyIGU9XCIoPzpbLVxcXFwrXT9cXFxcZCpcXFxcLlxcXFxkKyU/KXwoPzpbLVxcXFwrXT9cXFxcZCslPylcIix0PVwiW1xcXFxzfFxcXFwoXSsoXCIrZStcIilbLHxcXFxcc10rKFwiK2UrXCIpWyx8XFxcXHNdKyhcIitlK1wiKVxcXFxzKlxcXFwpP1wiLG49XCJbXFxcXHN8XFxcXChdKyhcIitlK1wiKVssfFxcXFxzXSsoXCIrZStcIilbLHxcXFxcc10rKFwiK2UrXCIpWyx8XFxcXHNdKyhcIitlK1wiKVxcXFxzKlxcXFwpP1wiO3JldHVybntDU1NfVU5JVDpuZXcgUmVnRXhwKGUpLHJnYjpuZXcgUmVnRXhwKFwicmdiXCIrdCkscmdiYTpuZXcgUmVnRXhwKFwicmdiYVwiK24pLGhzbDpuZXcgUmVnRXhwKFwiaHNsXCIrdCksaHNsYTpuZXcgUmVnRXhwKFwiaHNsYVwiK24pLGhzdjpuZXcgUmVnRXhwKFwiaHN2XCIrdCksaHN2YTpuZXcgUmVnRXhwKFwiaHN2YVwiK24pLGhleDM6L14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLGhleDY6L14jPyhbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KSQvLGhleDQ6L14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLyxoZXg4Oi9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC99fSgpO3ZvaWQgMCE9PWUmJmUuZXhwb3J0cz9lLmV4cG9ydHM9bzp2b2lkIDAhPT0ocj1mdW5jdGlvbigpe3JldHVybiBvfS5jYWxsKHQsbix0LGUpKSYmKGUuZXhwb3J0cz1yKX0oTWF0aCl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDY3KTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKTtuKDEpKFwiMGY3M2U3M2NcIixyLCExLHt9KX0sZnVuY3Rpb24oZSx0LG4pe3Q9ZS5leHBvcnRzPW4oMCkoITEpLHQucHVzaChbZS5pLFwiXFxuLnZjLWVkaXRhYmxlLWlucHV0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnZjLWlucHV0X19pbnB1dCB7XFxuICBwYWRkaW5nOiAwO1xcbiAgYm9yZGVyOiAwO1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuLnZjLWlucHV0X19sYWJlbCB7XFxuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcXG59XFxuXCIsXCJcIl0pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1lZGl0YWJsZS1pbnB1dFwifSxbbihcImlucHV0XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbFwiLHZhbHVlOmUudmFsLGV4cHJlc3Npb246XCJ2YWxcIn1dLHJlZjpcImlucHV0XCIsc3RhdGljQ2xhc3M6XCJ2Yy1pbnB1dF9faW5wdXRcIixhdHRyczp7XCJhcmlhLWxhYmVsbGVkYnlcIjplLmxhYmVsSWR9LGRvbVByb3BzOnt2YWx1ZTplLnZhbH0sb246e2tleWRvd246ZS5oYW5kbGVLZXlEb3duLGlucHV0OltmdW5jdGlvbih0KXt0LnRhcmdldC5jb21wb3Npbmd8fChlLnZhbD10LnRhcmdldC52YWx1ZSl9LGUudXBkYXRlXX19KSxlLl92KFwiIFwiKSxuKFwic3BhblwiLHtzdGF0aWNDbGFzczpcInZjLWlucHV0X19sYWJlbFwiLGF0dHJzOntmb3I6ZS5sYWJlbCxpZDplLmxhYmVsSWR9fSxbZS5fdihlLl9zKGUubGFiZWxTcGFuVGV4dCkpXSksZS5fdihcIiBcIiksbihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJ2Yy1pbnB1dF9fZGVzY1wifSxbZS5fdihlLl9zKGUuZGVzYykpXSldKX0saT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIG89e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczppfTt0LmE9b30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY29tcGFjdFwiLGF0dHJzOntyb2xlOlwiYXBwbGljYXRpb25cIixcImFyaWEtbGFiZWxcIjpcIkNvbXBhY3QgY29sb3IgcGlja2VyXCJ9fSxbbihcInVsXCIse3N0YXRpY0NsYXNzOlwidmMtY29tcGFjdC1jb2xvcnNcIixhdHRyczp7cm9sZTpcImxpc3Rib3hcIn19LGUuX2woZS5wYWxldHRlVXBwZXJDYXNlKGUucGFsZXR0ZSksZnVuY3Rpb24odCl7cmV0dXJuIG4oXCJsaVwiLHtrZXk6dCxzdGF0aWNDbGFzczpcInZjLWNvbXBhY3QtY29sb3ItaXRlbVwiLGNsYXNzOntcInZjLWNvbXBhY3QtY29sb3ItaXRlbS0td2hpdGVcIjpcIiNGRkZGRkZcIj09PXR9LHN0eWxlOntiYWNrZ3JvdW5kOnR9LGF0dHJzOntyb2xlOlwib3B0aW9uXCIsXCJhcmlhLWxhYmVsXCI6XCJjb2xvcjpcIit0LFwiYXJpYS1zZWxlY3RlZFwiOnQ9PT1lLnBpY2t9LG9uOntjbGljazpmdW5jdGlvbihuKXtyZXR1cm4gZS5oYW5kbGVyQ2xpY2sodCl9fX0sW24oXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOnQ9PT1lLnBpY2ssZXhwcmVzc2lvbjpcImMgPT09IHBpY2tcIn1dLHN0YXRpY0NsYXNzOlwidmMtY29tcGFjdC1kb3RcIn0pXSl9KSwwKV0pfSxpPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgbz17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOml9O3QuYT1vfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtjfHxuKDcxKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDM3KSxvPW4ubihpKTtmb3IodmFyIGEgaW4gaSlcImRlZmF1bHRcIiE9PWEmJmZ1bmN0aW9uKGUpe24uZCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gaVtlXX0pfShhKTt2YXIgcz1uKDczKSxjPSExLGw9bigyKSx1PXIsZj1sKG8uYSxzLmEsITEsdSxudWxsLG51bGwpO2Yub3B0aW9ucy5fX2ZpbGU9XCJzcmMvY29tcG9uZW50cy9HcmF5c2NhbGUudnVlXCIsdC5kZWZhdWx0PWYuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNzIpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCIyMWRkYmI3NFwiLHIsITEse30pfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksXCJcXG4udmMtZ3JheXNjYWxlIHtcXG4gIHdpZHRoOiAxMjVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDE1cHggcmdiYSgwLDAsMCwuMTIpLCAwIDJweCAxMHB4IHJnYmEoMCwwLDAsLjE2KTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcbi52Yy1ncmF5c2NhbGUtY29sb3JzIHtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4udmMtZ3JheXNjYWxlLWNvbG9yLWl0ZW0ge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIHdpZHRoOiAyNXB4O1xcbiAgaGVpZ2h0OiAyNXB4O1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi52Yy1ncmF5c2NhbGUtY29sb3ItaXRlbS0td2hpdGUgLnZjLWdyYXlzY2FsZS1kb3Qge1xcbiAgYmFja2dyb3VuZDogIzAwMDtcXG59XFxuLnZjLWdyYXlzY2FsZS1kb3Qge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB3aWR0aDogNnB4O1xcbiAgaGVpZ2h0OiA2cHg7XFxuICBtYXJnaW46IC0zcHggMCAwIC0ycHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBvcGFjaXR5OiAxO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG59XFxuXCIsXCJcIl0pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1ncmF5c2NhbGVcIixhdHRyczp7cm9sZTpcImFwcGxpY2F0aW9uXCIsXCJhcmlhLWxhYmVsXCI6XCJHcmF5c2NhbGUgY29sb3IgcGlja2VyXCJ9fSxbbihcInVsXCIse3N0YXRpY0NsYXNzOlwidmMtZ3JheXNjYWxlLWNvbG9yc1wiLGF0dHJzOntyb2xlOlwibGlzdGJveFwifX0sZS5fbChlLnBhbGV0dGVVcHBlckNhc2UoZS5wYWxldHRlKSxmdW5jdGlvbih0KXtyZXR1cm4gbihcImxpXCIse2tleTp0LHN0YXRpY0NsYXNzOlwidmMtZ3JheXNjYWxlLWNvbG9yLWl0ZW1cIixjbGFzczp7XCJ2Yy1ncmF5c2NhbGUtY29sb3ItaXRlbS0td2hpdGVcIjpcIiNGRkZGRkZcIj09dH0sc3R5bGU6e2JhY2tncm91bmQ6dH0sYXR0cnM6e3JvbGU6XCJvcHRpb25cIixcImFyaWEtbGFiZWxcIjpcIkNvbG9yOlwiK3QsXCJhcmlhLXNlbGVjdGVkXCI6dD09PWUucGlja30sb246e2NsaWNrOmZ1bmN0aW9uKG4pe3JldHVybiBlLmhhbmRsZXJDbGljayh0KX19fSxbbihcImRpdlwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6dD09PWUucGljayxleHByZXNzaW9uOlwiYyA9PT0gcGlja1wifV0sc3RhdGljQ2xhc3M6XCJ2Yy1ncmF5c2NhbGUtZG90XCJ9KV0pfSksMCldKX0saT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIG89e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczppfTt0LmE9b30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y3x8big3NSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9bigzOCksbz1uLm4oaSk7Zm9yKHZhciBhIGluIGkpXCJkZWZhdWx0XCIhPT1hJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGlbZV19KX0oYSk7dmFyIHM9big3NyksYz0hMSxsPW4oMiksdT1yLGY9bChvLmEscy5hLCExLHUsbnVsbCxudWxsKTtmLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvTWF0ZXJpYWwudnVlXCIsdC5kZWZhdWx0PWYuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNzYpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCIxZmYzYWY3M1wiLHIsITEse30pfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksJ1xcbi52Yy1tYXRlcmlhbCB7XFxuICB3aWR0aDogOThweDtcXG4gIGhlaWdodDogOThweDtcXG4gIHBhZGRpbmc6IDE2cHg7XFxuICBmb250LWZhbWlseTogXCJSb2JvdG9cIjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDEwcHggcmdiYSgwLDAsMCwuMTIpLCAwIDJweCA1cHggcmdiYSgwLDAsMCwuMTYpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuLnZjLW1hdGVyaWFsIC52Yy1pbnB1dF9faW5wdXQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW4tdG9wOiAxMnB4O1xcbiAgZm9udC1zaXplOiAxNXB4O1xcbiAgY29sb3I6ICMzMzM7XFxuICBoZWlnaHQ6IDMwcHg7XFxufVxcbi52Yy1tYXRlcmlhbCAudmMtaW5wdXRfX2xhYmVsIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBjb2xvcjogIzk5OTtcXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcbn1cXG4udmMtbWF0ZXJpYWwtaGV4IHtcXG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDJweDtcXG4gIGJvcmRlci1ib3R0b20tc3R5bGU6IHNvbGlkO1xcbn1cXG4udmMtbWF0ZXJpYWwtc3BsaXQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XFxuICBwYWRkaW5nLXRvcDogMTFweDtcXG59XFxuLnZjLW1hdGVyaWFsLXRoaXJkIHtcXG4gIGZsZXg6IDE7XFxuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbn1cXG4nLFwiXCJdKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtbWF0ZXJpYWxcIixhdHRyczp7cm9sZTpcImFwcGxpY2F0aW9uXCIsXCJhcmlhLWxhYmVsXCI6XCJNYXRlcmlhbCBjb2xvciBwaWNrZXJcIn19LFtuKFwiZWQtaW5cIix7c3RhdGljQ2xhc3M6XCJ2Yy1tYXRlcmlhbC1oZXhcIixzdHlsZTp7Ym9yZGVyQ29sb3I6ZS5jb2xvcnMuaGV4fSxhdHRyczp7bGFiZWw6XCJoZXhcIn0sb246e2NoYW5nZTplLm9uQ2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5jb2xvcnMuaGV4LGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuJHNldChlLmNvbG9ycyxcImhleFwiLHQpfSxleHByZXNzaW9uOlwiY29sb3JzLmhleFwifX0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1tYXRlcmlhbC1zcGxpdFwifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLW1hdGVyaWFsLXRoaXJkXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiclwifSxvbjp7Y2hhbmdlOmUub25DaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycy5yZ2JhLnIsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS4kc2V0KGUuY29sb3JzLnJnYmEsXCJyXCIsdCl9LGV4cHJlc3Npb246XCJjb2xvcnMucmdiYS5yXCJ9fSldLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1tYXRlcmlhbC10aGlyZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImdcIn0sb246e2NoYW5nZTplLm9uQ2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5jb2xvcnMucmdiYS5nLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuJHNldChlLmNvbG9ycy5yZ2JhLFwiZ1wiLHQpfSxleHByZXNzaW9uOlwiY29sb3JzLnJnYmEuZ1wifX0pXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtbWF0ZXJpYWwtdGhpcmRcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJiXCJ9LG9uOntjaGFuZ2U6ZS5vbkNoYW5nZX0sbW9kZWw6e3ZhbHVlOmUuY29sb3JzLnJnYmEuYixjYWxsYmFjazpmdW5jdGlvbih0KXtlLiRzZXQoZS5jb2xvcnMucmdiYSxcImJcIix0KX0sZXhwcmVzc2lvbjpcImNvbG9ycy5yZ2JhLmJcIn19KV0sMSldKV0sMSl9LGk9W107ci5fd2l0aFN0cmlwcGVkPSEwO3ZhciBvPXtyZW5kZXI6cixzdGF0aWNSZW5kZXJGbnM6aX07dC5hPW99LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oNzkpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW4oMzkpLG89bi5uKGkpO2Zvcih2YXIgYSBpbiBpKVwiZGVmYXVsdFwiIT09YSYmZnVuY3Rpb24oZSl7bi5kKHQsZSxmdW5jdGlvbigpe3JldHVybiBpW2VdfSl9KGEpO3ZhciBzPW4oMTE0KSxjPSExLGw9bigyKSx1PXIsZj1sKG8uYSxzLmEsITEsdSxudWxsLG51bGwpO2Yub3B0aW9ucy5fX2ZpbGU9XCJzcmMvY29tcG9uZW50cy9TbGlkZXIudnVlXCIsdC5kZWZhdWx0PWYuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oODApO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCI3OTgyYWE0M1wiLHIsITEse30pfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksXCJcXG4udmMtc2xpZGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA0MTBweDtcXG59XFxuLnZjLXNsaWRlci1odWUtd2FycCB7XFxuICBoZWlnaHQ6IDEycHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi52Yy1zbGlkZXItaHVlLXdhcnAgLnZjLWh1ZS1waWNrZXIge1xcbiAgd2lkdGg6IDE0cHg7XFxuICBoZWlnaHQ6IDE0cHg7XFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtN3B4LCAtMnB4KTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDgsIDI0OCwgMjQ4KTtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4zNyk7XFxufVxcbi52Yy1zbGlkZXItc3dhdGNoZXMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1hcmdpbi10b3A6IDIwcHg7XFxufVxcbi52Yy1zbGlkZXItc3dhdGNoIHtcXG4gIG1hcmdpbi1yaWdodDogMXB4O1xcbiAgZmxleDogMTtcXG4gIHdpZHRoOiAyMCU7XFxufVxcbi52Yy1zbGlkZXItc3dhdGNoOmZpcnN0LWNoaWxkIHtcXG4gIG1hcmdpbi1yaWdodDogMXB4O1xcbn1cXG4udmMtc2xpZGVyLXN3YXRjaDpmaXJzdC1jaGlsZCAudmMtc2xpZGVyLXN3YXRjaC1waWNrZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4IDBweCAwcHggMnB4O1xcbn1cXG4udmMtc2xpZGVyLXN3YXRjaDpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG59XFxuLnZjLXNsaWRlci1zd2F0Y2g6bGFzdC1jaGlsZCAudmMtc2xpZGVyLXN3YXRjaC1waWNrZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMHB4IDJweCAycHggMHB4O1xcbn1cXG4udmMtc2xpZGVyLXN3YXRjaC1waWNrZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgaGVpZ2h0OiAxMnB4O1xcbn1cXG4udmMtc2xpZGVyLXN3YXRjaDpudGgtY2hpbGQobikgLnZjLXNsaWRlci1zd2F0Y2gtcGlja2VyLnZjLXNsaWRlci1zd2F0Y2gtcGlja2VyLS1hY3RpdmUge1xcbiAgdHJhbnNmb3JtOiBzY2FsZVkoMS44KTtcXG4gIGJvcmRlci1yYWRpdXM6IDMuNnB4LzJweDtcXG59XFxuLnZjLXNsaWRlci1zd2F0Y2gtcGlja2VyLS13aGl0ZSB7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxcHggI2RkZDtcXG59XFxuLnZjLXNsaWRlci1zd2F0Y2gtcGlja2VyLS1hY3RpdmUudmMtc2xpZGVyLXN3YXRjaC1waWNrZXItLXdoaXRlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDAuNnB4ICNkZGQ7XFxufVxcblwiLFwiXCJdKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXQuX19lc01vZHVsZT0hMDt2YXIgaT1uKDgyKSxvPXIoaSksYT1uKDEwMCkscz1yKGEpLGM9XCJmdW5jdGlvblwiPT10eXBlb2Ygcy5kZWZhdWx0JiZcInN5bWJvbFwiPT10eXBlb2Ygby5kZWZhdWx0P2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHMuZGVmYXVsdCYmZS5jb25zdHJ1Y3Rvcj09PXMuZGVmYXVsdCYmZSE9PXMuZGVmYXVsdC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07dC5kZWZhdWx0PVwiZnVuY3Rpb25cIj09dHlwZW9mIHMuZGVmYXVsdCYmXCJzeW1ib2xcIj09PWMoby5kZWZhdWx0KT9mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOmMoZSl9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBzLmRlZmF1bHQmJmUuY29uc3RydWN0b3I9PT1zLmRlZmF1bHQmJmUhPT1zLmRlZmF1bHQucHJvdG90eXBlP1wic3ltYm9sXCI6dm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOmMoZSl9fSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPXtkZWZhdWx0Om4oODMpLF9fZXNNb2R1bGU6ITB9fSxmdW5jdGlvbihlLHQsbil7big4NCksbig5NiksZS5leHBvcnRzPW4oMzIpLmYoXCJpdGVyYXRvclwiKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oODUpKCEwKTtuKDQwKShTdHJpbmcsXCJTdHJpbmdcIixmdW5jdGlvbihlKXt0aGlzLl90PVN0cmluZyhlKSx0aGlzLl9pPTB9LGZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLl90LG49dGhpcy5faTtyZXR1cm4gbj49dC5sZW5ndGg/e3ZhbHVlOnZvaWQgMCxkb25lOiEwfTooZT1yKHQsbiksdGhpcy5faSs9ZS5sZW5ndGgse3ZhbHVlOmUsZG9uZTohMX0pfSl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDIzKSxpPW4oMjQpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXt2YXIgbyxhLHM9U3RyaW5nKGkodCkpLGM9cihuKSxsPXMubGVuZ3RoO3JldHVybiBjPDB8fGM+PWw/ZT9cIlwiOnZvaWQgMDoobz1zLmNoYXJDb2RlQXQoYyksbzw1NTI5Nnx8bz41NjMxOXx8YysxPT09bHx8KGE9cy5jaGFyQ29kZUF0KGMrMSkpPDU2MzIwfHxhPjU3MzQzP2U/cy5jaGFyQXQoYyk6bzplP3Muc2xpY2UoYyxjKzIpOmEtNTYzMjArKG8tNTUyOTY8PDEwKSs2NTUzNil9fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oODcpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbil7aWYocihlKSx2b2lkIDA9PT10KXJldHVybiBlO3N3aXRjaChuKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBlLmNhbGwodCxuKX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbihuLHIpe3JldHVybiBlLmNhbGwodCxuLHIpfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4scixpKXtyZXR1cm4gZS5jYWxsKHQsbixyLGkpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0LGFyZ3VtZW50cyl9fX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBUeXBlRXJyb3IoZStcIiBpcyBub3QgYSBmdW5jdGlvbiFcIik7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9big0NSksaT1uKDE4KSxvPW4oMzEpLGE9e307big3KShhLG4oMTEpKFwiaXRlcmF0b3JcIiksZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLGUuZXhwb3J0cz1mdW5jdGlvbihlLHQsbil7ZS5wcm90b3R5cGU9cihhLHtuZXh0OmkoMSxuKX0pLG8oZSx0K1wiIEl0ZXJhdG9yXCIpfX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oOCksaT1uKDE2KSxvPW4oMjcpO2UuZXhwb3J0cz1uKDkpP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzOmZ1bmN0aW9uKGUsdCl7aShlKTtmb3IodmFyIG4sYT1vKHQpLHM9YS5sZW5ndGgsYz0wO3M+Yzspci5mKGUsbj1hW2MrK10sdFtuXSk7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQsbil7dmFyIHI9big0Nyk7ZS5leHBvcnRzPU9iamVjdChcInpcIikucHJvcGVydHlJc0VudW1lcmFibGUoMCk/T2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVyblwiU3RyaW5nXCI9PXIoZSk/ZS5zcGxpdChcIlwiKTpPYmplY3QoZSl9fSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigxMCksaT1uKDkyKSxvPW4oOTMpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuLGEpe3ZhciBzLGM9cih0KSxsPWkoYy5sZW5ndGgpLHU9byhhLGwpO2lmKGUmJm4hPW4pe2Zvcig7bD51OylpZigocz1jW3UrK10pIT1zKXJldHVybiEwfWVsc2UgZm9yKDtsPnU7dSsrKWlmKChlfHx1IGluIGMpJiZjW3VdPT09bilyZXR1cm4gZXx8dXx8MDtyZXR1cm4hZSYmLTF9fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMjMpLGk9TWF0aC5taW47ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlPjA/aShyKGUpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigyMyksaT1NYXRoLm1heCxvPU1hdGgubWluO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBlPXIoZSksZTwwP2koZSt0LDApOm8oZSx0KX19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDQpLmRvY3VtZW50O2UuZXhwb3J0cz1yJiZyLmRvY3VtZW50RWxlbWVudH0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNiksaT1uKDQ4KSxvPW4oMjgpKFwiSUVfUFJPVE9cIiksYT1PYmplY3QucHJvdG90eXBlO2UuZXhwb3J0cz1PYmplY3QuZ2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKGUpe3JldHVybiBlPWkoZSkscihlLG8pP2Vbb106XCJmdW5jdGlvblwiPT10eXBlb2YgZS5jb25zdHJ1Y3RvciYmZSBpbnN0YW5jZW9mIGUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU6ZSBpbnN0YW5jZW9mIE9iamVjdD9hOm51bGx9fSxmdW5jdGlvbihlLHQsbil7big5Nyk7Zm9yKHZhciByPW4oNCksaT1uKDcpLG89bigyNiksYT1uKDExKShcInRvU3RyaW5nVGFnXCIpLHM9XCJDU1NSdWxlTGlzdCxDU1NTdHlsZURlY2xhcmF0aW9uLENTU1ZhbHVlTGlzdCxDbGllbnRSZWN0TGlzdCxET01SZWN0TGlzdCxET01TdHJpbmdMaXN0LERPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCxTVkdQYXRoU2VnTGlzdCxTVkdQb2ludExpc3QsU1ZHU3RyaW5nTGlzdCxTVkdUcmFuc2Zvcm1MaXN0LFNvdXJjZUJ1ZmZlckxpc3QsU3R5bGVTaGVldExpc3QsVGV4dFRyYWNrQ3VlTGlzdCxUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdFwiLnNwbGl0KFwiLFwiKSxjPTA7YzxzLmxlbmd0aDtjKyspe3ZhciBsPXNbY10sdT1yW2xdLGY9dSYmdS5wcm90b3R5cGU7ZiYmIWZbYV0mJmkoZixhLGwpLG9bbF09by5BcnJheX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDk4KSxpPW4oOTkpLG89bigyNiksYT1uKDEwKTtlLmV4cG9ydHM9big0MCkoQXJyYXksXCJBcnJheVwiLGZ1bmN0aW9uKGUsdCl7dGhpcy5fdD1hKGUpLHRoaXMuX2k9MCx0aGlzLl9rPXR9LGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fdCx0PXRoaXMuX2ssbj10aGlzLl9pKys7cmV0dXJuIWV8fG4+PWUubGVuZ3RoPyh0aGlzLl90PXZvaWQgMCxpKDEpKTpcImtleXNcIj09dD9pKDAsbik6XCJ2YWx1ZXNcIj09dD9pKDAsZVtuXSk6aSgwLFtuLGVbbl1dKX0sXCJ2YWx1ZXNcIiksby5Bcmd1bWVudHM9by5BcnJheSxyKFwia2V5c1wiKSxyKFwidmFsdWVzXCIpLHIoXCJlbnRyaWVzXCIpfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbigpe319LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue3ZhbHVlOnQsZG9uZTohIWV9fX0sZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz17ZGVmYXVsdDpuKDEwMSksX19lc01vZHVsZTohMH19LGZ1bmN0aW9uKGUsdCxuKXtuKDEwMiksbigxMDgpLG4oMTA5KSxuKDExMCksZS5leHBvcnRzPW4oMTUpLlN5bWJvbH0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oNCksaT1uKDYpLG89big5KSxhPW4oNDEpLHM9big0NCksYz1uKDEwMykuS0VZLGw9bigxNyksdT1uKDI5KSxmPW4oMzEpLGQ9bigxOSksaD1uKDExKSxwPW4oMzIpLHY9bigzMyksZz1uKDEwNCksYj1uKDEwNSkseD1uKDE2KSxtPW4oMTIpLF89big0OCksdz1uKDEwKSx5PW4oMjUpLEM9bigxOCksaz1uKDQ1KSxGPW4oMTA2KSxTPW4oMTA3KSxBPW4oNDkpLE89big4KSxFPW4oMjcpLE09Uy5mLGo9Ty5mLEw9Ri5mLFA9ci5TeW1ib2wsUj1yLkpTT04sRD1SJiZSLnN0cmluZ2lmeSxCPWgoXCJfaGlkZGVuXCIpLFQ9aChcInRvUHJpbWl0aXZlXCIpLEg9e30ucHJvcGVydHlJc0VudW1lcmFibGUsTj11KFwic3ltYm9sLXJlZ2lzdHJ5XCIpLHo9dShcInN5bWJvbHNcIiksST11KFwib3Atc3ltYm9sc1wiKSwkPU9iamVjdC5wcm90b3R5cGUsVT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBQJiYhIUEuZixHPXIuUU9iamVjdCxWPSFHfHwhRy5wcm90b3R5cGV8fCFHLnByb3RvdHlwZS5maW5kQ2hpbGQscT1vJiZsKGZ1bmN0aW9uKCl7cmV0dXJuIDchPWsoaih7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGoodGhpcyxcImFcIix7dmFsdWU6N30pLmF9fSkpLmF9KT9mdW5jdGlvbihlLHQsbil7dmFyIHI9TSgkLHQpO3ImJmRlbGV0ZSAkW3RdLGooZSx0LG4pLHImJmUhPT0kJiZqKCQsdCxyKX06aixYPWZ1bmN0aW9uKGUpe3ZhciB0PXpbZV09ayhQLnByb3RvdHlwZSk7cmV0dXJuIHQuX2s9ZSx0fSxXPVUmJlwic3ltYm9sXCI9PXR5cGVvZiBQLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIFB9LFk9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPT09JCYmWShJLHQsbikseChlKSx0PXkodCwhMCkseChuKSxpKHosdCk/KG4uZW51bWVyYWJsZT8oaShlLEIpJiZlW0JdW3RdJiYoZVtCXVt0XT0hMSksbj1rKG4se2VudW1lcmFibGU6QygwLCExKX0pKTooaShlLEIpfHxqKGUsQixDKDEse30pKSxlW0JdW3RdPSEwKSxxKGUsdCxuKSk6aihlLHQsbil9LEo9ZnVuY3Rpb24oZSx0KXt4KGUpO2Zvcih2YXIgbixyPWcodD13KHQpKSxpPTAsbz1yLmxlbmd0aDtvPmk7KVkoZSxuPXJbaSsrXSx0W25dKTtyZXR1cm4gZX0sSz1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P2soZSk6SihrKGUpLHQpfSxaPWZ1bmN0aW9uKGUpe3ZhciB0PUguY2FsbCh0aGlzLGU9eShlLCEwKSk7cmV0dXJuISh0aGlzPT09JCYmaSh6LGUpJiYhaShJLGUpKSYmKCEodHx8IWkodGhpcyxlKXx8IWkoeixlKXx8aSh0aGlzLEIpJiZ0aGlzW0JdW2VdKXx8dCl9LFE9ZnVuY3Rpb24oZSx0KXtpZihlPXcoZSksdD15KHQsITApLGUhPT0kfHwhaSh6LHQpfHxpKEksdCkpe3ZhciBuPU0oZSx0KTtyZXR1cm4hbnx8IWkoeix0KXx8aShlLEIpJiZlW0JdW3RdfHwobi5lbnVtZXJhYmxlPSEwKSxufX0sZWU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49TCh3KGUpKSxyPVtdLG89MDtuLmxlbmd0aD5vOylpKHosdD1uW28rK10pfHx0PT1CfHx0PT1jfHxyLnB1c2godCk7cmV0dXJuIHJ9LHRlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPWU9PT0kLHI9TChuP0k6dyhlKSksbz1bXSxhPTA7ci5sZW5ndGg+YTspIWkoeix0PXJbYSsrXSl8fG4mJiFpKCQsdCl8fG8ucHVzaCh6W3RdKTtyZXR1cm4gb307VXx8KFA9ZnVuY3Rpb24oKXtpZih0aGlzIGluc3RhbmNlb2YgUCl0aHJvdyBUeXBlRXJyb3IoXCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhXCIpO3ZhciBlPWQoYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApLHQ9ZnVuY3Rpb24obil7dGhpcz09PSQmJnQuY2FsbChJLG4pLGkodGhpcyxCKSYmaSh0aGlzW0JdLGUpJiYodGhpc1tCXVtlXT0hMSkscSh0aGlzLGUsQygxLG4pKX07cmV0dXJuIG8mJlYmJnEoJCxlLHtjb25maWd1cmFibGU6ITAsc2V0OnR9KSxYKGUpfSxzKFAucHJvdG90eXBlLFwidG9TdHJpbmdcIixmdW5jdGlvbigpe3JldHVybiB0aGlzLl9rfSksUy5mPVEsTy5mPVksbig1MCkuZj1GLmY9ZWUsbigzNCkuZj1aLEEuZj10ZSxvJiYhbigxNCkmJnMoJCxcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsWiwhMCkscC5mPWZ1bmN0aW9uKGUpe3JldHVybiBYKGgoZSkpfSksYShhLkcrYS5XK2EuRiohVSx7U3ltYm9sOlB9KTtmb3IodmFyIG5lPVwiaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXNcIi5zcGxpdChcIixcIikscmU9MDtuZS5sZW5ndGg+cmU7KWgobmVbcmUrK10pO2Zvcih2YXIgaWU9RShoLnN0b3JlKSxvZT0wO2llLmxlbmd0aD5vZTspdihpZVtvZSsrXSk7YShhLlMrYS5GKiFVLFwiU3ltYm9sXCIse2ZvcjpmdW5jdGlvbihlKXtyZXR1cm4gaShOLGUrPVwiXCIpP05bZV06TltlXT1QKGUpfSxrZXlGb3I6ZnVuY3Rpb24oZSl7aWYoIVcoZSkpdGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgc3ltYm9sIVwiKTtmb3IodmFyIHQgaW4gTilpZihOW3RdPT09ZSlyZXR1cm4gdH0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7Vj0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7Vj0hMX19KSxhKGEuUythLkYqIVUsXCJPYmplY3RcIix7Y3JlYXRlOkssZGVmaW5lUHJvcGVydHk6WSxkZWZpbmVQcm9wZXJ0aWVzOkosZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOlEsZ2V0T3duUHJvcGVydHlOYW1lczplZSxnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6dGV9KTt2YXIgYWU9bChmdW5jdGlvbigpe0EuZigxKX0pO2EoYS5TK2EuRiphZSxcIk9iamVjdFwiLHtnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ZnVuY3Rpb24oZSl7cmV0dXJuIEEuZihfKGUpKX19KSxSJiZhKGEuUythLkYqKCFVfHxsKGZ1bmN0aW9uKCl7dmFyIGU9UCgpO3JldHVyblwiW251bGxdXCIhPUQoW2VdKXx8XCJ7fVwiIT1EKHthOmV9KXx8XCJ7fVwiIT1EKE9iamVjdChlKSl9KSksXCJKU09OXCIse3N0cmluZ2lmeTpmdW5jdGlvbihlKXtmb3IodmFyIHQsbixyPVtlXSxpPTE7YXJndW1lbnRzLmxlbmd0aD5pOylyLnB1c2goYXJndW1lbnRzW2krK10pO2lmKG49dD1yWzFdLChtKHQpfHx2b2lkIDAhPT1lKSYmIVcoZSkpcmV0dXJuIGIodCl8fCh0PWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKHQ9bi5jYWxsKHRoaXMsZSx0KSksIVcodCkpcmV0dXJuIHR9KSxyWzFdPXQsRC5hcHBseShSLHIpfX0pLFAucHJvdG90eXBlW1RdfHxuKDcpKFAucHJvdG90eXBlLFQsUC5wcm90b3R5cGUudmFsdWVPZiksZihQLFwiU3ltYm9sXCIpLGYoTWF0aCxcIk1hdGhcIiwhMCksZihyLkpTT04sXCJKU09OXCIsITApfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigxOSkoXCJtZXRhXCIpLGk9bigxMiksbz1uKDYpLGE9big4KS5mLHM9MCxjPU9iamVjdC5pc0V4dGVuc2libGV8fGZ1bmN0aW9uKCl7cmV0dXJuITB9LGw9IW4oMTcpKGZ1bmN0aW9uKCl7cmV0dXJuIGMoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSx1PWZ1bmN0aW9uKGUpe2EoZSxyLHt2YWx1ZTp7aTpcIk9cIisgKytzLHc6e319fSl9LGY9ZnVuY3Rpb24oZSx0KXtpZighaShlKSlyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZT9lOihcInN0cmluZ1wiPT10eXBlb2YgZT9cIlNcIjpcIlBcIikrZTtpZighbyhlLHIpKXtpZighYyhlKSlyZXR1cm5cIkZcIjtpZighdClyZXR1cm5cIkVcIjt1KGUpfXJldHVybiBlW3JdLml9LGQ9ZnVuY3Rpb24oZSx0KXtpZighbyhlLHIpKXtpZighYyhlKSlyZXR1cm4hMDtpZighdClyZXR1cm4hMTt1KGUpfXJldHVybiBlW3JdLnd9LGg9ZnVuY3Rpb24oZSl7cmV0dXJuIGwmJnAuTkVFRCYmYyhlKSYmIW8oZSxyKSYmdShlKSxlfSxwPWUuZXhwb3J0cz17S0VZOnIsTkVFRDohMSxmYXN0S2V5OmYsZ2V0V2VhazpkLG9uRnJlZXplOmh9fSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigyNyksaT1uKDQ5KSxvPW4oMzQpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1yKGUpLG49aS5mO2lmKG4pZm9yKHZhciBhLHM9bihlKSxjPW8uZixsPTA7cy5sZW5ndGg+bDspYy5jYWxsKGUsYT1zW2wrK10pJiZ0LnB1c2goYSk7cmV0dXJuIHR9fSxmdW5jdGlvbihlLHQsbil7dmFyIHI9big0Nyk7ZS5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiQXJyYXlcIj09cihlKX19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDEwKSxpPW4oNTApLmYsbz17fS50b1N0cmluZyxhPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KTpbXSxzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gaShlKX1jYXRjaChlKXtyZXR1cm4gYS5zbGljZSgpfX07ZS5leHBvcnRzLmY9ZnVuY3Rpb24oZSl7cmV0dXJuIGEmJlwiW29iamVjdCBXaW5kb3ddXCI9PW8uY2FsbChlKT9zKGUpOmkocihlKSl9fSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigzNCksaT1uKDE4KSxvPW4oMTApLGE9bigyNSkscz1uKDYpLGM9big0MiksbD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3QuZj1uKDkpP2w6ZnVuY3Rpb24oZSx0KXtpZihlPW8oZSksdD1hKHQsITApLGMpdHJ5e3JldHVybiBsKGUsdCl9Y2F0Y2goZSl7fWlmKHMoZSx0KSlyZXR1cm4gaSghci5mLmNhbGwoZSx0KSxlW3RdKX19LGZ1bmN0aW9uKGUsdCl7fSxmdW5jdGlvbihlLHQsbil7bigzMykoXCJhc3luY0l0ZXJhdG9yXCIpfSxmdW5jdGlvbihlLHQsbil7bigzMykoXCJvYnNlcnZhYmxlXCIpfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigxMTIpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCI3YzVmMWExY1wiLHIsITEse30pfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksXCJcXG4udmMtaHVlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGJvdHRvbTogMHB4O1xcbiAgbGVmdDogMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbn1cXG4udmMtaHVlLS1ob3Jpem9udGFsIHtcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2YwMCAwJSwgI2ZmMCAxNyUsICMwZjAgMzMlLCAjMGZmIDUwJSwgIzAwZiA2NyUsICNmMGYgODMlLCAjZjAwIDEwMCUpO1xcbn1cXG4udmMtaHVlLS12ZXJ0aWNhbCB7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCAjZjAwIDAlLCAjZmYwIDE3JSwgIzBmMCAzMyUsICMwZmYgNTAlLCAjMDBmIDY3JSwgI2YwZiA4MyUsICNmMDAgMTAwJSk7XFxufVxcbi52Yy1odWUtY29udGFpbmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG1hcmdpbjogMCAycHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi52Yy1odWUtcG9pbnRlciB7XFxuICB6LWluZGV4OiAyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4udmMtaHVlLXBpY2tlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBtYXJnaW4tdG9wOiAxcHg7XFxuICB3aWR0aDogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMXB4O1xcbiAgaGVpZ2h0OiA4cHg7XFxuICBib3gtc2hhZG93OiAwIDAgMnB4IHJnYmEoMCwgMCwgMCwgLjYpO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMnB4KSA7XFxufVxcblwiLFwiXCJdKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse2NsYXNzOltcInZjLWh1ZVwiLGUuZGlyZWN0aW9uQ2xhc3NdfSxbbihcImRpdlwiLHtyZWY6XCJjb250YWluZXJcIixzdGF0aWNDbGFzczpcInZjLWh1ZS1jb250YWluZXJcIixhdHRyczp7cm9sZTpcInNsaWRlclwiLFwiYXJpYS12YWx1ZW5vd1wiOmUuY29sb3JzLmhzbC5oLFwiYXJpYS12YWx1ZW1pblwiOlwiMFwiLFwiYXJpYS12YWx1ZW1heFwiOlwiMzYwXCJ9LG9uOnttb3VzZWRvd246ZS5oYW5kbGVNb3VzZURvd24sdG91Y2htb3ZlOmUuaGFuZGxlQ2hhbmdlLHRvdWNoc3RhcnQ6ZS5oYW5kbGVDaGFuZ2V9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWh1ZS1wb2ludGVyXCIsc3R5bGU6e3RvcDplLnBvaW50ZXJUb3AsbGVmdDplLnBvaW50ZXJMZWZ0fSxhdHRyczp7cm9sZTpcInByZXNlbnRhdGlvblwifX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1odWUtcGlja2VyXCJ9KV0pXSldKX0saT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIG89e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczppfTt0LmE9b30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2xpZGVyXCIsYXR0cnM6e3JvbGU6XCJhcHBsaWNhdGlvblwiLFwiYXJpYS1sYWJlbFwiOlwiU2xpZGVyIGNvbG9yIHBpY2tlclwifX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1zbGlkZXItaHVlLXdhcnBcIn0sW24oXCJodWVcIix7b246e2NoYW5nZTplLmh1ZUNoYW5nZX0sbW9kZWw6e3ZhbHVlOmUuY29sb3JzLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuY29sb3JzPXR9LGV4cHJlc3Npb246XCJjb2xvcnNcIn19KV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNsaWRlci1zd2F0Y2hlc1wiLGF0dHJzOntyb2xlOlwiZ3JvdXBcIn19LGUuX2woZS5ub3JtYWxpemVkU3dhdGNoZXMsZnVuY3Rpb24odCxyKXtyZXR1cm4gbihcImRpdlwiLHtrZXk6cixzdGF0aWNDbGFzczpcInZjLXNsaWRlci1zd2F0Y2hcIixhdHRyczp7XCJkYXRhLWluZGV4XCI6cixcImFyaWEtbGFiZWxcIjpcImNvbG9yOlwiK2UuY29sb3JzLmhleCxyb2xlOlwiYnV0dG9uXCJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtyZXR1cm4gZS5oYW5kbGVTd0NsaWNrKHIsdCl9fX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1zbGlkZXItc3dhdGNoLXBpY2tlclwiLGNsYXNzOntcInZjLXNsaWRlci1zd2F0Y2gtcGlja2VyLS1hY3RpdmVcIjplLmlzQWN0aXZlKHQsciksXCJ2Yy1zbGlkZXItc3dhdGNoLXBpY2tlci0td2hpdGVcIjoxPT09dC5sfSxzdHlsZTp7YmFja2dyb3VuZDpcImhzbChcIitlLmNvbG9ycy5oc2wuaCtcIiwgXCIrMTAwKnQucytcIiUsIFwiKzEwMCp0LmwrXCIlKVwifX0pXSl9KSwwKV0pfSxpPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgbz17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOml9O3QuYT1vfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtjfHxuKDExNil9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9big1Miksbz1uLm4oaSk7Zm9yKHZhciBhIGluIGkpXCJkZWZhdWx0XCIhPT1hJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGlbZV19KX0oYSk7dmFyIHM9bigxMTkpLGM9ITEsbD1uKDIpLHU9cixmPWwoby5hLHMuYSwhMSx1LG51bGwsbnVsbCk7Zi5vcHRpb25zLl9fZmlsZT1cInNyYy9jb21wb25lbnRzL1N3YXRjaGVzLnZ1ZVwiLHQuZGVmYXVsdD1mLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDExNyk7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbZS5pLHIsXCJcIl1dKSxyLmxvY2FscyYmKGUuZXhwb3J0cz1yLmxvY2Fscyk7bigxKShcIjEwZjgzOWEyXCIsciwhMSx7fSl9LGZ1bmN0aW9uKGUsdCxuKXt0PWUuZXhwb3J0cz1uKDApKCExKSx0LnB1c2goW2UuaSxcIlxcbi52Yy1zd2F0Y2hlcyB7XFxuICB3aWR0aDogMzIwcHg7XFxuICBoZWlnaHQ6IDI0MHB4O1xcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDEwcHggcmdiYSgwLDAsMCwuMTIpLCAwIDJweCA1cHggcmdiYSgwLDAsMCwuMTYpO1xcbn1cXG4udmMtc3dhdGNoZXMtYm94IHtcXG4gIHBhZGRpbmc6IDE2cHggMCA2cHggMTZweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi52Yy1zd2F0Y2hlcy1jb2xvci1ncm91cCB7XFxuICBwYWRkaW5nLWJvdHRvbTogMTBweDtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcbi52Yy1zd2F0Y2hlcy1jb2xvci1pdCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDI0cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kOiAjODgwZTRmO1xcbiAgbWFyZ2luLWJvdHRvbTogMXB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIC1tcy1ib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDtcXG4gIC1tb3otYm9yZGVyLXJhZGl1czogMnB4IDJweCAwIDA7XFxuICAtby1ib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDtcXG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMnB4IDJweCAwIDA7XFxuICBib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDtcXG59XFxuLnZjLXN3YXRjaGVzLWNvbG9yLS13aGl0ZSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjREREO1xcbn1cXG4udmMtc3dhdGNoZXMtcGljayB7XFxuICBmaWxsOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxuICBtYXJnaW4tbGVmdDogOHB4O1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi52Yy1zd2F0Y2hlcy1jb2xvci0td2hpdGUgLnZjLXN3YXRjaGVzLXBpY2sge1xcbiAgZmlsbDogcmdiKDUxLCA1MSwgNTEpO1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxuLmQodCxcInJlZFwiLGZ1bmN0aW9uKCl7cmV0dXJuIHJ9KSxuLmQodCxcInBpbmtcIixmdW5jdGlvbigpe3JldHVybiBpfSksbi5kKHQsXCJwdXJwbGVcIixmdW5jdGlvbigpe3JldHVybiBvfSksbi5kKHQsXCJkZWVwUHVycGxlXCIsZnVuY3Rpb24oKXtyZXR1cm4gYX0pLG4uZCh0LFwiaW5kaWdvXCIsZnVuY3Rpb24oKXtyZXR1cm4gc30pLG4uZCh0LFwiYmx1ZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGN9KSxuLmQodCxcImxpZ2h0Qmx1ZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGx9KSxuLmQodCxcImN5YW5cIixmdW5jdGlvbigpe3JldHVybiB1fSksbi5kKHQsXCJ0ZWFsXCIsZnVuY3Rpb24oKXtyZXR1cm4gZn0pLG4uZCh0LFwiZ3JlZW5cIixmdW5jdGlvbigpe3JldHVybiBkfSksbi5kKHQsXCJsaWdodEdyZWVuXCIsZnVuY3Rpb24oKXtyZXR1cm4gaH0pLG4uZCh0LFwibGltZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIHB9KSxuLmQodCxcInllbGxvd1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHZ9KSxuLmQodCxcImFtYmVyXCIsZnVuY3Rpb24oKXtyZXR1cm4gZ30pLG4uZCh0LFwib3JhbmdlXCIsZnVuY3Rpb24oKXtyZXR1cm4gYn0pLG4uZCh0LFwiZGVlcE9yYW5nZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIHh9KSxuLmQodCxcImJyb3duXCIsZnVuY3Rpb24oKXtyZXR1cm4gbX0pLG4uZCh0LFwiZ3JleVwiLGZ1bmN0aW9uKCl7cmV0dXJuIF99KSxuLmQodCxcImJsdWVHcmV5XCIsZnVuY3Rpb24oKXtyZXR1cm4gd30pLG4uZCh0LFwiZGFya1RleHRcIixmdW5jdGlvbigpe3JldHVybiB5fSksbi5kKHQsXCJsaWdodFRleHRcIixmdW5jdGlvbigpe3JldHVybiBDfSksbi5kKHQsXCJkYXJrSWNvbnNcIixmdW5jdGlvbigpe3JldHVybiBrfSksbi5kKHQsXCJsaWdodEljb25zXCIsZnVuY3Rpb24oKXtyZXR1cm4gRn0pLG4uZCh0LFwid2hpdGVcIixmdW5jdGlvbigpe3JldHVybiBTfSksbi5kKHQsXCJibGFja1wiLGZ1bmN0aW9uKCl7cmV0dXJuIEF9KTt2YXIgcj17NTA6XCIjZmZlYmVlXCIsMTAwOlwiI2ZmY2RkMlwiLDIwMDpcIiNlZjlhOWFcIiwzMDA6XCIjZTU3MzczXCIsNDAwOlwiI2VmNTM1MFwiLDUwMDpcIiNmNDQzMzZcIiw2MDA6XCIjZTUzOTM1XCIsNzAwOlwiI2QzMmYyZlwiLDgwMDpcIiNjNjI4MjhcIiw5MDA6XCIjYjcxYzFjXCIsYTEwMDpcIiNmZjhhODBcIixhMjAwOlwiI2ZmNTI1MlwiLGE0MDA6XCIjZmYxNzQ0XCIsYTcwMDpcIiNkNTAwMDBcIn0saT17NTA6XCIjZmNlNGVjXCIsMTAwOlwiI2Y4YmJkMFwiLDIwMDpcIiNmNDhmYjFcIiwzMDA6XCIjZjA2MjkyXCIsNDAwOlwiI2VjNDA3YVwiLDUwMDpcIiNlOTFlNjNcIiw2MDA6XCIjZDgxYjYwXCIsNzAwOlwiI2MyMTg1YlwiLDgwMDpcIiNhZDE0NTdcIiw5MDA6XCIjODgwZTRmXCIsYTEwMDpcIiNmZjgwYWJcIixhMjAwOlwiI2ZmNDA4MVwiLGE0MDA6XCIjZjUwMDU3XCIsYTcwMDpcIiNjNTExNjJcIn0sbz17NTA6XCIjZjNlNWY1XCIsMTAwOlwiI2UxYmVlN1wiLDIwMDpcIiNjZTkzZDhcIiwzMDA6XCIjYmE2OGM4XCIsNDAwOlwiI2FiNDdiY1wiLDUwMDpcIiM5YzI3YjBcIiw2MDA6XCIjOGUyNGFhXCIsNzAwOlwiIzdiMWZhMlwiLDgwMDpcIiM2YTFiOWFcIiw5MDA6XCIjNGExNDhjXCIsYTEwMDpcIiNlYTgwZmNcIixhMjAwOlwiI2UwNDBmYlwiLGE0MDA6XCIjZDUwMGY5XCIsYTcwMDpcIiNhYTAwZmZcIn0sYT17NTA6XCIjZWRlN2Y2XCIsMTAwOlwiI2QxYzRlOVwiLDIwMDpcIiNiMzlkZGJcIiwzMDA6XCIjOTU3NWNkXCIsNDAwOlwiIzdlNTdjMlwiLDUwMDpcIiM2NzNhYjdcIiw2MDA6XCIjNWUzNWIxXCIsNzAwOlwiIzUxMmRhOFwiLDgwMDpcIiM0NTI3YTBcIiw5MDA6XCIjMzExYjkyXCIsYTEwMDpcIiNiMzg4ZmZcIixhMjAwOlwiIzdjNGRmZlwiLGE0MDA6XCIjNjUxZmZmXCIsYTcwMDpcIiM2MjAwZWFcIn0scz17NTA6XCIjZThlYWY2XCIsMTAwOlwiI2M1Y2FlOVwiLDIwMDpcIiM5ZmE4ZGFcIiwzMDA6XCIjNzk4NmNiXCIsNDAwOlwiIzVjNmJjMFwiLDUwMDpcIiMzZjUxYjVcIiw2MDA6XCIjMzk0OWFiXCIsNzAwOlwiIzMwM2Y5ZlwiLDgwMDpcIiMyODM1OTNcIiw5MDA6XCIjMWEyMzdlXCIsYTEwMDpcIiM4YzllZmZcIixhMjAwOlwiIzUzNmRmZVwiLGE0MDA6XCIjM2Q1YWZlXCIsYTcwMDpcIiMzMDRmZmVcIn0sYz17NTA6XCIjZTNmMmZkXCIsMTAwOlwiI2JiZGVmYlwiLDIwMDpcIiM5MGNhZjlcIiwzMDA6XCIjNjRiNWY2XCIsNDAwOlwiIzQyYTVmNVwiLDUwMDpcIiMyMTk2ZjNcIiw2MDA6XCIjMWU4OGU1XCIsNzAwOlwiIzE5NzZkMlwiLDgwMDpcIiMxNTY1YzBcIiw5MDA6XCIjMGQ0N2ExXCIsYTEwMDpcIiM4MmIxZmZcIixhMjAwOlwiIzQ0OGFmZlwiLGE0MDA6XCIjMjk3OWZmXCIsYTcwMDpcIiMyOTYyZmZcIn0sbD17NTA6XCIjZTFmNWZlXCIsMTAwOlwiI2IzZTVmY1wiLDIwMDpcIiM4MWQ0ZmFcIiwzMDA6XCIjNGZjM2Y3XCIsNDAwOlwiIzI5YjZmNlwiLDUwMDpcIiMwM2E5ZjRcIiw2MDA6XCIjMDM5YmU1XCIsNzAwOlwiIzAyODhkMVwiLDgwMDpcIiMwMjc3YmRcIiw5MDA6XCIjMDE1NzliXCIsYTEwMDpcIiM4MGQ4ZmZcIixhMjAwOlwiIzQwYzRmZlwiLGE0MDA6XCIjMDBiMGZmXCIsYTcwMDpcIiMwMDkxZWFcIn0sdT17NTA6XCIjZTBmN2ZhXCIsMTAwOlwiI2IyZWJmMlwiLDIwMDpcIiM4MGRlZWFcIiwzMDA6XCIjNGRkMGUxXCIsNDAwOlwiIzI2YzZkYVwiLDUwMDpcIiMwMGJjZDRcIiw2MDA6XCIjMDBhY2MxXCIsNzAwOlwiIzAwOTdhN1wiLDgwMDpcIiMwMDgzOGZcIiw5MDA6XCIjMDA2MDY0XCIsYTEwMDpcIiM4NGZmZmZcIixhMjAwOlwiIzE4ZmZmZlwiLGE0MDA6XCIjMDBlNWZmXCIsYTcwMDpcIiMwMGI4ZDRcIn0sZj17NTA6XCIjZTBmMmYxXCIsMTAwOlwiI2IyZGZkYlwiLDIwMDpcIiM4MGNiYzRcIiwzMDA6XCIjNGRiNmFjXCIsNDAwOlwiIzI2YTY5YVwiLDUwMDpcIiMwMDk2ODhcIiw2MDA6XCIjMDA4OTdiXCIsNzAwOlwiIzAwNzk2YlwiLDgwMDpcIiMwMDY5NWNcIiw5MDA6XCIjMDA0ZDQwXCIsYTEwMDpcIiNhN2ZmZWJcIixhMjAwOlwiIzY0ZmZkYVwiLGE0MDA6XCIjMWRlOWI2XCIsYTcwMDpcIiMwMGJmYTVcIn0sZD17NTA6XCIjZThmNWU5XCIsMTAwOlwiI2M4ZTZjOVwiLDIwMDpcIiNhNWQ2YTdcIiwzMDA6XCIjODFjNzg0XCIsNDAwOlwiIzY2YmI2YVwiLDUwMDpcIiM0Y2FmNTBcIiw2MDA6XCIjNDNhMDQ3XCIsNzAwOlwiIzM4OGUzY1wiLDgwMDpcIiMyZTdkMzJcIiw5MDA6XCIjMWI1ZTIwXCIsYTEwMDpcIiNiOWY2Y2FcIixhMjAwOlwiIzY5ZjBhZVwiLGE0MDA6XCIjMDBlNjc2XCIsYTcwMDpcIiMwMGM4NTNcIn0saD17NTA6XCIjZjFmOGU5XCIsMTAwOlwiI2RjZWRjOFwiLDIwMDpcIiNjNWUxYTVcIiwzMDA6XCIjYWVkNTgxXCIsNDAwOlwiIzljY2M2NVwiLDUwMDpcIiM4YmMzNGFcIiw2MDA6XCIjN2NiMzQyXCIsNzAwOlwiIzY4OWYzOFwiLDgwMDpcIiM1NThiMmZcIiw5MDA6XCIjMzM2OTFlXCIsYTEwMDpcIiNjY2ZmOTBcIixhMjAwOlwiI2IyZmY1OVwiLGE0MDA6XCIjNzZmZjAzXCIsYTcwMDpcIiM2NGRkMTdcIn0scD17NTA6XCIjZjlmYmU3XCIsMTAwOlwiI2YwZjRjM1wiLDIwMDpcIiNlNmVlOWNcIiwzMDA6XCIjZGNlNzc1XCIsNDAwOlwiI2Q0ZTE1N1wiLDUwMDpcIiNjZGRjMzlcIiw2MDA6XCIjYzBjYTMzXCIsNzAwOlwiI2FmYjQyYlwiLDgwMDpcIiM5ZTlkMjRcIiw5MDA6XCIjODI3NzE3XCIsYTEwMDpcIiNmNGZmODFcIixhMjAwOlwiI2VlZmY0MVwiLGE0MDA6XCIjYzZmZjAwXCIsYTcwMDpcIiNhZWVhMDBcIn0sdj17NTA6XCIjZmZmZGU3XCIsMTAwOlwiI2ZmZjljNFwiLDIwMDpcIiNmZmY1OWRcIiwzMDA6XCIjZmZmMTc2XCIsNDAwOlwiI2ZmZWU1OFwiLDUwMDpcIiNmZmViM2JcIiw2MDA6XCIjZmRkODM1XCIsNzAwOlwiI2ZiYzAyZFwiLDgwMDpcIiNmOWE4MjVcIiw5MDA6XCIjZjU3ZjE3XCIsYTEwMDpcIiNmZmZmOGRcIixhMjAwOlwiI2ZmZmYwMFwiLGE0MDA6XCIjZmZlYTAwXCIsYTcwMDpcIiNmZmQ2MDBcIn0sZz17NTA6XCIjZmZmOGUxXCIsMTAwOlwiI2ZmZWNiM1wiLDIwMDpcIiNmZmUwODJcIiwzMDA6XCIjZmZkNTRmXCIsNDAwOlwiI2ZmY2EyOFwiLDUwMDpcIiNmZmMxMDdcIiw2MDA6XCIjZmZiMzAwXCIsNzAwOlwiI2ZmYTAwMFwiLDgwMDpcIiNmZjhmMDBcIiw5MDA6XCIjZmY2ZjAwXCIsYTEwMDpcIiNmZmU1N2ZcIixhMjAwOlwiI2ZmZDc0MFwiLGE0MDA6XCIjZmZjNDAwXCIsYTcwMDpcIiNmZmFiMDBcIn0sYj17NTA6XCIjZmZmM2UwXCIsMTAwOlwiI2ZmZTBiMlwiLDIwMDpcIiNmZmNjODBcIiwzMDA6XCIjZmZiNzRkXCIsNDAwOlwiI2ZmYTcyNlwiLDUwMDpcIiNmZjk4MDBcIiw2MDA6XCIjZmI4YzAwXCIsNzAwOlwiI2Y1N2MwMFwiLDgwMDpcIiNlZjZjMDBcIiw5MDA6XCIjZTY1MTAwXCIsYTEwMDpcIiNmZmQxODBcIixhMjAwOlwiI2ZmYWI0MFwiLGE0MDA6XCIjZmY5MTAwXCIsYTcwMDpcIiNmZjZkMDBcIn0seD17NTA6XCIjZmJlOWU3XCIsMTAwOlwiI2ZmY2NiY1wiLDIwMDpcIiNmZmFiOTFcIiwzMDA6XCIjZmY4YTY1XCIsNDAwOlwiI2ZmNzA0M1wiLDUwMDpcIiNmZjU3MjJcIiw2MDA6XCIjZjQ1MTFlXCIsNzAwOlwiI2U2NGExOVwiLDgwMDpcIiNkODQzMTVcIiw5MDA6XCIjYmYzNjBjXCIsYTEwMDpcIiNmZjllODBcIixhMjAwOlwiI2ZmNmU0MFwiLGE0MDA6XCIjZmYzZDAwXCIsYTcwMDpcIiNkZDJjMDBcIn0sbT17NTA6XCIjZWZlYmU5XCIsMTAwOlwiI2Q3Y2NjOFwiLDIwMDpcIiNiY2FhYTRcIiwzMDA6XCIjYTE4ODdmXCIsNDAwOlwiIzhkNmU2M1wiLDUwMDpcIiM3OTU1NDhcIiw2MDA6XCIjNmQ0YzQxXCIsNzAwOlwiIzVkNDAzN1wiLDgwMDpcIiM0ZTM0MmVcIiw5MDA6XCIjM2UyNzIzXCJ9LF89ezUwOlwiI2ZhZmFmYVwiLDEwMDpcIiNmNWY1ZjVcIiwyMDA6XCIjZWVlZWVlXCIsMzAwOlwiI2UwZTBlMFwiLDQwMDpcIiNiZGJkYmRcIiw1MDA6XCIjOWU5ZTllXCIsNjAwOlwiIzc1NzU3NVwiLDcwMDpcIiM2MTYxNjFcIiw4MDA6XCIjNDI0MjQyXCIsOTAwOlwiIzIxMjEyMVwifSx3PXs1MDpcIiNlY2VmZjFcIiwxMDA6XCIjY2ZkOGRjXCIsMjAwOlwiI2IwYmVjNVwiLDMwMDpcIiM5MGE0YWVcIiw0MDA6XCIjNzg5MDljXCIsNTAwOlwiIzYwN2Q4YlwiLDYwMDpcIiM1NDZlN2FcIiw3MDA6XCIjNDU1YTY0XCIsODAwOlwiIzM3NDc0ZlwiLDkwMDpcIiMyNjMyMzhcIn0seT17cHJpbWFyeTpcInJnYmEoMCwgMCwgMCwgMC44NylcIixzZWNvbmRhcnk6XCJyZ2JhKDAsIDAsIDAsIDAuNTQpXCIsZGlzYWJsZWQ6XCJyZ2JhKDAsIDAsIDAsIDAuMzgpXCIsZGl2aWRlcnM6XCJyZ2JhKDAsIDAsIDAsIDAuMTIpXCJ9LEM9e3ByaW1hcnk6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpXCIsc2Vjb25kYXJ5OlwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpXCIsZGlzYWJsZWQ6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSlcIixkaXZpZGVyczpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMilcIn0saz17YWN0aXZlOlwicmdiYSgwLCAwLCAwLCAwLjU0KVwiLGluYWN0aXZlOlwicmdiYSgwLCAwLCAwLCAwLjM4KVwifSxGPXthY3RpdmU6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpXCIsaW5hY3RpdmU6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSlcIn0sUz1cIiNmZmZmZmZcIixBPVwiIzAwMDAwMFwiO3QuZGVmYXVsdD17cmVkOnIscGluazppLHB1cnBsZTpvLGRlZXBQdXJwbGU6YSxpbmRpZ286cyxibHVlOmMsbGlnaHRCbHVlOmwsY3lhbjp1LHRlYWw6ZixncmVlbjpkLGxpZ2h0R3JlZW46aCxsaW1lOnAseWVsbG93OnYsYW1iZXI6ZyxvcmFuZ2U6YixkZWVwT3JhbmdlOngsYnJvd246bSxncmV5Ol8sYmx1ZUdyZXk6dyxkYXJrVGV4dDp5LGxpZ2h0VGV4dDpDLGRhcmtJY29uczprLGxpZ2h0SWNvbnM6Rix3aGl0ZTpTLGJsYWNrOkF9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1zd2F0Y2hlc1wiLGF0dHJzOntyb2xlOlwiYXBwbGljYXRpb25cIixcImFyaWEtbGFiZWxcIjpcIlN3YXRjaGVzIGNvbG9yIHBpY2tlclwiLFwiZGF0YS1waWNrXCI6ZS5waWNrfX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1zd2F0Y2hlcy1ib3hcIixhdHRyczp7cm9sZTpcImxpc3Rib3hcIn19LGUuX2woZS5wYWxldHRlLGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oXCJkaXZcIix7a2V5OnIsc3RhdGljQ2xhc3M6XCJ2Yy1zd2F0Y2hlcy1jb2xvci1ncm91cFwifSxlLl9sKHQsZnVuY3Rpb24odCl7cmV0dXJuIG4oXCJkaXZcIix7a2V5OnQsY2xhc3M6W1widmMtc3dhdGNoZXMtY29sb3ItaXRcIix7XCJ2Yy1zd2F0Y2hlcy1jb2xvci0td2hpdGVcIjpcIiNGRkZGRkZcIj09PXR9XSxzdHlsZTp7YmFja2dyb3VuZDp0fSxhdHRyczp7cm9sZTpcIm9wdGlvblwiLFwiYXJpYS1sYWJlbFwiOlwiQ29sb3I6XCIrdCxcImFyaWEtc2VsZWN0ZWRcIjplLmVxdWFsKHQpLFwiZGF0YS1jb2xvclwiOnR9LG9uOntjbGljazpmdW5jdGlvbihuKXtyZXR1cm4gZS5oYW5kbGVyQ2xpY2sodCl9fX0sW24oXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOmUuZXF1YWwodCksZXhwcmVzc2lvbjpcImVxdWFsKGMpXCJ9XSxzdGF0aWNDbGFzczpcInZjLXN3YXRjaGVzLXBpY2tcIn0sW24oXCJzdmdcIix7c3RhdGljU3R5bGU6e3dpZHRoOlwiMjRweFwiLGhlaWdodDpcIjI0cHhcIn0sYXR0cnM6e3ZpZXdCb3g6XCIwIDAgMjQgMjRcIn19LFtuKFwicGF0aFwiLHthdHRyczp7ZDpcIk0yMSw3TDksMTlMMy41LDEzLjVMNC45MSwxMi4wOUw5LDE2LjE3TDE5LjU5LDUuNTlMMjEsN1pcIn19KV0pXSldKX0pLDApfSksMCldKX0saT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIG89e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczppfTt0LmE9b30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y3x8bigxMjEpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW4oNTMpLG89bi5uKGkpO2Zvcih2YXIgYSBpbiBpKVwiZGVmYXVsdFwiIT09YSYmZnVuY3Rpb24oZSl7bi5kKHQsZSxmdW5jdGlvbigpe3JldHVybiBpW2VdfSl9KGEpO3ZhciBzPW4oMTM0KSxjPSExLGw9bigyKSx1PXIsZj1sKG8uYSxzLmEsITEsdSxudWxsLG51bGwpO2Yub3B0aW9ucy5fX2ZpbGU9XCJzcmMvY29tcG9uZW50cy9QaG90b3Nob3AudnVlXCIsdC5kZWZhdWx0PWYuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMTIyKTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKTtuKDEpKFwiMDgwMzY1ZDRcIixyLCExLHt9KX0sZnVuY3Rpb24oZSx0LG4pe3Q9ZS5leHBvcnRzPW4oMCkoITEpLHQucHVzaChbZS5pLCdcXG4udmMtcGhvdG9zaG9wIHtcXG4gIGJhY2tncm91bmQ6ICNEQ0RDREM7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgwLDAsMCwuMjUpLCAwIDhweCAxNnB4IHJnYmEoMCwwLDAsLjE1KTtcXG4gIGJveC1zaXppbmc6IGluaXRpYWw7XFxuICB3aWR0aDogNTEzcHg7XFxuICBmb250LWZhbWlseTogUm9ib3RvO1xcbn1cXG4udmMtcGhvdG9zaG9wX19kaXNhYmxlLWZpZWxkcyB7XFxuICB3aWR0aDogMzkwcHg7XFxufVxcbi52Yy1wcy1oZWFkIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgtMTgwZGVnLCAjRjBGMEYwIDAlLCAjRDRENEQ0IDEwMCUpO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNCMUIxQjE7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDFweCAwIDAgcmdiYSgyNTUsMjU1LDI1NSwuMiksIGluc2V0IDAgLTFweCAwIDAgcmdiYSgwLDAsMCwuMDIpO1xcbiAgaGVpZ2h0OiAyM3B4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHggNHB4IDAgMDtcXG4gIGZvbnQtc2l6ZTogMTNweDtcXG4gIGNvbG9yOiAjNEQ0RDREO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4udmMtcHMtYm9keSB7XFxuICBwYWRkaW5nOiAxNXB4O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLnZjLXBzLXNhdHVyYXRpb24td3JhcCB7XFxuICB3aWR0aDogMjU2cHg7XFxuICBoZWlnaHQ6IDI1NnB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm9yZGVyOiAycHggc29saWQgI0IzQjNCMztcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjRjBGMEYwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLnZjLXBzLXNhdHVyYXRpb24td3JhcCAudmMtc2F0dXJhdGlvbi1jaXJjbGUge1xcbiAgd2lkdGg6IDEycHg7XFxuICBoZWlnaHQ6IDEycHg7XFxufVxcbi52Yy1wcy1odWUtd3JhcCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDI1NnB4O1xcbiAgd2lkdGg6IDE5cHg7XFxuICBtYXJnaW4tbGVmdDogMTBweDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNCM0IzQjM7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI0YwRjBGMDtcXG59XFxuLnZjLXBzLWh1ZS1wb2ludGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnZjLXBzLWh1ZS1wb2ludGVyLS1sZWZ0LFxcbi52Yy1wcy1odWUtcG9pbnRlci0tcmlnaHQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDA7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLXdpZHRoOiA1cHggMCA1cHggOHB4O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjNTU1O1xcbn1cXG4udmMtcHMtaHVlLXBvaW50ZXItLWxlZnQ6YWZ0ZXIsXFxuLnZjLXBzLWh1ZS1wb2ludGVyLS1yaWdodDphZnRlciB7XFxuICBjb250ZW50OiBcIlwiO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDA7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLXdpZHRoOiA0cHggMCA0cHggNnB4O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjZmZmO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxcHg7XFxuICBsZWZ0OiAxcHg7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtOHB4LCAtNXB4KTtcXG59XFxuLnZjLXBzLWh1ZS1wb2ludGVyLS1sZWZ0IHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0xM3B4LCAtNHB4KTtcXG59XFxuLnZjLXBzLWh1ZS1wb2ludGVyLS1yaWdodCB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgyMHB4LCAtNHB4KSByb3RhdGUoMTgwZGVnKTtcXG59XFxuLnZjLXBzLWNvbnRyb2xzIHtcXG4gIHdpZHRoOiAxODBweDtcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLnZjLXBzLWNvbnRyb2xzX19kaXNhYmxlLWZpZWxkcyB7XFxuICB3aWR0aDogYXV0bztcXG59XFxuLnZjLXBzLWFjdGlvbnMge1xcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxuICBmbGV4OiAxO1xcbn1cXG4udmMtcHMtYWMtYnRuIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgtMTgwZGVnLCAjRkZGRkZGIDAlLCAjRTZFNkU2IDEwMCUpO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzg3ODc4NztcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGhlaWdodDogMjBweDtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDAgMCAjRUFFQUVBO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgY29sb3I6ICMwMDA7XFxuICBsaW5lLWhlaWdodDogMjBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcbi52Yy1wcy1wcmV2aWV3cyB7XFxuICB3aWR0aDogNjBweDtcXG59XFxuLnZjLXBzLXByZXZpZXdzX19zd2F0Y2hlcyB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjQjNCM0IzO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNGMEYwRjA7XFxuICBtYXJnaW4tYm90dG9tOiAycHg7XFxuICBtYXJnaW4tdG9wOiAxcHg7XFxufVxcbi52Yy1wcy1wcmV2aWV3c19fcHItY29sb3Ige1xcbiAgaGVpZ2h0OiAzNHB4O1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMXB4IDAgMCAjMDAwLCBpbnNldCAtMXB4IDAgMCAjMDAwLCBpbnNldCAwIDFweCAwICMwMDA7XFxufVxcbi52Yy1wcy1wcmV2aWV3c19fbGFiZWwge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgY29sb3I6ICMwMDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi52Yy1wcy1maWVsZHMge1xcbiAgcGFkZGluZy10b3A6IDVweDtcXG4gIHBhZGRpbmctYm90dG9tOiA5cHg7XFxuICB3aWR0aDogODBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnZjLXBzLWZpZWxkcyAudmMtaW5wdXRfX2lucHV0IHtcXG4gIG1hcmdpbi1sZWZ0OiA0MCU7XFxuICB3aWR0aDogNDAlO1xcbiAgaGVpZ2h0OiAxOHB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzg4ODg4ODtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsMCwwLC4xKSwgMCAxcHggMCAwICNFQ0VDRUM7XFxuICBtYXJnaW4tYm90dG9tOiA1cHg7XFxuICBmb250LXNpemU6IDEzcHg7XFxuICBwYWRkaW5nLWxlZnQ6IDNweDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuLnZjLXBzLWZpZWxkcyAudmMtaW5wdXRfX2xhYmVsLCAudmMtcHMtZmllbGRzIC52Yy1pbnB1dF9fZGVzYyB7XFxuICB0b3A6IDA7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgZm9udC1zaXplOiAxM3B4O1xcbiAgaGVpZ2h0OiAxOHB4O1xcbiAgbGluZS1oZWlnaHQ6IDIycHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi52Yy1wcy1maWVsZHMgLnZjLWlucHV0X19sYWJlbCB7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDM0cHg7XFxufVxcbi52Yy1wcy1maWVsZHMgLnZjLWlucHV0X19kZXNjIHtcXG4gIHJpZ2h0OiAwO1xcbiAgd2lkdGg6IDA7XFxufVxcbi52Yy1wcy1maWVsZHNfX2RpdmlkZXIge1xcbiAgaGVpZ2h0OiA1cHg7XFxufVxcbi52Yy1wcy1maWVsZHNfX2hleCAudmMtaW5wdXRfX2lucHV0IHtcXG4gIG1hcmdpbi1sZWZ0OiAyMCU7XFxuICB3aWR0aDogODAlO1xcbiAgaGVpZ2h0OiAxOHB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzg4ODg4ODtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsMCwwLC4xKSwgMCAxcHggMCAwICNFQ0VDRUM7XFxuICBtYXJnaW4tYm90dG9tOiA2cHg7XFxuICBmb250LXNpemU6IDEzcHg7XFxuICBwYWRkaW5nLWxlZnQ6IDNweDtcXG59XFxuLnZjLXBzLWZpZWxkc19faGV4IC52Yy1pbnB1dF9fbGFiZWwge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxNHB4O1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gIGZvbnQtc2l6ZTogMTNweDtcXG4gIGhlaWdodDogMThweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xcbn1cXG4nLFwiXCJdKX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMTI0KTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKTtuKDEpKFwiYjUzODBlNTJcIixyLCExLHt9KX0sZnVuY3Rpb24oZSx0LG4pe3Q9ZS5leHBvcnRzPW4oMCkoITEpLHQucHVzaChbZS5pLFwiXFxuLnZjLXNhdHVyYXRpb24sXFxuLnZjLXNhdHVyYXRpb24tLXdoaXRlLFxcbi52Yy1zYXR1cmF0aW9uLS1ibGFjayB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxufVxcbi52Yy1zYXR1cmF0aW9uLS13aGl0ZSB7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmYsIHJnYmEoMjU1LDI1NSwyNTUsMCkpO1xcbn1cXG4udmMtc2F0dXJhdGlvbi0tYmxhY2sge1xcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgIzAwMCwgcmdiYSgwLDAsMCwwKSk7XFxufVxcbi52Yy1zYXR1cmF0aW9uLXBvaW50ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4udmMtc2F0dXJhdGlvbi1jaXJjbGUge1xcbiAgY3Vyc29yOiBoZWFkO1xcbiAgd2lkdGg6IDRweDtcXG4gIGhlaWdodDogNHB4O1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMS41cHggI2ZmZiwgaW5zZXQgMCAwIDFweCAxcHggcmdiYSgwLDAsMCwuMyksIDAgMCAxcHggMnB4IHJnYmEoMCwwLDAsLjQpO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTJweCwgLTJweCk7XFxufVxcblwiLFwiXCJdKX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUsdCxuKXtyZXR1cm4gdDxuP2U8dD90OmU+bj9uOmU6ZTxuP246ZT50P3Q6ZX1lLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUsdCxuKXtmdW5jdGlvbiByKHQpe3ZhciBuPXYscj1nO3JldHVybiB2PWc9dm9pZCAwLGs9dCx4PWUuYXBwbHkocixuKX1mdW5jdGlvbiBvKGUpe3JldHVybiBrPWUsbT1zZXRUaW1lb3V0KHUsdCksRj9yKGUpOnh9ZnVuY3Rpb24gYShlKXt2YXIgbj1lLV8scj1lLWssaT10LW47cmV0dXJuIFM/eShpLGItcik6aX1mdW5jdGlvbiBsKGUpe3ZhciBuPWUtXyxyPWUtaztyZXR1cm4gdm9pZCAwPT09X3x8bj49dHx8bjwwfHxTJiZyPj1ifWZ1bmN0aW9uIHUoKXt2YXIgZT1DKCk7aWYobChlKSlyZXR1cm4gZihlKTttPXNldFRpbWVvdXQodSxhKGUpKX1mdW5jdGlvbiBmKGUpe3JldHVybiBtPXZvaWQgMCxBJiZ2P3IoZSk6KHY9Zz12b2lkIDAseCl9ZnVuY3Rpb24gZCgpe3ZvaWQgMCE9PW0mJmNsZWFyVGltZW91dChtKSxrPTAsdj1fPWc9bT12b2lkIDB9ZnVuY3Rpb24gaCgpe3JldHVybiB2b2lkIDA9PT1tP3g6ZihDKCkpfWZ1bmN0aW9uIHAoKXt2YXIgZT1DKCksbj1sKGUpO2lmKHY9YXJndW1lbnRzLGc9dGhpcyxfPWUsbil7aWYodm9pZCAwPT09bSlyZXR1cm4gbyhfKTtpZihTKXJldHVybiBtPXNldFRpbWVvdXQodSx0KSxyKF8pfXJldHVybiB2b2lkIDA9PT1tJiYobT1zZXRUaW1lb3V0KHUsdCkpLHh9dmFyIHYsZyxiLHgsbSxfLGs9MCxGPSExLFM9ITEsQT0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoYyk7cmV0dXJuIHQ9cyh0KXx8MCxpKG4pJiYoRj0hIW4ubGVhZGluZyxTPVwibWF4V2FpdFwiaW4gbixiPVM/dyhzKG4ubWF4V2FpdCl8fDAsdCk6YixBPVwidHJhaWxpbmdcImluIG4/ISFuLnRyYWlsaW5nOkEpLHAuY2FuY2VsPWQscC5mbHVzaD1oLHB9ZnVuY3Rpb24gcihlLHQscil7dmFyIG89ITAsYT0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoYyk7cmV0dXJuIGkocikmJihvPVwibGVhZGluZ1wiaW4gcj8hIXIubGVhZGluZzpvLGE9XCJ0cmFpbGluZ1wiaW4gcj8hIXIudHJhaWxpbmc6YSksbihlLHQse2xlYWRpbmc6byxtYXhXYWl0OnQsdHJhaWxpbmc6YX0pfWZ1bmN0aW9uIGkoZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuISFlJiYoXCJvYmplY3RcIj09dHx8XCJmdW5jdGlvblwiPT10KX1mdW5jdGlvbiBvKGUpe3JldHVybiEhZSYmXCJvYmplY3RcIj09dHlwZW9mIGV9ZnVuY3Rpb24gYShlKXtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZXx8byhlKSYmXy5jYWxsKGUpPT11fWZ1bmN0aW9uIHMoZSl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpcmV0dXJuIGU7aWYoYShlKSlyZXR1cm4gbDtpZihpKGUpKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnZhbHVlT2Y/ZS52YWx1ZU9mKCk6ZTtlPWkodCk/dCtcIlwiOnR9aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIDA9PT1lP2U6K2U7ZT1lLnJlcGxhY2UoZixcIlwiKTt2YXIgbj1oLnRlc3QoZSk7cmV0dXJuIG58fHAudGVzdChlKT92KGUuc2xpY2UoMiksbj8yOjgpOmQudGVzdChlKT9sOitlfXZhciBjPVwiRXhwZWN0ZWQgYSBmdW5jdGlvblwiLGw9TmFOLHU9XCJbb2JqZWN0IFN5bWJvbF1cIixmPS9eXFxzK3xcXHMrJC9nLGQ9L15bLStdMHhbMC05YS1mXSskL2ksaD0vXjBiWzAxXSskL2kscD0vXjBvWzAtN10rJC9pLHY9cGFyc2VJbnQsZz1cIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwmJmdsb2JhbC5PYmplY3Q9PT1PYmplY3QmJmdsb2JhbCxiPVwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmJiZzZWxmLk9iamVjdD09PU9iamVjdCYmc2VsZix4PWd8fGJ8fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSxtPU9iamVjdC5wcm90b3R5cGUsXz1tLnRvU3RyaW5nLHc9TWF0aC5tYXgseT1NYXRoLm1pbixDPWZ1bmN0aW9uKCl7cmV0dXJuIHguRGF0ZS5ub3coKX07ZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtyZWY6XCJjb250YWluZXJcIixzdGF0aWNDbGFzczpcInZjLXNhdHVyYXRpb25cIixzdHlsZTp7YmFja2dyb3VuZDplLmJnQ29sb3J9LG9uOnttb3VzZWRvd246ZS5oYW5kbGVNb3VzZURvd24sdG91Y2htb3ZlOmUuaGFuZGxlQ2hhbmdlLHRvdWNoc3RhcnQ6ZS5oYW5kbGVDaGFuZ2V9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNhdHVyYXRpb24tLXdoaXRlXCJ9KSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2F0dXJhdGlvbi0tYmxhY2tcIn0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1zYXR1cmF0aW9uLXBvaW50ZXJcIixzdHlsZTp7dG9wOmUucG9pbnRlclRvcCxsZWZ0OmUucG9pbnRlckxlZnR9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNhdHVyYXRpb24tY2lyY2xlXCJ9KV0pXSl9LGk9W107ci5fd2l0aFN0cmlwcGVkPSEwO3ZhciBvPXtyZW5kZXI6cixzdGF0aWNSZW5kZXJGbnM6aX07dC5hPW99LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDEyOSk7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbZS5pLHIsXCJcIl1dKSxyLmxvY2FscyYmKGUuZXhwb3J0cz1yLmxvY2Fscyk7bigxKShcIjRkYzFiMDg2XCIsciwhMSx7fSl9LGZ1bmN0aW9uKGUsdCxuKXt0PWUuZXhwb3J0cz1uKDApKCExKSx0LnB1c2goW2UuaSxcIlxcbi52Yy1hbHBoYSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBib3R0b206IDBweDtcXG4gIGxlZnQ6IDBweDtcXG59XFxuLnZjLWFscGhhLWNoZWNrYm9hcmQtd3JhcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBib3R0b206IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi52Yy1hbHBoYS1ncmFkaWVudCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBib3R0b206IDBweDtcXG4gIGxlZnQ6IDBweDtcXG59XFxuLnZjLWFscGhhLWNvbnRhaW5lciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAyO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgbWFyZ2luOiAwIDNweDtcXG59XFxuLnZjLWFscGhhLXBvaW50ZXIge1xcbiAgei1pbmRleDogMjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLnZjLWFscGhhLXBpY2tlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB3aWR0aDogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMXB4O1xcbiAgaGVpZ2h0OiA4cHg7XFxuICBib3gtc2hhZG93OiAwIDAgMnB4IHJnYmEoMCwgMCwgMCwgLjYpO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIG1hcmdpbi10b3A6IDFweDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMnB4KTtcXG59XFxuXCIsXCJcIl0pfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigxMzEpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCI3ZTE1YzA1YlwiLHIsITEse30pfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksXCJcXG4udmMtY2hlY2tlcmJvYXJkIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGJvdHRvbTogMHB4O1xcbiAgbGVmdDogMHB4O1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50O3JldHVybihlLl9zZWxmLl9jfHx0KShcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNoZWNrZXJib2FyZFwiLHN0eWxlOmUuYmdTdHlsZX0pfSxpPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgbz17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOml9O3QuYT1vfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1hbHBoYVwifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWFscGhhLWNoZWNrYm9hcmQtd3JhcFwifSxbbihcImNoZWNrYm9hcmRcIildLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1hbHBoYS1ncmFkaWVudFwiLHN0eWxlOntiYWNrZ3JvdW5kOmUuZ3JhZGllbnRDb2xvcn19KSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3JlZjpcImNvbnRhaW5lclwiLHN0YXRpY0NsYXNzOlwidmMtYWxwaGEtY29udGFpbmVyXCIsb246e21vdXNlZG93bjplLmhhbmRsZU1vdXNlRG93bix0b3VjaG1vdmU6ZS5oYW5kbGVDaGFuZ2UsdG91Y2hzdGFydDplLmhhbmRsZUNoYW5nZX19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtYWxwaGEtcG9pbnRlclwiLHN0eWxlOntsZWZ0OjEwMCplLmNvbG9ycy5hK1wiJVwifX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1hbHBoYS1waWNrZXJcIn0pXSldKV0pfSxpPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgbz17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOml9O3QuYT1vfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7Y2xhc3M6W1widmMtcGhvdG9zaG9wXCIsZS5kaXNhYmxlRmllbGRzP1widmMtcGhvdG9zaG9wX19kaXNhYmxlLWZpZWxkc1wiOlwiXCJdLGF0dHJzOntyb2xlOlwiYXBwbGljYXRpb25cIixcImFyaWEtbGFiZWxcIjpcIlBob3RvU2hvcCBjb2xvciBwaWNrZXJcIn19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtcHMtaGVhZFwiLGF0dHJzOntyb2xlOlwiaGVhZGluZ1wifX0sW2UuX3YoZS5fcyhlLmhlYWQpKV0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1ib2R5XCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtcHMtc2F0dXJhdGlvbi13cmFwXCJ9LFtuKFwic2F0dXJhdGlvblwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1odWUtd3JhcFwifSxbbihcImh1ZVwiLHthdHRyczp7ZGlyZWN0aW9uOlwidmVydGljYWxcIn0sb246e2NoYW5nZTplLmNoaWxkQ2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5jb2xvcnMsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS5jb2xvcnM9dH0sZXhwcmVzc2lvbjpcImNvbG9yc1wifX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1odWUtcG9pbnRlclwifSxbbihcImlcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1odWUtcG9pbnRlci0tbGVmdFwifSksbihcImlcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1odWUtcG9pbnRlci0tcmlnaHRcIn0pXSldKV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtjbGFzczpbXCJ2Yy1wcy1jb250cm9sc1wiLGUuZGlzYWJsZUZpZWxkcz9cInZjLXBzLWNvbnRyb2xzX19kaXNhYmxlLWZpZWxkc1wiOlwiXCJdfSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLXByZXZpZXdzXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtcHMtcHJldmlld3NfX2xhYmVsXCJ9LFtlLl92KGUuX3MoZS5uZXdMYWJlbCkpXSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLXByZXZpZXdzX19zd2F0Y2hlc1wifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLXByZXZpZXdzX19wci1jb2xvclwiLHN0eWxlOntiYWNrZ3JvdW5kOmUuY29sb3JzLmhleH0sYXR0cnM6e1wiYXJpYS1sYWJlbFwiOlwiTmV3IGNvbG9yIGlzIFwiK2UuY29sb3JzLmhleH19KSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtcHMtcHJldmlld3NfX3ByLWNvbG9yXCIsc3R5bGU6e2JhY2tncm91bmQ6ZS5jdXJyZW50Q29sb3J9LGF0dHJzOntcImFyaWEtbGFiZWxcIjpcIkN1cnJlbnQgY29sb3IgaXMgXCIrZS5jdXJyZW50Q29sb3J9LG9uOntjbGljazplLmNsaWNrQ3VycmVudENvbG9yfX0pXSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLXByZXZpZXdzX19sYWJlbFwifSxbZS5fdihlLl9zKGUuY3VycmVudExhYmVsKSldKV0pLGUuX3YoXCIgXCIpLGUuZGlzYWJsZUZpZWxkcz9lLl9lKCk6bihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLWFjdGlvbnNcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1hYy1idG5cIixhdHRyczp7cm9sZTpcImJ1dHRvblwiLFwiYXJpYS1sYWJlbFwiOmUuYWNjZXB0TGFiZWx9LG9uOntjbGljazplLmhhbmRsZUFjY2VwdH19LFtlLl92KGUuX3MoZS5hY2NlcHRMYWJlbCkpXSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLWFjLWJ0blwiLGF0dHJzOntyb2xlOlwiYnV0dG9uXCIsXCJhcmlhLWxhYmVsXCI6ZS5jYW5jZWxMYWJlbH0sb246e2NsaWNrOmUuaGFuZGxlQ2FuY2VsfX0sW2UuX3YoZS5fcyhlLmNhbmNlbExhYmVsKSldKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtcHMtZmllbGRzXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiaFwiLGRlc2M6XCLCsFwiLHZhbHVlOmUuaHN2Lmh9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KSxlLl92KFwiIFwiKSxuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwic1wiLGRlc2M6XCIlXCIsdmFsdWU6ZS5oc3YucyxtYXg6MTAwfSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSksZS5fdihcIiBcIiksbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcInZcIixkZXNjOlwiJVwiLHZhbHVlOmUuaHN2LnYsbWF4OjEwMH0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1maWVsZHNfX2RpdmlkZXJcIn0pLGUuX3YoXCIgXCIpLG4oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJyXCIsdmFsdWU6ZS5jb2xvcnMucmdiYS5yfSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSksZS5fdihcIiBcIiksbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImdcIix2YWx1ZTplLmNvbG9ycy5yZ2JhLmd9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KSxlLl92KFwiIFwiKSxuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiYlwiLHZhbHVlOmUuY29sb3JzLnJnYmEuYn0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1maWVsZHNfX2RpdmlkZXJcIn0pLGUuX3YoXCIgXCIpLG4oXCJlZC1pblwiLHtzdGF0aWNDbGFzczpcInZjLXBzLWZpZWxkc19faGV4XCIsYXR0cnM6e2xhYmVsOlwiI1wiLHZhbHVlOmUuaGV4fSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSldLDEpLGUuX3YoXCIgXCIpLGUuaGFzUmVzZXRCdXR0b24/bihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLWFjLWJ0blwiLGF0dHJzOntcImFyaWEtbGFiZWxcIjpcInJlc2V0XCJ9LG9uOntjbGljazplLmhhbmRsZVJlc2V0fX0sW2UuX3YoZS5fcyhlLnJlc2V0TGFiZWwpKV0pOmUuX2UoKV0pXSldKV0pfSxpPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgbz17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOml9O3QuYT1vfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtjfHxuKDEzNil9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9big1Nyksbz1uLm4oaSk7Zm9yKHZhciBhIGluIGkpXCJkZWZhdWx0XCIhPT1hJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGlbZV19KX0oYSk7dmFyIHM9bigxMzgpLGM9ITEsbD1uKDIpLHU9cixmPWwoby5hLHMuYSwhMSx1LG51bGwsbnVsbCk7Zi5vcHRpb25zLl9fZmlsZT1cInNyYy9jb21wb25lbnRzL1NrZXRjaC52dWVcIix0LmRlZmF1bHQ9Zi5leHBvcnRzfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigxMzcpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCI2MTJjNjYwNFwiLHIsITEse30pfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksXCJcXG4udmMtc2tldGNoIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAyMDBweDtcXG4gIHBhZGRpbmc6IDEwcHggMTBweCAwO1xcbiAgYm94LXNpemluZzogaW5pdGlhbDtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgwLCAwLCAwLCAuMTUpLCAwIDhweCAxNnB4IHJnYmEoMCwgMCwgMCwgLjE1KTtcXG59XFxuLnZjLXNrZXRjaC1zYXR1cmF0aW9uLXdyYXAge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLWJvdHRvbTogNzUlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLnZjLXNrZXRjaC1jb250cm9scyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4udmMtc2tldGNoLXNsaWRlcnMge1xcbiAgcGFkZGluZzogNHB4IDA7XFxuICBmbGV4OiAxO1xcbn1cXG4udmMtc2tldGNoLXNsaWRlcnMgLnZjLWh1ZSxcXG4udmMtc2tldGNoLXNsaWRlcnMgLnZjLWFscGhhLWdyYWRpZW50IHtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxuLnZjLXNrZXRjaC1odWUtd3JhcCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwcHg7XFxufVxcbi52Yy1za2V0Y2gtYWxwaGEtd3JhcCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwcHg7XFxuICBtYXJnaW4tdG9wOiA0cHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4udmMtc2tldGNoLWNvbG9yLXdyYXAge1xcbiAgd2lkdGg6IDI0cHg7XFxuICBoZWlnaHQ6IDI0cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW4tdG9wOiA0cHg7XFxuICBtYXJnaW4tbGVmdDogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG4udmMtc2tldGNoLWFjdGl2ZS1jb2xvciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxcHggcmdiYSgwLCAwLCAwLCAuMTUpLCBpbnNldCAwIDAgNHB4IHJnYmEoMCwgMCwgMCwgLjI1KTtcXG4gIHotaW5kZXg6IDI7XFxufVxcbi52Yy1za2V0Y2gtY29sb3Itd3JhcCAudmMtY2hlY2tlcmJvYXJkIHtcXG4gIGJhY2tncm91bmQtc2l6ZTogYXV0bztcXG59XFxuLnZjLXNrZXRjaC1maWVsZCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcGFkZGluZy10b3A6IDRweDtcXG59XFxuLnZjLXNrZXRjaC1maWVsZCAudmMtaW5wdXRfX2lucHV0IHtcXG4gIHdpZHRoOiA5MCU7XFxuICBwYWRkaW5nOiA0cHggMCAzcHggMTAlO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICNjY2M7XFxuICBmb250LXNpemU6IDEwcHg7XFxufVxcbi52Yy1za2V0Y2gtZmllbGQgLnZjLWlucHV0X19sYWJlbCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMTFweDtcXG4gIGNvbG9yOiAjMjIyO1xcbiAgcGFkZGluZy10b3A6IDNweDtcXG4gIHBhZGRpbmctYm90dG9tOiA0cHg7XFxuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcXG59XFxuLnZjLXNrZXRjaC1maWVsZC0tc2luZ2xlIHtcXG4gIGZsZXg6IDE7XFxuICBwYWRkaW5nLWxlZnQ6IDZweDtcXG59XFxuLnZjLXNrZXRjaC1maWVsZC0tZG91YmxlIHtcXG4gIGZsZXg6IDI7XFxufVxcbi52Yy1za2V0Y2gtcHJlc2V0cyB7XFxuICBtYXJnaW4tcmlnaHQ6IC0xMHB4O1xcbiAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcbiAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgcGFkZGluZy10b3A6IDEwcHg7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2VlZTtcXG59XFxuLnZjLXNrZXRjaC1wcmVzZXRzLWNvbG9yIHtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW46IDAgMTBweCAxMHB4IDA7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgd2lkdGg6IDE2cHg7XFxuICBoZWlnaHQ6IDE2cHg7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxcHggcmdiYSgwLCAwLCAwLCAuMTUpO1xcbn1cXG4udmMtc2tldGNoLXByZXNldHMtY29sb3IgLnZjLWNoZWNrZXJib2FyZCB7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxcHggcmdiYSgwLCAwLCAwLCAuMTUpO1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG4udmMtc2tldGNoX19kaXNhYmxlLWFscGhhIC52Yy1za2V0Y2gtY29sb3Itd3JhcCB7XFxuICBoZWlnaHQ6IDEwcHg7XFxufVxcblwiLFwiXCJdKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse2NsYXNzOltcInZjLXNrZXRjaFwiLGUuZGlzYWJsZUFscGhhP1widmMtc2tldGNoX19kaXNhYmxlLWFscGhhXCI6XCJcIl0sYXR0cnM6e3JvbGU6XCJhcHBsaWNhdGlvblwiLFwiYXJpYS1sYWJlbFwiOlwiU2tldGNoIGNvbG9yIHBpY2tlclwifX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtc2F0dXJhdGlvbi13cmFwXCJ9LFtuKFwic2F0dXJhdGlvblwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtY29udHJvbHNcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtc2xpZGVyc1wifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNrZXRjaC1odWUtd3JhcFwifSxbbihcImh1ZVwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpLGUuX3YoXCIgXCIpLGUuZGlzYWJsZUFscGhhP2UuX2UoKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLWFscGhhLXdyYXBcIn0sW24oXCJhbHBoYVwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpXSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNrZXRjaC1jb2xvci13cmFwXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLWFjdGl2ZS1jb2xvclwiLHN0eWxlOntiYWNrZ3JvdW5kOmUuYWN0aXZlQ29sb3J9LGF0dHJzOntcImFyaWEtbGFiZWxcIjpcIkN1cnJlbnQgY29sb3IgaXMgXCIrZS5hY3RpdmVDb2xvcn19KSxlLl92KFwiIFwiKSxuKFwiY2hlY2tib2FyZFwiKV0sMSldKSxlLl92KFwiIFwiKSxlLmRpc2FibGVGaWVsZHM/ZS5fZSgpOm4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtZmllbGRcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtZmllbGQtLWRvdWJsZVwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImhleFwiLHZhbHVlOmUuaGV4fSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSldLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtZmllbGQtLXNpbmdsZVwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcInJcIix2YWx1ZTplLmNvbG9ycy5yZ2JhLnJ9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNrZXRjaC1maWVsZC0tc2luZ2xlXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiZ1wiLHZhbHVlOmUuY29sb3JzLnJnYmEuZ30sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLWZpZWxkLS1zaW5nbGVcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJiXCIsdmFsdWU6ZS5jb2xvcnMucmdiYS5ifSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSldLDEpLGUuX3YoXCIgXCIpLGUuZGlzYWJsZUFscGhhP2UuX2UoKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLWZpZWxkLS1zaW5nbGVcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJhXCIsdmFsdWU6ZS5jb2xvcnMuYSxcImFycm93LW9mZnNldFwiOi4wMSxtYXg6MX0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKV0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtcHJlc2V0c1wiLGF0dHJzOntyb2xlOlwiZ3JvdXBcIixcImFyaWEtbGFiZWxcIjpcIkEgY29sb3IgcHJlc2V0LCBwaWNrIG9uZSB0byBzZXQgYXMgY3VycmVudCBjb2xvclwifX0sW2UuX2woZS5wcmVzZXRDb2xvcnMsZnVuY3Rpb24odCl7cmV0dXJuW2UuaXNUcmFuc3BhcmVudCh0KT9uKFwiZGl2XCIse2tleTp0LHN0YXRpY0NsYXNzOlwidmMtc2tldGNoLXByZXNldHMtY29sb3JcIixhdHRyczp7XCJhcmlhLWxhYmVsXCI6XCJDb2xvcjpcIit0fSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7cmV0dXJuIGUuaGFuZGxlUHJlc2V0KHQpfX19LFtuKFwiY2hlY2tib2FyZFwiKV0sMSk6bihcImRpdlwiLHtrZXk6dCxzdGF0aWNDbGFzczpcInZjLXNrZXRjaC1wcmVzZXRzLWNvbG9yXCIsc3R5bGU6e2JhY2tncm91bmQ6dH0sYXR0cnM6e1wiYXJpYS1sYWJlbFwiOlwiQ29sb3I6XCIrdH0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe3JldHVybiBlLmhhbmRsZVByZXNldCh0KX19fSldfSldLDIpXSl9LGk9W107ci5fd2l0aFN0cmlwcGVkPSEwO3ZhciBvPXtyZW5kZXI6cixzdGF0aWNSZW5kZXJGbnM6aX07dC5hPW99LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oMTQwKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDU4KSxvPW4ubihpKTtmb3IodmFyIGEgaW4gaSlcImRlZmF1bHRcIiE9PWEmJmZ1bmN0aW9uKGUpe24uZCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gaVtlXX0pfShhKTt2YXIgcz1uKDE0MiksYz0hMSxsPW4oMiksdT1yLGY9bChvLmEscy5hLCExLHUsbnVsbCxudWxsKTtmLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvQ2hyb21lLnZ1ZVwiLHQuZGVmYXVsdD1mLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDE0MSk7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbZS5pLHIsXCJcIl1dKSxyLmxvY2FscyYmKGUuZXhwb3J0cz1yLmxvY2Fscyk7bigxKShcIjFjZDE2MDQ4XCIsciwhMSx7fSl9LGZ1bmN0aW9uKGUsdCxuKXt0PWUuZXhwb3J0cz1uKDApKCExKSx0LnB1c2goW2UuaSxcIlxcbi52Yy1jaHJvbWUge1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGJveC1zaGFkb3c6IDAgMCAycHggcmdiYSgwLDAsMCwuMyksIDAgNHB4IDhweCByZ2JhKDAsMCwwLC4zKTtcXG4gIGJveC1zaXppbmc6IGluaXRpYWw7XFxuICB3aWR0aDogMjI1cHg7XFxuICBmb250LWZhbWlseTogTWVubG87XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG4udmMtY2hyb21lLWNvbnRyb2xzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi52Yy1jaHJvbWUtY29sb3Itd3JhcCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMzZweDtcXG59XFxuLnZjLWNocm9tZS1hY3RpdmUtY29sb3Ige1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDMwcHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi52Yy1jaHJvbWUtY29sb3Itd3JhcCAudmMtY2hlY2tlcmJvYXJkIHtcXG4gIHdpZHRoOiAzMHB4O1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTVweDtcXG4gIGJhY2tncm91bmQtc2l6ZTogYXV0bztcXG59XFxuLnZjLWNocm9tZS1zbGlkZXJzIHtcXG4gIGZsZXg6IDE7XFxufVxcbi52Yy1jaHJvbWUtZmllbGRzLXdyYXAge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmctdG9wOiAxNnB4O1xcbn1cXG4udmMtY2hyb21lLWZpZWxkcyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgbWFyZ2luLWxlZnQ6IC02cHg7XFxuICBmbGV4OiAxO1xcbn1cXG4udmMtY2hyb21lLWZpZWxkIHtcXG4gIHBhZGRpbmctbGVmdDogNnB4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi52Yy1jaHJvbWUtdG9nZ2xlLWJ0biB7XFxuICB3aWR0aDogMzJweDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4udmMtY2hyb21lLXRvZ2dsZS1pY29uIHtcXG4gIG1hcmdpbi1yaWdodDogLTRweDtcXG4gIG1hcmdpbi10b3A6IDEycHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAyO1xcbn1cXG4udmMtY2hyb21lLXRvZ2dsZS1pY29uLWhpZ2hsaWdodCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMjRweDtcXG4gIGhlaWdodDogMjhweDtcXG4gIGJhY2tncm91bmQ6ICNlZWU7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICB0b3A6IDEwcHg7XFxuICBsZWZ0OiAxMnB4O1xcbn1cXG4udmMtY2hyb21lLWh1ZS13cmFwIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMTBweDtcXG4gIG1hcmdpbi1ib3R0b206IDhweDtcXG59XFxuLnZjLWNocm9tZS1hbHBoYS13cmFwIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMTBweDtcXG59XFxuLnZjLWNocm9tZS1odWUtd3JhcCAudmMtaHVlIHtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxuLnZjLWNocm9tZS1hbHBoYS13cmFwIC52Yy1hbHBoYS1ncmFkaWVudCB7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcbi52Yy1jaHJvbWUtaHVlLXdyYXAgLnZjLWh1ZS1waWNrZXIsIC52Yy1jaHJvbWUtYWxwaGEtd3JhcCAudmMtYWxwaGEtcGlja2VyIHtcXG4gIHdpZHRoOiAxMnB4O1xcbiAgaGVpZ2h0OiAxMnB4O1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTZweCwgLTJweCk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ4LCAyNDgsIDI0OCk7XFxuICBib3gtc2hhZG93OiAwIDFweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMzcpO1xcbn1cXG4udmMtY2hyb21lLWJvZHkge1xcbiAgcGFkZGluZzogMTZweCAxNnB4IDEycHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG4udmMtY2hyb21lLXNhdHVyYXRpb24td3JhcCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmctYm90dG9tOiA1NSU7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi52Yy1jaHJvbWUtc2F0dXJhdGlvbi13cmFwIC52Yy1zYXR1cmF0aW9uLWNpcmNsZSB7XFxuICB3aWR0aDogMTJweDtcXG4gIGhlaWdodDogMTJweDtcXG59XFxuLnZjLWNocm9tZS1maWVsZHMgLnZjLWlucHV0X19pbnB1dCB7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBjb2xvcjogIzMzMztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICNkYWRhZGE7XFxuICBoZWlnaHQ6IDIxcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi52Yy1jaHJvbWUtZmllbGRzIC52Yy1pbnB1dF9fbGFiZWwge1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gIGZvbnQtc2l6ZTogMTFweDtcXG4gIGxpbmUtaGVpZ2h0OiAxMXB4O1xcbiAgY29sb3I6ICM5Njk2OTY7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi10b3A6IDEycHg7XFxufVxcbi52Yy1jaHJvbWVfX2Rpc2FibGUtYWxwaGEgLnZjLWNocm9tZS1hY3RpdmUtY29sb3Ige1xcbiAgd2lkdGg6IDE4cHg7XFxuICBoZWlnaHQ6IDE4cHg7XFxufVxcbi52Yy1jaHJvbWVfX2Rpc2FibGUtYWxwaGEgLnZjLWNocm9tZS1jb2xvci13cmFwIHtcXG4gIHdpZHRoOiAzMHB4O1xcbn1cXG4udmMtY2hyb21lX19kaXNhYmxlLWFscGhhIC52Yy1jaHJvbWUtaHVlLXdyYXAge1xcbiAgbWFyZ2luLXRvcDogNHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtjbGFzczpbXCJ2Yy1jaHJvbWVcIixlLmRpc2FibGVBbHBoYT9cInZjLWNocm9tZV9fZGlzYWJsZS1hbHBoYVwiOlwiXCJdLGF0dHJzOntyb2xlOlwiYXBwbGljYXRpb25cIixcImFyaWEtbGFiZWxcIjpcIkNocm9tZSBjb2xvciBwaWNrZXJcIn19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLXNhdHVyYXRpb24td3JhcFwifSxbbihcInNhdHVyYXRpb25cIix7b246e2NoYW5nZTplLmNoaWxkQ2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5jb2xvcnMsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS5jb2xvcnM9dH0sZXhwcmVzc2lvbjpcImNvbG9yc1wifX0pXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWJvZHlcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtY29udHJvbHNcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtY29sb3Itd3JhcFwifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1hY3RpdmUtY29sb3JcIixzdHlsZTp7YmFja2dyb3VuZDplLmFjdGl2ZUNvbG9yfSxhdHRyczp7XCJhcmlhLWxhYmVsXCI6XCJjdXJyZW50IGNvbG9yIGlzIFwiK2UuY29sb3JzLmhleH19KSxlLl92KFwiIFwiKSxlLmRpc2FibGVBbHBoYT9lLl9lKCk6bihcImNoZWNrYm9hcmRcIildLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtc2xpZGVyc1wifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1odWUtd3JhcFwifSxbbihcImh1ZVwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpLGUuX3YoXCIgXCIpLGUuZGlzYWJsZUFscGhhP2UuX2UoKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWFscGhhLXdyYXBcIn0sW24oXCJhbHBoYVwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpXSldKSxlLl92KFwiIFwiKSxlLmRpc2FibGVGaWVsZHM/ZS5fZSgpOm4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtZmllbGRzLXdyYXBcIn0sW24oXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOjA9PT1lLmZpZWxkc0luZGV4LGV4cHJlc3Npb246XCJmaWVsZHNJbmRleCA9PT0gMFwifV0sc3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtZmllbGRzXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkXCJ9LFtlLmhhc0FscGhhP2UuX2UoKTpuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiaGV4XCIsdmFsdWU6ZS5jb2xvcnMuaGV4fSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSksZS5fdihcIiBcIiksZS5oYXNBbHBoYT9uKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiaGV4XCIsdmFsdWU6ZS5jb2xvcnMuaGV4OH0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pOmUuX2UoKV0sMSldKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZToxPT09ZS5maWVsZHNJbmRleCxleHByZXNzaW9uOlwiZmllbGRzSW5kZXggPT09IDFcIn1dLHN0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkc1wifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1maWVsZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcInJcIix2YWx1ZTplLmNvbG9ycy5yZ2JhLnJ9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1maWVsZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImdcIix2YWx1ZTplLmNvbG9ycy5yZ2JhLmd9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1maWVsZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImJcIix2YWx1ZTplLmNvbG9ycy5yZ2JhLmJ9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSksZS5fdihcIiBcIiksZS5kaXNhYmxlQWxwaGE/ZS5fZSgpOm4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtZmllbGRcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJhXCIsdmFsdWU6ZS5jb2xvcnMuYSxcImFycm93LW9mZnNldFwiOi4wMSxtYXg6MX0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKV0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOjI9PT1lLmZpZWxkc0luZGV4LGV4cHJlc3Npb246XCJmaWVsZHNJbmRleCA9PT0gMlwifV0sc3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtZmllbGRzXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiaFwiLHZhbHVlOmUuaHNsLmh9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1maWVsZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcInNcIix2YWx1ZTplLmhzbC5zfSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSldLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtZmllbGRcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJsXCIsdmFsdWU6ZS5oc2wubH0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKSxlLl92KFwiIFwiKSxlLmRpc2FibGVBbHBoYT9lLl9lKCk6bihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1maWVsZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImFcIix2YWx1ZTplLmNvbG9ycy5hLFwiYXJyb3ctb2Zmc2V0XCI6LjAxLG1heDoxfSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSldLDEpXSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS10b2dnbGUtYnRuXCIsYXR0cnM6e3JvbGU6XCJidXR0b25cIixcImFyaWEtbGFiZWxcIjpcIkNoYW5nZSBhbm90aGVyIGNvbG9yIGRlZmluaXRpb25cIn0sb246e2NsaWNrOmUudG9nZ2xlVmlld3N9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS10b2dnbGUtaWNvblwifSxbbihcInN2Z1wiLHtzdGF0aWNTdHlsZTp7d2lkdGg6XCIyNHB4XCIsaGVpZ2h0OlwiMjRweFwifSxhdHRyczp7dmlld0JveDpcIjAgMCAyNCAyNFwifSxvbjp7bW91c2VvdmVyOmUuc2hvd0hpZ2hsaWdodCxtb3VzZWVudGVyOmUuc2hvd0hpZ2hsaWdodCxtb3VzZW91dDplLmhpZGVIaWdobGlnaHR9fSxbbihcInBhdGhcIix7YXR0cnM6e2ZpbGw6XCIjMzMzXCIsZDpcIk0xMiwxOC4xN0w4LjgzLDE1TDcuNDIsMTYuNDFMMTIsMjFMMTYuNTksMTYuNDFMMTUuMTcsMTVNMTIsNS44M0wxNS4xNyw5TDE2LjU4LDcuNTlMMTIsM0w3LjQxLDcuNTlMOC44Myw5TDEyLDUuODNaXCJ9fSldKV0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOmUuaGlnaGxpZ2h0LGV4cHJlc3Npb246XCJoaWdobGlnaHRcIn1dLHN0YXRpY0NsYXNzOlwidmMtY2hyb21lLXRvZ2dsZS1pY29uLWhpZ2hsaWdodFwifSldKV0pXSldKX0saT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIG89e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczppfTt0LmE9b30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y3x8bigxNDQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW4oNTkpLG89bi5uKGkpO2Zvcih2YXIgYSBpbiBpKVwiZGVmYXVsdFwiIT09YSYmZnVuY3Rpb24oZSl7bi5kKHQsZSxmdW5jdGlvbigpe3JldHVybiBpW2VdfSl9KGEpO3ZhciBzPW4oMTQ2KSxjPSExLGw9bigyKSx1PXIsZj1sKG8uYSxzLmEsITEsdSxudWxsLG51bGwpO2Yub3B0aW9ucy5fX2ZpbGU9XCJzcmMvY29tcG9uZW50cy9Ud2l0dGVyLnZ1ZVwiLHQuZGVmYXVsdD1mLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDE0NSk7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbZS5pLHIsXCJcIl1dKSxyLmxvY2FscyYmKGUuZXhwb3J0cz1yLmxvY2Fscyk7bigxKShcIjY2OWE0OGE1XCIsciwhMSx7fSl9LGZ1bmN0aW9uKGUsdCxuKXt0PWUuZXhwb3J0cz1uKDApKCExKSx0LnB1c2goW2UuaSxcIlxcbi52Yy10d2l0dGVyIHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBib3JkZXI6IDAgc29saWQgcmdiYSgwLDAsMCwwLjI1KTtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDRweCByZ2JhKDAsMCwwLDAuMjUpO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4udmMtdHdpdHRlci10cmlhbmdsZSB7XFxuICB3aWR0aDogMHB4O1xcbiAgaGVpZ2h0OiAwcHg7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLXdpZHRoOiAwIDlweCAxMHB4IDlweDtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgI2ZmZiB0cmFuc3BhcmVudDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLnZjLXR3aXR0ZXItdHJpYW5nbGUtc2hhZG93IHtcXG4gIHdpZHRoOiAwcHg7XFxuICBoZWlnaHQ6IDBweDtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICBib3JkZXItd2lkdGg6IDAgOXB4IDEwcHggOXB4O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCByZ2JhKDAsIDAsIDAsIC4xKSB0cmFuc3BhcmVudDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLnZjLXR3aXR0ZXItYm9keSB7XFxuICBwYWRkaW5nOiAxNXB4IDlweCA5cHggMTVweDtcXG59XFxuLnZjLXR3aXR0ZXIgLnZjLWVkaXRhYmxlLWlucHV0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnZjLXR3aXR0ZXIgLnZjLWVkaXRhYmxlLWlucHV0IGlucHV0IHtcXG4gIHdpZHRoOiAxMDBweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGNvbG9yOiAjNjY2O1xcbiAgYm9yZGVyOiAwcHg7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgaGVpZ2h0OiAyOHB4O1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICNGMEYwRjA7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIGJvcmRlci1yYWRpdXM6IDAgNHB4IDRweCAwO1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBwYWRkaW5nOiAxcHg7XFxuICBwYWRkaW5nLWxlZnQ6IDhweDtcXG59XFxuLnZjLXR3aXR0ZXIgLnZjLWVkaXRhYmxlLWlucHV0IHNwYW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLnZjLXR3aXR0ZXItaGFzaCB7XFxuICBiYWNrZ3JvdW5kOiAjRjBGMEYwO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgd2lkdGg6IDMwcHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHggMCAwIDRweDtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgY29sb3I6ICM5OEExQTQ7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG4udmMtdHdpdHRlci1zd2F0Y2gge1xcbiAgd2lkdGg6IDMwcHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBmbG9hdDogbGVmdDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIG1hcmdpbjogMCA2cHggNnB4IDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG4udmMtdHdpdHRlci1jbGVhciB7XFxuICBjbGVhcjogYm90aDtcXG59XFxuLnZjLXR3aXR0ZXItaGlkZS10cmlhbmdsZSAudmMtdHdpdHRlci10cmlhbmdsZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4udmMtdHdpdHRlci1oaWRlLXRyaWFuZ2xlIC52Yy10d2l0dGVyLXRyaWFuZ2xlLXNoYWRvdyB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4udmMtdHdpdHRlci10b3AtbGVmdC10cmlhbmdsZSAudmMtdHdpdHRlci10cmlhbmdsZXtcXG4gIHRvcDogLTEwcHg7XFxuICBsZWZ0OiAxMnB4O1xcbn1cXG4udmMtdHdpdHRlci10b3AtbGVmdC10cmlhbmdsZSAudmMtdHdpdHRlci10cmlhbmdsZS1zaGFkb3d7XFxuICB0b3A6IC0xMXB4O1xcbiAgbGVmdDogMTJweDtcXG59XFxuLnZjLXR3aXR0ZXItdG9wLXJpZ2h0LXRyaWFuZ2xlIC52Yy10d2l0dGVyLXRyaWFuZ2xle1xcbiAgdG9wOiAtMTBweDtcXG4gIHJpZ2h0OiAxMnB4O1xcbn1cXG4udmMtdHdpdHRlci10b3AtcmlnaHQtdHJpYW5nbGUgLnZjLXR3aXR0ZXItdHJpYW5nbGUtc2hhZG93e1xcbiAgdG9wOiAtMTFweDtcXG4gIHJpZ2h0OiAxMnB4O1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXR3aXR0ZXJcIixjbGFzczp7XCJ2Yy10d2l0dGVyLWhpZGUtdHJpYW5nbGUgXCI6XCJoaWRlXCI9PT1lLnRyaWFuZ2xlLFwidmMtdHdpdHRlci10b3AtbGVmdC10cmlhbmdsZSBcIjpcInRvcC1sZWZ0XCI9PT1lLnRyaWFuZ2xlLFwidmMtdHdpdHRlci10b3AtcmlnaHQtdHJpYW5nbGUgXCI6XCJ0b3AtcmlnaHRcIj09PWUudHJpYW5nbGV9LHN0eWxlOnt3aWR0aDpcIm51bWJlclwiPT10eXBlb2YgZS53aWR0aD9lLndpZHRoK1wicHhcIjplLndpZHRofX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy10d2l0dGVyLXRyaWFuZ2xlLXNoYWRvd1wifSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXR3aXR0ZXItdHJpYW5nbGVcIn0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy10d2l0dGVyLWJvZHlcIn0sW2UuX2woZS5kZWZhdWx0Q29sb3JzLGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oXCJzcGFuXCIse2tleTpyLHN0YXRpY0NsYXNzOlwidmMtdHdpdHRlci1zd2F0Y2hcIixzdHlsZTp7YmFja2dyb3VuZDp0LGJveFNoYWRvdzpcIjAgMCA0cHggXCIrKGUuZXF1YWwodCk/dDpcInRyYW5zcGFyZW50XCIpfSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7cmV0dXJuIGUuaGFuZGxlckNsaWNrKHQpfX19KX0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy10d2l0dGVyLWhhc2hcIn0sW2UuX3YoXCIjXCIpXSksZS5fdihcIiBcIiksbihcImVkaXRhYmxlLWlucHV0XCIse2F0dHJzOntsYWJlbDpcIiNcIix2YWx1ZTplLmhleH0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy10d2l0dGVyLWNsZWFyXCJ9KV0sMildKX0saT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIG89e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczppfTt0LmE9b31dKX0pOyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9CdXR0b25Db2xvclBpY2tlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01MzFhMDI2YSZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNDcyNzhjODBcIiwgY29udGVudCwgdHJ1ZSwge30pOyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NYWluQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTQyNjMzOGI4JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIyNjhjMmI3YlwiLCBjb250ZW50LCB0cnVlLCB7fSk7IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL01lbnVDb2xsYXBzaWJsZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03MjllNGNkNyZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiYjcyNjkxNjRcIiwgY29udGVudCwgdHJ1ZSwge30pOyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FwcC5jc3NcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMWFlYWZkYWNcIiwgY29udGVudCwgdHJ1ZSwge30pOyIsIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG4iLCIvKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4gIE1vZGlmaWVkIGJ5IEV2YW4gWW91IEB5eXg5OTA4MDNcbiovXG5cbmltcG9ydCBsaXN0VG9TdHlsZXMgZnJvbSAnLi9saXN0VG9TdHlsZXMnXG5cbnZhciBoYXNEb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcblxuaWYgKHR5cGVvZiBERUJVRyAhPT0gJ3VuZGVmaW5lZCcgJiYgREVCVUcpIHtcbiAgaWYgKCFoYXNEb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAndnVlLXN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LiAnICtcbiAgICBcIlVzZSB7IHRhcmdldDogJ25vZGUnIH0gaW4geW91ciBXZWJwYWNrIGNvbmZpZyB0byBpbmRpY2F0ZSBhIHNlcnZlci1yZW5kZXJpbmcgZW52aXJvbm1lbnQuXCJcbiAgKSB9XG59XG5cbi8qXG50eXBlIFN0eWxlT2JqZWN0ID0ge1xuICBpZDogbnVtYmVyO1xuICBwYXJ0czogQXJyYXk8U3R5bGVPYmplY3RQYXJ0PlxufVxuXG50eXBlIFN0eWxlT2JqZWN0UGFydCA9IHtcbiAgY3NzOiBzdHJpbmc7XG4gIG1lZGlhOiBzdHJpbmc7XG4gIHNvdXJjZU1hcDogP3N0cmluZ1xufVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0gey8qXG4gIFtpZDogbnVtYmVyXToge1xuICAgIGlkOiBudW1iZXIsXG4gICAgcmVmczogbnVtYmVyLFxuICAgIHBhcnRzOiBBcnJheTwob2JqPzogU3R5bGVPYmplY3RQYXJ0KSA9PiB2b2lkPlxuICB9XG4qL31cblxudmFyIGhlYWQgPSBoYXNEb2N1bWVudCAmJiAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdKVxudmFyIHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsXG52YXIgc2luZ2xldG9uQ291bnRlciA9IDBcbnZhciBpc1Byb2R1Y3Rpb24gPSBmYWxzZVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxudmFyIG9wdGlvbnMgPSBudWxsXG52YXIgc3NySWRLZXkgPSAnZGF0YS12dWUtc3NyLWlkJ1xuXG4vLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbi8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcbnZhciBpc09sZElFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL21zaWUgWzYtOV1cXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTdHlsZXNDbGllbnQgKHBhcmVudElkLCBsaXN0LCBfaXNQcm9kdWN0aW9uLCBfb3B0aW9ucykge1xuICBpc1Byb2R1Y3Rpb24gPSBfaXNQcm9kdWN0aW9uXG5cbiAgb3B0aW9ucyA9IF9vcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbGlzdClcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW11cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgICBkb21TdHlsZS5yZWZzLS1cbiAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKVxuICAgIH1cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBuZXdMaXN0KVxuICAgICAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMgPSBbXVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldXG4gICAgICBpZiAoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZG9tU3R5bGUucGFydHNbal0oKVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcyAvKiBBcnJheTxTdHlsZU9iamVjdD4gKi8pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKytcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSlcbiAgICAgIH1cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgaWYgKGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA+IGl0ZW0ucGFydHMubGVuZ3RoKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA9IGl0ZW0ucGFydHMubGVuZ3RoXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0geyBpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50ICgpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgc3R5bGVFbGVtZW50LnR5cGUgPSAndGV4dC9jc3MnXG4gIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KVxuICByZXR1cm4gc3R5bGVFbGVtZW50XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gIHZhciB1cGRhdGUsIHJlbW92ZVxuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3R5bGVbJyArIHNzcklkS2V5ICsgJ349XCInICsgb2JqLmlkICsgJ1wiXScpXG5cbiAgaWYgKHN0eWxlRWxlbWVudCkge1xuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGFuZCBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gICAgICAvLyBzaW1wbHkgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBub29wXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGJ1dCBpbiBkZXYgbW9kZS5cbiAgICAgIC8vIGZvciBzb21lIHJlYXNvbiBDaHJvbWUgY2FuJ3QgaGFuZGxlIHNvdXJjZSBtYXAgaW4gc2VydmVyLXJlbmRlcmVkXG4gICAgICAvLyBzdHlsZSB0YWdzIC0gc291cmNlIG1hcHMgaW4gPHN0eWxlPiBvbmx5IHdvcmtzIGlmIHRoZSBzdHlsZSB0YWcgaXNcbiAgICAgIC8vIGNyZWF0ZWQgYW5kIGluc2VydGVkIGR5bmFtaWNhbGx5LiBTbyB3ZSByZW1vdmUgdGhlIHNlcnZlciByZW5kZXJlZFxuICAgICAgLy8gc3R5bGVzIGFuZCBpbmplY3QgbmV3IG9uZXMuXG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzT2xkSUUpIHtcbiAgICAvLyB1c2Ugc2luZ2xldG9uIG1vZGUgZm9yIElFOS5cbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrK1xuICAgIHN0eWxlRWxlbWVudCA9IHNpbmdsZXRvbkVsZW1lbnQgfHwgKHNpbmdsZXRvbkVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKSlcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSlcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKVxuICB9IGVsc2Uge1xuICAgIC8vIHVzZSBtdWx0aS1zdHlsZS10YWcgbW9kZSBpbiBhbGwgb3RoZXIgY2FzZXNcbiAgICBzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShvYmopXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcbiAgICAgICAgICBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuICAgICAgICAgIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKVxuICAgIH1cbiAgfVxufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgdGV4dFN0b3JlID0gW11cblxuICByZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudFxuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzc1xuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKVxuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKVxuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXNcbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSlcbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZUVsZW1lbnQsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzc1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWFcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXBcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKVxuICB9XG4gIGlmIChvcHRpb25zLnNzcklkKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShzc3JJZEtleSwgb2JqLmlkKVxuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9qYXZhc2NyaXB0LWRlYnVnZ2luZ1xuICAgIC8vIHRoaXMgbWFrZXMgc291cmNlIG1hcHMgaW5zaWRlIHN0eWxlIHRhZ3Mgd29yayBwcm9wZXJseSBpbiBDaHJvbWVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VVUkw9JyArIHNvdXJjZU1hcC5zb3VyY2VzWzBdICsgJyAqLydcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArICcgKi8nXG4gIH1cblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzXG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpXG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKVxuICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjE0XG4gKiAoYykgMjAxNC0yMDIxIEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG5cbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG5mdW5jdGlvbiBuYXRpdmVCaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmbi5iaW5kKGN0eClcbn1cblxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA/IG5hdGl2ZUJpbmRcbiAgOiBwb2x5ZmlsbEJpbmQ7XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgfSBlbHNlIGlmICghaXNBcnJheUEgJiYgIWlzQXJyYXlCKSB7XG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgcmV0dXJuIGtleXNBLmxlbmd0aCA9PT0ga2V5c0IubGVuZ3RoICYmIGtleXNBLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBhcnJheSAoaWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIHRoZSBhcnJheSBtdXN0XG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJyxcbiAgJ3NlcnZlclByZWZldGNoJ1xuXTtcblxuLyogICovXG5cblxuXG52YXIgY29uZmlnID0gKHtcbiAgLyoqXG4gICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKVxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3cgcHJvZHVjdGlvbiBtb2RlIHRpcCBtZXNzYWdlIG9uIGJvb3Q/XG4gICAqL1xuICBwcm9kdWN0aW9uVGlwOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICovXG4gIGFzeW5jOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxuLyoqXG4gKiB1bmljb2RlIGxldHRlcnMgdXNlZCBmb3IgcGFyc2luZyBodG1sIHRhZ3MsIGNvbXBvbmVudCBuYW1lcyBhbmQgcHJvcGVydHkgcGF0aHMuXG4gKiB1c2luZyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUzL3NlbWFudGljcy1zY3JpcHRpbmcuaHRtbCNwb3RlbnRpYWxjdXN0b21lbGVtZW50bmFtZVxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICovXG52YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG52YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTtcbnZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbiAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICB9XG4gIH07XG5cbiAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiICsgbXNnICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5jaWQgIT0gbnVsbFxuICAgICAgPyB2bS5vcHRpb25zXG4gICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICA/IHZtLiRvcHRpb25zIHx8IHZtLmNvbnN0cnVjdG9yLm9wdGlvbnNcbiAgICAgICAgOiB2bTtcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgdmFyIGZpbGUgPSBvcHRpb25zLl9fZmlsZTtcbiAgICBpZiAoIW5hbWUgJiYgZmlsZSkge1xuICAgICAgdmFyIG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiPFwiICsgKGNsYXNzaWZ5KG5hbWUpKSArIFwiPlwiKSA6IFwiPEFub255bW91cz5cIikgK1xuICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gKFwiIGF0IFwiICsgZmlsZSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzID0gJyc7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIGlmIChuICUgMiA9PT0gMSkgeyByZXMgKz0gc3RyOyB9XG4gICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfVxuICAgICAgbiA+Pj0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIHZhciB0cmVlID0gW107XG4gICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgIC5qb2luKCdcXG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcbiAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgLy8gb3JkZXJcbiAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRvVmFsICE9PSBmcm9tVmFsICYmXG4gICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSlcbiAgKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0KGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldLCB2bSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICB2YXIgaGF2ZUV4cGVjdGVkVHlwZXMgPSBleHBlY3RlZFR5cGVzLnNvbWUoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ7IH0pO1xuICBpZiAoIXZhbGlkICYmIGhhdmVFeHBlY3RlZFR5cGVzKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2x8QmlnSW50KSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSwgdm0pIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xuICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKCdJbnZhbGlkIHByb3AgdHlwZTogXCInICsgU3RyaW5nKHR5cGUpICsgJ1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yJywgdm0pO1xuICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG52YXIgZnVuY3Rpb25UeXBlQ2hlY2tSRSA9IC9eXFxzKmZ1bmN0aW9uIChcXHcrKS87XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goZnVuY3Rpb25UeXBlQ2hlY2tSRSk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgaWYgKFxuICAgIGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICBpc0V4cGxpY2FibGUodHlwZW9mIHZhbHVlKSAmJlxuICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpXG4gICkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIChzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpKTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgKHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSkpICsgXCIuXCI7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gIH1cbn1cblxudmFyIEVYUExJQ0FCTEVfVFlQRVMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICByZXR1cm4gRVhQTElDQUJMRV9UWVBFUy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCxCaWdJbnQsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzLiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHxcbiAgICAgICAgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICdfJyAmJiAhKGtleSBpbiB0YXJnZXQuJGRhdGEpKTtcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UkJDEsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1ciwgdm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbnMgPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHtcbiAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgfVxuICB2YXIgaW52b2tlcjtcbiAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoaXNVbmRlZihwcm9wT3B0aW9ucykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICB2YXIgc2xvdHMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICB2YXIgdm5vZGUgPSByZXMgJiYgcmVzWzBdO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgIXZub2RlIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiB2bm9kZS5pc0NvbW1lbnQgJiYgIWlzQXN5bmNQbGFjZWhvbGRlcih2bm9kZSkpIC8vICM5NjU4LCAjMTAzOTFcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2tSZW5kZXIsXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHtcbiAgICAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKCdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JywgdGhpcyk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID1cbiAgICAgIHNjb3BlZFNsb3RGbihwcm9wcykgfHxcbiAgICAgICh0eXBlb2YgZmFsbGJhY2tSZW5kZXIgPT09ICdmdW5jdGlvbicgPyBmYWxsYmFja1JlbmRlcigpIDogZmFsbGJhY2tSZW5kZXIpO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID1cbiAgICAgIHRoaXMuJHNsb3RzW25hbWVdIHx8XG4gICAgICAodHlwZW9mIGZhbGxiYWNrUmVuZGVyID09PSAnZnVuY3Rpb24nID8gZmFsbGJhY2tSZW5kZXIoKSA6IGZhbGxiYWNrUmVuZGVyKTtcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG4gIHJldHVybiBldmVudEtleUNvZGUgPT09IHVuZGVmaW5lZFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICBpZiAoY29udGV4dC5faXNNb3VudGVkKSB7XG4gICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMlxuICAgICAgICAvLyBEdXJpbmcgdXBkYXRlcywgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCdzIGNoaWxkIGNvbXBvbmVudHMgbWF5XG4gICAgICAgIC8vIGNoYW5nZSwgc28gZGlyZWN0bHkgd2Fsa2luZyB0aGUgdHJlZSBoZXJlIG1heSBjYWxsIGFjdGl2YXRlZCBob29rc1xuICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4gICAgICAgIC8vIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgd2hvbGUgcGF0Y2ggcHJvY2VzcyBlbmRlZC5cbiAgICAgICAgcXVldWVBY3RpdmF0ZWRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhjb21wb25lbnRWTm9kZUhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmIChpc1VuZGVmKEN0b3IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuICAvLyByZWplY3QuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICB2bm9kZSxcbiAgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4gIHBhcmVudFxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEubmF0aXZlT24pICYmIGRhdGEudGFnICE9PSAnY29tcG9uZW50Jykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlRoZSAubmF0aXZlIG1vZGlmaWVyIGZvciB2LW9uIGlzIG9ubHkgdmFsaWQgb24gY29tcG9uZW50cyBidXQgaXQgd2FzIHVzZWQgb24gPFwiICsgdGFnICsgXCI+LlwiKSxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdXNlIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKFxuICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgIChoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbiAgKSB7XG4gICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gaXNPYmplY3QoY29tcClcbiAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgOiBjb21wXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICBmYWN0b3J5LFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTtcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIHZhciBvd25lcnMgPSBmYWN0b3J5Lm93bmVycyA9IFtvd25lcl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgIHZhciB0aW1lclRpbWVvdXQgPSBudWxsXG5cbiAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lckxvYWRpbmcpO1xuICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2kkMV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KSB8fFxuICAgICghbmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkpXG4gICk7XG5cbiAgLy8gQW55IHN0YXRpYyBzbG90IGNoaWxkcmVuIGZyb20gdGhlIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGR1cmluZyBwYXJlbnQnc1xuICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBoYXNEeW5hbWljU2NvcGVkU2xvdFxuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAobmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3cgPSBEYXRlLm5vdztcblxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICBpZiAoXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXBcbiAgKSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpc1xuICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgLy8gd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICB3YXRjaGVyLmJlZm9yZSgpO1xuICAgIH1cbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgdGhpcy5iZWZvcmUgPSBvcHRpb25zLmJlZm9yZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIHZtID0gdGhpcy52bTtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJnZXR0ZXIgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgcG9wVGFyZ2V0KCk7XG4gICAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufTtcblxuLyoqXG4gKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICB2YXIgaWQgPSBkZXAuaWQ7XG4gIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHZhciBpbmZvID0gXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiO1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyh0aGlzLmNiLCB0aGlzLnZtLCBbdmFsdWUsIG9sZFZhbHVlXSwgdGhpcy52bSwgaW5mbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMubWV0aG9kcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMubWV0aG9kcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgbWV0aG9kLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZik7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpXG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0IHx8IG5vb3A7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdmFyIGluZm8gPSBcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiO1xuICAgICAgcHVzaFRhcmdldCgpO1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2IsIHZtLCBbd2F0Y2hlci52YWx1ZV0sIHZtLCBpbmZvKTtcbiAgICAgIHBvcFRhcmdldCgpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDMgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCQzKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGVudHJ5ID0gY2FjaGVba2V5XTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHZhciBuYW1lID0gZW50cnkubmFtZTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xuICBpZiAoZW50cnkgJiYgKCFjdXJyZW50IHx8IGVudHJ5LnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgZW50cnkuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGNhY2hlVk5vZGU6IGZ1bmN0aW9uIGNhY2hlVk5vZGUoKSB7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZi5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmLmtleXM7XG4gICAgICB2YXIgdm5vZGVUb0NhY2hlID0gcmVmLnZub2RlVG9DYWNoZTtcbiAgICAgIHZhciBrZXlUb0NhY2hlID0gcmVmLmtleVRvQ2FjaGU7XG4gICAgICBpZiAodm5vZGVUb0NhY2hlKSB7XG4gICAgICAgIHZhciB0YWcgPSB2bm9kZVRvQ2FjaGUudGFnO1xuICAgICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZVRvQ2FjaGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGVUb0NhY2hlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgIGNhY2hlW2tleVRvQ2FjaGVdID0ge1xuICAgICAgICAgIG5hbWU6IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyksXG4gICAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgICAgY29tcG9uZW50SW5zdGFuY2U6IGNvbXBvbmVudEluc3RhbmNlLFxuICAgICAgICB9O1xuICAgICAgICBrZXlzLnB1c2goa2V5VG9DYWNoZSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZub2RlVG9DYWNoZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLmNhY2hlVk5vZGUoKTtcbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZVZOb2RlKCk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlbGF5IHNldHRpbmcgdGhlIGNhY2hlIHVudGlsIHVwZGF0ZVxuICAgICAgICB0aGlzLnZub2RlVG9DYWNoZSA9IHZub2RlO1xuICAgICAgICB0aGlzLmtleVRvQ2FjaGUgPSBrZXk7XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgVnVlLm9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgb2JzZXJ2ZShvYmopO1xuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjYuMTQnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG52YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJ1xuICAgID8gJ2ZhbHNlJ1xuICAgIC8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxuICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6ICd0cnVlJ1xufTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbm9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0ZWRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmXG4gICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1ciwgdm5vZGUuZGF0YS5wcmUpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlLCBpc0luUHJlKSB7XG4gIGlmIChpc0luUHJlIHx8IGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc3NhcnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTtcbiAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgIHRoaXMkMS5fX3BhdGNoX18oXG4gICAgICAgIHRoaXMkMS5fdm5vZGUsXG4gICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwiLyohXG4gKiB2dWV4IHYzLjYuMlxuICogKGMpIDIwMjEgRXZhbiBZb3VcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBhcHBseU1peGluIChWdWUpIHtcbiAgdmFyIHZlcnNpb24gPSBOdW1iZXIoVnVlLnZlcnNpb24uc3BsaXQoJy4nKVswXSk7XG5cbiAgaWYgKHZlcnNpb24gPj0gMikge1xuICAgIFZ1ZS5taXhpbih7IGJlZm9yZUNyZWF0ZTogdnVleEluaXQgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3ZlcnJpZGUgaW5pdCBhbmQgaW5qZWN0IHZ1ZXggaW5pdCBwcm9jZWR1cmVcbiAgICAvLyBmb3IgMS54IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgIHZhciBfaW5pdCA9IFZ1ZS5wcm90b3R5cGUuX2luaXQ7XG4gICAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAgICAgb3B0aW9ucy5pbml0ID0gb3B0aW9ucy5pbml0XG4gICAgICAgID8gW3Z1ZXhJbml0XS5jb25jYXQob3B0aW9ucy5pbml0KVxuICAgICAgICA6IHZ1ZXhJbml0O1xuICAgICAgX2luaXQuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFZ1ZXggaW5pdCBob29rLCBpbmplY3RlZCBpbnRvIGVhY2ggaW5zdGFuY2VzIGluaXQgaG9va3MgbGlzdC5cbiAgICovXG5cbiAgZnVuY3Rpb24gdnVleEluaXQgKCkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgICAvLyBzdG9yZSBpbmplY3Rpb25cbiAgICBpZiAob3B0aW9ucy5zdG9yZSkge1xuICAgICAgdGhpcy4kc3RvcmUgPSB0eXBlb2Ygb3B0aW9ucy5zdG9yZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG9wdGlvbnMuc3RvcmUoKVxuICAgICAgICA6IG9wdGlvbnMuc3RvcmU7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC4kc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gb3B0aW9ucy5wYXJlbnQuJHN0b3JlO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdGFyZ2V0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgPyB3aW5kb3dcbiAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgID8gZ2xvYmFsXG4gICAgOiB7fTtcbnZhciBkZXZ0b29sSG9vayA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG5mdW5jdGlvbiBkZXZ0b29sUGx1Z2luIChzdG9yZSkge1xuICBpZiAoIWRldnRvb2xIb29rKSB7IHJldHVybiB9XG5cbiAgc3RvcmUuX2RldnRvb2xIb29rID0gZGV2dG9vbEhvb2s7XG5cbiAgZGV2dG9vbEhvb2suZW1pdCgndnVleDppbml0Jywgc3RvcmUpO1xuXG4gIGRldnRvb2xIb29rLm9uKCd2dWV4OnRyYXZlbC10by1zdGF0ZScsIGZ1bmN0aW9uICh0YXJnZXRTdGF0ZSkge1xuICAgIHN0b3JlLnJlcGxhY2VTdGF0ZSh0YXJnZXRTdGF0ZSk7XG4gIH0pO1xuXG4gIHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlKSB7XG4gICAgZGV2dG9vbEhvb2suZW1pdCgndnVleDptdXRhdGlvbicsIG11dGF0aW9uLCBzdGF0ZSk7XG4gIH0sIHsgcHJlcGVuZDogdHJ1ZSB9KTtcblxuICBzdG9yZS5zdWJzY3JpYmVBY3Rpb24oZnVuY3Rpb24gKGFjdGlvbiwgc3RhdGUpIHtcbiAgICBkZXZ0b29sSG9vay5lbWl0KCd2dWV4OmFjdGlvbicsIGFjdGlvbiwgc3RhdGUpO1xuICB9LCB7IHByZXBlbmQ6IHRydWUgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBmaXJzdCBpdGVtIHRoYXQgcGFzcyB0aGUgdGVzdFxuICogYnkgc2Vjb25kIGFyZ3VtZW50IGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gbGlzdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZlxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gZmluZCAobGlzdCwgZikge1xuICByZXR1cm4gbGlzdC5maWx0ZXIoZilbMF1cbn1cblxuLyoqXG4gKiBEZWVwIGNvcHkgdGhlIGdpdmVuIG9iamVjdCBjb25zaWRlcmluZyBjaXJjdWxhciBzdHJ1Y3R1cmUuXG4gKiBUaGlzIGZ1bmN0aW9uIGNhY2hlcyBhbGwgbmVzdGVkIG9iamVjdHMgYW5kIGl0cyBjb3BpZXMuXG4gKiBJZiBpdCBkZXRlY3RzIGNpcmN1bGFyIHN0cnVjdHVyZSwgdXNlIGNhY2hlZCBjb3B5IHRvIGF2b2lkIGluZmluaXRlIGxvb3AuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gY2FjaGVcbiAqIEByZXR1cm4geyp9XG4gKi9cbmZ1bmN0aW9uIGRlZXBDb3B5IChvYmosIGNhY2hlKSB7XG4gIGlmICggY2FjaGUgPT09IHZvaWQgMCApIGNhY2hlID0gW107XG5cbiAgLy8ganVzdCByZXR1cm4gaWYgb2JqIGlzIGltbXV0YWJsZSB2YWx1ZVxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9ialxuICB9XG5cbiAgLy8gaWYgb2JqIGlzIGhpdCwgaXQgaXMgaW4gY2lyY3VsYXIgc3RydWN0dXJlXG4gIHZhciBoaXQgPSBmaW5kKGNhY2hlLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5vcmlnaW5hbCA9PT0gb2JqOyB9KTtcbiAgaWYgKGhpdCkge1xuICAgIHJldHVybiBoaXQuY29weVxuICB9XG5cbiAgdmFyIGNvcHkgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6IHt9O1xuICAvLyBwdXQgdGhlIGNvcHkgaW50byBjYWNoZSBhdCBmaXJzdFxuICAvLyBiZWNhdXNlIHdlIHdhbnQgdG8gcmVmZXIgaXQgaW4gcmVjdXJzaXZlIGRlZXBDb3B5XG4gIGNhY2hlLnB1c2goe1xuICAgIG9yaWdpbmFsOiBvYmosXG4gICAgY29weTogY29weVxuICB9KTtcblxuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGNvcHlba2V5XSA9IGRlZXBDb3B5KG9ialtrZXldLCBjYWNoZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb3B5XG59XG5cbi8qKlxuICogZm9yRWFjaCBmb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hWYWx1ZSAob2JqLCBmbikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4ob2JqW2tleV0sIGtleSk7IH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1zZykge1xuICBpZiAoIWNvbmRpdGlvbikgeyB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZXhdIFwiICsgbXNnKSkgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aWFsIChmbiwgYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuKGFyZylcbiAgfVxufVxuXG4vLyBCYXNlIGRhdGEgc3RydWN0IGZvciBzdG9yZSdzIG1vZHVsZSwgcGFja2FnZSB3aXRoIHNvbWUgYXR0cmlidXRlIGFuZCBtZXRob2RcbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUgKHJhd01vZHVsZSwgcnVudGltZSkge1xuICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICAvLyBTdG9yZSBzb21lIGNoaWxkcmVuIGl0ZW1cbiAgdGhpcy5fY2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSBvYmplY3Qgd2hpY2ggcGFzc2VkIGJ5IHByb2dyYW1tZXJcbiAgdGhpcy5fcmF3TW9kdWxlID0gcmF3TW9kdWxlO1xuICB2YXIgcmF3U3RhdGUgPSByYXdNb2R1bGUuc3RhdGU7XG5cbiAgLy8gU3RvcmUgdGhlIG9yaWdpbiBtb2R1bGUncyBzdGF0ZVxuICB0aGlzLnN0YXRlID0gKHR5cGVvZiByYXdTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHJhd1N0YXRlKCkgOiByYXdTdGF0ZSkgfHwge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBuYW1lc3BhY2VkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5uYW1lc3BhY2VkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWRcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiBhZGRDaGlsZCAoa2V5LCBtb2R1bGUpIHtcbiAgdGhpcy5fY2hpbGRyZW5ba2V5XSA9IG1vZHVsZTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoa2V5KSB7XG4gIGRlbGV0ZSB0aGlzLl9jaGlsZHJlbltrZXldO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5nZXRDaGlsZCA9IGZ1bmN0aW9uIGdldENoaWxkIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW2tleV1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiBoYXNDaGlsZCAoa2V5KSB7XG4gIHJldHVybiBrZXkgaW4gdGhpcy5fY2hpbGRyZW5cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChyYXdNb2R1bGUpIHtcbiAgdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWQgPSByYXdNb2R1bGUubmFtZXNwYWNlZDtcbiAgaWYgKHJhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMgPSByYXdNb2R1bGUuYWN0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMgPSByYXdNb2R1bGUubXV0YXRpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzID0gcmF3TW9kdWxlLmdldHRlcnM7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gZm9yRWFjaENoaWxkIChmbikge1xuICBmb3JFYWNoVmFsdWUodGhpcy5fY2hpbGRyZW4sIGZuKTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEdldHRlciA9IGZ1bmN0aW9uIGZvckVhY2hHZXR0ZXIgKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hBY3Rpb24gPSBmdW5jdGlvbiBmb3JFYWNoQWN0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoTXV0YXRpb24gPSBmdW5jdGlvbiBmb3JFYWNoTXV0YXRpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1vZHVsZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgTW9kdWxlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIE1vZHVsZUNvbGxlY3Rpb24gKHJhd1Jvb3RNb2R1bGUpIHtcbiAgLy8gcmVnaXN0ZXIgcm9vdCBtb2R1bGUgKFZ1ZXguU3RvcmUgb3B0aW9ucylcbiAgdGhpcy5yZWdpc3RlcihbXSwgcmF3Um9vdE1vZHVsZSwgZmFsc2UpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobW9kdWxlLCBrZXkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmdldENoaWxkKGtleSlcbiAgfSwgdGhpcy5yb290KVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TmFtZXNwYWNlID0gZnVuY3Rpb24gZ2V0TmFtZXNwYWNlIChwYXRoKSB7XG4gIHZhciBtb2R1bGUgPSB0aGlzLnJvb3Q7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBrZXkpIHtcbiAgICBtb2R1bGUgPSBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTtcbiAgICByZXR1cm4gbmFtZXNwYWNlICsgKG1vZHVsZS5uYW1lc3BhY2VkID8ga2V5ICsgJy8nIDogJycpXG4gIH0sICcnKVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlJDEgKHJhd1Jvb3RNb2R1bGUpIHtcbiAgdXBkYXRlKFtdLCB0aGlzLnJvb3QsIHJhd1Jvb3RNb2R1bGUpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlciAocGF0aCwgcmF3TW9kdWxlLCBydW50aW1lKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBydW50aW1lID09PSB2b2lkIDAgKSBydW50aW1lID0gdHJ1ZTtcblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIHJhd01vZHVsZSk7XG4gIH1cblxuICB2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZShyYXdNb2R1bGUsIHJ1bnRpbWUpO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLnJvb3QgPSBuZXdNb2R1bGU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBwYXJlbnQuYWRkQ2hpbGQocGF0aFtwYXRoLmxlbmd0aCAtIDFdLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKHJhd01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZS5tb2R1bGVzLCBmdW5jdGlvbiAocmF3Q2hpbGRNb2R1bGUsIGtleSkge1xuICAgICAgdGhpcyQxLnJlZ2lzdGVyKHBhdGguY29uY2F0KGtleSksIHJhd0NoaWxkTW9kdWxlLCBydW50aW1lKTtcbiAgICB9KTtcbiAgfVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIgKHBhdGgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgdmFyIGtleSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgdmFyIGNoaWxkID0gcGFyZW50LmdldENoaWxkKGtleSk7XG5cbiAgaWYgKCFjaGlsZCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJbdnVleF0gdHJ5aW5nIHRvIHVucmVnaXN0ZXIgbW9kdWxlICdcIiArIGtleSArIFwiJywgd2hpY2ggaXMgXCIgK1xuICAgICAgICBcIm5vdCByZWdpc3RlcmVkXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKCFjaGlsZC5ydW50aW1lKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBwYXJlbnQucmVtb3ZlQ2hpbGQoa2V5KTtcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmlzUmVnaXN0ZXJlZCA9IGZ1bmN0aW9uIGlzUmVnaXN0ZXJlZCAocGF0aCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICB2YXIga2V5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICByZXR1cm4gcGFyZW50Lmhhc0NoaWxkKGtleSlcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufTtcblxuZnVuY3Rpb24gdXBkYXRlIChwYXRoLCB0YXJnZXRNb2R1bGUsIG5ld01vZHVsZSkge1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyB1cGRhdGUgdGFyZ2V0IG1vZHVsZVxuICB0YXJnZXRNb2R1bGUudXBkYXRlKG5ld01vZHVsZSk7XG5cbiAgLy8gdXBkYXRlIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChuZXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBuZXdNb2R1bGUubW9kdWxlcykge1xuICAgICAgaWYgKCF0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgXCJbdnVleF0gdHJ5aW5nIHRvIGFkZCBhIG5ldyBtb2R1bGUgJ1wiICsga2V5ICsgXCInIG9uIGhvdCByZWxvYWRpbmcsIFwiICtcbiAgICAgICAgICAgICdtYW51YWwgcmVsb2FkIGlzIG5lZWRlZCdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKFxuICAgICAgICBwYXRoLmNvbmNhdChrZXkpLFxuICAgICAgICB0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSxcbiAgICAgICAgbmV3TW9kdWxlLm1vZHVsZXNba2V5XVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGZ1bmN0aW9uQXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uJ1xufTtcblxudmFyIG9iamVjdEFzc2VydCA9IHtcbiAgYXNzZXJ0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS5oYW5kbGVyID09PSAnZnVuY3Rpb24nKTsgfSxcbiAgZXhwZWN0ZWQ6ICdmdW5jdGlvbiBvciBvYmplY3Qgd2l0aCBcImhhbmRsZXJcIiBmdW5jdGlvbidcbn07XG5cbnZhciBhc3NlcnRUeXBlcyA9IHtcbiAgZ2V0dGVyczogZnVuY3Rpb25Bc3NlcnQsXG4gIG11dGF0aW9uczogZnVuY3Rpb25Bc3NlcnQsXG4gIGFjdGlvbnM6IG9iamVjdEFzc2VydFxufTtcblxuZnVuY3Rpb24gYXNzZXJ0UmF3TW9kdWxlIChwYXRoLCByYXdNb2R1bGUpIHtcbiAgT2JqZWN0LmtleXMoYXNzZXJ0VHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghcmF3TW9kdWxlW2tleV0pIHsgcmV0dXJuIH1cblxuICAgIHZhciBhc3NlcnRPcHRpb25zID0gYXNzZXJ0VHlwZXNba2V5XTtcblxuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGVba2V5XSwgZnVuY3Rpb24gKHZhbHVlLCB0eXBlKSB7XG4gICAgICBhc3NlcnQoXG4gICAgICAgIGFzc2VydE9wdGlvbnMuYXNzZXJ0KHZhbHVlKSxcbiAgICAgICAgbWFrZUFzc2VydGlvbk1lc3NhZ2UocGF0aCwga2V5LCB0eXBlLCB2YWx1ZSwgYXNzZXJ0T3B0aW9ucy5leHBlY3RlZClcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYWtlQXNzZXJ0aW9uTWVzc2FnZSAocGF0aCwga2V5LCB0eXBlLCB2YWx1ZSwgZXhwZWN0ZWQpIHtcbiAgdmFyIGJ1ZiA9IGtleSArIFwiIHNob3VsZCBiZSBcIiArIGV4cGVjdGVkICsgXCIgYnV0IFxcXCJcIiArIGtleSArIFwiLlwiICsgdHlwZSArIFwiXFxcIlwiO1xuICBpZiAocGF0aC5sZW5ndGggPiAwKSB7XG4gICAgYnVmICs9IFwiIGluIG1vZHVsZSBcXFwiXCIgKyAocGF0aC5qb2luKCcuJykpICsgXCJcXFwiXCI7XG4gIH1cbiAgYnVmICs9IFwiIGlzIFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbHVlKSkgKyBcIi5cIjtcbiAgcmV0dXJuIGJ1ZlxufVxuXG52YXIgVnVlOyAvLyBiaW5kIG9uIGluc3RhbGxcblxudmFyIFN0b3JlID0gZnVuY3Rpb24gU3RvcmUgKG9wdGlvbnMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEF1dG8gaW5zdGFsbCBpZiBpdCBpcyBub3QgZG9uZSB5ZXQgYW5kIGB3aW5kb3dgIGhhcyBgVnVlYC5cbiAgLy8gVG8gYWxsb3cgdXNlcnMgdG8gYXZvaWQgYXV0by1pbnN0YWxsYXRpb24gaW4gc29tZSBjYXNlcyxcbiAgLy8gdGhpcyBjb2RlIHNob3VsZCBiZSBwbGFjZWQgaGVyZS4gU2VlICM3MzFcbiAgaWYgKCFWdWUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZ1ZSkge1xuICAgIGluc3RhbGwod2luZG93LlZ1ZSk7XG4gIH1cblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KFZ1ZSwgXCJtdXN0IGNhbGwgVnVlLnVzZShWdWV4KSBiZWZvcmUgY3JlYXRpbmcgYSBzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgYXNzZXJ0KHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJywgXCJ2dWV4IHJlcXVpcmVzIGEgUHJvbWlzZSBwb2x5ZmlsbCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICAgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgU3RvcmUsIFwic3RvcmUgbXVzdCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IG9wZXJhdG9yLlwiKTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zOyBpZiAoIHBsdWdpbnMgPT09IHZvaWQgMCApIHBsdWdpbnMgPSBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OyBpZiAoIHN0cmljdCA9PT0gdm9pZCAwICkgc3RyaWN0ID0gZmFsc2U7XG5cbiAgLy8gc3RvcmUgaW50ZXJuYWwgc3RhdGVcbiAgdGhpcy5fY29tbWl0dGluZyA9IGZhbHNlO1xuICB0aGlzLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9tb2R1bGVzID0gbmV3IE1vZHVsZUNvbGxlY3Rpb24ob3B0aW9ucyk7XG4gIHRoaXMuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl93YXRjaGVyVk0gPSBuZXcgVnVlKCk7XG4gIHRoaXMuX21ha2VMb2NhbEdldHRlcnNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy8gYmluZCBjb21taXQgYW5kIGRpc3BhdGNoIHRvIHNlbGZcbiAgdmFyIHN0b3JlID0gdGhpcztcbiAgdmFyIHJlZiA9IHRoaXM7XG4gIHZhciBkaXNwYXRjaCA9IHJlZi5kaXNwYXRjaDtcbiAgdmFyIGNvbW1pdCA9IHJlZi5jb21taXQ7XG4gIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiBib3VuZERpc3BhdGNoICh0eXBlLCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoLmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQpXG4gIH07XG4gIHRoaXMuY29tbWl0ID0gZnVuY3Rpb24gYm91bmRDb21taXQgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tbWl0LmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpXG4gIH07XG5cbiAgLy8gc3RyaWN0IG1vZGVcbiAgdGhpcy5zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fbW9kdWxlcy5yb290LnN0YXRlO1xuXG4gIC8vIGluaXQgcm9vdCBtb2R1bGUuXG4gIC8vIHRoaXMgYWxzbyByZWN1cnNpdmVseSByZWdpc3RlcnMgYWxsIHN1Yi1tb2R1bGVzXG4gIC8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG4gIGluc3RhbGxNb2R1bGUodGhpcywgc3RhdGUsIFtdLCB0aGlzLl9tb2R1bGVzLnJvb3QpO1xuXG4gIC8vIGluaXRpYWxpemUgdGhlIHN0b3JlIHZtLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHJlYWN0aXZpdHlcbiAgLy8gKGFsc28gcmVnaXN0ZXJzIF93cmFwcGVkR2V0dGVycyBhcyBjb21wdXRlZCBwcm9wZXJ0aWVzKVxuICByZXNldFN0b3JlVk0odGhpcywgc3RhdGUpO1xuXG4gIC8vIGFwcGx5IHBsdWdpbnNcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsgcmV0dXJuIHBsdWdpbih0aGlzJDEpOyB9KTtcblxuICB2YXIgdXNlRGV2dG9vbHMgPSBvcHRpb25zLmRldnRvb2xzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRldnRvb2xzIDogVnVlLmNvbmZpZy5kZXZ0b29scztcbiAgaWYgKHVzZURldnRvb2xzKSB7XG4gICAgZGV2dG9vbFBsdWdpbih0aGlzKTtcbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBzdGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl92bS5fZGF0YS4kJHN0YXRlXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5zZXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KGZhbHNlLCBcInVzZSBzdG9yZS5yZXBsYWNlU3RhdGUoKSB0byBleHBsaWNpdCByZXBsYWNlIHN0b3JlIHN0YXRlLlwiKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uIGNvbW1pdCAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBjb21taXRcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuICAgIHZhciBvcHRpb25zID0gcmVmLm9wdGlvbnM7XG5cbiAgdmFyIG11dGF0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX211dGF0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIGVudHJ5LmZvckVhY2goZnVuY3Rpb24gY29tbWl0SXRlcmF0b3IgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRoaXMuX3N1YnNjcmliZXJzXG4gICAgLnNsaWNlKCkgLy8gc2hhbGxvdyBjb3B5IHRvIHByZXZlbnQgaXRlcmF0b3IgaW52YWxpZGF0aW9uIGlmIHN1YnNjcmliZXIgc3luY2hyb25vdXNseSBjYWxscyB1bnN1YnNjcmliZVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1YihtdXRhdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG5cbiAgaWYgKFxuICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnRcbiAgKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJbdnVleF0gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlICsgXCIuIFNpbGVudCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gXCIgK1xuICAgICAgJ1VzZSB0aGUgZmlsdGVyIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHZ1ZS1kZXZ0b29scydcbiAgICApO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCAoX3R5cGUsIF9wYXlsb2FkKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGRpc3BhdGNoXG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuXG4gIHZhciBhY3Rpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fYWN0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gYWN0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgIC5zbGljZSgpIC8vIHNoYWxsb3cgY29weSB0byBwcmV2ZW50IGl0ZXJhdG9yIGludmFsaWRhdGlvbiBpZiBzdWJzY3JpYmVyIHN5bmNocm9ub3VzbHkgY2FsbHMgdW5zdWJzY3JpYmVcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmJlZm9yZTsgfSlcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmUoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBiZWZvcmUgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBlbnRyeS5sZW5ndGggPiAxXG4gICAgPyBQcm9taXNlLmFsbChlbnRyeS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGhhbmRsZXIocGF5bG9hZCk7IH0pKVxuICAgIDogZW50cnlbMF0ocGF5bG9hZCk7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzJDEuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXI7IH0pXG4gICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmFmdGVyKGFjdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYWZ0ZXIgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzb2x2ZShyZXMpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcyQxLl9hY3Rpb25TdWJzY3JpYmVyc1xuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmVycm9yOyB9KVxuICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5lcnJvcihhY3Rpb24sIHRoaXMkMS5zdGF0ZSwgZXJyb3IpOyB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBlcnJvciBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICB9KVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSAoZm4sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoZm4sIHRoaXMuX3N1YnNjcmliZXJzLCBvcHRpb25zKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZUFjdGlvbiA9IGZ1bmN0aW9uIHN1YnNjcmliZUFjdGlvbiAoZm4sIG9wdGlvbnMpIHtcbiAgdmFyIHN1YnMgPSB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgPyB7IGJlZm9yZTogZm4gfSA6IGZuO1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShzdWJzLCB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycywgb3B0aW9ucylcbn07XG5cblN0b3JlLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uIHdhdGNoIChnZXR0ZXIsIGNiLCBvcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydCh0eXBlb2YgZ2V0dGVyID09PSAnZnVuY3Rpb24nLCBcInN0b3JlLndhdGNoIG9ubHkgYWNjZXB0cyBhIGZ1bmN0aW9uLlwiKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fd2F0Y2hlclZNLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBnZXR0ZXIodGhpcyQxLnN0YXRlLCB0aGlzJDEuZ2V0dGVycyk7IH0sIGNiLCBvcHRpb25zKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZSAoc3RhdGUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzJDEuX3ZtLl9kYXRhLiQkc3RhdGUgPSBzdGF0ZTtcbiAgfSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbiByZWdpc3Rlck1vZHVsZSAocGF0aCwgcmF3TW9kdWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgeyBwYXRoID0gW3BhdGhdOyB9XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICAgIGFzc2VydChwYXRoLmxlbmd0aCA+IDAsICdjYW5ub3QgcmVnaXN0ZXIgdGhlIHJvb3QgbW9kdWxlIGJ5IHVzaW5nIHJlZ2lzdGVyTW9kdWxlLicpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLCByYXdNb2R1bGUpO1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHRoaXMuc3RhdGUsIHBhdGgsIHRoaXMuX21vZHVsZXMuZ2V0KHBhdGgpLCBvcHRpb25zLnByZXNlcnZlU3RhdGUpO1xuICAvLyByZXNldCBzdG9yZSB0byB1cGRhdGUgZ2V0dGVycy4uLlxuICByZXNldFN0b3JlVk0odGhpcywgdGhpcy5zdGF0ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUgKHBhdGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnVucmVnaXN0ZXIocGF0aCk7XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHRoaXMkMS5zdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIFZ1ZS5kZWxldGUocGFyZW50U3RhdGUsIHBhdGhbcGF0aC5sZW5ndGggLSAxXSk7XG4gIH0pO1xuICByZXNldFN0b3JlKHRoaXMpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmhhc01vZHVsZSA9IGZ1bmN0aW9uIGhhc01vZHVsZSAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fbW9kdWxlcy5pc1JlZ2lzdGVyZWQocGF0aClcbn07XG5cblN0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGUgPSBmdW5jdGlvbiBob3RVcGRhdGUgKG5ld09wdGlvbnMpIHtcbiAgdGhpcy5fbW9kdWxlcy51cGRhdGUobmV3T3B0aW9ucyk7XG4gIHJlc2V0U3RvcmUodGhpcywgdHJ1ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3dpdGhDb21taXQgPSBmdW5jdGlvbiBfd2l0aENvbW1pdCAoZm4pIHtcbiAgdmFyIGNvbW1pdHRpbmcgPSB0aGlzLl9jb21taXR0aW5nO1xuICB0aGlzLl9jb21taXR0aW5nID0gdHJ1ZTtcbiAgZm4oKTtcbiAgdGhpcy5fY29tbWl0dGluZyA9IGNvbW1pdHRpbmc7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RvcmUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG5mdW5jdGlvbiBnZW5lcmljU3Vic2NyaWJlIChmbiwgc3Vicywgb3B0aW9ucykge1xuICBpZiAoc3Vicy5pbmRleE9mKGZuKSA8IDApIHtcbiAgICBvcHRpb25zICYmIG9wdGlvbnMucHJlcGVuZFxuICAgICAgPyBzdWJzLnVuc2hpZnQoZm4pXG4gICAgICA6IHN1YnMucHVzaChmbik7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IHN1YnMuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkge1xuICAgICAgc3Vicy5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmUgKHN0b3JlLCBob3QpIHtcbiAgc3RvcmUuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc3RhdGUgPSBzdG9yZS5zdGF0ZTtcbiAgLy8gaW5pdCBhbGwgbW9kdWxlc1xuICBpbnN0YWxsTW9kdWxlKHN0b3JlLCBzdGF0ZSwgW10sIHN0b3JlLl9tb2R1bGVzLnJvb3QsIHRydWUpO1xuICAvLyByZXNldCB2bVxuICByZXNldFN0b3JlVk0oc3RvcmUsIHN0YXRlLCBob3QpO1xufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlVk0gKHN0b3JlLCBzdGF0ZSwgaG90KSB7XG4gIHZhciBvbGRWbSA9IHN0b3JlLl92bTtcblxuICAvLyBiaW5kIHN0b3JlIHB1YmxpYyBnZXR0ZXJzXG4gIHN0b3JlLmdldHRlcnMgPSB7fTtcbiAgLy8gcmVzZXQgbG9jYWwgZ2V0dGVycyBjYWNoZVxuICBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHdyYXBwZWRHZXR0ZXJzID0gc3RvcmUuX3dyYXBwZWRHZXR0ZXJzO1xuICB2YXIgY29tcHV0ZWQgPSB7fTtcbiAgZm9yRWFjaFZhbHVlKHdyYXBwZWRHZXR0ZXJzLCBmdW5jdGlvbiAoZm4sIGtleSkge1xuICAgIC8vIHVzZSBjb21wdXRlZCB0byBsZXZlcmFnZSBpdHMgbGF6eS1jYWNoaW5nIG1lY2hhbmlzbVxuICAgIC8vIGRpcmVjdCBpbmxpbmUgZnVuY3Rpb24gdXNlIHdpbGwgbGVhZCB0byBjbG9zdXJlIHByZXNlcnZpbmcgb2xkVm0uXG4gICAgLy8gdXNpbmcgcGFydGlhbCB0byByZXR1cm4gZnVuY3Rpb24gd2l0aCBvbmx5IGFyZ3VtZW50cyBwcmVzZXJ2ZWQgaW4gY2xvc3VyZSBlbnZpcm9ubWVudC5cbiAgICBjb21wdXRlZFtrZXldID0gcGFydGlhbChmbiwgc3RvcmUpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdG9yZS5nZXR0ZXJzLCBrZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuX3ZtW2tleV07IH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlIC8vIGZvciBsb2NhbCBnZXR0ZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIHVzZSBhIFZ1ZSBpbnN0YW5jZSB0byBzdG9yZSB0aGUgc3RhdGUgdHJlZVxuICAvLyBzdXBwcmVzcyB3YXJuaW5ncyBqdXN0IGluIGNhc2UgdGhlIHVzZXIgaGFzIGFkZGVkXG4gIC8vIHNvbWUgZnVua3kgZ2xvYmFsIG1peGluc1xuICB2YXIgc2lsZW50ID0gVnVlLmNvbmZpZy5zaWxlbnQ7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gdHJ1ZTtcbiAgc3RvcmUuX3ZtID0gbmV3IFZ1ZSh7XG4gICAgZGF0YToge1xuICAgICAgJCRzdGF0ZTogc3RhdGVcbiAgICB9LFxuICAgIGNvbXB1dGVkOiBjb21wdXRlZFxuICB9KTtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSBzaWxlbnQ7XG5cbiAgLy8gZW5hYmxlIHN0cmljdCBtb2RlIGZvciBuZXcgdm1cbiAgaWYgKHN0b3JlLnN0cmljdCkge1xuICAgIGVuYWJsZVN0cmljdE1vZGUoc3RvcmUpO1xuICB9XG5cbiAgaWYgKG9sZFZtKSB7XG4gICAgaWYgKGhvdCkge1xuICAgICAgLy8gZGlzcGF0Y2ggY2hhbmdlcyBpbiBhbGwgc3Vic2NyaWJlZCB3YXRjaGVyc1xuICAgICAgLy8gdG8gZm9yY2UgZ2V0dGVyIHJlLWV2YWx1YXRpb24gZm9yIGhvdCByZWxvYWRpbmcuXG4gICAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9sZFZtLl9kYXRhLiQkc3RhdGUgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFZ1ZS5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJldHVybiBvbGRWbS4kZGVzdHJveSgpOyB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsTW9kdWxlIChzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLCBtb2R1bGUsIGhvdCkge1xuICB2YXIgaXNSb290ID0gIXBhdGgubGVuZ3RoO1xuICB2YXIgbmFtZXNwYWNlID0gc3RvcmUuX21vZHVsZXMuZ2V0TmFtZXNwYWNlKHBhdGgpO1xuXG4gIC8vIHJlZ2lzdGVyIGluIG5hbWVzcGFjZSBtYXBcbiAgaWYgKG1vZHVsZS5uYW1lc3BhY2VkKSB7XG4gICAgaWYgKHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV0gJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBkdXBsaWNhdGUgbmFtZXNwYWNlIFwiICsgbmFtZXNwYWNlICsgXCIgZm9yIHRoZSBuYW1lc3BhY2VkIG1vZHVsZSBcIiArIChwYXRoLmpvaW4oJy8nKSkpKTtcbiAgICB9XG4gICAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSA9IG1vZHVsZTtcbiAgfVxuXG4gIC8vIHNldCBzdGF0ZVxuICBpZiAoIWlzUm9vdCAmJiAhaG90KSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUocm9vdFN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBpZiAobW9kdWxlTmFtZSBpbiBwYXJlbnRTdGF0ZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIChcIlt2dWV4XSBzdGF0ZSBmaWVsZCBcXFwiXCIgKyBtb2R1bGVOYW1lICsgXCJcXFwiIHdhcyBvdmVycmlkZGVuIGJ5IGEgbW9kdWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhdCBcXFwiXCIgKyAocGF0aC5qb2luKCcuJykpICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgVnVlLnNldChwYXJlbnRTdGF0ZSwgbW9kdWxlTmFtZSwgbW9kdWxlLnN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsb2NhbCA9IG1vZHVsZS5jb250ZXh0ID0gbWFrZUxvY2FsQ29udGV4dChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKTtcblxuICBtb2R1bGUuZm9yRWFjaE11dGF0aW9uKGZ1bmN0aW9uIChtdXRhdGlvbiwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyTXV0YXRpb24oc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBtdXRhdGlvbiwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEFjdGlvbihmdW5jdGlvbiAoYWN0aW9uLCBrZXkpIHtcbiAgICB2YXIgdHlwZSA9IGFjdGlvbi5yb290ID8ga2V5IDogbmFtZXNwYWNlICsga2V5O1xuICAgIHZhciBoYW5kbGVyID0gYWN0aW9uLmhhbmRsZXIgfHwgYWN0aW9uO1xuICAgIHJlZ2lzdGVyQWN0aW9uKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoR2V0dGVyKGZ1bmN0aW9uIChnZXR0ZXIsIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3RlckdldHRlcihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIGdldHRlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCwga2V5KSB7XG4gICAgaW5zdGFsbE1vZHVsZShzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLmNvbmNhdChrZXkpLCBjaGlsZCwgaG90KTtcbiAgfSk7XG59XG5cbi8qKlxuICogbWFrZSBsb2NhbGl6ZWQgZGlzcGF0Y2gsIGNvbW1pdCwgZ2V0dGVycyBhbmQgc3RhdGVcbiAqIGlmIHRoZXJlIGlzIG5vIG5hbWVzcGFjZSwganVzdCB1c2Ugcm9vdCBvbmVzXG4gKi9cbmZ1bmN0aW9uIG1ha2VMb2NhbENvbnRleHQgKHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpIHtcbiAgdmFyIG5vTmFtZXNwYWNlID0gbmFtZXNwYWNlID09PSAnJztcblxuICB2YXIgbG9jYWwgPSB7XG4gICAgZGlzcGF0Y2g6IG5vTmFtZXNwYWNlID8gc3RvcmUuZGlzcGF0Y2ggOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhc3RvcmUuX2FjdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIGFjdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2godHlwZSwgcGF5bG9hZClcbiAgICB9LFxuXG4gICAgY29tbWl0OiBub05hbWVzcGFjZSA/IHN0b3JlLmNvbW1pdCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFzdG9yZS5fbXV0YXRpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBtdXRhdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdG9yZS5jb21taXQodHlwZSwgcGF5bG9hZCwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGdldHRlcnMgYW5kIHN0YXRlIG9iamVjdCBtdXN0IGJlIGdvdHRlbiBsYXppbHlcbiAgLy8gYmVjYXVzZSB0aGV5IHdpbGwgYmUgY2hhbmdlZCBieSB2bSB1cGRhdGVcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobG9jYWwsIHtcbiAgICBnZXR0ZXJzOiB7XG4gICAgICBnZXQ6IG5vTmFtZXNwYWNlXG4gICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0dGVyczsgfVxuICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1ha2VMb2NhbEdldHRlcnMoc3RvcmUsIG5hbWVzcGFjZSk7IH1cbiAgICB9LFxuICAgIHN0YXRlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldE5lc3RlZFN0YXRlKHN0b3JlLnN0YXRlLCBwYXRoKTsgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGxvY2FsXG59XG5cbmZ1bmN0aW9uIG1ha2VMb2NhbEdldHRlcnMgKHN0b3JlLCBuYW1lc3BhY2UpIHtcbiAgaWYgKCFzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV0pIHtcbiAgICB2YXIgZ2V0dGVyc1Byb3h5ID0ge307XG4gICAgdmFyIHNwbGl0UG9zID0gbmFtZXNwYWNlLmxlbmd0aDtcbiAgICBPYmplY3Qua2V5cyhzdG9yZS5nZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAvLyBza2lwIGlmIHRoZSB0YXJnZXQgZ2V0dGVyIGlzIG5vdCBtYXRjaCB0aGlzIG5hbWVzcGFjZVxuICAgICAgaWYgKHR5cGUuc2xpY2UoMCwgc3BsaXRQb3MpICE9PSBuYW1lc3BhY2UpIHsgcmV0dXJuIH1cblxuICAgICAgLy8gZXh0cmFjdCBsb2NhbCBnZXR0ZXIgdHlwZVxuICAgICAgdmFyIGxvY2FsVHlwZSA9IHR5cGUuc2xpY2Uoc3BsaXRQb3MpO1xuXG4gICAgICAvLyBBZGQgYSBwb3J0IHRvIHRoZSBnZXR0ZXJzIHByb3h5LlxuICAgICAgLy8gRGVmaW5lIGFzIGdldHRlciBwcm9wZXJ0eSBiZWNhdXNlXG4gICAgICAvLyB3ZSBkbyBub3Qgd2FudCB0byBldmFsdWF0ZSB0aGUgZ2V0dGVycyBpbiB0aGlzIHRpbWUuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2V0dGVyc1Byb3h5LCBsb2NhbFR5cGUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzW3R5cGVdOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV0gPSBnZXR0ZXJzUHJveHk7XG4gIH1cblxuICByZXR1cm4gc3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZVtuYW1lc3BhY2VdXG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTXV0YXRpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fbXV0YXRpb25zW3R5cGVdIHx8IChzdG9yZS5fbXV0YXRpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRNdXRhdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICBoYW5kbGVyLmNhbGwoc3RvcmUsIGxvY2FsLnN0YXRlLCBwYXlsb2FkKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQWN0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX2FjdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9hY3Rpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRBY3Rpb25IYW5kbGVyIChwYXlsb2FkKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuY2FsbChzdG9yZSwge1xuICAgICAgZGlzcGF0Y2g6IGxvY2FsLmRpc3BhdGNoLFxuICAgICAgY29tbWl0OiBsb2NhbC5jb21taXQsXG4gICAgICBnZXR0ZXJzOiBsb2NhbC5nZXR0ZXJzLFxuICAgICAgc3RhdGU6IGxvY2FsLnN0YXRlLFxuICAgICAgcm9vdEdldHRlcnM6IHN0b3JlLmdldHRlcnMsXG4gICAgICByb290U3RhdGU6IHN0b3JlLnN0YXRlXG4gICAgfSwgcGF5bG9hZCk7XG4gICAgaWYgKCFpc1Byb21pc2UocmVzKSkge1xuICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKHJlcyk7XG4gICAgfVxuICAgIGlmIChzdG9yZS5fZGV2dG9vbEhvb2spIHtcbiAgICAgIHJldHVybiByZXMuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBzdG9yZS5fZGV2dG9vbEhvb2suZW1pdCgndnVleDplcnJvcicsIGVycik7XG4gICAgICAgIHRocm93IGVyclxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyR2V0dGVyIChzdG9yZSwgdHlwZSwgcmF3R2V0dGVyLCBsb2NhbCkge1xuICBpZiAoc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIGdldHRlciBrZXk6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0gPSBmdW5jdGlvbiB3cmFwcGVkR2V0dGVyIChzdG9yZSkge1xuICAgIHJldHVybiByYXdHZXR0ZXIoXG4gICAgICBsb2NhbC5zdGF0ZSwgLy8gbG9jYWwgc3RhdGVcbiAgICAgIGxvY2FsLmdldHRlcnMsIC8vIGxvY2FsIGdldHRlcnNcbiAgICAgIHN0b3JlLnN0YXRlLCAvLyByb290IHN0YXRlXG4gICAgICBzdG9yZS5nZXR0ZXJzIC8vIHJvb3QgZ2V0dGVyc1xuICAgIClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlU3RyaWN0TW9kZSAoc3RvcmUpIHtcbiAgc3RvcmUuX3ZtLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhLiQkc3RhdGUgfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGFzc2VydChzdG9yZS5fY29tbWl0dGluZywgXCJkbyBub3QgbXV0YXRlIHZ1ZXggc3RvcmUgc3RhdGUgb3V0c2lkZSBtdXRhdGlvbiBoYW5kbGVycy5cIik7XG4gICAgfVxuICB9LCB7IGRlZXA6IHRydWUsIHN5bmM6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5lc3RlZFN0YXRlIChzdGF0ZSwgcGF0aCkge1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBrZXkpIHsgcmV0dXJuIHN0YXRlW2tleV07IH0sIHN0YXRlKVxufVxuXG5mdW5jdGlvbiB1bmlmeU9iamVjdFN0eWxlICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdCh0eXBlKSAmJiB0eXBlLnR5cGUpIHtcbiAgICBvcHRpb25zID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkID0gdHlwZTtcbiAgICB0eXBlID0gdHlwZS50eXBlO1xuICB9XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydCh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycsIChcImV4cGVjdHMgc3RyaW5nIGFzIHRoZSB0eXBlLCBidXQgZm91bmQgXCIgKyAodHlwZW9mIHR5cGUpICsgXCIuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQsIG9wdGlvbnM6IG9wdGlvbnMgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsIChfVnVlKSB7XG4gIGlmIChWdWUgJiYgX1Z1ZSA9PT0gVnVlKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1t2dWV4XSBhbHJlYWR5IGluc3RhbGxlZC4gVnVlLnVzZShWdWV4KSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZS4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBWdWUgPSBfVnVlO1xuICBhcHBseU1peGluKFZ1ZSk7XG59XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBzdGF0ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IHN0YXRlcyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IHN0YXRlIGFuZCBnZXR0ZXJzIGZvciBwYXJhbSwgeW91IGNhbiBkbyBzb21ldGhpbmcgZm9yIHN0YXRlIGFuZCBnZXR0ZXJzIGluIGl0LlxuICogQHBhcmFtIHtPYmplY3R9XG4gKi9cbnZhciBtYXBTdGF0ZSA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBzdGF0ZXMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1ZhbGlkTWFwKHN0YXRlcykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwU3RhdGU6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKHN0YXRlcykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZFN0YXRlICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuJHN0b3JlLnN0YXRlO1xuICAgICAgdmFyIGdldHRlcnMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzO1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBTdGF0ZScsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBtb2R1bGUuY29udGV4dC5zdGF0ZTtcbiAgICAgICAgZ2V0dGVycyA9IG1vZHVsZS5jb250ZXh0LmdldHRlcnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5jYWxsKHRoaXMsIHN0YXRlLCBnZXR0ZXJzKVxuICAgICAgICA6IHN0YXRlW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGNvbW1pdHRpbmcgdGhlIG11dGF0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBtdXRhdGlvbnMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBgY29tbWl0YCBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgcGFyYW0sIGl0IGNhbiBhY2NlcHQgYW5vdGhlciBwYXJhbXMuIFlvdSBjYW4gY29tbWl0IG11dGF0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcE11dGF0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBtdXRhdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1ZhbGlkTWFwKG11dGF0aW9ucykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwTXV0YXRpb25zOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChtdXRhdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRNdXRhdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgLy8gR2V0IHRoZSBjb21taXQgbWV0aG9kIGZyb20gc3RvcmVcbiAgICAgIHZhciBjb21taXQgPSB0aGlzLiRzdG9yZS5jb21taXQ7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcE11dGF0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29tbWl0ID0gbW9kdWxlLmNvbnRleHQuY29tbWl0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2NvbW1pdF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGNvbW1pdC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIGdldHRlcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IGdldHRlcnNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcEdldHRlcnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgZ2V0dGVycykge1xuICB2YXIgcmVzID0ge307XG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzVmFsaWRNYXAoZ2V0dGVycykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwR2V0dGVyczogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAoZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICAvLyBUaGUgbmFtZXNwYWNlIGhhcyBiZWVuIG11dGF0ZWQgYnkgbm9ybWFsaXplTmFtZXNwYWNlXG4gICAgdmFsID0gbmFtZXNwYWNlICsgdmFsO1xuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkR2V0dGVyICgpIHtcbiAgICAgIGlmIChuYW1lc3BhY2UgJiYgIWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwR2V0dGVycycsIG5hbWVzcGFjZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICEodmFsIGluIHRoaXMuJHN0b3JlLmdldHRlcnMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gZ2V0dGVyOiBcIiArIHZhbCkpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGRpc3BhdGNoIHRoZSBhY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IGFjdGlvbnMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBwYXJhbSwgaXQgY2FuIGFjY2VwdCBhbnRob3IgcGFyYW1zLiBZb3UgY2FuIGRpc3BhdGNoIGFjdGlvbiBhbmQgZG8gYW55IG90aGVyIHRoaW5ncyBpbiB0aGlzIGZ1bmN0aW9uLiBzcGVjaWFsbHksIFlvdSBuZWVkIHRvIHBhc3MgYW50aG9yIHBhcmFtcyBmcm9tIHRoZSBtYXBwZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBBY3Rpb25zID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGFjdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1ZhbGlkTWFwKGFjdGlvbnMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcEFjdGlvbnM6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRBY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIGdldCBkaXNwYXRjaCBmdW5jdGlvbiBmcm9tIHN0b3JlXG4gICAgICB2YXIgZGlzcGF0Y2ggPSB0aGlzLiRzdG9yZS5kaXNwYXRjaDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwQWN0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2ggPSBtb2R1bGUuY29udGV4dC5kaXNwYXRjaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtkaXNwYXRjaF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGRpc3BhdGNoLmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlYmluZGluZyBuYW1lc3BhY2UgcGFyYW0gZm9yIG1hcFhYWCBmdW5jdGlvbiBpbiBzcGVjaWFsIHNjb3BlZCwgYW5kIHJldHVybiB0aGVtIGJ5IHNpbXBsZSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSkgeyByZXR1cm4gKHtcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSlcbn0pOyB9O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgbWFwXG4gKiBub3JtYWxpemVNYXAoWzEsIDIsIDNdKSA9PiBbIHsga2V5OiAxLCB2YWw6IDEgfSwgeyBrZXk6IDIsIHZhbDogMiB9LCB7IGtleTogMywgdmFsOiAzIH0gXVxuICogbm9ybWFsaXplTWFwKHthOiAxLCBiOiAyLCBjOiAzfSkgPT4gWyB7IGtleTogJ2EnLCB2YWw6IDEgfSwgeyBrZXk6ICdiJywgdmFsOiAyIH0sIHsga2V5OiAnYycsIHZhbDogMyB9IF1cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBtYXBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTWFwIChtYXApIHtcbiAgaWYgKCFpc1ZhbGlkTWFwKG1hcCkpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXApXG4gICAgPyBtYXAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IGtleSB9KTsgfSlcbiAgICA6IE9iamVjdC5rZXlzKG1hcCkubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IG1hcFtrZXldIH0pOyB9KVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIHdoZXRoZXIgZ2l2ZW4gbWFwIGlzIHZhbGlkIG9yIG5vdFxuICogQHBhcmFtIHsqfSBtYXBcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRNYXAgKG1hcCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXApIHx8IGlzT2JqZWN0KG1hcClcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiBleHBlY3QgdHdvIHBhcmFtIGNvbnRhaW5zIG5hbWVzcGFjZSBhbmQgbWFwLiBpdCB3aWxsIG5vcm1hbGl6ZSB0aGUgbmFtZXNwYWNlIGFuZCB0aGVuIHRoZSBwYXJhbSdzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBuZXcgbmFtZXNwYWNlIGFuZCB0aGUgbWFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lc3BhY2UgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmFtZXNwYWNlLCBtYXApIHtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG1hcCA9IG5hbWVzcGFjZTtcbiAgICAgIG5hbWVzcGFjZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlLmNoYXJBdChuYW1lc3BhY2UubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgbmFtZXNwYWNlICs9ICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGZuKG5hbWVzcGFjZSwgbWFwKVxuICB9XG59XG5cbi8qKlxuICogU2VhcmNoIGEgc3BlY2lhbCBtb2R1bGUgZnJvbSBzdG9yZSBieSBuYW1lc3BhY2UuIGlmIG1vZHVsZSBub3QgZXhpc3QsIHByaW50IGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWxwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlQnlOYW1lc3BhY2UgKHN0b3JlLCBoZWxwZXIsIG5hbWVzcGFjZSkge1xuICB2YXIgbW9kdWxlID0gc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXTtcbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhbW9kdWxlKSB7XG4gICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gbW9kdWxlIG5hbWVzcGFjZSBub3QgZm91bmQgaW4gXCIgKyBoZWxwZXIgKyBcIigpOiBcIiArIG5hbWVzcGFjZSkpO1xuICB9XG4gIHJldHVybiBtb2R1bGVcbn1cblxuLy8gQ3JlZGl0czogYm9ycm93ZWQgY29kZSBmcm9tIGZjb21iL3JlZHV4LWxvZ2dlclxuXG5mdW5jdGlvbiBjcmVhdGVMb2dnZXIgKHJlZikge1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBjb2xsYXBzZWQgPSByZWYuY29sbGFwc2VkOyBpZiAoIGNvbGxhcHNlZCA9PT0gdm9pZCAwICkgY29sbGFwc2VkID0gdHJ1ZTtcbiAgdmFyIGZpbHRlciA9IHJlZi5maWx0ZXI7IGlmICggZmlsdGVyID09PSB2b2lkIDAgKSBmaWx0ZXIgPSBmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlQmVmb3JlLCBzdGF0ZUFmdGVyKSB7IHJldHVybiB0cnVlOyB9O1xuICB2YXIgdHJhbnNmb3JtZXIgPSByZWYudHJhbnNmb3JtZXI7IGlmICggdHJhbnNmb3JtZXIgPT09IHZvaWQgMCApIHRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZTsgfTtcbiAgdmFyIG11dGF0aW9uVHJhbnNmb3JtZXIgPSByZWYubXV0YXRpb25UcmFuc2Zvcm1lcjsgaWYgKCBtdXRhdGlvblRyYW5zZm9ybWVyID09PSB2b2lkIDAgKSBtdXRhdGlvblRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKG11dCkgeyByZXR1cm4gbXV0OyB9O1xuICB2YXIgYWN0aW9uRmlsdGVyID0gcmVmLmFjdGlvbkZpbHRlcjsgaWYgKCBhY3Rpb25GaWx0ZXIgPT09IHZvaWQgMCApIGFjdGlvbkZpbHRlciA9IGZ1bmN0aW9uIChhY3Rpb24sIHN0YXRlKSB7IHJldHVybiB0cnVlOyB9O1xuICB2YXIgYWN0aW9uVHJhbnNmb3JtZXIgPSByZWYuYWN0aW9uVHJhbnNmb3JtZXI7IGlmICggYWN0aW9uVHJhbnNmb3JtZXIgPT09IHZvaWQgMCApIGFjdGlvblRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGFjdCkgeyByZXR1cm4gYWN0OyB9O1xuICB2YXIgbG9nTXV0YXRpb25zID0gcmVmLmxvZ011dGF0aW9uczsgaWYgKCBsb2dNdXRhdGlvbnMgPT09IHZvaWQgMCApIGxvZ011dGF0aW9ucyA9IHRydWU7XG4gIHZhciBsb2dBY3Rpb25zID0gcmVmLmxvZ0FjdGlvbnM7IGlmICggbG9nQWN0aW9ucyA9PT0gdm9pZCAwICkgbG9nQWN0aW9ucyA9IHRydWU7XG4gIHZhciBsb2dnZXIgPSByZWYubG9nZ2VyOyBpZiAoIGxvZ2dlciA9PT0gdm9pZCAwICkgbG9nZ2VyID0gY29uc29sZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgdmFyIHByZXZTdGF0ZSA9IGRlZXBDb3B5KHN0b3JlLnN0YXRlKTtcblxuICAgIGlmICh0eXBlb2YgbG9nZ2VyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGxvZ011dGF0aW9ucykge1xuICAgICAgc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uIChtdXRhdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgdmFyIG5leHRTdGF0ZSA9IGRlZXBDb3B5KHN0YXRlKTtcblxuICAgICAgICBpZiAoZmlsdGVyKG11dGF0aW9uLCBwcmV2U3RhdGUsIG5leHRTdGF0ZSkpIHtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVkVGltZSA9IGdldEZvcm1hdHRlZFRpbWUoKTtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVkTXV0YXRpb24gPSBtdXRhdGlvblRyYW5zZm9ybWVyKG11dGF0aW9uKTtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwibXV0YXRpb24gXCIgKyAobXV0YXRpb24udHlwZSkgKyBmb3JtYXR0ZWRUaW1lO1xuXG4gICAgICAgICAgc3RhcnRNZXNzYWdlKGxvZ2dlciwgbWVzc2FnZSwgY29sbGFwc2VkKTtcbiAgICAgICAgICBsb2dnZXIubG9nKCclYyBwcmV2IHN0YXRlJywgJ2NvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZCcsIHRyYW5zZm9ybWVyKHByZXZTdGF0ZSkpO1xuICAgICAgICAgIGxvZ2dlci5sb2coJyVjIG11dGF0aW9uJywgJ2NvbG9yOiAjMDNBOUY0OyBmb250LXdlaWdodDogYm9sZCcsIGZvcm1hdHRlZE11dGF0aW9uKTtcbiAgICAgICAgICBsb2dnZXIubG9nKCclYyBuZXh0IHN0YXRlJywgJ2NvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZCcsIHRyYW5zZm9ybWVyKG5leHRTdGF0ZSkpO1xuICAgICAgICAgIGVuZE1lc3NhZ2UobG9nZ2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZTdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChsb2dBY3Rpb25zKSB7XG4gICAgICBzdG9yZS5zdWJzY3JpYmVBY3Rpb24oZnVuY3Rpb24gKGFjdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGFjdGlvbkZpbHRlcihhY3Rpb24sIHN0YXRlKSkge1xuICAgICAgICAgIHZhciBmb3JtYXR0ZWRUaW1lID0gZ2V0Rm9ybWF0dGVkVGltZSgpO1xuICAgICAgICAgIHZhciBmb3JtYXR0ZWRBY3Rpb24gPSBhY3Rpb25UcmFuc2Zvcm1lcihhY3Rpb24pO1xuICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJhY3Rpb24gXCIgKyAoYWN0aW9uLnR5cGUpICsgZm9ybWF0dGVkVGltZTtcblxuICAgICAgICAgIHN0YXJ0TWVzc2FnZShsb2dnZXIsIG1lc3NhZ2UsIGNvbGxhcHNlZCk7XG4gICAgICAgICAgbG9nZ2VyLmxvZygnJWMgYWN0aW9uJywgJ2NvbG9yOiAjMDNBOUY0OyBmb250LXdlaWdodDogYm9sZCcsIGZvcm1hdHRlZEFjdGlvbik7XG4gICAgICAgICAgZW5kTWVzc2FnZShsb2dnZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRNZXNzYWdlIChsb2dnZXIsIG1lc3NhZ2UsIGNvbGxhcHNlZCkge1xuICB2YXIgc3RhcnRNZXNzYWdlID0gY29sbGFwc2VkXG4gICAgPyBsb2dnZXIuZ3JvdXBDb2xsYXBzZWRcbiAgICA6IGxvZ2dlci5ncm91cDtcblxuICAvLyByZW5kZXJcbiAgdHJ5IHtcbiAgICBzdGFydE1lc3NhZ2UuY2FsbChsb2dnZXIsIG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmxvZyhtZXNzYWdlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRNZXNzYWdlIChsb2dnZXIpIHtcbiAgdHJ5IHtcbiAgICBsb2dnZXIuZ3JvdXBFbmQoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5sb2coJ+KAlOKAlCBsb2cgZW5kIOKAlOKAlCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEZvcm1hdHRlZFRpbWUgKCkge1xuICB2YXIgdGltZSA9IG5ldyBEYXRlKCk7XG4gIHJldHVybiAoXCIgQCBcIiArIChwYWQodGltZS5nZXRIb3VycygpLCAyKSkgKyBcIjpcIiArIChwYWQodGltZS5nZXRNaW51dGVzKCksIDIpKSArIFwiOlwiICsgKHBhZCh0aW1lLmdldFNlY29uZHMoKSwgMikpICsgXCIuXCIgKyAocGFkKHRpbWUuZ2V0TWlsbGlzZWNvbmRzKCksIDMpKSlcbn1cblxuZnVuY3Rpb24gcmVwZWF0IChzdHIsIHRpbWVzKSB7XG4gIHJldHVybiAobmV3IEFycmF5KHRpbWVzICsgMSkpLmpvaW4oc3RyKVxufVxuXG5mdW5jdGlvbiBwYWQgKG51bSwgbWF4TGVuZ3RoKSB7XG4gIHJldHVybiByZXBlYXQoJzAnLCBtYXhMZW5ndGggLSBudW0udG9TdHJpbmcoKS5sZW5ndGgpICsgbnVtXG59XG5cbnZhciBpbmRleCA9IHtcbiAgU3RvcmU6IFN0b3JlLFxuICBpbnN0YWxsOiBpbnN0YWxsLFxuICB2ZXJzaW9uOiAnMy42LjInLFxuICBtYXBTdGF0ZTogbWFwU3RhdGUsXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLFxuICBtYXBHZXR0ZXJzOiBtYXBHZXR0ZXJzLFxuICBtYXBBY3Rpb25zOiBtYXBBY3Rpb25zLFxuICBjcmVhdGVOYW1lc3BhY2VkSGVscGVyczogY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMsXG4gIGNyZWF0ZUxvZ2dlcjogY3JlYXRlTG9nZ2VyXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbmV4cG9ydCB7IFN0b3JlLCBjcmVhdGVMb2dnZXIsIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzLCBpbnN0YWxsLCBtYXBBY3Rpb25zLCBtYXBHZXR0ZXJzLCBtYXBNdXRhdGlvbnMsIG1hcFN0YXRlIH07XG4iLCJjb25zdCBJTklUSUFMX1NUQVRFID0ge1xuICAgIGNvbG9yMDogJyMzMjg4YmQnLFxuICAgIGNvbG9yMTogJyM5OWQ1OTQnLFxuICAgIGNvbG9yMjogJyNmZWUwOGInLFxuICAgIGNvbG9yMzogJyNkNTNlNGYnLFxufTtcblxuY29uc3Qgc3RhdGUgPSAoKSA9PiAoe1xuICAgIC4uLklOSVRJQUxfU1RBVEUsXG59KTtcblxuY29uc3QgbXV0YXRpb25zID0ge1xuICAgIHVwZGF0ZUNvbG9yOiAoc3RhdGUsIHtzdGVwLCBjb2xvcn0pID0+IHN0YXRlW3N0ZXBdID0gY29sb3IsXG4gICAgcmVzZXRDb2xvcnM6IHN0YXRlID0+IE9iamVjdC5rZXlzKElOSVRJQUxfU1RBVEUpLmZvckVhY2goa2V5ID0+IHN0YXRlW2tleV0gPSBJTklUSUFMX1NUQVRFW2tleV0pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWVzcGFjZWQ6IHRydWUsXG4gICAgc3RhdGUsXG4gICAgbXV0YXRpb25zLFxufVxuIiwiY29uc3QgRElNRU5TSU9OUyA9IHtcbiAgICBtaW46IDI1MCxcbiAgICBtYXg6IDgwMCxcbiAgICBkZWZhdWx0OiAzMjUsXG59O1xuXG5jb25zdCBSRVNPTFVUSU9OID0ge1xuICAgIG1pbjogNSxcbiAgICBtYXg6IDE1LFxuICAgIGRlZmF1bHQ6IDUsXG59XG5cbmNvbnN0IElOSVRJQUxfU1RBVEUgPSB7XG4gICAgd2lkdGg6IERJTUVOU0lPTlMuZGVmYXVsdCxcbiAgICBoZWlnaHQ6IERJTUVOU0lPTlMuZGVmYXVsdCxcbiAgICByZXNvbHV0aW9uOiBSRVNPTFVUSU9OLmRlZmF1bHQsXG59O1xuXG5jb25zdCBzdGF0ZSA9ICgpID0+ICh7XG4gICAgLi4uSU5JVElBTF9TVEFURVxufSk7XG5cbmNvbnN0IG11dGF0aW9ucyA9IHtcbiAgICBzZXRXaWR0aDogKHN0YXRlLCB3aWR0aCkgPT4gc3RhdGUud2lkdGggPSBwYXJzZUludCh3aWR0aCwgMTApLFxuICAgIHNldEhlaWdodDogKHN0YXRlLCBoZWlnaHQpID0+IHN0YXRlLmhlaWdodCA9IHBhcnNlSW50KGhlaWdodCwgMTApLFxuICAgIHNldFJlc29sdXRpb246IChzdGF0ZSwgcmVzb2x1dGlvbikgPT4gc3RhdGUucmVzb2x1dGlvbiA9IHBhcnNlSW50KHJlc29sdXRpb24pLFxuICAgIHJlc2V0RGltZW5zaW9uczogc3RhdGUgPT4gT2JqZWN0LmtleXMoSU5JVElBTF9TVEFURSkuZm9yRWFjaChrZXkgPT4gc3RhdGVba2V5XSA9IElOSVRJQUxfU1RBVEVba2V5XSksXG59O1xuXG5jb25zdCBnZXR0ZXJzID0ge1xuICAgIGNvbHM6IHN0YXRlID0+IE1hdGguZmxvb3Ioc3RhdGUud2lkdGggLyBzdGF0ZS5yZXNvbHV0aW9uKSxcbiAgICByb3dzOiBzdGF0ZSA9PiBNYXRoLmZsb29yKHN0YXRlLmhlaWdodCAvIHN0YXRlLnJlc29sdXRpb24pLFxuICAgIG1pbldpZHRoOiAoc3RhdGUpID0+IHtcbiAgICAgICAgbGV0IG1pbldpZHRoID0gRElNRU5TSU9OUy5taW47XG4gICAgICAgIGxldCBtaW5Db2xzID0gTWF0aC5mbG9vcihtaW5XaWR0aCAvIHN0YXRlLnJlc29sdXRpb24pO1xuICAgICAgICBcbiAgICAgICAgaWYgKG1pbkNvbHMgJSAyID09PSAwKSB7XG4gICAgICAgICAgICBtaW5XaWR0aCArPSBzdGF0ZS5yZXNvbHV0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1pbldpZHRoO1xuICAgIH0sXG4gICAgbWF4V2lkdGg6IChzdGF0ZSkgPT4ge1xuICAgICAgICBsZXQgbWF4V2lkdGggPSBESU1FTlNJT05TLm1heDtcbiAgICAgICAgbGV0IG1heENvbHMgPSBNYXRoLmZsb29yKG1heFdpZHRoIC8gc3RhdGUucmVzb2x1dGlvbik7XG4gICAgICAgIFxuICAgICAgICBpZiAobWF4Q29scyAlIDIgPT09IDApIHtcbiAgICAgICAgICAgIG1heFdpZHRoICs9IHN0YXRlLnJlc29sdXRpb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWF4V2lkdGg7XG4gICAgfSxcbiAgICBtaW5IZWlnaHQ6IChzdGF0ZSkgPT4ge1xuICAgICAgICBsZXQgbWluSGVpZ2h0ID0gRElNRU5TSU9OUy5taW47XG4gICAgICAgIGxldCBtaW5Db2xzID0gTWF0aC5mbG9vcihtaW5IZWlnaHQgLyBzdGF0ZS5yZXNvbHV0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChtaW5Db2xzICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgbWluSGVpZ2h0ICs9IHN0YXRlLnJlc29sdXRpb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWluSGVpZ2h0O1xuICAgIH0sXG4gICAgbWF4SGVpZ2h0OiAoc3RhdGUpID0+IHtcbiAgICAgICAgbGV0IG1heEhlaWdodCA9IERJTUVOU0lPTlMubWF4O1xuICAgICAgICBsZXQgbWF4Q29scyA9IE1hdGguZmxvb3IobWF4SGVpZ2h0IC8gc3RhdGUucmVzb2x1dGlvbik7XG4gICAgICAgIFxuICAgICAgICBpZiAobWF4Q29scyAlIDIgPT09IDApIHtcbiAgICAgICAgICAgIG1heEhlaWdodCArPSBzdGF0ZS5yZXNvbHV0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1heEhlaWdodDtcbiAgICB9LFxuICAgIG1pblJlc29sdXRpb246IChzdGF0ZSkgPT4gUkVTT0xVVElPTi5taW4sXG4gICAgbWF4UmVzb2x1dGlvbjogKHN0YXRlKSA9PiBSRVNPTFVUSU9OLm1heCxcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWVzcGFjZWQ6IHRydWUsXG4gICAgc3RhdGUsXG4gICAgbXV0YXRpb25zLFxuICAgIGdldHRlcnMsXG59XG4iLCJjb25zdCBJTklUSUFMX1NUQVRFID0ge1xuICAgIGJhc2VTYW5kOiAwLFxuICAgIHN0YXJ0aW5nU2FuZDogMTAwMCxcbn07XG5cbmNvbnN0IHN0YXRlID0gKCkgPT4gKHtcbiAgICAuLi5JTklUSUFMX1NUQVRFLFxuICAgIHNhbmQ6IFtdLFxufSk7XG5cbmNvbnN0IG11dGF0aW9ucyA9IHtcbiAgICBzZXRCYXNlU2FuZDogKHN0YXRlLCBhbW91bnQpID0+IHN0YXRlLmJhc2VTYW5kID0gcGFyc2VJbnQoYW1vdW50LCAxMCksXG4gICAgc2V0U3RhcnRpbmdTYW5kOiAoc3RhdGUsIGFtb3VudCkgPT4gc3RhdGUuc3RhcnRpbmdTYW5kID0gcGFyc2VJbnQoYW1vdW50LCAxMCksXG4gICAgcmVzZXRTYW5kOiBzdGF0ZSA9PiBPYmplY3Qua2V5cyhJTklUSUFMX1NUQVRFKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIHN0YXRlW2tleV0gPSBJTklUSUFMX1NUQVRFW2tleV07XG4gICAgfSksXG4gICAgc2V0U2FuZDogKHN0YXRlLCBzYW5kKSA9PiBzdGF0ZS5zYW5kID0gc2FuZCxcbiAgICB1cGRhdGVTYW5kOiAoc3RhdGUsIHtpZHgsIGFtb3VudH0pID0+IHN0YXRlLnNhbmQuc3BsaWNlKGlkeCwgMSwgYW1vdW50KSxcbn07XG5cbmNvbnN0IGdldHRlcnMgPSB7XG4gICAgc2FuZFRvdGFsOiBzdGF0ZSA9PiBzdGF0ZS5zYW5kLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArIHZhbCwgMCksXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lc3BhY2VkOiB0cnVlLFxuICAgIHN0YXRlLFxuICAgIG11dGF0aW9ucyxcbiAgICBnZXR0ZXJzLFxufVxuIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFZ1ZXggZnJvbSAndnVleCc7XG5pbXBvcnQgaGVhdG1hcCBmcm9tICcuL2hlYXRtYXAnO1xuaW1wb3J0IGNhbnZhcyBmcm9tICcuL2NhbnZhcyc7XG5pbXBvcnQgc2FuZCBmcm9tICcuL3NhbmQnO1xuXG5WdWUudXNlKFZ1ZXgpO1xuXG5jb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHtcbiAgICBzdHJpY3Q6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG4gICAgbW9kdWxlczoge1xuICAgICAgICBjYW52YXMsXG4gICAgICAgIGhlYXRtYXAsXG4gICAgICAgIHNhbmRcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3RvcmU7IiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIChvcHRpb25zLmZ1bmN0aW9uYWwgPyB0aGlzLnBhcmVudCA6IHRoaXMpLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3RcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQnV0dG9uVG9nZ2xlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03OWZjOTRkMCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9CdXR0b25Ub2dnbGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9CdXR0b25Ub2dnbGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImlubGluZS1jb250YWluZXJcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIEBjbGljay5wcmV2ZW50PVwidG9nZ2xlXCI+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvblwiXG4gICAgICAgICAgICAgICAgdi1pZj1cImljb25cIlxuICAgICAgICAgICAgICAgIHYtaHRtbD1cImljb25cIlxuICAgICAgICAgICAgPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dFwiPlxuICAgICAgICAgICAgICAgIHt7dGV4dH19XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICBzdGFydEFjdGl2ZToge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBhY3RpdmVJY29uOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9LFxuICAgICAgICBpbmFjdGl2ZUljb246IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2ZVRleHQ6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGluYWN0aXZlVGV4dDoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJydcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5zdGFydEFjdGl2ZSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGljb24oKXsgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmUgPyB0aGlzLmFjdGl2ZUljb24gOiB0aGlzLmluYWN0aXZlSWNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlID8gdGhpcy5hY3RpdmVUZXh0IDogdGhpcy5pbmFjdGl2ZVRleHQ7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgdG9nZ2xlKCkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSAhdGhpcy5hY3RpdmU7XG5cbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3RvZ2dsZScsIHRoaXMuYWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbjwvc2NyaXB0PlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaW5saW5lLWNvbnRhaW5lclwifSxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiYnRuXCIsb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO3JldHVybiBfdm0udG9nZ2xlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyl9fX0sWyhfdm0uaWNvbik/X2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImljb25cIixkb21Qcm9wczp7XCJpbm5lckhUTUxcIjpfdm0uX3MoX3ZtLmljb24pfX0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInRleHRcIn0sW192bS5fdihcIlxcbiAgICAgICAgICAgIFwiK192bS5fcyhfdm0udGV4dCkrXCJcXG4gICAgICAgIFwiKV0pXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9DYW52YXNSb290LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD05NTEzYTdjNiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9DYW52YXNSb290LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQ2FudmFzUm9vdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2PlxuICAgICAgICA8Y2FudmFzXG4gICAgICAgICAgICBjbGFzcz1cInZ1ZS1jYW52YXNcIlxuICAgICAgICAgICAgcmVmPVwidnVlLWNhbnZhc1wiXG4gICAgICAgICAgICA6d2lkdGg9XCJ3aWR0aFwiXG4gICAgICAgICAgICA6aGVpZ2h0PVwiaGVpZ2h0XCJcbiAgICAgICAgICAgIEBtb3VzZWRvd249XCIkZW1pdCgnbW91c2Vkb3duJywgJGV2ZW50KVwiXG4gICAgICAgICAgICBAbW91c2V1cD1cIiRlbWl0KCdtb3VzZXVwJywgJGV2ZW50KVwiXG4gICAgICAgICAgICBAbW91c2VsZWF2ZT1cIiRlbWl0KCdtb3VzZWxlYXZlJywgJGV2ZW50KVwiXG4gICAgICAgICAgICBAbW91c2Vtb3ZlPVwiJGVtaXQoJ21vdXNlbW92ZScsICRldmVudClcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPHNsb3QgLz5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gICAgZXhwb3J0IGRlZmF1bHQge1xuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgd2lkdGg6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlaWdodDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwcm92aWRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpcy5wcm92aWRlclxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3YXRjaDp7XG4gICAgICAgICAgICB3aWR0aCh2YWx1ZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm92aWRlci53aWR0aCA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlaWdodCh2YWx1ZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm92aWRlci5oZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW91bnRlZCgpIHtcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXIuY29udGV4dCA9IHRoaXMuJHJlZnNbJ3Z1ZS1jYW52YXMnXS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICB9XG4gICAgfVxuPC9zY3JpcHQ+XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2JyxbX2MoJ2NhbnZhcycse3JlZjpcInZ1ZS1jYW52YXNcIixzdGF0aWNDbGFzczpcInZ1ZS1jYW52YXNcIixhdHRyczp7XCJ3aWR0aFwiOl92bS53aWR0aCxcImhlaWdodFwiOl92bS5oZWlnaHR9LG9uOntcIm1vdXNlZG93blwiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS4kZW1pdCgnbW91c2Vkb3duJywgJGV2ZW50KX0sXCJtb3VzZXVwXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLiRlbWl0KCdtb3VzZXVwJywgJGV2ZW50KX0sXCJtb3VzZWxlYXZlXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLiRlbWl0KCdtb3VzZWxlYXZlJywgJGV2ZW50KX0sXCJtb3VzZW1vdmVcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJGVtaXQoJ21vdXNlbW92ZScsICRldmVudCl9fX0pLF92bS5fdihcIiBcIiksX3ZtLl90KFwiZGVmYXVsdFwiKV0sMil9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCBjb25zdCBjb29yZFRvUGl4ZWwgPSAoeCwgeSwgd2lkdGgpID0+IHggKyAoeSAqIHdpZHRoKTtcblxuZXhwb3J0IGNvbnN0IHBpeGVsVG9Db29yZCA9IChwaXhlbCwgd2lkdGgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwaXhlbCAlIHdpZHRoLFxuICAgICAgICB5OiBNYXRoLmZsb29yKHBpeGVsIC8gd2lkdGgpXG4gICAgfVxufTtcbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgcGl4ZWxUb0Nvb3JkLCBjb29yZFRvUGl4ZWwgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnO1xuXG4gICAgZXhwb3J0IGRlZmF1bHQge1xuICAgICAgICBpbmplY3Q6IFsncHJvdmlkZXInXSxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGdyaWQ6e1xuICAgICAgICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2lkdGg6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEwMCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6ICh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkVmFsID0gcGFyc2VJbnQodmFsLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VkVmFsKSAmJiBwYXJzZWRWYWwgPiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWlnaHQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEwMCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6ICh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkVmFsID0gcGFyc2VJbnQodmFsLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VkVmFsKSAmJiBwYXJzZWRWYWwgPiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNvbHV0aW9uOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEsXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiAodmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFZhbCA9IHBhcnNlSW50KHZhbCwgMTApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWlzTmFOKHZhbCkgJiYgdmFsID4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JTdGVwMDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnIzMyODhiZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvclN0ZXAxOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICcjOTlkNTk0J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yU3RlcDI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJyNmZWUwOGInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JTdGVwMzoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnI2ZjOGQ1OSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXB1dGVkOiB7XG4gICAgICAgICAgICByb3dzKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5oZWlnaHQgLyB0aGlzLnJlc29sdXRpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbHMoKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLndpZHRoIC8gdGhpcy5yZXNvbHV0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgICAgY2xlYXIoKXtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLnByb3ZpZGVyLmNvbnRleHQ7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7IHdpZHRoLGhlaWdodCB9ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdhdGNoOiB7XG4gICAgICAgICAgICB3aWR0aCgpe1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWlnaHQoKXtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzb2x1dGlvbigpe1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3ZpZGVyLmNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMucHJvdmlkZXIuY29udGV4dDtcblxuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgICAgICBjb2xzLCBcbiAgICAgICAgICAgICAgICByb3dzLCBcbiAgICAgICAgICAgICAgICByZXNvbHV0aW9uLCBcbiAgICAgICAgICAgICAgICBncmlkLFxuICAgICAgICAgICAgICAgIGNvbG9yU3RlcDAsXG4gICAgICAgICAgICAgICAgY29sb3JTdGVwMSxcbiAgICAgICAgICAgICAgICBjb2xvclN0ZXAyLFxuICAgICAgICAgICAgICAgIGNvbG9yU3RlcDMsXG4gICAgICAgICAgICB9ID0gdGhpcztcblxuICAgICAgICAgICAgZm9yIChsZXQgcGl4ZWwgaW4gZ3JpZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7eCwgeX0gPSBwaXhlbFRvQ29vcmQocGl4ZWwsIGNvbHMpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBncmFpbnMgPSBncmlkW3BpeGVsXTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSBjb2xvclN0ZXAzO1xuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZ3JhaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBjb2xvclN0ZXAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gY29sb3JTdGVwMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IGNvbG9yU3RlcDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiBcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHN0eWxlO1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoeCAqIHJlc29sdXRpb24sIHkgKiByZXNvbHV0aW9uLCByZXNvbHV0aW9uLCByZXNvbHV0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gYHJnYmEoMCwgMCwgMCwgMC4xKWA7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KHggKiByZXNvbHV0aW9uLCB5ICogcmVzb2x1dGlvbiwgcmVzb2x1dGlvbiwgcmVzb2x1dGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cbiIsInZhciByZW5kZXIsIHN0YXRpY1JlbmRlckZuc1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9DYW52YXNHcmlkSGVhdE1hcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0NhbnZhc0dyaWRIZWF0TWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhbnZhc0dyaWRIZWF0TWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhbnZhc0dyaWRIZWF0TWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ29udHJvbEdyb3VwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yYzU5OTZkOCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Db250cm9sR3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Db250cm9sR3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCI8dGVtcGxhdGU+XG4gICAgPGZpZWxkc2V0IGNsYXNzPVwiY29udHJvbC1ncm91cFwiPlxuICAgICAgICA8bGVnZW5kPnt7bGVnZW5kfX08L2xlZ2VuZD5cbiAgICAgICAgPHNsb3QgLz5cbiAgICAgICAgPGRpdiB2LWlmPVwiY2FuUmVzZXRcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiBAY2xpY2sucHJldmVudD1cIiRlbWl0KCdyZXNldCcsICRldmVudClcIj5cbiAgICAgICAgICAgICAgICBSZXNldFxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZmllbGRzZXQ+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiB7XG4gICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGNhblJlc2V0OiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgfVxuICAgIH1cbn1cbjwvc2NyaXB0PlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2ZpZWxkc2V0Jyx7c3RhdGljQ2xhc3M6XCJjb250cm9sLWdyb3VwXCJ9LFtfYygnbGVnZW5kJyxbX3ZtLl92KF92bS5fcyhfdm0ubGVnZW5kKSldKSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImRlZmF1bHRcIiksX3ZtLl92KFwiIFwiKSwoX3ZtLmNhblJlc2V0KT9fYygnZGl2JyxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiYnRuXCIsb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO3JldHVybiBfdm0uJGVtaXQoJ3Jlc2V0JywgJGV2ZW50KX19fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgUmVzZXRcXG4gICAgICAgIFwiKV0pXSk6X3ZtLl9lKCldLDIpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0NvbnRyb2xHcm91cFNhbmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNmMzNjMjFjJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0NvbnRyb2xHcm91cFNhbmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Db250cm9sR3JvdXBTYW5kLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiPHRlbXBsYXRlPlxuICAgIDxDb250cm9sR3JvdXAgbGVnZW5kPVwiU2FuZFwiIEByZXNldD1cInJlc2V0U2FuZFwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdj5Ub3RhbCBTYW5kOiB7eyBzYW5kVG90YWwgfX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIEBjbGljay5wcmV2ZW50PVwiJGVtaXQoJ2NsZWFyJywgJGV2ZW50KVwiPlxuICAgICAgICAgICAgICAgICAgICBDbGVhclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbD5CYXNlIFNhbmQgKHt7IGJhc2VTYW5kIH19KTwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIDp2YWx1ZT1cImJhc2VTYW5kXCIgQGlucHV0PVwic2V0QmFzZVNhbmQoJGV2ZW50LnRhcmdldC52YWx1ZSlcIiBtaW49XCIwXCIgbWF4PVwiNFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+U3RhcnRpbmcgU2FuZCAoe3sgc3RhcnRpbmdTYW5kIH19KTwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIDp2YWx1ZT1cInN0YXJ0aW5nU2FuZFwiIEBpbnB1dD1cInNldFN0YXJ0aW5nU2FuZCgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiIG1pbj1cIjEwMFwiIG1heD1cIjEwMDAwMFwiIHN0ZXA9XCIxMDBcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvQ29udHJvbEdyb3VwPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb250cm9sR3JvdXAgZnJvbSAnLi9Db250cm9sR3JvdXAudnVlJztcbmltcG9ydCB7bWFwU3RhdGUsIG1hcEdldHRlcnMsIG1hcE11dGF0aW9uc30gZnJvbSAndnVleCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIENvbnRyb2xHcm91cCxcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIC4uLm1hcFN0YXRlKFwic2FuZFwiLCBbXCJiYXNlU2FuZFwiLCBcInN0YXJ0aW5nU2FuZFwiLCBcInNhbmRcIl0pLFxuICAgICAgICAuLi5tYXBHZXR0ZXJzKFwic2FuZFwiLCBbXCJzYW5kVG90YWxcIl0pLFxuICAgIH0sXG4gICAgbWV0aG9kczogbWFwTXV0YXRpb25zKFwic2FuZFwiLCBbXG4gICAgICBcInNldEJhc2VTYW5kXCIsXG4gICAgICBcInNldFN0YXJ0aW5nU2FuZFwiLFxuICAgICAgXCJyZXNldFNhbmRcIixcbiAgICAgIFwic2V0U2FuZFwiLFxuICAgICAgXCJ1cGRhdGVTYW5kXCJcbiAgICBdKSxcbn1cbjwvc2NyaXB0PlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ0NvbnRyb2xHcm91cCcse2F0dHJzOntcImxlZ2VuZFwiOlwiU2FuZFwifSxvbjp7XCJyZXNldFwiOl92bS5yZXNldFNhbmR9fSxbX2MoJ2RpdicsW19jKCdkaXYnLFtfdm0uX3YoXCJUb3RhbCBTYW5kOiBcIitfdm0uX3MoX3ZtLnNhbmRUb3RhbCkpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiYnRuXCIsb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO3JldHVybiBfdm0uJGVtaXQoJ2NsZWFyJywgJGV2ZW50KX19fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgIENsZWFyXFxuICAgICAgICAgICAgXCIpXSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2RpdicsW19jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCJCYXNlIFNhbmQgKFwiK192bS5fcyhfdm0uYmFzZVNhbmQpK1wiKVwiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2lucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOlwiMFwiLFwibWF4XCI6XCI0XCIsXCJzdGVwXCI6XCIxXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6X3ZtLmJhc2VTYW5kfSxvbjp7XCJpbnB1dFwiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5zZXRCYXNlU2FuZCgkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2RpdicsW19jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCJTdGFydGluZyBTYW5kIChcIitfdm0uX3MoX3ZtLnN0YXJ0aW5nU2FuZCkrXCIpXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnaW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJyYW5nZVwiLFwibWluXCI6XCIxMDBcIixcIm1heFwiOlwiMTAwMDAwXCIsXCJzdGVwXCI6XCIxMDBcIn0sZG9tUHJvcHM6e1widmFsdWVcIjpfdm0uc3RhcnRpbmdTYW5kfSxvbjp7XCJpbnB1dFwiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5zZXRTdGFydGluZ1NhbmQoJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pXSldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnQ29udHJvbEdyb3VwJyx7YXR0cnM6e1wibGVnZW5kXCI6XCJIZWF0bWFwXCJ9LG9uOntcInJlc2V0XCI6X3ZtLnJlc2V0Q29sb3JzfX0sW19jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCIwIEdyYWluc1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ0J1dHRvbkNvbG9yUGlja2VyJyx7a2V5Oihfdm0uY29sb3IwICsgXCItY29sb3IwXCIpLGF0dHJzOntcInZhbHVlXCI6X3ZtLmNvbG9yMCxcInBvcHVwVGl0bGVcIjpcIkNvbG9yIC0gMCBHcmFpbnNcIn0sb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnVwZGF0ZUNvbG9yKHtzdGVwOidjb2xvcjAnLCBjb2xvcjogJGV2ZW50fSl9fX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCIxIEdyYWluc1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ0J1dHRvbkNvbG9yUGlja2VyJyx7a2V5Oihfdm0uY29sb3IxICsgXCItY29sb3IxXCIpLGF0dHJzOntcInZhbHVlXCI6X3ZtLmNvbG9yMSxcInBvcHVwVGl0bGVcIjpcIkNvbG9yIC0gMSBHcmFpbnNcIn0sb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnVwZGF0ZUNvbG9yKHtzdGVwOidjb2xvcjEnLCBjb2xvcjogJGV2ZW50fSl9fX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCIyIEdyYWluc1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ0J1dHRvbkNvbG9yUGlja2VyJyx7a2V5Oihfdm0uY29sb3IyICsgXCItY29sb3IyXCIpLGF0dHJzOntcInZhbHVlXCI6X3ZtLmNvbG9yMixcInBvcHVwVGl0bGVcIjpcIkNvbG9yIC0gMiBHcmFpbnNcIn0sb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnVwZGF0ZUNvbG9yKHtzdGVwOidjb2xvcjInLCBjb2xvcjogJGV2ZW50fSl9fX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCIzIEdyYWluc1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ0J1dHRvbkNvbG9yUGlja2VyJyx7a2V5Oihfdm0uY29sb3IzICsgXCItY29sb3IzXCIpLGF0dHJzOntcInZhbHVlXCI6X3ZtLmNvbG9yMyxcInBvcHVwVGl0bGVcIjpcIkNvbG9yIC0gMyBHcmFpbnNcIn0sb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnVwZGF0ZUNvbG9yKHtzdGVwOidjb2xvcjMnLCBjb2xvcjogJGV2ZW50fSl9fX0pXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImlubGluZS1jb250YWluZXJcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tY29sb3ItcGlja2VyXCIgQGNsaWNrPVwib3BlbiA9IHRydWVcIiByZWY9XCJidXR0b25cIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3dhdGNoXCIgOnN0eWxlPVwie2JhY2tncm91bmRDb2xvcjogdmFsdWV9XCIvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0XCI+e3t2YWx1ZX19PC9zcGFuPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGRpdiB2LXNob3c9XCJvcGVuXCIgY2xhc3M9XCJwb3B1cFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvcHVwLWlubmVyXCIgOnN0eWxlPVwie3RvcDogYCR7eX1weGAsIGxlZnQ6YCR7eH1weGB9XCI+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPFBob3Rvc2hvcCBcbiAgICAgICAgICAgICAgICAgICAgOnZhbHVlPVwiY29sb3JcIlxuICAgICAgICAgICAgICAgICAgICBAY2FuY2VsPVwiY2FuY2VsXCJcbiAgICAgICAgICAgICAgICAgICAgQGlucHV0PVwiY29sb3IgPSAkZXZlbnQuaGV4XCJcbiAgICAgICAgICAgICAgICAgICAgQG9rPVwiY2hvb3NlXCJcbiAgICAgICAgICAgICAgICAgICAgOmhlYWQ9XCJwb3B1cFRpdGxlXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IFBob3Rvc2hvcCB9IGZyb20gJ3Z1ZS1jb2xvcic7XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcHJvcHM6IHtcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBwb3B1cFRpdGxlOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICAgICAgY29sb3I6IHRoaXMudmFsdWUsXG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBQaG90b3Nob3AsXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGNhbmNlbCgpIHtcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGNob29zZSgpIHtcbiAgICAgICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5jb2xvcik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAgIG9wZW4odmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMueCA9IHRoaXMuJHJlZnMuYnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICAgICAgICAgICAgdGhpcy55ID0gdGhpcy4kcmVmcy5idXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gdGhpcy4kcmVmcy5idXR0b24uY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgLmJ0bi1jb2xvci1waWNrZXIgLnRleHR7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBtaW4td2lkdGg6IDYwcHg7XG4gIH1cblxuICAuYnRuLWNvbG9yLXBpY2tlciAuc3dhdGNoe1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgd2lkdGg6IDEycHg7XG4gICAgICBoZWlnaHQ6IDEycHg7XG4gICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCBncmV5O1xuICB9XG5cbiAgLnBvcHVwe1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB6LWluZGV4OiAxMDA7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC40KTtcbiAgfVxuXG4gIC5wb3B1cC1pbm5lcntcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHotaW5kZXg6IDEwMDtcbiAgfVxuPC9zdHlsZT5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9CdXR0b25Db2xvclBpY2tlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9CdXR0b25Db2xvclBpY2tlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01MzFhMDI2YSZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9CdXR0b25Db2xvclBpY2tlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9CdXR0b25Db2xvclBpY2tlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01MzFhMDI2YSZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNTMxYTAyNmFcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJpbmxpbmUtY29udGFpbmVyXCJ9LFtfYygnYnV0dG9uJyx7cmVmOlwiYnV0dG9uXCIsc3RhdGljQ2xhc3M6XCJidG4gYnRuLWNvbG9yLXBpY2tlclwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub3BlbiA9IHRydWV9fX0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJzd2F0Y2hcIixzdHlsZTooe2JhY2tncm91bmRDb2xvcjogX3ZtLnZhbHVlfSl9KSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS52YWx1ZSkpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS5vcGVuKSxleHByZXNzaW9uOlwib3BlblwifV0sc3RhdGljQ2xhc3M6XCJwb3B1cFwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicG9wdXAtaW5uZXJcIixzdHlsZTooe3RvcDogKF92bS55ICsgXCJweFwiKSwgbGVmdDooX3ZtLnggKyBcInB4XCIpfSl9LFtfYygnUGhvdG9zaG9wJyx7YXR0cnM6e1widmFsdWVcIjpfdm0uY29sb3IsXCJoZWFkXCI6X3ZtLnBvcHVwVGl0bGV9LG9uOntcImNhbmNlbFwiOl92bS5jYW5jZWwsXCJpbnB1dFwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmNvbG9yID0gJGV2ZW50LmhleH0sXCJva1wiOl92bS5jaG9vc2V9fSldLDEpXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9Db250cm9sR3JvdXBIZWF0bWFwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yODUyNjQxMyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Db250cm9sR3JvdXBIZWF0bWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQ29udHJvbEdyb3VwSGVhdG1hcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIjx0ZW1wbGF0ZT5cbiAgICA8Q29udHJvbEdyb3VwIGxlZ2VuZD1cIkhlYXRtYXBcIiBAcmVzZXQ9XCJyZXNldENvbG9yc1wiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsPjAgR3JhaW5zPC9sYWJlbD5cbiAgICAgICAgICAgIDxCdXR0b25Db2xvclBpY2tlciBcbiAgICAgICAgICAgICAgICA6a2V5PVwiYCR7Y29sb3IwfS1jb2xvcjBgXCJcbiAgICAgICAgICAgICAgICA6dmFsdWU9XCJjb2xvcjBcIlxuICAgICAgICAgICAgICAgIHBvcHVwVGl0bGU9XCJDb2xvciAtIDAgR3JhaW5zXCJcbiAgICAgICAgICAgICAgICBAY2hhbmdlPVwidXBkYXRlQ29sb3Ioe3N0ZXA6J2NvbG9yMCcsIGNvbG9yOiAkZXZlbnR9KVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbD4xIEdyYWluczwvbGFiZWw+XG4gICAgICAgICAgICA8QnV0dG9uQ29sb3JQaWNrZXJcbiAgICAgICAgICAgICAgICA6a2V5PVwiYCR7Y29sb3IxfS1jb2xvcjFgXCJcbiAgICAgICAgICAgICAgICA6dmFsdWU9XCJjb2xvcjFcIlxuICAgICAgICAgICAgICAgIHBvcHVwVGl0bGU9XCJDb2xvciAtIDEgR3JhaW5zXCJcbiAgICAgICAgICAgICAgICBAY2hhbmdlPVwidXBkYXRlQ29sb3Ioe3N0ZXA6J2NvbG9yMScsIGNvbG9yOiAkZXZlbnR9KVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbD4yIEdyYWluczwvbGFiZWw+XG4gICAgICAgICAgICA8QnV0dG9uQ29sb3JQaWNrZXJcbiAgICAgICAgICAgICAgICA6a2V5PVwiYCR7Y29sb3IyfS1jb2xvcjJgXCJcbiAgICAgICAgICAgICAgICA6dmFsdWU9XCJjb2xvcjJcIlxuICAgICAgICAgICAgICAgIHBvcHVwVGl0bGU9XCJDb2xvciAtIDIgR3JhaW5zXCJcbiAgICAgICAgICAgICAgICBAY2hhbmdlPVwidXBkYXRlQ29sb3Ioe3N0ZXA6J2NvbG9yMicsIGNvbG9yOiAkZXZlbnR9KVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbD4zIEdyYWluczwvbGFiZWw+XG4gICAgICAgICAgICA8QnV0dG9uQ29sb3JQaWNrZXJcbiAgICAgICAgICAgICAgICA6a2V5PVwiYCR7Y29sb3IzfS1jb2xvcjNgXCJcbiAgICAgICAgICAgICAgICA6dmFsdWU9XCJjb2xvcjNcIlxuICAgICAgICAgICAgICAgIHBvcHVwVGl0bGU9XCJDb2xvciAtIDMgR3JhaW5zXCJcbiAgICAgICAgICAgICAgICBAY2hhbmdlPVwidXBkYXRlQ29sb3Ioe3N0ZXA6J2NvbG9yMycsIGNvbG9yOiAkZXZlbnR9KVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L0NvbnRyb2xHcm91cD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQnV0dG9uQ29sb3JQaWNrZXIgZnJvbSBcIi4vQnV0dG9uQ29sb3JQaWNrZXIudnVlXCI7XG5pbXBvcnQgQ29udHJvbEdyb3VwIGZyb20gXCIuL0NvbnRyb2xHcm91cC52dWVcIjtcbmltcG9ydCB7IG1hcFN0YXRlLCBtYXBHZXR0ZXJzLCBtYXBNdXRhdGlvbnMgfSBmcm9tIFwidnVleFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBCdXR0b25Db2xvclBpY2tlcixcbiAgICBDb250cm9sR3JvdXBcbiAgfSxcbiAgY29tcHV0ZWQ6IG1hcFN0YXRlKFwiaGVhdG1hcFwiLCBbXG4gICAgICBcImNvbG9yMFwiLFxuICAgICAgXCJjb2xvcjFcIixcbiAgICAgIFwiY29sb3IyXCIsXG4gICAgICBcImNvbG9yM1wiXG4gICAgXSksXG4gICAgbWV0aG9kczogbWFwTXV0YXRpb25zKFwiaGVhdG1hcFwiLCBbXCJ1cGRhdGVDb2xvclwiLCBcInJlc2V0Q29sb3JzXCJdKSxcbn07XG48L3NjcmlwdD5cbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ29udHJvbEdyb3VwQ2FudmFzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03ZTI5YTk1MCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Db250cm9sR3JvdXBDYW52YXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Db250cm9sR3JvdXBDYW52YXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCI8dGVtcGxhdGU+XG4gICAgPENvbnRyb2xHcm91cCBsZWdlbmQ9XCJDYW52YXNcIiBAcmVzZXQ9XCJyZXNldERpbWVuc2lvbnNcIj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGxhYmVsPlJlc29sdXRpb24gKHt7cmVzb2x1dGlvbn19cHggPHNwYW4gdi1odG1sPVwiJyYjMjE1OydcIj48L3NwYW4+IHt7cmVzb2x1dGlvbn19cHgpPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgOnZhbHVlPVwicmVzb2x1dGlvblwiIEBpbnB1dD1cInNldFJlc29sdXRpb24oJGV2ZW50LnRhcmdldC52YWx1ZSlcIiA6bWluPVwibWluUmVzb2x1dGlvblwiIDptYXg9XCJtYXhSZXNvbHV0aW9uXCIgc3RlcD1cIjFcIi8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbD5XaWR0aCAoe3tjb2xzIH19IENvbHMpPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgOnZhbHVlPVwid2lkdGhcIiBAaW5wdXQ9XCJzZXRXaWR0aCgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiIDptaW49XCJtaW5XaWR0aFwiIDptYXg9XCJtYXhXaWR0aFwiIDpzdGVwPVwicmVzb2x1dGlvblwiIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbD5IZWlnaHQgKHt7IHJvd3MgfX0gUm93cyk8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiAgOnZhbHVlPVwiaGVpZ2h0XCIgQGlucHV0PVwic2V0SGVpZ2h0KCRldmVudC50YXJnZXQudmFsdWUpXCIgOm1pbj1cIm1pbkhlaWdodFwiIDptYXg9XCJtYXhIZWlnaHRcIiA6c3RlcD1cInJlc29sdXRpb25cIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvQ29udHJvbEdyb3VwPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb250cm9sR3JvdXAgZnJvbSAnLi9Db250cm9sR3JvdXAudnVlJztcbmltcG9ydCB7bWFwU3RhdGUsIG1hcEdldHRlcnMsIG1hcE11dGF0aW9uc30gZnJvbSAndnVleCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIENvbnRyb2xHcm91cCxcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIC4uLm1hcFN0YXRlKFwiY2FudmFzXCIsIFtcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwicmVzb2x1dGlvblwiXSksXG4gICAgICAgIC4uLm1hcEdldHRlcnMoXCJjYW52YXNcIiwgW1xuICAgICAgICAgICAgXCJtaW5XaWR0aFwiLFxuICAgICAgICAgICAgXCJtYXhXaWR0aFwiLFxuICAgICAgICAgICAgXCJtaW5IZWlnaHRcIixcbiAgICAgICAgICAgIFwibWF4SGVpZ2h0XCIsXG4gICAgICAgICAgICBcIm1pblJlc29sdXRpb25cIixcbiAgICAgICAgICAgIFwibWF4UmVzb2x1dGlvblwiLFxuICAgICAgICAgICAgXCJjb2xzXCIsXG4gICAgICAgICAgICBcInJvd3NcIlxuICAgICAgICBdKSxcbiAgICB9LFxuICAgIG1ldGhvZHM6IG1hcE11dGF0aW9ucyhcImNhbnZhc1wiLCBbXG4gICAgICAgIFwic2V0SGVpZ2h0XCIsXG4gICAgICAgIFwic2V0V2lkdGhcIixcbiAgICAgICAgXCJzZXRSZXNvbHV0aW9uXCIsXG4gICAgICAgIFwicmVzZXREaW1lbnNpb25zXCJcbiAgICBdKSxcbn1cbjwvc2NyaXB0PlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ0NvbnRyb2xHcm91cCcse2F0dHJzOntcImxlZ2VuZFwiOlwiQ2FudmFzXCJ9LG9uOntcInJlc2V0XCI6X3ZtLnJlc2V0RGltZW5zaW9uc319LFtfYygnZGl2JyxbX2MoJ2RpdicsW19jKCdsYWJlbCcsW192bS5fdihcIlJlc29sdXRpb24gKFwiK192bS5fcyhfdm0ucmVzb2x1dGlvbikrXCJweCBcIiksX2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJpbm5lckhUTUxcIjpfdm0uX3MoJyYjMjE1OycpfX0pLF92bS5fdihcIiBcIitfdm0uX3MoX3ZtLnJlc29sdXRpb24pK1wicHgpXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnaW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJyYW5nZVwiLFwibWluXCI6X3ZtLm1pblJlc29sdXRpb24sXCJtYXhcIjpfdm0ubWF4UmVzb2x1dGlvbixcInN0ZXBcIjpcIjFcIn0sZG9tUHJvcHM6e1widmFsdWVcIjpfdm0ucmVzb2x1dGlvbn0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uc2V0UmVzb2x1dGlvbigkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2RpdicsW19jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCJXaWR0aCAoXCIrX3ZtLl9zKF92bS5jb2xzKStcIiBDb2xzKVwiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2lucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOl92bS5taW5XaWR0aCxcIm1heFwiOl92bS5tYXhXaWR0aCxcInN0ZXBcIjpfdm0ucmVzb2x1dGlvbn0sZG9tUHJvcHM6e1widmFsdWVcIjpfdm0ud2lkdGh9LG9uOntcImlucHV0XCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnNldFdpZHRoKCRldmVudC50YXJnZXQudmFsdWUpfX19KV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2RpdicsW19jKCdsYWJlbCcsW192bS5fdihcIkhlaWdodCAoXCIrX3ZtLl9zKF92bS5yb3dzKStcIiBSb3dzKVwiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2lucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOl92bS5taW5IZWlnaHQsXCJtYXhcIjpfdm0ubWF4SGVpZ2h0LFwic3RlcFwiOl92bS5yZXNvbHV0aW9ufSxkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS5oZWlnaHR9LG9uOntcImlucHV0XCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnNldEhlaWdodCgkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSldKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTWVudUNvbGxhcHNpYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03MjllNGNkNyZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9NZW51Q29sbGFwc2libGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9NZW51Q29sbGFwc2libGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL01lbnVDb2xsYXBzaWJsZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03MjllNGNkNyZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNzI5ZTRjZDdcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCI8dGVtcGxhdGU+XG4gICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIEBjbGljay5wcmV2ZW50PVwiYWN0aXZlID0gIWFjdGl2ZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhhbWJ1cmdlclwiIDpjbGFzcz1cInthY3RpdmV9XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhvcml6b250YWwtYmFyXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhvcml6b250YWwtYmFyXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhvcml6b250YWwtYmFyXCI+PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxkaXYgdi1zaG93PVwiYWN0aXZlXCI+XG4gICAgICAgICAgICA8c2xvdCAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLmhhbWJ1cmdlciB7XG4gICAgICAgIHdpZHRoOiAyOHB4O1xuICAgICAgICBoZWlnaHQ6IDE4cHg7XG4gICAgfVxuXG4gICAgLmhhbWJ1cmdlciAuaG9yaXpvbnRhbC1iYXJ7XG4gICAgICAgIHdpZHRoOiA3NSU7XG4gICAgICAgIGhlaWdodDogMnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjIyO1xuICAgICAgICBtYXJnaW46IDRweCBhdXRvO1xuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMXMsIHRyYW5zZm9ybSAwLjI1cztcbiAgICB9XG5cbiAgICAuaGFtYnVyZ2VyLmFjdGl2ZSAuaG9yaXpvbnRhbC1iYXI6Zmlyc3QtY2hpbGQge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpIHRyYW5zbGF0ZSgtNHB4LCA0cHgpO1xuICAgIH1cblxuICAgIC5oYW1idXJnZXIuYWN0aXZlIC5ob3Jpem9udGFsLWJhcjpudGgtY2hpbGQoZXZlbikge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIC5oYW1idXJnZXIuYWN0aXZlIC5ob3Jpem9udGFsLWJhcjpsYXN0LWNoaWxkIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpIHRyYW5zbGF0ZSgtNHB4LCAtNHB4KTtcbiAgICB9XG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2RpdicsW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImJ0blwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0uYWN0aXZlID0gIV92bS5hY3RpdmV9fX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImhhbWJ1cmdlclwiLGNsYXNzOnthY3RpdmU6IF92bS5hY3RpdmV9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaG9yaXpvbnRhbC1iYXJcIn0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaG9yaXpvbnRhbC1iYXJcIn0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaG9yaXpvbnRhbC1iYXJcIn0pXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS5hY3RpdmUpLGV4cHJlc3Npb246XCJhY3RpdmVcIn1dfSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgaWQ9XCJjb250YWluZXJcIj5cblxuICAgICAgICA8aGVhZGVyIGlkPVwiaGVhZGVyXCI+XG4gICAgICAgICAgICA8aDE+QWJlbGlhbiBTYW5kcGlsZTwvaDE+XG4gICAgICAgIDwvaGVhZGVyPlxuXG4gICAgICAgIDxhc2lkZSBpZD1cImNvbnRyb2xzXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxCdXR0b25Ub2dnbGUgXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRleHQ9XCJQbGF5XCJcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmVUZXh0PVwiUGF1c2VcIlxuICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZUljb249XCImIzkyMDg7XCJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlSWNvbj1cIiYjOTY1NDtcIlxuICAgICAgICAgICAgICAgICAgICBAdG9nZ2xlPVwiZG9Mb29wID0gIWRvTG9vcFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuXCIgQGNsaWNrLnByZXZlbnQ9XCJyZXNldFwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWh0bWw9XCInJiM4NjM0OydcIj48L3NwYW4+IFJlc3RhcnRcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgICAgIDxNZW51Q29sbGFwc2libGUgY2xhc3M9XCJkaXNwbGF5LXNtIGhhbWJ1cmdlci1tZW51XCI+XG4gICAgICAgICAgICAgICAgPENvbnRyb2xHcm91cFNhbmQgQGNsZWFyPVwiY2xlYXJcIiAvPlxuICAgICAgICAgICAgICAgIDxDb250cm9sR3JvdXBDYW52YXMgLz5cbiAgICAgICAgICAgIDwvTWVudUNvbGxhcHNpYmxlPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGlzcGxheS1tZFwiPlxuICAgICAgICAgICAgICAgIDxDb250cm9sR3JvdXBTYW5kIEBjbGVhcj1cImNsZWFyXCIgLz5cbiAgICAgICAgICAgICAgICA8Q29udHJvbEdyb3VwSGVhdG1hcCAvPlxuICAgICAgICAgICAgICAgIDxDb250cm9sR3JvdXBDYW52YXMgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2FzaWRlPlxuXG4gICAgICAgIDxzZWN0aW9uIGlkPVwiY29udGVudFwiIHJlZj1cImNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxDYW52YXNSb290XG4gICAgICAgICAgICAgICAgOndpZHRoPVwid2lkdGhcIlxuICAgICAgICAgICAgICAgIDpoZWlnaHQ9XCJoZWlnaHRcIlxuICAgICAgICAgICAgICAgIEBtb3VzZWRvd24ubGVmdD1cInNldEludGVyYWN0aW5nKDEwLCAkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICBAbW91c2V1cC5sZWZ0PVwiaW50ZXJhY3RpbmcgPSBmYWxzZVwiXG4gICAgICAgICAgICAgICAgQG1vdXNlbGF2ZT1cImludGVyYWN0aW5nID0gZmFsc2VcIlxuICAgICAgICAgICAgICAgIEBtb3VzZW1vdmU9XCJ1cGRhdGVJbnRlcmFjdGluZygkZXZlbnQpXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8Q2FudmFzR3JpZEhlYXRNYXAgXG4gICAgICAgICAgICAgICAgICAgIDpncmlkPVwic2FuZFwiXG4gICAgICAgICAgICAgICAgICAgIDpoZWlnaHQ9XCJoZWlnaHRcIlxuICAgICAgICAgICAgICAgICAgICA6d2lkdGg9XCJ3aWR0aFwiXG4gICAgICAgICAgICAgICAgICAgIDpyZXNvbHV0aW9uPVwicmVzb2x1dGlvblwiXG4gICAgICAgICAgICAgICAgICAgIDpjb2xvclN0ZXAwPVwiY29sb3IwXCJcbiAgICAgICAgICAgICAgICAgICAgOmNvbG9yU3RlcDE9XCJjb2xvcjFcIlxuICAgICAgICAgICAgICAgICAgICA6Y29sb3JTdGVwMj1cImNvbG9yMlwiXG4gICAgICAgICAgICAgICAgICAgIDpjb2xvclN0ZXAzPVwiY29sb3IzXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYW52YXNSb290PlxuICAgICAgIDwvc2VjdGlvbj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQnV0dG9uVG9nZ2xlIGZyb20gXCIuL0J1dHRvblRvZ2dsZS52dWVcIjtcbmltcG9ydCBDYW52YXNSb290IGZyb20gXCIuL0NhbnZhc1Jvb3QudnVlXCI7XG5pbXBvcnQgQ2FudmFzR3JpZEhlYXRNYXAgZnJvbSBcIi4vQ2FudmFzR3JpZEhlYXRNYXAudnVlXCI7XG5pbXBvcnQgQ29udHJvbEdyb3VwU2FuZCBmcm9tIFwiLi9Db250cm9sR3JvdXBTYW5kLnZ1ZVwiO1xuaW1wb3J0IENvbnRyb2xHcm91cEhlYXRtYXAgZnJvbSBcIi4vQ29udHJvbEdyb3VwSGVhdG1hcC52dWVcIjtcbmltcG9ydCBDb250cm9sR3JvdXBDYW52YXMgZnJvbSBcIi4vQ29udHJvbEdyb3VwQ2FudmFzLnZ1ZVwiO1xuaW1wb3J0IE1lbnVDb2xsYXBzaWJsZSBmcm9tIFwiLi9NZW51Q29sbGFwc2libGUudnVlXCI7XG5pbXBvcnQgeyBwaXhlbFRvQ29vcmQsIGNvb3JkVG9QaXhlbCB9IGZyb20gXCIuLi91dGlsaXRpZXMuanNcIjtcbmltcG9ydCB7IG1hcFN0YXRlLCBtYXBHZXR0ZXJzLCBtYXBNdXRhdGlvbnMgfSBmcm9tIFwidnVleFwiO1xuXG5sZXQgb25SZXNpemVUaW1lcklkID0gdW5kZWZpbmVkO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBCdXR0b25Ub2dnbGUsXG4gICAgQ2FudmFzUm9vdCxcbiAgICBDYW52YXNHcmlkSGVhdE1hcCxcbiAgICBDb250cm9sR3JvdXBTYW5kLFxuICAgIENvbnRyb2xHcm91cEhlYXRtYXAsXG4gICAgQ29udHJvbEdyb3VwQ2FudmFzLFxuICAgIE1lbnVDb2xsYXBzaWJsZSxcbiAgfSxcblxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbnRlcmFjdGluZzogZmFsc2UsXG4gICAgICBpbnRlcmFjdGluZ1g6IG51bGwsXG4gICAgICBpbnRlcmFjdGluZ1k6IG51bGwsXG4gICAgICBpbnRlcmFjdGluZ0Ftb3VudDogMTAsXG4gICAgICBkb0xvb3A6IHRydWUsXG4gICAgICB0aW1lb3V0OiBudWxsXG4gICAgfTtcbiAgfSxcblxuICBjb21wdXRlZDoge1xuICAgIC4uLm1hcFN0YXRlKFwiaGVhdG1hcFwiLCBbXCJjb2xvcjBcIiwgXCJjb2xvcjFcIiwgXCJjb2xvcjJcIiwgXCJjb2xvcjNcIl0pLFxuICAgIC4uLm1hcFN0YXRlKFwiY2FudmFzXCIsIFtcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwicmVzb2x1dGlvblwiXSksXG4gICAgLi4ubWFwR2V0dGVycyhcImNhbnZhc1wiLCBbXG4gICAgICAgIFwibWluV2lkdGhcIixcbiAgICAgICAgXCJtYXhXaWR0aFwiLFxuICAgICAgICBcIm1pbkhlaWdodFwiLFxuICAgICAgICBcIm1heEhlaWdodFwiLFxuICAgICAgICBcIm1pblJlc29sdXRpb25cIixcbiAgICAgICAgXCJtYXhSZXNvbHV0aW9uXCIsXG4gICAgICAgIFwiY29sc1wiLFxuICAgICAgICBcInJvd3NcIlxuICAgIF0pLFxuICAgIC4uLm1hcFN0YXRlKFwic2FuZFwiLCBbXCJiYXNlU2FuZFwiLCBcInN0YXJ0aW5nU2FuZFwiLCBcInNhbmRcIl0pLFxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLi4ubWFwTXV0YXRpb25zKFwiY2FudmFzXCIsIFtcInNldEhlaWdodFwiLCBcInNldFdpZHRoXCIsIFwic2V0UmVzb2x1dGlvblwiXSksXG4gICAgLi4ubWFwTXV0YXRpb25zKFwic2FuZFwiLCBbXCJzZXRTYW5kXCIsIFwidXBkYXRlU2FuZFwiXSksXG4gICAgY29uc3RyYWluQ2FudmFzKGdyb3cpIHtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gZ3JvdyA/IHRoaXMucmVzb2x1dGlvbiA6IC10aGlzLnJlc29sdXRpb247XG4gICAgICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoXG4gICAgICAgICAgICB0aGlzLm1pbldpZHRoLFxuICAgICAgICAgICAgTWF0aC5taW4odGhpcy5tYXhXaWR0aCwgdGhpcy53aWR0aCArIGFtb3VudClcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoXG4gICAgICAgICAgICB0aGlzLm1pbkhlaWdodCxcbiAgICAgICAgICAgIE1hdGgubWluKHRoaXMubWF4SGVpZ2h0LCB0aGlzLmhlaWdodCArIGFtb3VudClcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodGhpcy5jb2xzICUgMiA9PT0gMCB8fCB0aGlzLndpZHRoID4gdGhpcy5tYXhXaWR0aCB8fCB0aGlzLndpZHRoIDwgdGhpcy5taW5IZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0V2lkdGgod2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucm93cyAlIDIgPT09IDAgfHwgdGhpcy5oZWlnaHQgPiB0aGlzLm1heEhlaWdodCB8fCB0aGlzLmhlaWdodCA8IHRoaXMubWluSGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnNldEhlaWdodChoZWlnaHQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzZXRJbnRlcmFjdGluZyhhbW91bnQsIGUpIHtcbiAgICAgICh0aGlzLmludGVyYWN0aW5nID0gdHJ1ZSksIHRoaXMudXBkYXRlSW50ZXJhY3RpbmcoZSk7XG4gICAgICB0aGlzLmludGVyYWN0aW5nQW1vdW50ID0gYW1vdW50O1xuICAgIH0sXG4gICAgdXBkYXRlSW50ZXJhY3RpbmcoZSkge1xuICAgICAgbGV0IHggPSBlLm9mZnNldFggfHwgZS5sYXllclg7XG5cbiAgICAgIGxldCB5ID0gZS5vZmZzZXRZIHx8IGUubGF5ZXJZO1xuXG4gICAgICB4ID0gTWF0aC5yb3VuZCh4IC8gdGhpcy5yZXNvbHV0aW9uKTtcblxuICAgICAgaWYgKHggPiAwICYmIHggPCB0aGlzLmNvbHMpIHtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGluZ1ggPSB4O1xuICAgICAgfVxuXG4gICAgICB5ID0gTWF0aC5yb3VuZCh5IC8gdGhpcy5yZXNvbHV0aW9uKTtcblxuICAgICAgaWYgKHkgPiAwICYmIHkgPCB0aGlzLnJvd3MpIHtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGluZ1kgPSB5O1xuICAgICAgfVxuICAgIH0sXG4gICAgY2xlYXIoKSB7XG4gICAgICBjb25zdCBzYW5kID0gbmV3IEFycmF5KHRoaXMucm93cyAqIHRoaXMuY29scyk7XG4gICAgICBzYW5kLmZpbGwodGhpcy5iYXNlU2FuZCk7XG4gICAgICB0aGlzLnNldFNhbmQoc2FuZCk7XG4gICAgfSxcbiAgICByZXNldCgpIHtcbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIGxldCBtaWRkbGUgPSBjb29yZFRvUGl4ZWwoXG4gICAgICAgIE1hdGguZmxvb3IodGhpcy5jb2xzIC8gMiksXG4gICAgICAgIE1hdGguZmxvb3IodGhpcy5yb3dzIC8gMiksXG4gICAgICAgIHRoaXMuY29sc1xuICAgICAgKTtcblxuICAgICAgdGhpcy51cGRhdGVTYW5kKHsgaWR4OiBtaWRkbGUsIGFtb3VudDogdGhpcy5zdGFydGluZ1NhbmQgfSk7XG4gICAgfSxcbiAgICBvcHRpbWlzZUNhbnZhcygpIHtcbiAgICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gdGhpcy4kcmVmcy5jb250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGNvbnN0IGRpbWVuc2lvbiA9IE1hdGguZmxvb3IoTWF0aC5taW4od2lkdGgsIGhlaWdodCkpO1xuXG4gICAgICAgIGxldCByZXNvbHV0aW9uID0gTWF0aC5yb3VuZCgwLjAxMjUgKiBkaW1lbnNpb24pO1xuICAgICAgICByZXNvbHV0aW9uID0gTWF0aC5taW4ocmVzb2x1dGlvbiwgdGhpcy5tYXhSZXNvbHV0aW9uKTtcbiAgICAgICAgcmVzb2x1dGlvbiA9IE1hdGgubWF4KHJlc29sdXRpb24sIHRoaXMubWluUmVzb2x1dGlvbik7XG5cbiAgICAgICAgdGhpcy5zZXRXaWR0aChkaW1lbnNpb24pO1xuICAgICAgICB0aGlzLnNldEhlaWdodChkaW1lbnNpb24pO1xuICAgICAgICB0aGlzLnNldFJlc29sdXRpb24ocmVzb2x1dGlvbik7XG4gICAgfSxcbiAgICBvblJlc2l6ZSgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KG9uUmVzaXplVGltZXJJZCk7XG4gICAgICAgIG9uUmVzaXplVGltZXJJZCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICB0aGlzLm9wdGltaXNlQ2FudmFzKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAxMDBcbiAgICAgICAgKTtcbiAgICB9LFxuICAgICRfc2V0VXAoKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZSk7XG4gICAgICB0aGlzLm9wdGltaXNlQ2FudmFzKCk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSxcbiAgICAkX3VwZGF0ZSgpIHtcbiAgICAgIGlmICh0aGlzLmludGVyYWN0aW5nKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGNvb3JkVG9QaXhlbChcbiAgICAgICAgICB0aGlzLmludGVyYWN0aW5nWCxcbiAgICAgICAgICB0aGlzLmludGVyYWN0aW5nWSxcbiAgICAgICAgICB0aGlzLmNvbHNcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVNhbmQoe1xuICAgICAgICAgIGlkeCxcbiAgICAgICAgICBhbW91bnQ6ICh0aGlzLnNhbmRbaWR4XSArPSB0aGlzLmludGVyYWN0aW5nQW1vdW50KVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kX3RvcHBsZSgpO1xuICAgIH0sXG4gICAgJF90b3BwbGUoKSB7XG4gICAgICBsZXQgbmV4dFNhbmQgPSBBcnJheS5mcm9tKHRoaXMuc2FuZCk7XG5cbiAgICAgIHRoaXMuc2FuZC5mb3JFYWNoKChncmFpbnMsIGlkeCkgPT4ge1xuICAgICAgICBpZiAoZ3JhaW5zID49IDQpIHtcbiAgICAgICAgICBuZXh0U2FuZFtpZHhdID0gbmV4dFNhbmRbaWR4XSAtIDQ7XG5cbiAgICAgICAgICBsZXQgeyB4LCB5IH0gPSBwaXhlbFRvQ29vcmQoaWR4LCB0aGlzLmNvbHMpO1xuXG4gICAgICAgICAgaWYgKHggPiAwKSB7XG4gICAgICAgICAgICBsZXQgc2libGluZ0lkeCA9IGNvb3JkVG9QaXhlbCh4IC0gMSwgeSwgdGhpcy5jb2xzKTtcblxuICAgICAgICAgICAgbmV4dFNhbmRbc2libGluZ0lkeF0gPSBuZXh0U2FuZFtzaWJsaW5nSWR4XSArIDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHggPCB0aGlzLmNvbHMgLSAxKSB7XG4gICAgICAgICAgICBsZXQgc2libGluZ0lkeCA9IGNvb3JkVG9QaXhlbCh4ICsgMSwgeSwgdGhpcy5jb2xzKTtcblxuICAgICAgICAgICAgbmV4dFNhbmRbc2libGluZ0lkeF0gPSBuZXh0U2FuZFtzaWJsaW5nSWR4XSArIDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHkgPiAwKSB7XG4gICAgICAgICAgICBsZXQgc2libGluZ0lkeCA9IGNvb3JkVG9QaXhlbCh4LCB5IC0gMSwgdGhpcy5jb2xzKTtcblxuICAgICAgICAgICAgbmV4dFNhbmRbc2libGluZ0lkeF0gPSBuZXh0U2FuZFtzaWJsaW5nSWR4XSArIDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHkgPCB0aGlzLnJvd3MgLSAxKSB7XG4gICAgICAgICAgICBsZXQgc2libGluZ0lkeCA9IGNvb3JkVG9QaXhlbCh4LCB5ICsgMSwgdGhpcy5jb2xzKTtcblxuICAgICAgICAgICAgbmV4dFNhbmRbc2libGluZ0lkeF0gPSBuZXh0U2FuZFtzaWJsaW5nSWR4XSArIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5zZXRTYW5kKG5leHRTYW5kKTtcbiAgICB9LFxuICAgICRfbG9vcCgpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuJF91cGRhdGUoKTtcblxuICAgICAgICBpZiAodGhpcy5kb0xvb3ApIHtcbiAgICAgICAgICB0aGlzLiRfbG9vcCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgZG9Mb29wKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy4kX2xvb3AoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc29sdXRpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICBvbGRWYWx1ZSA9IHBhcnNlSW50KG9sZFZhbHVlLCAxMCk7XG4gICAgICB0aGlzLmNvbnN0cmFpbkNhbnZhcyh2YWx1ZSA+IG9sZFZhbHVlKTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9LFxuICAgIHdpZHRoKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgb2xkVmFsdWUgPSBwYXJzZUludChvbGRWYWx1ZSwgMTApO1xuICAgICAgdGhpcy5jb25zdHJhaW5DYW52YXModmFsdWUgPiBvbGRWYWx1ZSk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSxcblxuICAgIGhlaWdodCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgIG9sZFZhbHVlID0gcGFyc2VJbnQob2xkVmFsdWUsIDEwKTtcbiAgICAgIHRoaXMuY29uc3RyYWluQ2FudmFzKHZhbHVlID4gb2xkVmFsdWUpO1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJF9zZXRVcCgpO1xuXG4gICAgICB0aGlzLiRfbG9vcCgpO1xuICAgIH0pO1xuICB9LFxuICBiZWZvcmVEZXN0cm95KCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUpO1xuICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLmhhbWJ1cmdlci1tZW51IHtcbiAgICAgICAgbWFyZ2luOiAxMnB4IGF1dG87XG4gICAgfVxuPC9zdHlsZT5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NYWluQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL01haW5BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9NYWluQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00MjYzMzhiOCZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9NYWluQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTWFpbkFwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vTWFpbkFwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00MjYzMzhiOCZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNDI2MzM4YjhcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7YXR0cnM6e1wiaWRcIjpcImNvbnRhaW5lclwifX0sW192bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdhc2lkZScse2F0dHJzOntcImlkXCI6XCJjb250cm9sc1wifX0sW19jKCdkaXYnLFtfYygnQnV0dG9uVG9nZ2xlJyx7YXR0cnM6e1wiYWN0aXZlVGV4dFwiOlwiUGxheVwiLFwiaW5hY3RpdmVUZXh0XCI6XCJQYXVzZVwiLFwiaW5hY3RpdmVJY29uXCI6XCImIzkyMDg7XCIsXCJhY3RpdmVJY29uXCI6XCImIzk2NTQ7XCJ9LG9uOntcInRvZ2dsZVwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmRvTG9vcCA9ICFfdm0uZG9Mb29wfX19KSxfdm0uX3YoXCIgXCIpLF9jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImJ0blwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtyZXR1cm4gX3ZtLnJlc2V0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyl9fX0sW19jKCdzcGFuJyx7ZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKCcmIzg2MzQ7Jyl9fSksX3ZtLl92KFwiIFJlc3RhcnRcXG4gICAgICAgICAgICBcIildKV0sMSksX3ZtLl92KFwiIFwiKSxfYygnTWVudUNvbGxhcHNpYmxlJyx7c3RhdGljQ2xhc3M6XCJkaXNwbGF5LXNtIGhhbWJ1cmdlci1tZW51XCJ9LFtfYygnQ29udHJvbEdyb3VwU2FuZCcse29uOntcImNsZWFyXCI6X3ZtLmNsZWFyfX0pLF92bS5fdihcIiBcIiksX2MoJ0NvbnRyb2xHcm91cENhbnZhcycpXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImRpc3BsYXktbWRcIn0sW19jKCdDb250cm9sR3JvdXBTYW5kJyx7b246e1wiY2xlYXJcIjpfdm0uY2xlYXJ9fSksX3ZtLl92KFwiIFwiKSxfYygnQ29udHJvbEdyb3VwSGVhdG1hcCcpLF92bS5fdihcIiBcIiksX2MoJ0NvbnRyb2xHcm91cENhbnZhcycpXSwxKV0sMSksX3ZtLl92KFwiIFwiKSxfYygnc2VjdGlvbicse3JlZjpcImNvbnRlbnRcIixhdHRyczp7XCJpZFwiOlwiY29udGVudFwifX0sW19jKCdDYW52YXNSb290Jyx7YXR0cnM6e1wid2lkdGhcIjpfdm0ud2lkdGgsXCJoZWlnaHRcIjpfdm0uaGVpZ2h0fSxvbjp7XCJtb3VzZWRvd25cIjpmdW5jdGlvbigkZXZlbnQpe2lmKCEkZXZlbnQudHlwZS5pbmRleE9mKCdrZXknKSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwibGVmdFwiLDM3LCRldmVudC5rZXksW1wiTGVmdFwiLFwiQXJyb3dMZWZ0XCJdKSl7IHJldHVybiBudWxsOyB9aWYoJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDApeyByZXR1cm4gbnVsbDsgfXJldHVybiBfdm0uc2V0SW50ZXJhY3RpbmcoMTAsICRldmVudCl9LFwibW91c2V1cFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoISRldmVudC50eXBlLmluZGV4T2YoJ2tleScpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJsZWZ0XCIsMzcsJGV2ZW50LmtleSxbXCJMZWZ0XCIsXCJBcnJvd0xlZnRcIl0pKXsgcmV0dXJuIG51bGw7IH1pZignYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMCl7IHJldHVybiBudWxsOyB9X3ZtLmludGVyYWN0aW5nID0gZmFsc2V9LFwibW91c2VsYXZlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaW50ZXJhY3RpbmcgPSBmYWxzZX0sXCJtb3VzZW1vdmVcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0udXBkYXRlSW50ZXJhY3RpbmcoJGV2ZW50KX19fSxbX2MoJ0NhbnZhc0dyaWRIZWF0TWFwJyx7YXR0cnM6e1wiZ3JpZFwiOl92bS5zYW5kLFwiaGVpZ2h0XCI6X3ZtLmhlaWdodCxcIndpZHRoXCI6X3ZtLndpZHRoLFwicmVzb2x1dGlvblwiOl92bS5yZXNvbHV0aW9uLFwiY29sb3JTdGVwMFwiOl92bS5jb2xvcjAsXCJjb2xvclN0ZXAxXCI6X3ZtLmNvbG9yMSxcImNvbG9yU3RlcDJcIjpfdm0uY29sb3IyLFwiY29sb3JTdGVwM1wiOl92bS5jb2xvcjN9fSldLDEpXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdoZWFkZXInLHthdHRyczp7XCJpZFwiOlwiaGVhZGVyXCJ9fSxbX2MoJ2gxJyxbX3ZtLl92KFwiQWJlbGlhbiBTYW5kcGlsZVwiKV0pXSl9XVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IFwiY29yZS1qc1wiO1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IHN0b3JlIGZyb20gJy4vc3RvcmVzJztcbmltcG9ydCBNYWluQXBwIGZyb20gJy4vY29tcG9uZW50cy9NYWluQXBwLnZ1ZSc7XG5pbXBvcnQgJy4uL2Nzcy9hcHAuY3NzJztcblxubmV3IFZ1ZSh7XG4gICAgZWw6ICcjYXBwJyxcbiAgICBzdG9yZSxcbiAgICByZW5kZXI6IGggPT4gaChNYWluQXBwKVxufSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIml0IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiaXNPYmplY3QiLCJ3ZWxsS25vd25TeW1ib2wiLCJjcmVhdGUiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJBcnJheSIsInByb3RvdHlwZSIsInVuZGVmaW5lZCIsImYiLCJjb25maWd1cmFibGUiLCJ2YWx1ZSIsImtleSIsImNoYXJBdCIsIlMiLCJpbmRleCIsInVuaWNvZGUiLCJsZW5ndGgiLCJDb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3IiwiTkFNRSIsIlByb3RvdHlwZSIsIk5BVElWRV9BUlJBWV9CVUZGRVIiLCJERVNDUklQVE9SUyIsImdsb2JhbCIsImhhcyIsImNsYXNzb2YiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsImRlZmluZVByb3BlcnR5IiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsInVpZCIsIkludDhBcnJheSIsIkludDhBcnJheVByb3RvdHlwZSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUiLCJUeXBlZEFycmF5IiwiVHlwZWRBcnJheVByb3RvdHlwZSIsIk9iamVjdFByb3RvdHlwZSIsIk9iamVjdCIsImlzUHJvdG90eXBlT2YiLCJUT19TVFJJTkdfVEFHIiwiVFlQRURfQVJSQVlfVEFHIiwiVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IiLCJOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIiwib3BlcmEiLCJUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0IiwiVWludDhBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIkJpZ0ludDY0QXJyYXkiLCJCaWdVaW50NjRBcnJheSIsImlzVHlwZWRBcnJheSIsImtsYXNzIiwiRnVuY3Rpb24iLCJnZXQiLCJ0aGlzIiwiYVR5cGVkQXJyYXkiLCJhVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiQyIsImNhbGwiLCJleHBvcnRUeXBlZEFycmF5TWV0aG9kIiwiS0VZIiwicHJvcGVydHkiLCJmb3JjZWQiLCJBUlJBWSIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsImVycm9yIiwiZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCIsImlzVmlldyIsInJlZGVmaW5lQWxsIiwiZmFpbHMiLCJhbkluc3RhbmNlIiwidG9JbnRlZ2VyIiwidG9MZW5ndGgiLCJ0b0luZGV4IiwiSUVFRTc1NCIsImdldE93blByb3BlcnR5TmFtZXMiLCJhcnJheUZpbGwiLCJzZXRUb1N0cmluZ1RhZyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwic2V0SW50ZXJuYWxTdGF0ZSIsInNldCIsIkFSUkFZX0JVRkZFUiIsIkRBVEFfVklFVyIsIldST05HX0lOREVYIiwiTmF0aXZlQXJyYXlCdWZmZXIiLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCIkRGF0YVZpZXdQcm90b3R5cGUiLCJSYW5nZUVycm9yIiwicGFja0lFRUU3NTQiLCJwYWNrIiwidW5wYWNrSUVFRTc1NCIsInVucGFjayIsInBhY2tJbnQ4IiwibnVtYmVyIiwicGFja0ludDE2IiwicGFja0ludDMyIiwidW5wYWNrSW50MzIiLCJidWZmZXIiLCJwYWNrRmxvYXQzMiIsInBhY2tGbG9hdDY0IiwiYWRkR2V0dGVyIiwidmlldyIsImNvdW50IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsInN0b3JlIiwiYnl0ZUxlbmd0aCIsImJ5dGVzIiwic3RhcnQiLCJieXRlT2Zmc2V0Iiwic2xpY2UiLCJyZXZlcnNlIiwiY29udmVyc2lvbiIsImkiLCJOYU4iLCJBcnJheUJ1ZmZlclByb3RvdHlwZSIsImtleXMiLCJqIiwiY29uc3RydWN0b3IiLCJ0ZXN0VmlldyIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsInVuc2FmZSIsImJ1ZmZlckxlbmd0aCIsIm9mZnNldCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJhcmd1bWVudHMiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwidG9PYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJtaW4iLCJNYXRoIiwiY29weVdpdGhpbiIsInRhcmdldCIsIk8iLCJsZW4iLCJ0byIsImZyb20iLCJlbmQiLCJpbmMiLCJhcmd1bWVudHNMZW5ndGgiLCJlbmRQb3MiLCIkZm9yRWFjaCIsIlNUUklDVF9NRVRIT0QiLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiZm9yRWFjaCIsImNhbGxiYWNrZm4iLCJsaXN0IiwicmVzdWx0IiwiYmluZCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJhcnJheUxpa2UiLCJzdGVwIiwiaXRlcmF0b3IiLCJuZXh0IiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlcmF0b3JNZXRob2QiLCJkb25lIiwidG9JbmRleGVkT2JqZWN0IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJpbmRleE9mIiwiSW5kZXhlZE9iamVjdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsInB1c2giLCJUWVBFIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9SRUpFQ1QiLCJOT19IT0xFUyIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlclJlamVjdCIsIiRsYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIkZPUkNFRCIsInNlYXJjaEVsZW1lbnQiLCJhcHBseSIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJhcmd1bWVudCIsIm1ldGhvZCIsImFGdW5jdGlvbiIsIklTX1JJR0hUIiwibWVtbyIsImxlZnQiLCJyaWdodCIsImZsb29yIiwibWVyZ2VTb3J0IiwiY29tcGFyZWZuIiwibWlkZGxlIiwiaW5zZXJ0aW9uU29ydCIsIm1lcmdlIiwiZWxlbWVudCIsImxsZW5ndGgiLCJybGVuZ3RoIiwibGluZGV4IiwicmluZGV4IiwiaXNBcnJheSIsIm9yaWdpbmFsQXJyYXkiLCJhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciIsImFuT2JqZWN0IiwiaXRlcmF0b3JDbG9zZSIsImZuIiwiRU5UUklFUyIsIklURVJBVE9SIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZXhlYyIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwib2JqZWN0IiwidG9TdHJpbmciLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJjbGFzc29mUmF3IiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0YWciLCJ0cnlHZXQiLCJjYWxsZWUiLCJhZGRlciIsImFkZCIsImsiLCJ3YXNEZWxldGVkIiwiY29sbGVjdGlvbiIsInJlbW92ZXIiLCJhbGxEZWxldGVkIiwiaXRlcmF0ZSIsInNvdXJjZSIsIm4iLCJtYXBGbiIsIm5leHRJdGVtIiwiQSIsImRlZmluZUl0ZXJhdG9yIiwic2V0U3BlY2llcyIsImZhc3RLZXkiLCJpbnRlcm5hbFN0YXRlR2V0dGVyRm9yIiwiZ2V0dGVyRm9yIiwiZ2V0Q29uc3RydWN0b3IiLCJ3cmFwcGVyIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkFEREVSIiwiaXRlcmFibGUiLCJ0eXBlIiwiZmlyc3QiLCJsYXN0Iiwic2l6ZSIsIkFTX0VOVFJJRVMiLCJkZWZpbmUiLCJwcmV2aW91cyIsInN0YXRlIiwiZW50cnkiLCJnZXRFbnRyeSIsInJlbW92ZWQiLCJjbGVhciIsImRhdGEiLCJwcmV2Iiwic2V0U3Ryb25nIiwiSVRFUkFUT1JfTkFNRSIsImdldEludGVybmFsQ29sbGVjdGlvblN0YXRlIiwiZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlIiwiaXRlcmF0ZWQiLCJraW5kIiwiZ2V0V2Vha0RhdGEiLCJBcnJheUl0ZXJhdGlvbk1vZHVsZSIsIiRoYXMiLCJpZCIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmcm96ZW4iLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZW50cmllcyIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsIiQiLCJpc0ZvcmNlZCIsIkludGVybmFsTWV0YWRhdGFNb2R1bGUiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJpbmhlcml0SWZSZXF1aXJlZCIsImNvbW1vbiIsIklTX1dFQUsiLCJOYXRpdmVDb25zdHJ1Y3RvciIsIk5hdGl2ZVByb3RvdHlwZSIsImV4cG9ydGVkIiwiZml4TWV0aG9kIiwibmF0aXZlTWV0aG9kIiwiZW5hYmxlIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJkdW1teSIsIk1hcCIsIldlYWtNYXAiLCJOb2RlIiwic3ltYm9sIiwicHJpbWl0aXZlcyIsIm9iamVjdHNCeUluZGV4IiwiaW5pdGlhbGl6ZXIiLCJJU19PQkpFQ1QiLCJyb290IiwiYWN0aXZlIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk1BVENIIiwicmVnZXhwIiwiZXJyb3IxIiwiZXJyb3IyIiwiRiIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJxdW90Iiwic3RyaW5nIiwiYXR0cmlidXRlIiwicDEiLCJyZXBsYWNlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJJdGVyYXRvcnMiLCJyZXR1cm5UaGlzIiwiSXRlcmF0b3JDb25zdHJ1Y3RvciIsImJpdG1hcCIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsInRvUHJvcGVydHlLZXkiLCJwcm9wZXJ0eUtleSIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJoaW50IiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsIklTX1BVUkUiLCJJdGVyYXRvcnNDb3JlIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIktFWVMiLCJWQUxVRVMiLCJJdGVyYWJsZSIsIkRFRkFVTFQiLCJJU19TRVQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJtZXRob2RzIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsInZhbHVlcyIsInByb3RvIiwicGF0aCIsIndyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUiLCJTeW1ib2wiLCJkb2N1bWVudCIsIkVYSVNUUyIsImNyZWF0ZUVsZW1lbnQiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNsYXNzTGlzdCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIkRPTVRva2VuTGlzdFByb3RvdHlwZSIsImZpcmVmb3giLCJtYXRjaCIsIndpbmRvdyIsIlVBIiwidGVzdCIsInVzZXJBZ2VudCIsIlBlYmJsZSIsInByb2Nlc3MiLCJnZXRCdWlsdEluIiwidmVyc2lvbiIsIkRlbm8iLCJ2ZXJzaW9ucyIsInY4Iiwic3BsaXQiLCJ3ZWJraXQiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwib3B0aW9ucyIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0Iiwic2hhbSIsInJlZ2V4cEV4ZWMiLCJSZWdFeHBQcm90b3R5cGUiLCJSZWdFeHAiLCJTSEFNIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsInJlIiwiZmxhZ3MiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJzdHIiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCIkZXhlYyIsImZsYXR0ZW5JbnRvQXJyYXkiLCJvcmlnaW5hbCIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJpc0V4dGVuc2libGUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsImEiLCJiIiwiYyIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsImFyZ3NMZW5ndGgiLCJhcmdzIiwiam9pbiIsInBhcnRBcmdzIiwiY29uY2F0IiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJ1c2luZ0l0ZXJhdG9yIiwiU2V0IiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VtZW50IiwidGFpbFBvcyIsIm0iLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwiZyIsImhhc093blByb3BlcnR5IiwiaGFzT3duIiwiY29uc29sZSIsImFicyIsInBvdyIsImxvZyIsIkxOMiIsIm1hbnRpc3NhTGVuZ3RoIiwiZXhwb25lbnQiLCJtYW50aXNzYSIsImV4cG9uZW50TGVuZ3RoIiwiZU1heCIsImVCaWFzIiwicnQiLCJzaWduIiwiSW5maW5pdHkiLCJuQml0cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiV3JhcHBlciIsIk5ld1RhcmdldCIsIk5ld1RhcmdldFByb3RvdHlwZSIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUiLCJGUkVFWklORyIsIlJFUVVJUkVEIiwiTUVUQURBVEEiLCJzZXRNZXRhZGF0YSIsIm9iamVjdElEIiwid2Vha0RhdGEiLCJtZXRhIiwib25GcmVlemUiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWQiLCJzaGFyZWRLZXkiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJlbmZvcmNlIiwiYXJnIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwidG9Mb3dlckNhc2UiLCJpc0Zpbml0ZSIsImlzUmVnRXhwIiwiVVNFX1NZTUJPTF9BU19VSUQiLCIkU3ltYm9sIiwiUmVzdWx0Iiwic3RvcHBlZCIsInVuYm91bmRGdW5jdGlvbiIsIml0ZXJGbiIsIklTX0lURVJBVE9SIiwiSU5URVJSVVBURUQiLCJzdG9wIiwiY29uZGl0aW9uIiwiY2FsbEZuIiwiaW5uZXJSZXN1bHQiLCJpbm5lckVycm9yIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIiRleHBtMSIsImV4cG0xIiwiZXhwIiwieCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwibG9nMXAiLCJzY2FsZSIsImluTG93IiwiaW5IaWdoIiwib3V0TG93Iiwib3V0SGlnaCIsImZsdXNoIiwiaGVhZCIsIm5vdGlmeSIsInRvZ2dsZSIsIm5vZGUiLCJwcm9taXNlIiwidGhlbiIsIm1hY3JvdGFzayIsIklTX0lPUyIsIklTX0lPU19QRUJCTEUiLCJJU19XRUJPU19XRUJLSVQiLCJJU19OT0RFIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJQcm9taXNlIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJwYXJlbnQiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJyZXNvbHZlIiwibmV4dFRpY2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsImdldE93blByb3BlcnR5U3ltYm9scyIsInVybCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInBhdGhuYW1lIiwidG9KU09OIiwic29ydCIsImhyZWYiLCJVUkxTZWFyY2hQYXJhbXMiLCJ1c2VybmFtZSIsImhvc3QiLCJoYXNoIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsImdsb2JhbElzRmluaXRlIiwiTnVtYmVyIiwidHJpbSIsIndoaXRlc3BhY2VzIiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwidHJpbW1lZFN0cmluZyIsIiRwYXJzZUludCIsInBhcnNlSW50IiwiaGV4IiwicmFkaXgiLCJvYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCIkYXNzaWduIiwiYXNzaWduIiwiQiIsImFscGhhYmV0IiwiY2hyIiwiVCIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiUHJvcGVydGllcyIsIklFOF9ET01fREVGSU5FIiwiJGRlZmluZVByb3BlcnR5IiwiUCIsIkF0dHJpYnV0ZXMiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwibmFtZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIlYiLCJXRUJLSVQiLCJyYW5kb20iLCJfX2RlZmluZVNldHRlcl9fIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJUT19FTlRSSUVTIiwiaW5wdXQiLCJwcmVmIiwidmFsIiwidmFsdWVPZiIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwic2ltcGxlIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwia2V5TWV0YWRhdGEiLCJnZXRNYXAiLCJNZXRhZGF0YUtleSIsIm1ldGFkYXRhTWFwIiwiTWV0YWRhdGFWYWx1ZSIsIl8iLCJ0b0tleSIsIlIiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJVTlNVUFBPUlRFRF9ET1RfQUxMIiwiVU5TVVBQT1JURURfTkNHIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsImxhc3RJbmRleCIsIlVOU1VQUE9SVEVEX1kiLCJCUk9LRU5fQ0FSRVQiLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5IiwiZ3JvdXAiLCJyYXciLCJncm91cHMiLCJzdGlja3kiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsImlnbm9yZUNhc2UiLCJkb3RBbGwiLCIkUmVnRXhwIiwieSIsImlzIiwiVEFHIiwiU0hBUkVEIiwibW9kZSIsImNvcHlyaWdodCIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwic2Vjb25kIiwiY2hhckNvZGVBdCIsImNvZGVBdCIsInJlcGVhdCIsImNlaWwiLCJJU19FTkQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJtYXhJbnQiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiT1ZFUkZMT1dfRVJST1IiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJmcm9tQ2hhckNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiYmFzZSIsImVuY29kZSIsIm91dHB1dCIsImNvdW50ZXIiLCJleHRyYSIsInVjczJkZWNvZGUiLCJjdXJyZW50VmFsdWUiLCJpbnB1dExlbmd0aCIsImJpYXMiLCJiYXNpY0xlbmd0aCIsImhhbmRsZWRDUENvdW50IiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwicSIsInQiLCJxTWludXNUIiwiYmFzZU1pbnVzVCIsImxhYmVsIiwiZW5jb2RlZCIsImxhYmVscyIsIndoaXRlc3BhY2UiLCJsdHJpbSIsInJ0cmltIiwibG9jYXRpb24iLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0Iiwic2V0SW1tZWRpYXRlIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwicXVldWUiLCJydW4iLCJydW5uZXIiLCJsaXN0ZW5lciIsImV2ZW50IiwicG9zdCIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJtYXgiLCJpbnRlZ2VyIiwiaXNOYU4iLCJ0b1Bvc2l0aXZlSW50ZWdlciIsIkJZVEVTIiwiaXNTeW1ib2wiLCJUT19QUklNSVRJVkUiLCJleG90aWNUb1ByaW0iLCJ0b1ByaW1pdGl2ZSIsIlRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMiLCJBcnJheUJ1ZmZlclZpZXdDb3JlIiwiQXJyYXlCdWZmZXJNb2R1bGUiLCJpc0ludGVnZXIiLCJ0b09mZnNldCIsInR5cGVkQXJyYXlGcm9tIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyb3VuZCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiV1JPTkdfTEVOR1RIIiwiZnJvbUxpc3QiLCJpc0FycmF5QnVmZmVyIiwiaXNUeXBlZEFycmF5SW5kZXgiLCJ3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlZERlZmluZVByb3BlcnR5IiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIk5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJnZXR0ZXIiLCJ0eXBlZEFycmF5T2Zmc2V0IiwiJGxlbmd0aCIsIiRsZW4iLCJhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QiLCJ0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yIiwic3BlY2llc0NvbnN0cnVjdG9yIiwicG9zdGZpeCIsIk5BVElWRV9TWU1CT0wiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiJEFnZ3JlZ2F0ZUVycm9yIiwiZXJyb3JzIiwibWVzc2FnZSIsIkVycm9yIiwiZXJyb3JzQXJyYXkiLCJBZ2dyZWdhdGVFcnJvciIsImFycmF5QnVmZmVyTW9kdWxlIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJTUEVDSUVTX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwiRSIsImFkZFRvVW5zY29wYWJsZXMiLCJmaWxsIiwiJGZpbHRlciIsIiRmaW5kSW5kZXgiLCJGSU5EX0lOREVYIiwiU0tJUFNfSE9MRVMiLCIkZmluZCIsIkZJTkQiLCJmbGF0TWFwIiwiZmxhdCIsImRlcHRoQXJnIiwiJGluY2x1ZGVzIiwiJGluZGV4T2YiLCJuYXRpdmVJbmRleE9mIiwiQVJSQVlfSVRFUkFUT1IiLCJBcmd1bWVudHMiLCJuYXRpdmVKb2luIiwiRVMzX1NUUklOR1MiLCJzZXBhcmF0b3IiLCIkbWFwIiwib2YiLCIkcmVkdWNlUmlnaHQiLCJDSFJPTUVfVkVSU0lPTiIsInJlZHVjZVJpZ2h0IiwiJHJlZHVjZSIsInJlZHVjZSIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCJuYXRpdmVTbGljZSIsImZpbiIsImludGVybmFsU29ydCIsIkZGIiwiSUVfT1JfRURHRSIsIlY4IiwibmF0aXZlU29ydCIsIkZBSUxTX09OX1VOREVGSU5FRCIsIkZBSUxTX09OX05VTEwiLCJTVEFCTEVfU09SVCIsImNvZGUiLCJ2IiwiaXRlbXNMZW5ndGgiLCJpdGVtcyIsImFycmF5TGVuZ3RoIiwiZ2V0U29ydENvbXBhcmUiLCJNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEIiwiZGVsZXRlQ291bnQiLCJpbnNlcnRDb3VudCIsImFjdHVhbERlbGV0ZUNvdW50IiwiYWN0dWFsU3RhcnQiLCJkYXRlVG9QcmltaXRpdmUiLCJEYXRlUHJvdG90eXBlIiwiRGF0ZSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsIkpTT04iLCJjb2xsZWN0aW9uU3Ryb25nIiwiaW5pdCIsIiRhY29zaCIsImFjb3NoIiwic3FydCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiTE9HMkUiLCJjbHozMiIsIiRjb3NoIiwiY29zaCIsIiRoeXBvdCIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwiYUxlbiIsImxhcmciLCIkaW11bCIsImltdWwiLCJVSU5UMTYiLCJ4biIsInluIiwieGwiLCJ5bCIsIkxPRzEwRSIsImxvZzEwIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCJOVU1CRVIiLCJOYXRpdmVOdW1iZXIiLCJOdW1iZXJQcm90b3R5cGUiLCJCUk9LRU5fQ0xBU1NPRiIsInRvTnVtYmVyIiwidGhpcmQiLCJtYXhDb2RlIiwiZGlnaXRzIiwiTnVtYmVyV3JhcHBlciIsImlzU2FmZUludGVnZXIiLCJNSU5fU0FGRV9JTlRFR0VSIiwidGhpc051bWJlclZhbHVlIiwibmF0aXZlVG9GaXhlZCIsInRvRml4ZWQiLCJhY2MiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwiZGF0YVRvU3RyaW5nIiwicyIsImZyYWN0aW9uRGlnaXRzIiwiZSIsInoiLCJmcmFjdERpZ2l0cyIsIngyIiwiX19kZWZpbmVHZXR0ZXJfXyIsIiRlbnRyaWVzIiwiJGZyZWV6ZSIsImZyZWV6ZSIsImZyb21FbnRyaWVzIiwib2JqIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJuYXRpdmVHZXRQcm90b3R5cGVPZiIsIiRpc0V4dGVuc2libGUiLCIkaXNGcm96ZW4iLCJpc0Zyb3plbiIsIiRpc1NlYWxlZCIsImlzU2VhbGVkIiwibmF0aXZlS2V5cyIsIl9fbG9va3VwR2V0dGVyX18iLCJkZXNjIiwiX19sb29rdXBTZXR0ZXJfXyIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRzZWFsIiwic2VhbCIsIiR2YWx1ZXMiLCJwYXJzZUZsb2F0SW1wbGVtZW50YXRpb24iLCJwYXJzZUludEltcGxlbWVudGF0aW9uIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiYWxsU2V0dGxlZCIsImNhcGFiaWxpdHkiLCJwcm9taXNlUmVzb2x2ZSIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJzdGF0dXMiLCJyZWFzb24iLCJQUk9NSVNFX0FOWV9FUlJPUiIsImFueSIsImFscmVhZHlSZXNvbHZlZCIsImFscmVhZHlSZWplY3RlZCIsIk5hdGl2ZVByb21pc2UiLCJyZWFsIiwib25GaW5hbGx5IiwiaXNGdW5jdGlvbiIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJtaWNyb3Rhc2siLCJob3N0UmVwb3J0RXJyb3JzIiwiSVNfQlJPV1NFUiIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIk5hdGl2ZVByb21pc2VQcm90b3R5cGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCJQcm9taXNlQ29uc3RydWN0b3JQcm90b3R5cGUiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJESVNQQVRDSF9FVkVOVCIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIk5BVElWRV9SRUpFQ1RJT05fRVZFTlQiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJVTkhBTkRMRURfUkVKRUNUSU9OIiwiU1VCQ0xBU1NJTkciLCJQUk9NSVNFX0NPTlNUUlVDVE9SX1NPVVJDRSIsIkdMT0JBTF9DT1JFX0pTX1BST01JU0UiLCJGYWtlUHJvbWlzZSIsIklOQ09SUkVDVF9JVEVSQVRJT04iLCJhbGwiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJub3RpZmllZCIsImNoYWluIiwicmVhY3Rpb25zIiwib2siLCJleGl0ZWQiLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsImluaXRFdmVudCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJ3cmFwIiwiciIsIiRwcm9taXNlUmVzb2x2ZSIsInJhY2UiLCJuYXRpdmVBcHBseSIsImZ1bmN0aW9uQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwibmF0aXZlQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwiUmVmbGVjdCIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIm9iamVjdEdldFByb3RvdHlwZU9mIiwiaXNEYXRhRGVzY3JpcHRvciIsInJlY2VpdmVyIiwib2JqZWN0SXNFeHRlbnNpYmxlIiwib2JqZWN0UHJldmVudEV4dGVuc2lvbnMiLCJvYmplY3RTZXRQcm90b3R5cGVPZiIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2NyaXB0b3IiLCJnZXRGbGFncyIsIk5hdGl2ZVJlZ0V4cCIsIklTX05DRyIsIkNPUlJFQ1RfTkVXIiwiUmVnRXhwV3JhcHBlciIsInBhdHRlcm4iLCJyYXdGbGFncyIsImhhbmRsZWQiLCJ0aGlzSXNSZWdFeHAiLCJwYXR0ZXJuSXNSZWdFeHAiLCJmbGFnc0FyZVVuZGVmaW5lZCIsInJhd1BhdHRlcm4iLCJuYW1lZCIsImJyYWNrZXRzIiwibmNnIiwiZ3JvdXBpZCIsImdyb3VwbmFtZSIsIlN5bnRheEVycm9yIiwiaGFuZGxlTkNHIiwiaGFuZGxlRG90QWxsIiwicHJveHkiLCJvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZSIsInJlZ0V4cEZsYWdzIiwiJHRvU3RyaW5nIiwiVE9fU1RSSU5HIiwibmF0aXZlVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwicCIsInJmIiwiY3JlYXRlSFRNTCIsImZvcmNlZFN0cmluZ0hUTUxNZXRob2QiLCJhbmNob3IiLCJiaWciLCJibGluayIsImJvbGQiLCJjb2RlUG9pbnRBdCIsIm5vdEFSZWdFeHAiLCJjb3JyZWN0SXNSZWdFeHBMb2dpYyIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMiLCJzZWFyY2hTdHJpbmciLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsImZpeGVkIiwiZm9udGNvbG9yIiwiY29sb3IiLCJmb250c2l6ZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsImVsZW1lbnRzIiwiaXRhbGljcyIsIlNUUklOR19JVEVSQVRPUiIsInBvaW50IiwibGluayIsImdldFJlZ0V4cEZsYWdzIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwiTUFUQ0hfQUxMIiwiUkVHRVhQX1NUUklOR19JVEVSQVRPUiIsIlJFR0VYUF9TVFJJTkciLCJyZWdFeHBCdWlsdGluRXhlYyIsIm5hdGl2ZU1hdGNoQWxsIiwibWF0Y2hBbGwiLCJXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgiLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJmdWxsVW5pY29kZSIsInJlZ0V4cEV4ZWMiLCIkbWF0Y2hBbGwiLCJmbGFnc1ZhbHVlIiwibWF0Y2hlciIsInJ4IiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJuYXRpdmVNYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJlcyIsIm1hdGNoU3RyIiwiJHBhZEVuZCIsInBhZEVuZCIsIiRwYWRTdGFydCIsInBhZFN0YXJ0IiwidGVtcGxhdGUiLCJyYXdUZW1wbGF0ZSIsImxpdGVyYWxTZWdtZW50cyIsImdldFN1YnN0aXR1dGlvbiIsIlJFUExBQ0UiLCJzdHJpbmdJbmRleE9mIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlQWxsIiwicmVwbGFjZVZhbHVlIiwiSVNfUkVHX0VYUCIsInJlcGxhY2VyIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJzZWFyY2hMZW5ndGgiLCJhZHZhbmNlQnkiLCJlbmRPZkxhc3RNYXRjaCIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIlVOU0FGRV9TVUJTVElUVVRFIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwicmVwbGFjZXJBcmdzIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwibmF0aXZlU2VhcmNoIiwic2VhcmNoZXIiLCJwcmV2aW91c0xhc3RJbmRleCIsInNtYWxsIiwiY2FsbFJlZ0V4cEV4ZWMiLCJhcnJheVB1c2giLCJNQVhfVUlOVDMyIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxpbSIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwib3JpZ2luYWxFeGVjIiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwic3RyaWtlIiwic3ViIiwic3VwIiwiJHRyaW1FbmQiLCJmb3JjZWRTdHJpbmdUcmltTWV0aG9kIiwidHJpbUVuZCIsInRyaW1SaWdodCIsIiR0cmltU3RhcnQiLCJ0cmltU3RhcnQiLCJ0cmltTGVmdCIsIiR0cmltIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiTmF0aXZlU3ltYm9sIiwiZGVzY3JpcHRpb24iLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwic3ltYm9sUHJvdG90eXBlIiwic3ltYm9sVG9TdHJpbmciLCJuYXRpdmVTeW1ib2wiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJISURERU4iLCIkc3RyaW5naWZ5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIlFPYmplY3QiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCIkZGVmaW5lUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT0JKRUNUX1BST1RPVFlQRSIsImtleUZvciIsInN5bSIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInN0cmluZ2lmeSIsInNwYWNlIiwiJHJlcGxhY2VyIiwiJGNvcHlXaXRoaW4iLCIkZXZlcnkiLCIkZmlsbCIsImZyb21TcGVjaWVzQW5kTGlzdCIsInByZWRpY2F0ZSIsImNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJuYXRpdmVUeXBlZEFycmF5SXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsInR5cGVkQXJyYXlWYWx1ZXMiLCIkam9pbiIsIiRzbGljZSIsIiRzb21lIiwiQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMiLCJtb2QiLCJleHBlY3RlZCIsImJlZ2luIiwiYmVnaW5JbmRleCIsIiR0b0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiVE9fTE9DQUxFX1NUUklOR19CVUciLCJVaW50OEFycmF5UHJvdG90eXBlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5Sm9pbiIsIklTX05PVF9BUlJBWV9NRVRIT0QiLCJJbnRlcm5hbFdlYWtNYXAiLCJjb2xsZWN0aW9uV2VhayIsImVuZm9yY2VJdGVybmFsU3RhdGUiLCJJU19JRTExIiwiJFdlYWtNYXAiLCJXZWFrTWFwUHJvdG90eXBlIiwibmF0aXZlRGVsZXRlIiwibmF0aXZlSGFzIiwibmF0aXZlR2V0IiwibmF0aXZlU2V0IiwiZ2V0Q29tcG9zaXRlS2V5Tm9kZSIsImNvbXBvc2l0ZUtleSIsImNvbXBvc2l0ZVN5bWJvbCIsImNvbGxlY3Rpb25EZWxldGVBbGwiLCJkZWxldGVBbGwiLCJnZXRNYXBJdGVyYXRvciIsIm5ld01hcCIsImZpbmRLZXkiLCJncm91cEJ5Iiwia2V5RGVyaXZhdGl2ZSIsImRlcml2ZWRLZXkiLCJzYW1lVmFsdWVaZXJvIiwia2V5QnkiLCJrZXlPZiIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJub0luaXRpYWwiLCJhY2N1bXVsYXRvciIsInVwZGF0ZSIsImNhbGxiYWNrIiwiaXNQcmVzZW50SW5NYXAiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJERUdfUEVSX1JBRCIsIlBJIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsImZzY2FsZSIsImlhZGRoIiwieDAiLCJ4MSIsInkwIiwieTEiLCIkeDAiLCIkeTAiLCJpbXVsaCIsInUiLCIkdSIsIiR2IiwidTAiLCJ2MCIsInUxIiwidjEiLCJpc3ViaCIsIm51bWJlcklzRmluaXRlIiwiU0VFREVEX1JBTkRPTV9HRU5FUkFUT1IiLCJTRUVERURfUkFORE9NIiwiJFNlZWRlZFJhbmRvbUdlbmVyYXRvciIsInNlZWQiLCJzZWVkZWRQUk5HIiwic2lnbmJpdCIsInVtdWxoIiwiSU5WQUxJRF9OVU1CRVJfUkVQUkVTRU5UQVRJT04iLCJ2YWxpZCIsImZyb21TdHJpbmciLCJtYXRoTnVtIiwiZ2V0TWV0aG9kIiwiT0JTRVJWQUJMRSIsImNsZWFudXBTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb25TdGF0ZSIsImNsZWFudXAiLCJzdWJzY3JpcHRpb25DbG9zZWQiLCJvYnNlcnZlciIsInN1YnNjcmlwdGlvbiIsImNsb3NlZCIsInN1YnNjcmlwdGlvbk9ic2VydmVyIiwiU3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbk9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCJuZXh0TWV0aG9kIiwiZXJyb3JNZXRob2QiLCJlcnIiLCJjb21wbGV0ZSIsImNvbXBsZXRlTWV0aG9kIiwiJE9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJvYnNlcnZhYmxlTWV0aG9kIiwib2JzZXJ2YWJsZSIsIk9ic2VydmFibGUiLCJSZWZsZWN0TWV0YWRhdGFNb2R1bGUiLCJ0b01ldGFkYXRhS2V5Iiwib3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiZGVsZXRlTWV0YWRhdGEiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib0tleXMiLCJpdGVyIiwicEtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJvcmRpbmFyeUhhc093bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0TWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsImdldE93bk1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlIYXNNZXRhZGF0YSIsImhhc01ldGFkYXRhIiwiaGFzT3duTWV0YWRhdGEiLCJjb2xsZWN0aW9uQWRkQWxsIiwiYWRkQWxsIiwiZGlmZmVyZW5jZSIsIm5ld1NldCIsImdldFNldEl0ZXJhdG9yIiwiaW50ZXJzZWN0aW9uIiwiaGFzQ2hlY2siLCJpc0Rpc2pvaW50RnJvbSIsImlzU3Vic2V0T2YiLCJvdGhlclNldCIsImlzU3VwZXJzZXRPZiIsInNlcCIsInN5bW1ldHJpY0RpZmZlcmVuY2UiLCJ1bmlvbiIsImF0IiwiU3RyaW5nTXVsdGlieXRlTW9kdWxlIiwiJFN0cmluZ0l0ZXJhdG9yIiwiY29kZVBvaW50IiwiY29kZVBvaW50cyIsIkRPTUl0ZXJhYmxlcyIsImhhbmRsZVByb3RvdHlwZSIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJDT0xMRUNUSU9OX05BTUUiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIkFycmF5VmFsdWVzIiwiVVNFX05BVElWRV9VUkwiLCJuYXRpdmVGZXRjaCIsIk5hdGl2ZVJlcXVlc3QiLCJSZXF1ZXN0UHJvdG90eXBlIiwiSGVhZGVycyIsIlVSTF9TRUFSQ0hfUEFSQU1TIiwiVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IiLCJnZXRJbnRlcm5hbFBhcmFtc1N0YXRlIiwicGx1cyIsInNlcXVlbmNlcyIsInBlcmNlbnRTZXF1ZW5jZSIsInBlcmNlbnREZWNvZGUiLCJzZXF1ZW5jZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImRlc2VyaWFsaXplIiwic2VyaWFsaXplIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicGFyc2VTZWFyY2hQYXJhbXMiLCJxdWVyeSIsInNoaWZ0IiwidXBkYXRlU2VhcmNoUGFyYW1zIiwidmFsaWRhdGVBcmd1bWVudHNMZW5ndGgiLCJwYXNzZWQiLCJyZXF1aXJlZCIsIlVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IiLCJlbnRyeUl0ZXJhdG9yIiwiZW50cnlOZXh0IiwidXBkYXRlVVJMIiwiVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlIiwiYXBwZW5kIiwiZ2V0QWxsIiwiZm91bmQiLCJlbnRyaWVzSW5kZXgiLCJzbGljZUluZGV4Iiwid3JhcFJlcXVlc3RPcHRpb25zIiwiaGVhZGVycyIsImJvZHkiLCJmZXRjaCIsIlJlcXVlc3RDb25zdHJ1Y3RvciIsIlJlcXVlc3QiLCJnZXRTdGF0ZSIsIkVPRiIsImFycmF5RnJvbSIsInRvQVNDSUkiLCJVUkxTZWFyY2hQYXJhbXNNb2R1bGUiLCJOYXRpdmVVUkwiLCJnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlIiwiZ2V0SW50ZXJuYWxVUkxTdGF0ZSIsIklOVkFMSURfU0NIRU1FIiwiSU5WQUxJRF9IT1NUIiwiSU5WQUxJRF9QT1JUIiwiQUxQSEEiLCJBTFBIQU5VTUVSSUMiLCJESUdJVCIsIkhFWF9TVEFSVCIsIk9DVCIsIkRFQyIsIkhFWCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UIiwiTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSIsIlRBQl9BTkRfTkVXX0xJTkUiLCJwYXJzZUhvc3QiLCJwYXJzZUlQdjYiLCJpc1NwZWNpYWwiLCJwYXJzZUlQdjQiLCJwZXJjZW50RW5jb2RlIiwiQzBDb250cm9sUGVyY2VudEVuY29kZVNldCIsInBhcnRzTGVuZ3RoIiwibnVtYmVycyIsInBhcnQiLCJpcHY0IiwicGFydHMiLCJwb3AiLCJudW1iZXJzU2VlbiIsImlwdjRQaWVjZSIsInN3YXBzIiwic3dhcCIsImFkZHJlc3MiLCJwaWVjZUluZGV4IiwiY29tcHJlc3MiLCJwb2ludGVyIiwic2VyaWFsaXplSG9zdCIsImlnbm9yZTAiLCJ1bnNoaWZ0IiwiaXB2NiIsIm1heEluZGV4IiwiY3VyclN0YXJ0IiwiY3Vyckxlbmd0aCIsImZpbmRMb25nZXN0WmVyb1NlcXVlbmNlIiwiZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0IiwicGF0aFBlcmNlbnRFbmNvZGVTZXQiLCJ1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQiLCJzcGVjaWFsU2NoZW1lcyIsImZ0cCIsImZpbGUiLCJodHRwIiwiaHR0cHMiLCJ3cyIsIndzcyIsInNjaGVtZSIsImluY2x1ZGVzQ3JlZGVudGlhbHMiLCJwYXNzd29yZCIsImNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCIsImNhbm5vdEJlQUJhc2VVUkwiLCJpc1dpbmRvd3NEcml2ZUxldHRlciIsIm5vcm1hbGl6ZWQiLCJzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyIiwic2hvcnRlblVSTHNQYXRoIiwicGF0aFNpemUiLCJpc1NpbmdsZURvdCIsInNlZ21lbnQiLCJTQ0hFTUVfU1RBUlQiLCJTQ0hFTUUiLCJOT19TQ0hFTUUiLCJTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWSIsIlBBVEhfT1JfQVVUSE9SSVRZIiwiUkVMQVRJVkUiLCJSRUxBVElWRV9TTEFTSCIsIlNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVMiLCJTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUyIsIkFVVEhPUklUWSIsIkhPU1QiLCJIT1NUTkFNRSIsIlBPUlQiLCJGSUxFIiwiRklMRV9TTEFTSCIsIkZJTEVfSE9TVCIsIlBBVEhfU1RBUlQiLCJQQVRIIiwiQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSCIsIlFVRVJZIiwiRlJBR01FTlQiLCJwYXJzZVVSTCIsInN0YXRlT3ZlcnJpZGUiLCJidWZmZXJDb2RlUG9pbnRzIiwiZmFpbHVyZSIsInNlZW5BdCIsInNlZW5CcmFja2V0Iiwic2VlblBhc3N3b3JkVG9rZW4iLCJmcmFnbWVudCIsImVuY29kZWRDb2RlUG9pbnRzIiwiVVJMQ29uc3RydWN0b3IiLCJiYXNlU3RhdGUiLCJ1cmxTdHJpbmciLCJzZWFyY2hQYXJhbXNTdGF0ZSIsInNlcmlhbGl6ZVVSTCIsIm9yaWdpbiIsImdldE9yaWdpbiIsImdldFByb3RvY29sIiwiZ2V0VXNlcm5hbWUiLCJnZXRQYXNzd29yZCIsImdldEhvc3QiLCJob3N0bmFtZSIsImdldEhvc3RuYW1lIiwiZ2V0UG9ydCIsImdldFBhdGhuYW1lIiwiZ2V0U2VhcmNoIiwiZ2V0U2VhcmNoUGFyYW1zIiwiZ2V0SGFzaCIsIlVSTFByb3RvdHlwZSIsImFjY2Vzc29yRGVzY3JpcHRvciIsIm5hdGl2ZUNyZWF0ZU9iamVjdFVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIm5hdGl2ZVJldm9rZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsImJsb2IiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJpdGVtIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImFycjIiLCJfaXRlbSIsIl9hcnJheVdpdGhIb2xlcyIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJsIiwiZCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwicmVmcyIsInF1ZXJ5U2VsZWN0b3IiLCJwYXJlbnROb2RlIiwiaCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjaGlsZE5vZGVzIiwiaW5zZXJ0QmVmb3JlIiwic2V0QXR0cmlidXRlIiwic3NySWQiLCJmaXJzdENoaWxkIiwiREVCVUciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm5hdmlnYXRvciIsInJlbmRlciIsInN0YXRpY1JlbmRlckZucyIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsIiR2bm9kZSIsInNzckNvbnRleHQiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiX3NzclJlZ2lzdGVyIiwiYmVmb3JlQ3JlYXRlIiwiX2luamVjdFN0eWxlcyIsImVzTW9kdWxlIiwiaHNsIiwiaHN2IiwicmdiYSIsInJnYiIsIl9hIiwic2V0QWxwaGEiLCJ0b0hzbCIsInRvSHN2IiwidG9IZXhTdHJpbmciLCJ0b1VwcGVyQ2FzZSIsImhleDgiLCJ0b0hleDhTdHJpbmciLCJ0b1JnYiIsIm9sZEh1ZSIsImdldEFscGhhIiwicHJvcHMiLCJjb21wdXRlZCIsImNvbG9ycyIsIiRlbWl0Iiwid2F0Y2giLCJjb2xvckNoYW5nZSIsImlzVmFsaWRIZXgiLCJpc1ZhbGlkIiwic2ltcGxlQ2hlY2tGb3JWYWxpZENvbG9yIiwicGFsZXR0ZVVwcGVyQ2FzZSIsImlzVHJhbnNwYXJlbnQiLCJfX2ciLCJfX2ZpbGUiLCJfX2UiLCJtaXhpbnMiLCJwYWxldHRlIiwiY29tcG9uZW50cyIsInBpY2siLCJoYW5kbGVyQ2xpY2siLCJsYWJlbFRleHQiLCJhcnJvd09mZnNldCIsIiRyZWZzIiwibGFiZWxJZCIsImxhYmVsU3BhblRleHQiLCJoYW5kbGVDaGFuZ2UiLCJoYW5kbGVLZXlEb3duIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0Iiwib25DaGFuZ2UiLCJzd2F0Y2hlcyIsImh1ZSIsIm5vcm1hbGl6ZWRTd2F0Y2hlcyIsImlzQWN0aXZlIiwiaHVlQ2hhbmdlIiwiaGFuZGxlU3dDbGljayIsInciLCJHIiwiVyIsInZpcnR1YWwiLCJVIiwiZGlyZWN0aW9uIiwicHVsbERpcmVjdGlvbiIsImRpcmVjdGlvbkNsYXNzIiwicG9pbnRlclRvcCIsInBvaW50ZXJMZWZ0IiwiY29udGFpbmVyIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWE9mZnNldCIsInRvcCIsInBhZ2VZT2Zmc2V0IiwicGFnZVgiLCJ0b3VjaGVzIiwicGFnZVkiLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVNb3VzZVVwIiwidW5iaW5kRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXF1YWwiLCJkaXNhYmxlRmllbGRzIiwiaGFzUmVzZXRCdXR0b24iLCJhY2NlcHRMYWJlbCIsImNhbmNlbExhYmVsIiwicmVzZXRMYWJlbCIsIm5ld0xhYmVsIiwiY3VycmVudExhYmVsIiwic2F0dXJhdGlvbiIsImFscGhhIiwiY3VycmVudENvbG9yIiwiY3JlYXRlZCIsImNoaWxkQ2hhbmdlIiwiaW5wdXRDaGFuZ2UiLCJjbGlja0N1cnJlbnRDb2xvciIsImhhbmRsZUFjY2VwdCIsImhhbmRsZUNhbmNlbCIsImhhbmRsZVJlc2V0IiwiYmdDb2xvciIsInRocm90dGxlIiwibGVhZGluZyIsInRyYWlsaW5nIiwiY2hlY2tib2FyZCIsImdyYWRpZW50Q29sb3IiLCJ3aWR0aCIsImhlaWdodCIsImdldENvbnRleHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInRyYW5zbGF0ZSIsInRvRGF0YVVSTCIsIndoaXRlIiwiZ3JleSIsImJnU3R5bGUiLCJwcmVzZXRDb2xvcnMiLCJkaXNhYmxlQWxwaGEiLCJhY3RpdmVDb2xvciIsImhhbmRsZVByZXNldCIsImZpZWxkc0luZGV4IiwiaGlnaGxpZ2h0IiwiaGFzQWxwaGEiLCJ0b2dnbGVWaWV3cyIsInNob3dIaWdobGlnaHQiLCJoaWRlSGlnaGxpZ2h0IiwiZWRpdGFibGVJbnB1dCIsImRlZmF1bHRDb2xvcnMiLCJ0cmlhbmdsZSIsInZhbGlkYXRvciIsIkNvbXBhY3QiLCJHcmF5c2NhbGUiLCJUd2l0dGVyIiwiTWF0ZXJpYWwiLCJTbGlkZXIiLCJTd2F0Y2hlcyIsIlBob3Rvc2hvcCIsIlNrZXRjaCIsIkNocm9tZSIsIkFscGhhIiwiQ2hlY2tib2FyZCIsIkVkaXRhYmxlSW5wdXQiLCJIdWUiLCJTYXR1cmF0aW9uIiwiQ29sb3JNaXhpbiIsImxvY2FscyIsIkkiLCJmb3JtYXQiLCJKIiwiaHNsYSIsImhzdmEiLCJoZXg2IiwiaGV4NCIsImhleDMiLCJOIiwiSCIsInN1YnN0ciIsIkQiLCJfb3JpZ2luYWxJbnB1dCIsIl9yIiwiX2ciLCJfYiIsIl9yb3VuZEEiLCJfZm9ybWF0IiwiX2dyYWRpZW50VHlwZSIsImdyYWRpZW50VHlwZSIsIl9vayIsIl90Y19pZCIsIk0iLCJkZXNhdHVyYXRlIiwiTCIsIkNTU19VTklUIiwiWCIsImlzRGFyayIsImdldEJyaWdodG5lc3MiLCJpc0xpZ2h0IiwiZ2V0T3JpZ2luYWxJbnB1dCIsImdldEZvcm1hdCIsImdldEx1bWluYW5jZSIsInRvSHN2U3RyaW5nIiwidG9Ic2xTdHJpbmciLCJ0b0hleCIsInRvSGV4OCIsInRvUmdiU3RyaW5nIiwidG9QZXJjZW50YWdlUmdiIiwidG9QZXJjZW50YWdlUmdiU3RyaW5nIiwidG9OYW1lIiwiWSIsInRvRmlsdGVyIiwiY2xvbmUiLCJfYXBwbHlNb2RpZmljYXRpb24iLCJsaWdodGVuIiwiYnJpZ2h0ZW4iLCJkYXJrZW4iLCJzYXR1cmF0ZSIsImdyZXlzY2FsZSIsInNwaW4iLCJfYXBwbHlDb21iaW5hdGlvbiIsImFuYWxvZ291cyIsImNvbXBsZW1lbnQiLCJtb25vY2hyb21hdGljIiwic3BsaXRjb21wbGVtZW50IiwidHJpYWQiLCJ0ZXRyYWQiLCJmcm9tUmF0aW8iLCJlcXVhbHMiLCJtaXgiLCJyZWFkYWJpbGl0eSIsImlzUmVhZGFibGUiLCJsZXZlbCIsIm1vc3RSZWFkYWJsZSIsImluY2x1ZGVGYWxsYmFja0NvbG9ycyIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiYnVybnRzaWVubmEiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJoZXhOYW1lcyIsIiRjcmVhdGVFbGVtZW50IiwiX3NlbGYiLCJfYyIsInN0YXRpY0NsYXNzIiwiZGlyZWN0aXZlcyIsInJhd05hbWUiLCJleHByZXNzaW9uIiwicmVmIiwiYXR0cnMiLCJkb21Qcm9wcyIsIm9uIiwia2V5ZG93biIsImNvbXBvc2luZyIsIl92IiwiZm9yIiwiX3dpdGhTdHJpcHBlZCIsInJvbGUiLCJfbCIsImNsYXNzIiwiYmFja2dyb3VuZCIsImNsaWNrIiwiYm9yZGVyQ29sb3IiLCJjaGFuZ2UiLCJtb2RlbCIsIiRzZXQiLCJfdCIsImRvY3VtZW50RWxlbWVudCIsIl9rIiwiWiIsIlEiLCJlZSIsInRlIiwibmUiLCJpZSIsIm9lIiwiYWUiLCJORUVEIiwiZ2V0V2VhayIsIm1vdXNlZG93biIsInRvdWNobW92ZSIsInRvdWNoc3RhcnQiLCJhMTAwIiwiYTIwMCIsImE0MDAiLCJhNzAwIiwicHJpbWFyeSIsInNlY29uZGFyeSIsImRpc2FibGVkIiwiZGl2aWRlcnMiLCJpbmFjdGl2ZSIsImRlZXBQdXJwbGUiLCJsaWdodEJsdWUiLCJsaWdodEdyZWVuIiwiYW1iZXIiLCJkZWVwT3JhbmdlIiwiYmx1ZUdyZXkiLCJkYXJrVGV4dCIsImxpZ2h0VGV4dCIsImRhcmtJY29ucyIsImxpZ2h0SWNvbnMiLCJzdGF0aWNTdHlsZSIsInZpZXdCb3giLCJtYXhXYWl0IiwiY2FuY2VsIiwiY2xlYXJUaW1lb3V0IiwibW91c2VvdmVyIiwibW91c2VlbnRlciIsIm1vdXNlb3V0IiwiYm94U2hhZG93IiwibGlzdFRvU3R5bGVzIiwicGFyZW50SWQiLCJzdHlsZXMiLCJuZXdTdHlsZXMiLCJoYXNEb2N1bWVudCIsInN0eWxlc0luRG9tIiwic2luZ2xldG9uRWxlbWVudCIsInNpbmdsZXRvbkNvdW50ZXIiLCJpc1Byb2R1Y3Rpb24iLCJub29wIiwic3NySWRLZXkiLCJpc09sZElFIiwiYWRkU3R5bGVzQ2xpZW50IiwiX2lzUHJvZHVjdGlvbiIsIl9vcHRpb25zIiwiYWRkU3R5bGVzVG9Eb20iLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiZG9tU3R5bGUiLCJhZGRTdHlsZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInN0eWxlRWxlbWVudCIsInJlbW92ZSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwiY3NzTm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwicHJvcCIsInRvU3RyaW5nVGFnIiwiZW1wdHlPYmplY3QiLCJpc1VuZGVmIiwiaXNEZWYiLCJpc1RydWUiLCJpc1ByaW1pdGl2ZSIsIl90b1N0cmluZyIsImlzUGxhaW5PYmplY3QiLCJpc1ZhbGlkQXJyYXlJbmRleCIsImlzUHJvbWlzZSIsImNhdGNoIiwibWFrZU1hcCIsImV4cGVjdHNMb3dlckNhc2UiLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwiY2FjaGVkIiwiY2FjaGUiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJjYXBpdGFsaXplIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJjdHgiLCJib3VuZEZuIiwiX2xlbmd0aCIsInRvQXJyYXkiLCJyZXQiLCJleHRlbmQiLCJfZnJvbSIsIm5vIiwiaWRlbnRpdHkiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImdldFRpbWUiLCJrZXlzQSIsImtleXNCIiwibG9vc2VJbmRleE9mIiwib25jZSIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJjb25maWciLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsImFzeW5jIiwiX2xpZmVjeWNsZUhvb2tzIiwiZGVmIiwiX2lzU2VydmVyIiwiYmFpbFJFIiwiaGFzUHJvdG8iLCJpbkJyb3dzZXIiLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsImlzRkYiLCJuYXRpdmVXYXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJpc1NlcnZlclJlbmRlcmluZyIsImVudiIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIndhcm4iLCJEZXAiLCJzdWJzIiwiYWRkU3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwiVk5vZGUiLCJjaGlsZHJlbiIsInRleHQiLCJlbG0iLCJjb250ZXh0IiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJjcmVhdGVFbXB0eVZOb2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsImluc2VydGVkIiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50IiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwiYXNSb290RGF0YSIsIl9pc1Z1ZSIsImRlZmluZVJlYWN0aXZlJCQxIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImNoaWxkT2IiLCJkZXBlbmRBcnJheSIsIm5ld1ZhbCIsImRlbCIsInN0cmF0cyIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsInZtIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJob29rcyIsImRlZHVwZUhvb2tzIiwibWVyZ2VBc3NldHMiLCJob29rIiwia2V5JDEiLCJpbmplY3QiLCJwcm92aWRlIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VPcHRpb25zIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVJbmplY3QiLCJkaXJzIiwiZGVmJCQxIiwibm9ybWFsaXplRGlyZWN0aXZlcyIsIl9iYXNlIiwiZXh0ZW5kcyIsIm1lcmdlRmllbGQiLCJzdHJhdCIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsInByb3BzRGF0YSIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiJG9wdGlvbnMiLCJfcHJvcHMiLCJnZXRUeXBlIiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwiZnVuY3Rpb25UeXBlQ2hlY2tSRSIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaGFuZGxlRXJyb3IiLCJpbmZvIiwiY3VyIiwiJHBhcmVudCIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiX2hhbmRsZWQiLCJsb2dFcnJvciIsInRpbWVyRnVuYyIsImlzVXNpbmdNaWNyb1Rhc2siLCJjYWxsYmFja3MiLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJ0ZXh0Tm9kZSIsImNiIiwiX3Jlc29sdmUiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJwYXNzaXZlIiwib25jZSQkMSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJjaGVja1Byb3AiLCJhbHRLZXkiLCJwcmVzZXJ2ZSIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsIl9pc1ZMaXN0IiwicmVzb2x2ZUluamVjdCIsInByb3ZpZGVLZXkiLCJfcHJvdmlkZWQiLCJwcm92aWRlRGVmYXVsdCIsInJlc29sdmVTbG90cyIsInNsb3RzIiwic2xvdCIsIm5hbWUkMSIsImlzV2hpdGVzcGFjZSIsIm5vcm1hbGl6ZVNjb3BlZFNsb3RzIiwibm9ybWFsU2xvdHMiLCJwcmV2U2xvdHMiLCJoYXNOb3JtYWxTbG90cyIsImlzU3RhYmxlIiwiJHN0YWJsZSIsIiRrZXkiLCJfbm9ybWFsaXplZCIsIiRoYXNOb3JtYWwiLCJub3JtYWxpemVTY29wZWRTbG90Iiwia2V5JDIiLCJwcm94eU5vcm1hbFNsb3QiLCJyZW5kZXJMaXN0IiwicmVuZGVyU2xvdCIsImZhbGxiYWNrUmVuZGVyIiwiYmluZE9iamVjdCIsIm5vZGVzIiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwiJHNsb3RzIiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJsb29wIiwiY2FtZWxpemVkS2V5IiwiaHlwaGVuYXRlZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJ0cmVlIiwibWFya1N0YXRpYyIsIl9yZW5kZXJQcm94eSIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJwcmVwZW5kTW9kaWZpZXIiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX3EiLCJfbSIsIl9mIiwiX3UiLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwidGhpcyQxIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwibGlzdGVuZXJzIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsInJlbmRlckNvbnRleHQiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJvbGRMaXN0ZW5lcnMiLCJfcGFyZW50TGlzdGVuZXJzIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJpbnNlcnQiLCJfaXNNb3VudGVkIiwiY2FsbEhvb2siLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiJGRlc3Ryb3kiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsImNpZCIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwic3luYyIsInRpbWVyTG9hZGluZyIsInRpbWVyVGltZW91dCIsIiRvbiIsImZvcmNlUmVuZGVyIiwicmVuZGVyQ29tcGxldGVkIiwiZW5zdXJlQ3RvciIsImNvbXBvbmVudCIsImRlbGF5IiwidGltZW91dCIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwidHJhbnNmb3JtTW9kZWwiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwidm5vZGVzIiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm5hdGl2ZU9uIiwiYWJzdHJhY3QiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayQxIiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiZjEiLCJmMiIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJwcmUiLCJhcHBseU5TIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJfY3JlYXRlRWxlbWVudCIsImZvcmNlIiwiY29tcCIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCJkaXJlY3QiLCJfZGlyZWN0SW5hY3RpdmUiLCIkY2hpbGRyZW4iLCJoYW5kbGVycyIsIl9oYXNIb29rRXZlbnQiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsImJlZm9yZSIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiX3dhdGNoZXIiLCJjYWxsVXBkYXRlZEhvb2tzIiwidWlkJDIiLCJXYXRjaGVyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsIl93YXRjaGVycyIsImRlZXAiLCJ1c2VyIiwibGF6eSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJzZWdtZW50cyIsInBhcnNlUGF0aCIsImNsZWFudXBEZXBzIiwidG1wIiwicXVldWVXYXRjaGVyIiwib2xkVmFsdWUiLCJldmFsdWF0ZSIsInRlYXJkb3duIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwiZGVmaW5lQ29tcHV0ZWQiLCJ1c2VyRGVmIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCJfY29tcHV0ZWRXYXRjaGVycyIsImNyZWF0ZVdhdGNoZXIiLCIkd2F0Y2giLCJ1aWQkMyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJWdWUiLCJfaW5pdCIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiJHJvb3QiLCJpbml0TGlmZWN5Y2xlIiwiX2V2ZW50cyIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwicHJvcHNPcHRpb25zIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJpbml0RGF0YSIsIndhdGNoZXJzIiwiaXNTU1IiLCJpbml0Q29tcHV0ZWQiLCJpbml0V2F0Y2giLCJpbml0U3RhdGUiLCJpbml0UHJvdmlkZSIsImluaXRNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJzdGF0ZU1peGluIiwiaG9va1JFIiwiJG9uY2UiLCJpJDEiLCJjYnMiLCJldmVudHNNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwibGlmZWN5Y2xlTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVuZGVyTWl4aW4iLCJwYXR0ZXJuVHlwZXMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsImNhY2hlVk5vZGUiLCJ2bm9kZVRvQ2FjaGUiLCJrZXlUb0NhY2hlIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInVwZGF0ZWQiLCJidWlsdEluQ29tcG9uZW50cyIsImNvbmZpZ0RlZiIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImRlbGV0ZSIsInVzZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsImluc3RhbGwiLCJpbml0VXNlIiwibWl4aW4iLCJpbml0TWl4aW4kMSIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJDb21wIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsImluaXRFeHRlbmQiLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwiYWNjZXB0VmFsdWUiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiaXNGYWxzeUF0dHJWYWx1ZSIsIm1lcmdlQ2xhc3NEYXRhIiwic3RyaW5naWZ5Q2xhc3MiLCJzdHJpbmdpZmllZCIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0IiwibmFtZXNwYWNlTWFwIiwic3ZnIiwibWF0aCIsImlzSFRNTFRhZyIsImlzU1ZHIiwidW5rbm93bkVsZW1lbnRDYWNoZSIsImlzVGV4dElucHV0VHlwZSIsIm5vZGVPcHMiLCJ0YWdOYW1lIiwibXVsdGlwbGUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVDb21tZW50IiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwic2NvcGVJZCIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiZGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJvbGRBcmciLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJpc0luUHJlIiwiYmFzZVNldEF0dHIiLCJjb252ZXJ0RW51bWVyYXRlZFZhbHVlIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwiY2hpbGROb2RlIiwiZHluYW1pY0NsYXNzIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJ0YXJnZXQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwiZXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiaW5uZXJIVE1MIiwiY2hlY2tWYWwiLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJiaW5kaW5nU3R5bGUiLCJlbXB0eVN0eWxlIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJhZGRDbGFzcyIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsIm5vZGVUeXBlIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsInJtIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBhdGNoIiwiYmFja2VuZCIsInJlbW92ZU5vZGUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJpbm5lck5vZGUiLCJhY3RpdmF0ZSIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJyZWYkJDEiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJvbGRFbG0iLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsInNlbGVjdGVkIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImxvY2F0ZU5vZGUiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwidW5iaW5kIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvblByb3BzIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsInJhd0NoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsIl9sZWF2aW5nIiwib2xkUmF3Q2hpbGQiLCJvbGRDaGlsZCIsImlzU2FtZUNoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiVHJhbnNpdGlvbkdyb3VwIiwiYmVmb3JlTW91bnQiLCJrZXB0IiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsImMkMSIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsIm5ld1BvcyIsIm9sZFBvcyIsImR4IiwiZHkiLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJhdHRyIiwiSFRNTFVua25vd25FbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJtb3VudENvbXBvbmVudCIsImRldnRvb2xIb29rIiwiZGVlcENvcHkiLCJoaXQiLCJjb3B5IiwiZm9yRWFjaFZhbHVlIiwiTW9kdWxlIiwicmF3TW9kdWxlIiwicnVudGltZSIsIl9jaGlsZHJlbiIsIl9yYXdNb2R1bGUiLCJyYXdTdGF0ZSIsIm5hbWVzcGFjZWQiLCJhZGRDaGlsZCIsImdldENoaWxkIiwiaGFzQ2hpbGQiLCJhY3Rpb25zIiwibXV0YXRpb25zIiwiZ2V0dGVycyIsImZvckVhY2hDaGlsZCIsImZvckVhY2hHZXR0ZXIiLCJmb3JFYWNoQWN0aW9uIiwiZm9yRWFjaE11dGF0aW9uIiwiTW9kdWxlQ29sbGVjdGlvbiIsInJhd1Jvb3RNb2R1bGUiLCJyZWdpc3RlciIsInRhcmdldE1vZHVsZSIsIm5ld01vZHVsZSIsImdldE5hbWVzcGFjZSIsInJhd0NoaWxkTW9kdWxlIiwidW5yZWdpc3RlciIsImlzUmVnaXN0ZXJlZCIsIlN0b3JlIiwicGx1Z2lucyIsInN0cmljdCIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl93YXRjaGVyVk0iLCJfbWFrZUxvY2FsR2V0dGVyc0NhY2hlIiwiZGlzcGF0Y2giLCJjb21taXQiLCJwYXlsb2FkIiwiaW5zdGFsbE1vZHVsZSIsInJlc2V0U3RvcmVWTSIsIl9kZXZ0b29sSG9vayIsInRhcmdldFN0YXRlIiwicmVwbGFjZVN0YXRlIiwibXV0YXRpb24iLCJwcmVwZW5kIiwic3Vic2NyaWJlQWN0aW9uIiwiYWN0aW9uIiwiZGV2dG9vbFBsdWdpbiIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwiZ2VuZXJpY1N1YnNjcmliZSIsInJlc2V0U3RvcmUiLCJob3QiLCJvbGRWbSIsIl92bSIsIndyYXBwZWRHZXR0ZXJzIiwicGFydGlhbCIsIiQkc3RhdGUiLCJlbmFibGVTdHJpY3RNb2RlIiwiX3dpdGhDb21taXQiLCJyb290U3RhdGUiLCJpc1Jvb3QiLCJwYXJlbnRTdGF0ZSIsImdldE5lc3RlZFN0YXRlIiwibW9kdWxlTmFtZSIsImxvY2FsIiwibm9OYW1lc3BhY2UiLCJfdHlwZSIsIl9wYXlsb2FkIiwidW5pZnlPYmplY3RTdHlsZSIsImdldHRlcnNQcm94eSIsInNwbGl0UG9zIiwibG9jYWxUeXBlIiwibWFrZUxvY2FsR2V0dGVycyIsIm1ha2VMb2NhbENvbnRleHQiLCJyZWdpc3Rlck11dGF0aW9uIiwicm9vdEdldHRlcnMiLCJyZWdpc3RlckFjdGlvbiIsInJhd0dldHRlciIsInJlZ2lzdGVyR2V0dGVyIiwiX1Z1ZSIsInZ1ZXhJbml0IiwiJHN0b3JlIiwiYXBwbHlNaXhpbiIsImFmdGVyIiwicmVnaXN0ZXJNb2R1bGUiLCJwcmVzZXJ2ZVN0YXRlIiwidW5yZWdpc3Rlck1vZHVsZSIsImhhc01vZHVsZSIsImhvdFVwZGF0ZSIsIm5ld09wdGlvbnMiLCJjb21taXR0aW5nIiwibWFwU3RhdGUiLCJub3JtYWxpemVOYW1lc3BhY2UiLCJzdGF0ZXMiLCJub3JtYWxpemVNYXAiLCJnZXRNb2R1bGVCeU5hbWVzcGFjZSIsInZ1ZXgiLCJtYXBNdXRhdGlvbnMiLCJtYXBHZXR0ZXJzIiwibWFwQWN0aW9ucyIsImlzVmFsaWRNYXAiLCJoZWxwZXIiLCJzdGFydE1lc3NhZ2UiLCJsb2dnZXIiLCJjb2xsYXBzZWQiLCJncm91cENvbGxhcHNlZCIsImVuZE1lc3NhZ2UiLCJncm91cEVuZCIsImdldEZvcm1hdHRlZFRpbWUiLCJ0aW1lIiwicGFkIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIm51bSIsInRpbWVzIiwiY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMiLCJjcmVhdGVMb2dnZXIiLCJzdGF0ZUJlZm9yZSIsInN0YXRlQWZ0ZXIiLCJ0cmFuc2Zvcm1lciIsIm11dGF0aW9uVHJhbnNmb3JtZXIiLCJtdXQiLCJhY3Rpb25GaWx0ZXIiLCJhY3Rpb25UcmFuc2Zvcm1lciIsImFjdCIsImxvZ011dGF0aW9ucyIsImxvZ0FjdGlvbnMiLCJwcmV2U3RhdGUiLCJuZXh0U3RhdGUiLCJmb3JtYXR0ZWRUaW1lIiwiZm9ybWF0dGVkTXV0YXRpb24iLCJmb3JtYXR0ZWRBY3Rpb24iLCJJTklUSUFMX1NUQVRFIiwiY29sb3IwIiwiY29sb3IxIiwiY29sb3IyIiwiY29sb3IzIiwidXBkYXRlQ29sb3IiLCJyZXNldENvbG9ycyIsInJlc29sdXRpb24iLCJzZXRXaWR0aCIsInNldEhlaWdodCIsInNldFJlc29sdXRpb24iLCJyZXNldERpbWVuc2lvbnMiLCJjb2xzIiwicm93cyIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJtaW5IZWlnaHQiLCJtYXhIZWlnaHQiLCJtaW5SZXNvbHV0aW9uIiwibWF4UmVzb2x1dGlvbiIsImJhc2VTYW5kIiwic3RhcnRpbmdTYW5kIiwic2V0QmFzZVNhbmQiLCJhbW91bnQiLCJzZXRTdGFydGluZ1NhbmQiLCJyZXNldFNhbmQiLCJzZXRTYW5kIiwic2FuZCIsInVwZGF0ZVNhbmQiLCJpZHgiLCJzYW5kVG90YWwiLCJWdWV4IiwiY2FudmFzIiwiaGVhdG1hcCIsIm5vcm1hbGl6ZUNvbXBvbmVudCIsInNjcmlwdEV4cG9ydHMiLCJmdW5jdGlvbmFsVGVtcGxhdGUiLCJpbmplY3RTdHlsZXMiLCJtb2R1bGVJZGVudGlmaWVyIiwic2hhZG93TW9kZSIsInNoYWRvd1Jvb3QiLCJvcmlnaW5hbFJlbmRlciIsIl9oIiwiaWNvbiIsImNvb3JkVG9QaXhlbCIsInBpeGVsVG9Db29yZCIsInBpeGVsIiwibGVnZW5kIiwiYmFja2dyb3VuZENvbG9yIiwicG9wdXBUaXRsZSIsImNob29zZSIsIkJ1dHRvbkNvbG9yUGlja2VyIiwiQ29udHJvbEdyb3VwIiwiQnV0dG9uVG9nZ2xlIiwiQ2FudmFzUm9vdCIsIkNhbnZhc0dyaWRIZWF0TWFwIiwiQ29udHJvbEdyb3VwU2FuZCIsIkNvbnRyb2xHcm91cEhlYXRtYXAiLCJDb250cm9sR3JvdXBDYW52YXMiLCJNZW51Q29sbGFwc2libGUiLCJpbnRlcmFjdGluZyIsImludGVyYWN0aW5nWCIsImludGVyYWN0aW5nWSIsImludGVyYWN0aW5nQW1vdW50IiwiZG9Mb29wIiwiY29uc3RyYWluQ2FudmFzIiwic2V0SW50ZXJhY3RpbmciLCJ1cGRhdGVJbnRlcmFjdGluZyIsInJlc2V0Iiwib3B0aW1pc2VDYW52YXMiLCJvblJlc2l6ZSIsIiRfc2V0VXAiLCIkX3VwZGF0ZSIsIiRfdG9wcGxlIiwiZ3JhaW5zIiwibmV4dFNhbmQiLCJzaWJsaW5nSWR4IiwiJF9sb29wIiwiYmVmb3JlRGVzdHJveSIsImJ1dHRvbiIsIk1haW5BcHAiXSwic291cmNlUm9vdCI6IiJ9