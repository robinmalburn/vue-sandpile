!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=40)}([function(t,e,n){"use strict";function r(t,e,n,r,i,o,a,s){var c,l="function"==typeof t?t.options:t;if(e&&(l.render=e,l.staticRenderFns=n,l._compiled=!0),r&&(l.functional=!0),o&&(l._scopeId="data-v-"+o),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},l._ssrRegister=c):i&&(c=s?function(){i.call(this,this.$root.$options.shadowRoot)}:i),c)if(l.functional){l._injectStyles=c;var u=l.render;l.render=function(t,e){return c.call(e),u(t,e)}}else{var f=l.beforeCreate;l.beforeCreate=f?[].concat(f,c):[c]}return{exports:t,options:l}}n.d(e,"a",(function(){return r}))},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map((function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"}));return[n].concat(o).concat([i]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){"use strict";n.r(e),n.d(e,"Store",(function(){return l})),n.d(e,"install",(function(){return m})),n.d(e,"mapState",(function(){return b})),n.d(e,"mapMutations",(function(){return _})),n.d(e,"mapGetters",(function(){return y})),n.d(e,"mapActions",(function(){return x})),n.d(e,"createNamespacedHelpers",(function(){return w}));
/**
 * vuex v3.0.1
 * (c) 2017 Evan You
 * @license MIT
 */
var r="undefined"!=typeof window&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function i(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}var o=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"==typeof n?n():n)||{}},a={namespaced:{configurable:!0}};a.namespaced.get=function(){return!!this._rawModule.namespaced},o.prototype.addChild=function(t,e){this._children[t]=e},o.prototype.removeChild=function(t){delete this._children[t]},o.prototype.getChild=function(t){return this._children[t]},o.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},o.prototype.forEachChild=function(t){i(this._children,t)},o.prototype.forEachGetter=function(t){this._rawModule.getters&&i(this._rawModule.getters,t)},o.prototype.forEachAction=function(t){this._rawModule.actions&&i(this._rawModule.actions,t)},o.prototype.forEachMutation=function(t){this._rawModule.mutations&&i(this._rawModule.mutations,t)},Object.defineProperties(o.prototype,a);var s=function(t){this.register([],t,!1)};s.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},s.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return t+((e=e.getChild(n)).namespaced?n+"/":"")}),"")},s.prototype.update=function(t){!function t(e,n,r){0;if(n.update(r),r.modules)for(var i in r.modules){if(!n.getChild(i))return void 0;t(e.concat(i),n.getChild(i),r.modules[i])}}([],this.root,t)},s.prototype.register=function(t,e,n){var r=this;void 0===n&&(n=!0);var a=new o(e,n);0===t.length?this.root=a:this.get(t.slice(0,-1)).addChild(t[t.length-1],a);e.modules&&i(e.modules,(function(e,i){r.register(t.concat(i),e,n)}))},s.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];e.getChild(n).runtime&&e.removeChild(n)};var c;var l=function(t){var e=this;void 0===t&&(t={}),!c&&"undefined"!=typeof window&&window.Vue&&m(window.Vue);var n=t.plugins;void 0===n&&(n=[]);var i=t.strict;void 0===i&&(i=!1);var o=t.state;void 0===o&&(o={}),"function"==typeof o&&(o=o()||{}),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new s(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new c;var a=this,l=this.dispatch,u=this.commit;this.dispatch=function(t,e){return l.call(a,t,e)},this.commit=function(t,e,n){return u.call(a,t,e,n)},this.strict=i,h(this,o,[],this._modules.root),p(this,o),n.forEach((function(t){return t(e)})),c.config.devtools&&function(t){r&&(t._devtoolHook=r,r.emit("vuex:init",t),r.on("vuex:travel-to-state",(function(e){t.replaceState(e)})),t.subscribe((function(t,e){r.emit("vuex:mutation",t,e)})))}(this)},u={state:{configurable:!0}};function f(t,e){return e.indexOf(t)<0&&e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function d(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;h(t,n,[],t._modules.root,!0),p(t,n,e)}function p(t,e,n){var r=t._vm;t.getters={};var o=t._wrappedGetters,a={};i(o,(function(e,n){a[n]=function(){return e(t)},Object.defineProperty(t.getters,n,{get:function(){return t._vm[n]},enumerable:!0})}));var s=c.config.silent;c.config.silent=!0,t._vm=new c({data:{$$state:e},computed:a}),c.config.silent=s,t.strict&&function(t){t._vm.$watch((function(){return this._data.$$state}),(function(){0}),{deep:!0,sync:!0})}(t),r&&(n&&t._withCommit((function(){r._data.$$state=null})),c.nextTick((function(){return r.$destroy()})))}function h(t,e,n,r,i){var o=!n.length,a=t._modules.getNamespace(n);if(r.namespaced&&(t._modulesNamespaceMap[a]=r),!o&&!i){var s=v(e,n.slice(0,-1)),l=n[n.length-1];t._withCommit((function(){c.set(s,l,r.state)}))}var u=r.context=function(t,e,n){var r=""===e,i={dispatch:r?t.dispatch:function(n,r,i){var o=g(n,r,i),a=o.payload,s=o.options,c=o.type;return s&&s.root||(c=e+c),t.dispatch(c,a)},commit:r?t.commit:function(n,r,i){var o=g(n,r,i),a=o.payload,s=o.options,c=o.type;s&&s.root||(c=e+c),t.commit(c,a,s)}};return Object.defineProperties(i,{getters:{get:r?function(){return t.getters}:function(){return function(t,e){var n={},r=e.length;return Object.keys(t.getters).forEach((function(i){if(i.slice(0,r)===e){var o=i.slice(r);Object.defineProperty(n,o,{get:function(){return t.getters[i]},enumerable:!0})}})),n}(t,e)}},state:{get:function(){return v(t.state,n)}}}),i}(t,a,n);r.forEachMutation((function(e,n){!function(t,e,n,r){(t._mutations[e]||(t._mutations[e]=[])).push((function(e){n.call(t,r.state,e)}))}(t,a+n,e,u)})),r.forEachAction((function(e,n){var r=e.root?n:a+n,i=e.handler||e;!function(t,e,n,r){(t._actions[e]||(t._actions[e]=[])).push((function(e,i){var o,a=n.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},e,i);return(o=a)&&"function"==typeof o.then||(a=Promise.resolve(a)),t._devtoolHook?a.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):a}))}(t,r,i,u)})),r.forEachGetter((function(e,n){!function(t,e,n,r){if(t._wrappedGetters[e])return void 0;t._wrappedGetters[e]=function(t){return n(r.state,r.getters,t.state,t.getters)}}(t,a+n,e,u)})),r.forEachChild((function(r,o){h(t,e,n.concat(o),r,i)}))}function v(t,e){return e.length?e.reduce((function(t,e){return t[e]}),t):t}function g(t,e,n){var r;return null!==(r=t)&&"object"==typeof r&&t.type&&(n=e,e=t,t=t.type),{type:t,payload:e,options:n}}function m(t){c&&t===c||function(t){if(Number(t.version.split(".")[0])>=2)t.mixin({beforeCreate:n});else{var e=t.prototype._init;t.prototype._init=function(t){void 0===t&&(t={}),t.init=t.init?[n].concat(t.init):n,e.call(this,t)}}function n(){var t=this.$options;t.store?this.$store="function"==typeof t.store?t.store():t.store:t.parent&&t.parent.$store&&(this.$store=t.parent.$store)}}(c=t)}u.state.get=function(){return this._vm._data.$$state},u.state.set=function(t){0},l.prototype.commit=function(t,e,n){var r=this,i=g(t,e,n),o=i.type,a=i.payload,s=(i.options,{type:o,payload:a}),c=this._mutations[o];c&&(this._withCommit((function(){c.forEach((function(t){t(a)}))})),this._subscribers.forEach((function(t){return t(s,r.state)})))},l.prototype.dispatch=function(t,e){var n=this,r=g(t,e),i=r.type,o=r.payload,a={type:i,payload:o},s=this._actions[i];if(s)return this._actionSubscribers.forEach((function(t){return t(a,n.state)})),s.length>1?Promise.all(s.map((function(t){return t(o)}))):s[0](o)},l.prototype.subscribe=function(t){return f(t,this._subscribers)},l.prototype.subscribeAction=function(t){return f(t,this._actionSubscribers)},l.prototype.watch=function(t,e,n){var r=this;return this._watcherVM.$watch((function(){return t(r.state,r.getters)}),e,n)},l.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._vm._data.$$state=t}))},l.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"==typeof t&&(t=[t]),this._modules.register(t,e),h(this,this.state,t,this._modules.get(t),n.preserveState),p(this,this.state)},l.prototype.unregisterModule=function(t){var e=this;"string"==typeof t&&(t=[t]),this._modules.unregister(t),this._withCommit((function(){var n=v(e.state,t.slice(0,-1));c.delete(n,t[t.length-1])})),d(this)},l.prototype.hotUpdate=function(t){this._modules.update(t),d(this,!0)},l.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(l.prototype,u);var b=k((function(t,e){var n={};return C(e).forEach((function(e){var r=e.key,i=e.val;n[r]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var r=S(this.$store,"mapState",t);if(!r)return;e=r.context.state,n=r.context.getters}return"function"==typeof i?i.call(this,e,n):e[i]},n[r].vuex=!0})),n})),_=k((function(t,e){var n={};return C(e).forEach((function(e){var r=e.key,i=e.val;n[r]=function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var r=this.$store.commit;if(t){var o=S(this.$store,"mapMutations",t);if(!o)return;r=o.context.commit}return"function"==typeof i?i.apply(this,[r].concat(e)):r.apply(this.$store,[i].concat(e))}})),n})),y=k((function(t,e){var n={};return C(e).forEach((function(e){var r=e.key,i=e.val;i=t+i,n[r]=function(){if(!t||S(this.$store,"mapGetters",t))return this.$store.getters[i]},n[r].vuex=!0})),n})),x=k((function(t,e){var n={};return C(e).forEach((function(e){var r=e.key,i=e.val;n[r]=function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var r=this.$store.dispatch;if(t){var o=S(this.$store,"mapActions",t);if(!o)return;r=o.context.dispatch}return"function"==typeof i?i.apply(this,[r].concat(e)):r.apply(this.$store,[i].concat(e))}})),n})),w=function(t){return{mapState:b.bind(null,t),mapGetters:y.bind(null,t),mapMutations:_.bind(null,t),mapActions:x.bind(null,t)}};function C(t){return Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}}))}function k(t){return function(e,n){return"string"!=typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function S(t,e,n){return t._modulesNamespaceMap[n]}var A={Store:l,install:m,version:"3.0.1",mapState:b,mapMutations:_,mapGetters:y,mapActions:x,createNamespacedHelpers:w};e.default=A},function(t,e,n){"use strict";function r(t,e){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=o[0],s={id:t+":"+i,css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}n.r(e),n.d(e,"default",(function(){return p}));var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var o={},a=i&&(document.head||document.getElementsByTagName("head")[0]),s=null,c=0,l=!1,u=function(){},f=null,d="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function p(t,e,n,i){l=n,f=i||{};var a=r(t,e);return h(a),function(e){for(var n=[],i=0;i<a.length;i++){var s=a[i];(c=o[s.id]).refs--,n.push(c)}e?h(a=r(t,e)):a=[];for(i=0;i<n.length;i++){var c;if(0===(c=n[i]).refs){for(var l=0;l<c.parts.length;l++)c.parts[l]();delete o[c.id]}}}}function h(t){for(var e=0;e<t.length;e++){var n=t[e],r=o[n.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](n.parts[i]);for(;i<n.parts.length;i++)r.parts.push(g(n.parts[i]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var a=[];for(i=0;i<n.parts.length;i++)a.push(g(n.parts[i]));o[n.id]={id:n.id,refs:1,parts:a}}}}function v(){var t=document.createElement("style");return t.type="text/css",a.appendChild(t),t}function g(t){var e,n,r=document.querySelector('style[data-vue-ssr-id~="'+t.id+'"]');if(r){if(l)return u;r.parentNode.removeChild(r)}if(d){var i=c++;r=s||(s=v()),e=_.bind(null,r,i,!1),n=_.bind(null,r,i,!0)}else r=v(),e=y.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap)return;e(t=r)}else n()}}var m,b=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join("\n")});function _(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function y(t,e){var n=e.css,r=e.media,i=e.sourceMap;if(r&&t.setAttribute("media",r),f.ssrId&&t.setAttribute("data-vue-ssr-id",e.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},function(t,e,n){"use strict";n.r(e);var r=n(5),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=p(n(49)),o=p(n(50)),a=p(n(51)),s=p(n(52)),c=p(n(53)),l=p(n(58)),u=p(n(59)),f=n(39),d=n(2);function p(t){return t&&t.__esModule?t:{default:t}}var h=void 0;e.default={components:{ButtonToggle:i.default,CanvasRoot:o.default,CanvasGridHeatMap:a.default,ControlGroupSand:s.default,ControlGroupHeatmap:c.default,ControlGroupCanvas:l.default,MenuCollapsible:u.default},data:function(){return{interacting:!1,interactingX:null,interactingY:null,interactingAmount:10,doLoop:!0,timeout:null}},computed:r({},(0,d.mapState)("heatmap",["color0","color1","color2","color3"]),(0,d.mapState)("canvas",["width","height","resolution"]),(0,d.mapGetters)("canvas",["minWidth","maxWidth","minHeight","maxHeight","minResolution","maxResolution","cols","rows"]),(0,d.mapState)("sand",["baseSand","startingSand","sand"])),methods:r({},(0,d.mapMutations)("canvas",["setHeight","setWidth","setResolution"]),(0,d.mapMutations)("sand",["setSand","updateSand"]),{constrainCanvas:function(t){var e=t?this.resolution:-this.resolution,n=Math.max(this.minWidth,Math.min(this.maxWidth,this.width+e)),r=Math.max(this.minHeight,Math.min(this.maxHeight,this.height+e));(this.cols%2==0||this.width>this.maxWidth||this.width<this.minHeight)&&this.setWidth(n),(this.rows%2==0||this.height>this.maxHeight||this.height<this.minHeight)&&this.setHeight(r)},setInteracting:function(t,e){this.interacting=!0,this.updateInteracting(e),this.interactingAmount=t},updateInteracting:function(t){var e=t.offsetX||t.layerX,n=t.offsetY||t.layerY;(e=Math.round(e/this.resolution))>0&&e<this.cols&&(this.interactingX=e),(n=Math.round(n/this.resolution))>0&&n<this.rows&&(this.interactingY=n)},clear:function(){var t=new Array(this.rows*this.cols);t.fill(this.baseSand),this.setSand(t)},reset:function(){this.clear();var t=(0,f.coordToPixel)(Math.floor(this.cols/2),Math.floor(this.rows/2),this.cols);this.updateSand({idx:t,amount:this.startingSand})},optimiseCanvas:function(){var t=this.$refs.content.getBoundingClientRect(),e=t.width,n=t.height,r=Math.floor(Math.min(e,n)),i=Math.round(.0125*r);i=Math.min(i,this.maxResolution),i=Math.max(i,this.minResolution),this.setWidth(r),this.setHeight(r),this.setResolution(i)},onResize:function(){var t=this;clearTimeout(h),h=setTimeout((function(){t.optimiseCanvas()}),100)},$_setUp:function(){window.addEventListener("resize",this.onResize),this.optimiseCanvas(),this.reset()},$_update:function(){if(this.interacting){var t=(0,f.coordToPixel)(this.interactingX,this.interactingY,this.cols);this.updateSand({idx:t,amount:this.sand[t]+=this.interactingAmount})}this.$_topple()},$_topple:function(){var t=this,e=Array.from(this.sand);this.sand.forEach((function(n,r){if(n>=4){e[r]=e[r]-4;var i=(0,f.pixelToCoord)(r,t.cols),o=i.x,a=i.y;if(o>0){var s=(0,f.coordToPixel)(o-1,a,t.cols);e[s]=e[s]+1}if(o<t.cols-1){var c=(0,f.coordToPixel)(o+1,a,t.cols);e[c]=e[c]+1}if(a>0){var l=(0,f.coordToPixel)(o,a-1,t.cols);e[l]=e[l]+1}if(a<t.rows-1){var u=(0,f.coordToPixel)(o,a+1,t.cols);e[u]=e[u]+1}}})),this.setSand(e)},$_loop:function(){var t=this;requestAnimationFrame((function(){t.$_update(),t.doLoop&&t.$_loop()}))}}),watch:{doLoop:function(t){t&&this.$_loop()},resolution:function(t,e){t=parseInt(t,10),e=parseInt(e,10),this.constrainCanvas(t>e),this.reset()},width:function(t,e){t=parseInt(t,10),e=parseInt(e,10),this.constrainCanvas(t>e),this.reset()},height:function(t,e){t=parseInt(t,10),e=parseInt(e,10),this.constrainCanvas(t>e),this.reset()}},mounted:function(){this.$nextTick((function(){this.$_setUp(),this.$_loop()}))},beforeDestroy:function(){window.removeEventListener("resize",this.onResize)}}},function(t,e,n){"use strict";n.r(e);var r=n(7),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:{startActive:{type:Boolean,default:!1},activeIcon:{type:String,default:""},inactiveIcon:{type:String,default:""},activeText:{type:String,default:""},inactiveText:{type:String,default:""}},data:function(){return{active:this.startActive}},computed:{icon:function(){return this.active?this.activeIcon:this.inactiveIcon},text:function(){return this.active?this.activeText:this.inactiveText}},methods:{toggle:function(){this.active=!this.active,this.$emit("toggle",this.active)}}}},function(t,e,n){"use strict";n.r(e);var r=n(9),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:{width:{type:Number,default:0},height:{type:Number,default:0}},data:function(){return{provider:{context:null,width:this.width,height:this.height}}},provide:function(){return{provider:this.provider}},watch:{width:function(t){this.provider.width=t},height:function(t){this.provider.height=t}},mounted:function(){this.provider.context=this.$refs["vue-canvas"].getContext("2d")}}},function(t,e,n){"use strict";n.r(e);var r=n(11),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(39);e.default={inject:["provider"],props:{grid:{type:Array,default:function(){return[]}},width:{type:[String,Number],default:100,validator:function(t){var e=parseInt(t,10);return!isNaN(e)&&e>0}},height:{type:[String,Number],default:100,validator:function(t){var e=parseInt(t,10);return!isNaN(e)&&e>0}},resolution:{type:Number,default:1,validator:function(t){parseInt(t,10);return!isNaN(t)&&t>0}},colorStep0:{type:String,default:"#3288bd"},colorStep1:{type:String,default:"#99d594"},colorStep2:{type:String,default:"#fee08b"},colorStep3:{type:String,default:"#fc8d59"}},computed:{rows:function(){return Math.floor(this.height/this.resolution)},cols:function(){return Math.floor(this.width/this.resolution)}},methods:{clear:function(){var t=this.provider.context,e=this.width,n=this.height;t.clearRect(0,0,e,n)}},watch:{width:function(){this.clear()},height:function(){this.clear()},resolution:function(){this.clear()}},render:function(){if(this.provider.context){var t=this.provider.context,e=(this.width,this.height,this.cols),n=(this.rows,this.resolution),i=this.grid,o=this.colorStep0,a=this.colorStep1,s=this.colorStep2,c=this.colorStep3;for(var l in i){var u=(0,r.pixelToCoord)(l,e),f=u.x,d=u.y,p=c;switch(i[l]){case 0:p=o;break;case 1:p=a;break;case 2:p=s}t.fillStyle=p,t.fillRect(f*n,d*n,n,n),t.strokeStyle="rgba(0, 0, 0, 0.1)",t.strokeRect(f*n,d*n,n,n)}}}}},function(t,e,n){"use strict";n.r(e);var r=n(13),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=n(28),a=(r=o)&&r.__esModule?r:{default:r},s=n(2);e.default={components:{ControlGroup:a.default},computed:i({},(0,s.mapState)("sand",["baseSand","startingSand","sand"]),(0,s.mapGetters)("sand",["sandTotal"])),methods:(0,s.mapMutations)("sand",["setBaseSand","setStartingSand","resetSand","setSand","updateSand"])}},function(t,e,n){"use strict";n.r(e);var r=n(15),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:{legend:{type:String,required:!0},canReset:{type:Boolean,default:!0}}}},function(t,e,n){"use strict";n.r(e);var r=n(17),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(54)),i=a(n(28)),o=n(2);function a(t){return t&&t.__esModule?t:{default:t}}e.default={components:{ButtonColorPicker:r.default,ControlGroup:i.default},computed:(0,o.mapState)("heatmap",["color0","color1","color2","color3"]),methods:(0,o.mapMutations)("heatmap",["updateColor","resetColors"])}},function(t,e,n){"use strict";n.r(e);var r=n(19),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(55);e.default={props:{value:{type:String,required:!0},popupTitle:{type:String,required:!0}},data:function(){return{open:!1,color:this.value,x:0,y:0}},components:{Photoshop:r.Photoshop},methods:{cancel:function(){this.color=this.value,this.open=!1},choose:function(){this.open=!1,this.$emit("change",this.color)}},watch:{open:function(t){t&&(this.x=this.$refs.button.getBoundingClientRect().left,this.y=this.$refs.button.getBoundingClientRect().top-this.$refs.button.clientHeight)}}}},function(t,e,n){var r=n(57);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("6767dea2",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(22),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=n(28),a=(r=o)&&r.__esModule?r:{default:r},s=n(2);e.default={components:{ControlGroup:a.default},computed:i({},(0,s.mapState)("canvas",["width","height","resolution"]),(0,s.mapGetters)("canvas",["minWidth","maxWidth","minHeight","maxHeight","minResolution","maxResolution","cols","rows"])),methods:(0,s.mapMutations)("canvas",["setHeight","setWidth","setResolution","resetDimensions"])}},function(t,e,n){"use strict";n.r(e);var r=n(24),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{active:!1}}}},function(t,e,n){var r=n(61);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("6f5f0c70",r,!0,{})},function(t,e,n){var r=n(63);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("403abcc6",r,!0,{})},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);var r=n(37),i=n(14);for(var o in i)"default"!==o&&function(t){n.d(e,t,(function(){return i[t]}))}(o);var a=n(0),s=Object(a.a)(i.default,r.a,r.b,!1,null,null,null);e.default=s.exports},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"container"}},[t._m(0),t._v(" "),n("aside",{attrs:{id:"controls"}},[n("div",[n("ButtonToggle",{attrs:{activeText:"Play",inactiveText:"Pause",inactiveIcon:"&#9208;",activeIcon:"&#9654;"},on:{toggle:function(e){t.doLoop=!t.doLoop}}}),t._v(" "),n("button",{staticClass:"btn",on:{click:function(e){return e.preventDefault(),t.reset(e)}}},[n("span",{domProps:{innerHTML:t._s("&#8634;")}}),t._v(" Restart\n            ")])],1),t._v(" "),n("MenuCollapsible",{staticClass:"display-sm hamburger-menu"},[n("ControlGroupSand",{on:{clear:t.clear}}),t._v(" "),n("ControlGroupCanvas")],1),t._v(" "),n("div",{staticClass:"display-md"},[n("ControlGroupSand",{on:{clear:t.clear}}),t._v(" "),n("ControlGroupHeatmap"),t._v(" "),n("ControlGroupCanvas")],1)],1),t._v(" "),n("section",{ref:"content",attrs:{id:"content"}},[n("CanvasRoot",{attrs:{width:t.width,height:t.height},on:{mousedown:function(e){return!("button"in e)&&t._k(e.keyCode,"left",37,e.key,["Left","ArrowLeft"])||"button"in e&&0!==e.button?null:void t.setInteracting(10,e)},mouseup:function(e){return!("button"in e)&&t._k(e.keyCode,"left",37,e.key,["Left","ArrowLeft"])||"button"in e&&0!==e.button?null:void(t.interacting=!1)},mouselave:function(e){t.interacting=!1},mousemove:function(e){t.updateInteracting(e)}}},[n("CanvasGridHeatMap",{attrs:{grid:t.sand,height:t.height,width:t.width,resolution:t.resolution,colorStep0:t.color0,colorStep1:t.color1,colorStep2:t.color2,colorStep3:t.color3}})],1)],1)])},i=[function(){var t=this.$createElement,e=this._self._c||t;return e("header",{attrs:{id:"header"}},[e("h1",[this._v("Abelian Sandpile")])])}];n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ControlGroup",{attrs:{legend:"Sand"},on:{reset:t.resetSand}},[n("div",[n("div",[t._v("Total Sand: "+t._s(t.sandTotal))]),t._v(" "),n("div",[n("button",{staticClass:"btn",on:{click:function(e){e.preventDefault(),t.$emit("clear",e)}}},[t._v("\n                Clear\n            ")])])]),t._v(" "),n("div",[n("div",[n("label",[t._v("Base Sand ("+t._s(t.baseSand)+")")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:"0",max:"4",step:"1"},domProps:{value:t.baseSand},on:{input:function(e){t.setBaseSand(e.target.value)}}})])]),t._v(" "),n("div",[n("div",[n("label",[t._v("Starting Sand ("+t._s(t.startingSand)+")")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:"100",max:"100000",step:"100"},domProps:{value:t.startingSand},on:{input:function(e){t.setStartingSand(e.target.value)}}})])])])},i=[];n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("canvas",{ref:"vue-canvas",staticClass:"vue-canvas",attrs:{width:t.width,height:t.height},on:{mousedown:function(e){t.$emit("mousedown",e)},mouseup:function(e){t.$emit("mouseup",e)},mouseleave:function(e){t.$emit("mouseleave",e)},mousemove:function(e){t.$emit("mousemove",e)}}}),t._v(" "),t._t("default")],2)},i=[];n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ControlGroup",{attrs:{legend:"Heatmap"},on:{reset:t.resetColors}},[n("div",[n("label",[t._v("0 Grains")]),t._v(" "),n("ButtonColorPicker",{key:t.color0+"-color0",attrs:{value:t.color0,popupTitle:"Color - 0 Grains"},on:{change:function(e){t.updateColor({step:"color0",color:e})}}})],1),t._v(" "),n("div",[n("label",[t._v("1 Grains")]),t._v(" "),n("ButtonColorPicker",{key:t.color1+"-color1",attrs:{value:t.color1,popupTitle:"Color - 1 Grains"},on:{change:function(e){t.updateColor({step:"color1",color:e})}}})],1),t._v(" "),n("div",[n("label",[t._v("2 Grains")]),t._v(" "),n("ButtonColorPicker",{key:t.color2+"-color2",attrs:{value:t.color2,popupTitle:"Color - 2 Grains"},on:{change:function(e){t.updateColor({step:"color2",color:e})}}})],1),t._v(" "),n("div",[n("label",[t._v("3 Grains")]),t._v(" "),n("ButtonColorPicker",{key:t.color3+"-color3",attrs:{value:t.color3,popupTitle:"Color - 3 Grains"},on:{change:function(e){t.updateColor({step:"color3",color:e})}}})],1)])},i=[];n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ControlGroup",{attrs:{legend:"Canvas"},on:{reset:t.resetDimensions}},[n("div",[n("div",[n("label",[t._v("Resolution ("+t._s(t.resolution)+"px "),n("span",{domProps:{innerHTML:t._s("&#215;")}}),t._v(" "+t._s(t.resolution)+"px)")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:t.minResolution,max:t.maxResolution,step:"1"},domProps:{value:t.resolution},on:{input:function(e){t.setResolution(e.target.value)}}})])]),t._v(" "),n("div",[n("div",[n("label",[t._v("Width ("+t._s(t.cols)+" Cols)")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:t.minWidth,max:t.maxWidth,step:t.resolution},domProps:{value:t.width},on:{input:function(e){t.setWidth(e.target.value)}}})])]),t._v(" "),n("div",[n("div",[n("label",[t._v("Height ("+t._s(t.rows)+" Rows)")])]),t._v(" "),n("div",[n("input",{attrs:{type:"range",min:t.minHeight,max:t.maxHeight,step:t.resolution},domProps:{value:t.height},on:{input:function(e){t.setHeight(e.target.value)}}})])])])},i=[];n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"inline-container"},[n("button",{staticClass:"btn",on:{click:function(e){return e.preventDefault(),t.toggle(e)}}},[t.icon?n("span",{staticClass:"icon",domProps:{innerHTML:t._s(t.icon)}}):t._e(),t._v(" "),n("span",{staticClass:"text"},[t._v("\n            "+t._s(t.text)+"\n        ")])])])},i=[];n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("button",{staticClass:"btn",on:{click:function(e){e.preventDefault(),t.active=!t.active}}},[n("div",{staticClass:"hamburger",class:{active:t.active}},[n("div",{staticClass:"horizontal-bar"}),t._v(" "),n("div",{staticClass:"horizontal-bar"}),t._v(" "),n("div",{staticClass:"horizontal-bar"})])]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:t.active,expression:"active"}]},[t._t("default")],2)])},i=[];n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"inline-container"},[n("button",{ref:"button",staticClass:"btn btn-color-picker",on:{click:function(e){t.open=!0}}},[n("span",{staticClass:"swatch",style:{backgroundColor:t.value}}),t._v(" "),n("span",{staticClass:"text"},[t._v(t._s(t.value))])]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:t.open,expression:"open"}],staticClass:"popup"},[n("div",{staticClass:"popup-inner",style:{top:t.y+"px",left:t.x+"px"}},[n("Photoshop",{attrs:{value:t.color,head:t.popupTitle},on:{cancel:t.cancel,input:function(e){t.color=e.hex},ok:t.choose}})],1)])])},i=[];n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("fieldset",{staticClass:"control-group"},[n("legend",[t._v(t._s(t.legend))]),t._v(" "),t._t("default"),t._v(" "),t.canReset?n("div",[n("button",{staticClass:"btn",on:{click:function(e){e.preventDefault(),t.$emit("reset",e)}}},[t._v("\n            Reset\n        ")])]):t._e()],2)},i=[];n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";n.r(e),function(t,n){
/*!
 * Vue.js v2.5.16
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({});function i(t){return null==t}function o(t){return null!=t}function a(t){return!0===t}function s(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function c(t){return null!==t&&"object"==typeof t}var l=Object.prototype.toString;function u(t){return"[object Object]"===l.call(t)}function f(t){return"[object RegExp]"===l.call(t)}function d(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function p(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function v(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}v("slot,component",!0);var g=v("key,ref,slot,slot-scope,is");function m(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function _(t,e){return b.call(t,e)}function y(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var x=/-(\w)/g,w=y((function(t){return t.replace(x,(function(t,e){return e?e.toUpperCase():""}))})),C=y((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),k=/\B([A-Z])/g,S=y((function(t){return t.replace(k,"-$1").toLowerCase()}));var A=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function O(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function $(t,e){for(var n in e)t[n]=e[n];return t}function M(t){for(var e={},n=0;n<t.length;n++)t[n]&&$(e,t[n]);return e}function E(t,e,n){}var j=function(t,e,n){return!1},T=function(t){return t};function F(t,e){if(t===e)return!0;var n=c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),o=Array.isArray(e);if(i&&o)return t.length===e.length&&t.every((function(t,n){return F(t,e[n])}));if(i||o)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every((function(n){return F(t[n],e[n])}))}catch(t){return!1}}function P(t,e){for(var n=0;n<t.length;n++)if(F(t[n],e))return n;return-1}function I(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var L=["component","directive","filter"],R=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],D={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:j,isReservedAttr:j,isUnknownElement:j,getTagNamespace:E,parsePlatformTagName:T,mustUseProp:j,_lifecycleHooks:R};function N(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var H=/[^\w.$]/;var B,z="__proto__"in{},U="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,V=G&&WXEnvironment.platform.toLowerCase(),W=U&&window.navigator.userAgent.toLowerCase(),q=W&&/msie|trident/.test(W),X=W&&W.indexOf("msie 9.0")>0,Y=W&&W.indexOf("edge/")>0,K=(W&&W.indexOf("android"),W&&/iphone|ipad|ipod|ios/.test(W)||"ios"===V),J=(W&&/chrome\/\d+/.test(W),{}.watch),Z=!1;if(U)try{var Q={};Object.defineProperty(Q,"passive",{get:function(){Z=!0}}),window.addEventListener("test-passive",null,Q)}catch(t){}var tt=function(){return void 0===B&&(B=!U&&!G&&void 0!==t&&"server"===t.process.env.VUE_ENV),B},et=U&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function nt(t){return"function"==typeof t&&/native code/.test(t.toString())}var rt,it="undefined"!=typeof Symbol&&nt(Symbol)&&"undefined"!=typeof Reflect&&nt(Reflect.ownKeys);rt="undefined"!=typeof Set&&nt(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ot=E,at=0,st=function(){this.id=at++,this.subs=[]};st.prototype.addSub=function(t){this.subs.push(t)},st.prototype.removeSub=function(t){m(this.subs,t)},st.prototype.depend=function(){st.target&&st.target.addDep(this)},st.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},st.target=null;var ct=[];function lt(t){st.target&&ct.push(st.target),st.target=t}function ut(){st.target=ct.pop()}var ft=function(t,e,n,r,i,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},dt={child:{configurable:!0}};dt.child.get=function(){return this.componentInstance},Object.defineProperties(ft.prototype,dt);var pt=function(t){void 0===t&&(t="");var e=new ft;return e.text=t,e.isComment=!0,e};function ht(t){return new ft(void 0,void 0,void 0,String(t))}function vt(t){var e=new ft(t.tag,t.data,t.children,t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.isCloned=!0,e}var gt=Array.prototype,mt=Object.create(gt);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(t){var e=gt[t];N(mt,t,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,o=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o}))}));var bt=Object.getOwnPropertyNames(mt),_t=!0;function yt(t){_t=t}var xt=function(t){(this.value=t,this.dep=new st,this.vmCount=0,N(t,"__ob__",this),Array.isArray(t))?((z?wt:Ct)(t,mt,bt),this.observeArray(t)):this.walk(t)};function wt(t,e,n){t.__proto__=e}function Ct(t,e,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];N(t,o,e[o])}}function kt(t,e){var n;if(c(t)&&!(t instanceof ft))return _(t,"__ob__")&&t.__ob__ instanceof xt?n=t.__ob__:_t&&!tt()&&(Array.isArray(t)||u(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new xt(t)),e&&n&&n.vmCount++,n}function St(t,e,n,r,i){var o=new st,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get;s||2!==arguments.length||(n=t[e]);var c=a&&a.set,l=!i&&kt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return st.target&&(o.depend(),l&&(l.dep.depend(),Array.isArray(e)&&$t(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||(c?c.call(t,e):n=e,l=!i&&kt(e),o.notify())}})}}function At(t,e,n){if(Array.isArray(t)&&d(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(St(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function Ot(t,e){if(Array.isArray(t)&&d(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||_(t,e)&&(delete t[e],n&&n.dep.notify())}}function $t(t){for(var e=void 0,n=0,r=t.length;n<r;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&$t(e)}xt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)St(t,e[n])},xt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)kt(t[e])};var Mt=D.optionMergeStrategies;function Et(t,e){if(!e)return t;for(var n,r,i,o=Object.keys(e),a=0;a<o.length;a++)r=t[n=o[a]],i=e[n],_(t,n)?u(r)&&u(i)&&Et(r,i):At(t,n,i);return t}function jt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,i="function"==typeof t?t.call(n,n):t;return r?Et(r,i):i}:e?t?function(){return Et("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Tt(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function Ft(t,e,n,r){var i=Object.create(t||null);return e?$(i,e):i}Mt.data=function(t,e,n){return n?jt(t,e,n):e&&"function"!=typeof e?t:jt(t,e)},R.forEach((function(t){Mt[t]=Tt})),L.forEach((function(t){Mt[t+"s"]=Ft})),Mt.watch=function(t,e,n,r){if(t===J&&(t=void 0),e===J&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var i={};for(var o in $(i,t),e){var a=i[o],s=e[o];a&&!Array.isArray(a)&&(a=[a]),i[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return i},Mt.props=Mt.methods=Mt.inject=Mt.computed=function(t,e,n,r){if(!t)return e;var i=Object.create(null);return $(i,t),e&&$(i,e),i},Mt.provide=jt;var Pt=function(t,e){return void 0===e?t:e};function It(t,e,n){"function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,i,o={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])&&(o[w(i)]={type:null});else if(u(n))for(var a in n)i=n[a],o[w(a)]=u(i)?i:{type:i};else 0;t.props=o}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(u(n))for(var o in n){var a=n[o];r[o]=u(a)?$({from:o},a):{from:a}}else 0}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e);var r=e.extends;if(r&&(t=It(t,r,n)),e.mixins)for(var i=0,o=e.mixins.length;i<o;i++)t=It(t,e.mixins[i],n);var a,s={};for(a in t)c(a);for(a in e)_(t,a)||c(a);function c(r){var i=Mt[r]||Pt;s[r]=i(t[r],e[r],n,r)}return s}function Lt(t,e,n,r){if("string"==typeof n){var i=t[e];if(_(i,n))return i[n];var o=w(n);if(_(i,o))return i[o];var a=C(o);return _(i,a)?i[a]:i[n]||i[o]||i[a]}}function Rt(t,e,n,r){var i=e[t],o=!_(n,t),a=n[t],s=Ht(Boolean,i.type);if(s>-1)if(o&&!_(i,"default"))a=!1;else if(""===a||a===S(t)){var c=Ht(String,i.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!_(e,"default"))return;var r=e.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==Dt(e.type)?r.call(t):r}(r,i,t);var l=_t;yt(!0),kt(a),yt(l)}return a}function Dt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Nt(t,e){return Dt(t)===Dt(e)}function Ht(t,e){if(!Array.isArray(e))return Nt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Nt(e[n],t))return n;return-1}function Bt(t,e,n){if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,t,e,n))return}catch(t){zt(t,r,"errorCaptured hook")}}zt(t,e,n)}function zt(t,e,n){if(D.errorHandler)try{return D.errorHandler.call(null,t,e,n)}catch(t){Ut(t,null,"config.errorHandler")}Ut(t,e,n)}function Ut(t,e,n){if(!U&&!G||"undefined"==typeof console)throw t;console.error(t)}var Gt,Vt,Wt=[],qt=!1;function Xt(){qt=!1;var t=Wt.slice(0);Wt.length=0;for(var e=0;e<t.length;e++)t[e]()}var Yt=!1;if(void 0!==n&&nt(n))Vt=function(){n(Xt)};else if("undefined"==typeof MessageChannel||!nt(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())Vt=function(){setTimeout(Xt,0)};else{var Kt=new MessageChannel,Jt=Kt.port2;Kt.port1.onmessage=Xt,Vt=function(){Jt.postMessage(1)}}if("undefined"!=typeof Promise&&nt(Promise)){var Zt=Promise.resolve();Gt=function(){Zt.then(Xt),K&&setTimeout(E)}}else Gt=Vt;function Qt(t,e){var n;if(Wt.push((function(){if(t)try{t.call(e)}catch(t){Bt(t,e,"nextTick")}else n&&n(e)})),qt||(qt=!0,Yt?Vt():Gt()),!t&&"undefined"!=typeof Promise)return new Promise((function(t){n=t}))}var te=new rt;function ee(t){!function t(e,n){var r,i,o=Array.isArray(e);if(!o&&!c(e)||Object.isFrozen(e)||e instanceof ft)return;if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(o)for(r=e.length;r--;)t(e[r],n);else for(i=Object.keys(e),r=i.length;r--;)t(e[i[r]],n)}(t,te),te.clear()}var ne,re=y((function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}}));function ie(t){function e(){var t=arguments,n=e.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),i=0;i<r.length;i++)r[i].apply(null,t)}return e.fns=t,e}function oe(t,e,n,r,o){var a,s,c,l;for(a in t)s=t[a],c=e[a],l=re(a),i(s)||(i(c)?(i(s.fns)&&(s=t[a]=ie(s)),n(l.name,s,l.once,l.capture,l.passive,l.params)):s!==c&&(c.fns=s,t[a]=c));for(a in e)i(t[a])&&r((l=re(a)).name,e[a],l.capture)}function ae(t,e,n){var r;t instanceof ft&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function c(){n.apply(this,arguments),m(r.fns,c)}i(s)?r=ie([c]):o(s.fns)&&a(s.merged)?(r=s).fns.push(c):r=ie([s,c]),r.merged=!0,t[e]=r}function se(t,e,n,r,i){if(o(e)){if(_(e,n))return t[n]=e[n],i||delete e[n],!0;if(_(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function ce(t){return s(t)?[ht(t)]:Array.isArray(t)?function t(e,n){var r,c,l,u,f=[];for(r=0;r<e.length;r++)i(c=e[r])||"boolean"==typeof c||(l=f.length-1,u=f[l],Array.isArray(c)?c.length>0&&(le((c=t(c,(n||"")+"_"+r))[0])&&le(u)&&(f[l]=ht(u.text+c[0].text),c.shift()),f.push.apply(f,c)):s(c)?le(u)?f[l]=ht(u.text+c):""!==c&&f.push(ht(c)):le(c)&&le(u)?f[l]=ht(u.text+c.text):(a(e._isVList)&&o(c.tag)&&i(c.key)&&o(n)&&(c.key="__vlist"+n+"_"+r+"__"),f.push(c)));return f}(t):void 0}function le(t){return o(t)&&o(t.text)&&!1===t.isComment}function ue(t,e){return(t.__esModule||it&&"Module"===t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function fe(t){return t.isComment&&t.asyncFactory}function de(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(o(n)&&(o(n.componentOptions)||fe(n)))return n}}function pe(t,e,n){n?ne.$once(t,e):ne.$on(t,e)}function he(t,e){ne.$off(t,e)}function ve(t,e,n){ne=t,oe(e,n||{},pe,he),ne=void 0}function ge(t,e){var n={};if(!t)return n;for(var r=0,i=t.length;r<i;r++){var o=t[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var l in n)n[l].every(me)&&delete n[l];return n}function me(t){return t.isComment&&!t.asyncFactory||" "===t.text}function be(t,e){e=e||{};for(var n=0;n<t.length;n++)Array.isArray(t[n])?be(t[n],e):e[t[n].key]=t[n].fn;return e}var _e=null;function ye(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function xe(t,e){if(e){if(t._directInactive=!1,ye(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)xe(t.$children[n]);we(t,"activated")}}function we(t,e){lt();var n=t.$options[e];if(n)for(var r=0,i=n.length;r<i;r++)try{n[r].call(t)}catch(n){Bt(n,t,e+" hook")}t._hasHookEvent&&t.$emit("hook:"+e),ut()}var Ce=[],ke=[],Se={},Ae=!1,Oe=!1,$e=0;function Me(){var t,e;for(Oe=!0,Ce.sort((function(t,e){return t.id-e.id})),$e=0;$e<Ce.length;$e++)e=(t=Ce[$e]).id,Se[e]=null,t.run();var n=ke.slice(),r=Ce.slice();$e=Ce.length=ke.length=0,Se={},Ae=Oe=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,xe(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&we(r,"updated")}}(r),et&&D.devtools&&et.emit("flush")}var Ee=0,je=function(t,e,n,r,i){this.vm=t,i&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Ee,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new rt,this.newDepIds=new rt,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!H.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=function(){})),this.value=this.lazy?void 0:this.get()};je.prototype.get=function(){var t;lt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Bt(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ee(t),ut(),this.cleanupDeps()}return t},je.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},je.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},je.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==Se[e]){if(Se[e]=!0,Oe){for(var n=Ce.length-1;n>$e&&Ce[n].id>t.id;)n--;Ce.splice(n+1,0,t)}else Ce.push(t);Ae||(Ae=!0,Qt(Me))}}(this)},je.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Bt(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},je.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},je.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},je.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||m(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var Te={enumerable:!0,configurable:!0,get:E,set:E};function Fe(t,e,n){Te.get=function(){return this[e][n]},Te.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Te)}function Pe(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},i=t.$options._propKeys=[];t.$parent&&yt(!1);var o=function(o){i.push(o);var a=Rt(o,e,n,t);St(r,o,a),o in t||Fe(t,"_props",o)};for(var a in e)o(a);yt(!0)}(t,e.props),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]=null==e[n]?E:A(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;u(e=t._data="function"==typeof e?function(t,e){lt();try{return t.call(e,e)}catch(t){return Bt(t,e,"data()"),{}}finally{ut()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,i=(t.$options.methods,n.length);for(;i--;){var o=n[i];0,r&&_(r,o)||(a=void 0,36!==(a=(o+"").charCodeAt(0))&&95!==a&&Fe(t,"_data",o))}var a;kt(e,!0)}(t):kt(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=tt();for(var i in e){var o=e[i],a="function"==typeof o?o:o.get;0,r||(n[i]=new je(t,a||E,E,Ie)),i in t||Le(t,i,o)}}(t,e.computed),e.watch&&e.watch!==J&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)De(t,n,r[i]);else De(t,n,r)}}(t,e.watch)}var Ie={lazy:!0};function Le(t,e,n){var r=!tt();"function"==typeof n?(Te.get=r?Re(e):n,Te.set=E):(Te.get=n.get?r&&!1!==n.cache?Re(e):n.get:E,Te.set=n.set?n.set:E),Object.defineProperty(t,e,Te)}function Re(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),st.target&&e.depend(),e.value}}function De(t,e,n,r){return u(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}function Ne(t,e){if(t){for(var n=Object.create(null),r=it?Reflect.ownKeys(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})):Object.keys(t),i=0;i<r.length;i++){for(var o=r[i],a=t[o].from,s=e;s;){if(s._provided&&_(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[o]){var c=t[o].default;n[o]="function"==typeof c?c.call(e):c}else 0}return n}}function He(t,e){var n,r,i,a,s;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(c(t))for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)s=a[r],n[r]=e(t[s],s,r);return o(n)&&(n._isVList=!0),n}function Be(t,e,n,r){var i,o=this.$scopedSlots[t];if(o)n=n||{},r&&(n=$($({},r),n)),i=o(n)||e;else{var a=this.$slots[t];a&&(a._rendered=!0),i=a||e}var s=n&&n.slot;return s?this.$createElement("template",{slot:s},i):i}function ze(t){return Lt(this.$options,"filters",t)||T}function Ue(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function Ge(t,e,n,r,i){var o=D.keyCodes[e]||n;return i&&r&&!D.keyCodes[e]?Ue(i,r):o?Ue(o,t):r?S(r)!==e:void 0}function Ve(t,e,n,r,i){if(n)if(c(n)){var o;Array.isArray(n)&&(n=M(n));var a=function(a){if("class"===a||"style"===a||g(a))o=t;else{var s=t.attrs&&t.attrs.type;o=r||D.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}a in o||(o[a]=n[a],i&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var s in n)a(s)}else;return t}function We(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||Xe(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r}function qe(t,e,n){return Xe(t,"__once__"+e+(n?"_"+n:""),!0),t}function Xe(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Ye(t[r],e+"_"+r,n);else Ye(t,e,n)}function Ye(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function Ke(t,e){if(e)if(u(e)){var n=t.on=t.on?$({},t.on):{};for(var r in e){var i=n[r],o=e[r];n[r]=i?[].concat(i,o):o}}else;return t}function Je(t){t._o=qe,t._n=h,t._s=p,t._l=He,t._t=Be,t._q=F,t._i=P,t._m=We,t._f=ze,t._k=Ge,t._b=Ve,t._v=ht,t._e=pt,t._u=be,t._g=Ke}function Ze(t,e,n,i,o){var s,c=o.options;_(i,"_uid")?(s=Object.create(i))._original=i:(s=i,i=i._original);var l=a(c._compiled),u=!l;this.data=t,this.props=e,this.children=n,this.parent=i,this.listeners=t.on||r,this.injections=Ne(c.inject,i),this.slots=function(){return ge(n,i)},l&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=t.scopedSlots||r),c._scopeId?this._c=function(t,e,n,r){var o=on(s,t,e,n,r,u);return o&&!Array.isArray(o)&&(o.fnScopeId=c._scopeId,o.fnContext=i),o}:this._c=function(t,e,n,r){return on(s,t,e,n,r,u)}}function Qe(t,e,n,r){var i=vt(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function tn(t,e){for(var n in e)t[w(n)]=e[n]}Je(Ze.prototype);var en={init:function(t,e,n,r){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var i=t;en.prepatch(i,i)}else{(t.componentInstance=function(t,e,n,r){var i={_isComponent:!0,parent:e,_parentVnode:t,_parentElm:n||null,_refElm:r||null},a=t.data.inlineTemplate;o(a)&&(i.render=a.render,i.staticRenderFns=a.staticRenderFns);return new t.componentOptions.Ctor(i)}(t,_e,n,r)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,i,o){var a=!!(o||t.$options._renderChildren||i.data.scopedSlots||t.$scopedSlots!==r);if(t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i),t.$options._renderChildren=o,t.$attrs=i.data.attrs||r,t.$listeners=n||r,e&&t.$options.props){yt(!1);for(var s=t._props,c=t.$options._propKeys||[],l=0;l<c.length;l++){var u=c[l],f=t.$options.props;s[u]=Rt(u,f,e,t)}yt(!0),t.$options.propsData=e}n=n||r;var d=t.$options._parentListeners;t.$options._parentListeners=n,ve(t,n,d),a&&(t.$slots=ge(o,i.context),t.$forceUpdate())}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,we(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,ke.push(e)):xe(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(!(n&&(e._directInactive=!0,ye(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);we(e,"deactivated")}}(e,!0):e.$destroy())}},nn=Object.keys(en);function rn(t,e,n,s,l){if(!i(t)){var u=n.$options._base;if(c(t)&&(t=u.extend(t)),"function"==typeof t){var f;if(i(t.cid)&&void 0===(t=function(t,e,n){if(a(t.error)&&o(t.errorComp))return t.errorComp;if(o(t.resolved))return t.resolved;if(a(t.loading)&&o(t.loadingComp))return t.loadingComp;if(!o(t.contexts)){var r=t.contexts=[n],s=!0,l=function(){for(var t=0,e=r.length;t<e;t++)r[t].$forceUpdate()},u=I((function(n){t.resolved=ue(n,e),s||l()})),f=I((function(e){o(t.errorComp)&&(t.error=!0,l())})),d=t(u,f);return c(d)&&("function"==typeof d.then?i(t.resolved)&&d.then(u,f):o(d.component)&&"function"==typeof d.component.then&&(d.component.then(u,f),o(d.error)&&(t.errorComp=ue(d.error,e)),o(d.loading)&&(t.loadingComp=ue(d.loading,e),0===d.delay?t.loading=!0:setTimeout((function(){i(t.resolved)&&i(t.error)&&(t.loading=!0,l())}),d.delay||200)),o(d.timeout)&&setTimeout((function(){i(t.resolved)&&f(null)}),d.timeout))),s=!1,t.loading?t.loadingComp:t.resolved}t.contexts.push(n)}(f=t,u,n)))return function(t,e,n,r,i){var o=pt();return o.asyncFactory=t,o.asyncMeta={data:e,context:n,children:r,tag:i},o}(f,e,n,s,l);e=e||{},sn(t),o(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.props||(e.props={}))[n]=e.model.value;var i=e.on||(e.on={});o(i[r])?i[r]=[e.model.callback].concat(i[r]):i[r]=e.model.callback}(t.options,e);var d=function(t,e,n){var r=e.options.props;if(!i(r)){var a={},s=t.attrs,c=t.props;if(o(s)||o(c))for(var l in r){var u=S(l);se(a,c,l,u,!0)||se(a,s,l,u,!1)}return a}}(e,t);if(a(t.options.functional))return function(t,e,n,i,a){var s=t.options,c={},l=s.props;if(o(l))for(var u in l)c[u]=Rt(u,l,e||r);else o(n.attrs)&&tn(c,n.attrs),o(n.props)&&tn(c,n.props);var f=new Ze(n,c,a,i,t),d=s.render.call(null,f._c,f);if(d instanceof ft)return Qe(d,n,f.parent,s);if(Array.isArray(d)){for(var p=ce(d)||[],h=new Array(p.length),v=0;v<p.length;v++)h[v]=Qe(p[v],n,f.parent,s);return h}}(t,d,e,n,s);var p=e.on;if(e.on=e.nativeOn,a(t.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<nn.length;n++){var r=nn[n];e[r]=en[r]}}(e);var v=t.options.name||l;return new ft("vue-component-"+t.cid+(v?"-"+v:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:d,listeners:p,tag:l,children:s},f)}}}function on(t,e,n,r,l,u){return(Array.isArray(n)||s(n))&&(l=r,r=n,n=void 0),a(u)&&(l=2),function(t,e,n,r,s){if(o(n)&&o(n.__ob__))return pt();o(n)&&o(n.is)&&(e=n.is);if(!e)return pt();0;Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);2===s?r=ce(r):1===s&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var l,u;if("string"==typeof e){var f;u=t.$vnode&&t.$vnode.ns||D.getTagNamespace(e),l=D.isReservedTag(e)?new ft(D.parsePlatformTagName(e),n,r,void 0,void 0,t):o(f=Lt(t.$options,"components",e))?rn(f,n,t,r,e):new ft(e,n,r,void 0,void 0,t)}else l=rn(e,n,t,r);return Array.isArray(l)?l:o(l)?(o(u)&&function t(e,n,r){e.ns=n,"foreignObject"===e.tag&&(n=void 0,r=!0);if(o(e.children))for(var s=0,c=e.children.length;s<c;s++){var l=e.children[s];o(l.tag)&&(i(l.ns)||a(r)&&"svg"!==l.tag)&&t(l,n,r)}}(l,u),o(n)&&function(t){c(t.style)&&ee(t.style);c(t.class)&&ee(t.class)}(n),l):pt()}(t,e,n,r,l)}var an=0;function sn(t){var e=t.options;if(t.super){var n=sn(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.extendOptions,i=t.sealedOptions;for(var o in n)n[o]!==i[o]&&(e||(e={}),e[o]=cn(n[o],r[o],i[o]));return e}(t);r&&$(t.extendOptions,r),(e=t.options=It(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function cn(t,e,n){if(Array.isArray(t)){var r=[];n=Array.isArray(n)?n:[n],e=Array.isArray(e)?e:[e];for(var i=0;i<t.length;i++)(e.indexOf(t[i])>=0||n.indexOf(t[i])<0)&&r.push(t[i]);return r}return t}function ln(t){this._init(t)}function un(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var o=t.name||n.options.name;var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=It(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)Fe(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)Le(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,L.forEach((function(t){a[t]=n[t]})),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=$({},a.options),i[r]=a,a}}function fn(t){return t&&(t.Ctor.options.name||t.tag)}function dn(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!f(t)&&t.test(e)}function pn(t,e){var n=t.cache,r=t.keys,i=t._vnode;for(var o in n){var a=n[o];if(a){var s=fn(a.componentOptions);s&&!e(s)&&hn(n,o,r,i)}}}function hn(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,m(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=an++,e._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r,n._parentElm=e._parentElm,n._refElm=e._refElm;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=It(sn(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&ve(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,i=n&&n.context;t.$slots=ge(e._renderChildren,i),t.$scopedSlots=r,t._c=function(e,n,r,i){return on(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return on(t,e,n,r,i,!0)};var o=n&&n.data;St(t,"$attrs",o&&o.attrs||r,null,!0),St(t,"$listeners",e._parentListeners||r,null,!0)}(e),we(e,"beforeCreate"),function(t){var e=Ne(t.$options.inject,t);e&&(yt(!1),Object.keys(e).forEach((function(n){St(t,n,e[n])})),yt(!0))}(e),Pe(e),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(e),we(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(ln),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=At,t.prototype.$delete=Ot,t.prototype.$watch=function(t,e,n){if(u(e))return De(this,t,e,n);(n=n||{}).user=!0;var r=new je(this,t,e,n);return n.immediate&&e.call(this,r.value),function(){r.teardown()}}}(ln),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){if(Array.isArray(t))for(var r=0,i=t.length;r<i;r++)this.$on(t[r],n);else(this._events[t]||(this._events[t]=[])).push(n),e.test(t)&&(this._hasHookEvent=!0);return this},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this,r=this;if(!arguments.length)return r._events=Object.create(null),r;if(Array.isArray(t)){for(var i=0,o=t.length;i<o;i++)n.$off(t[i],e);return r}var a=r._events[t];if(!a)return r;if(!e)return r._events[t]=null,r;if(e)for(var s,c=a.length;c--;)if((s=a[c])===e||s.fn===e){a.splice(c,1);break}return r},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?O(n):n;for(var r=O(arguments,1),i=0,o=n.length;i<o;i++)try{n[i].apply(e,r)}catch(n){Bt(n,e,'event handler for "'+t+'"')}}return e}}(ln),function(t){t.prototype._update=function(t,e){var n=this;n._isMounted&&we(n,"beforeUpdate");var r=n.$el,i=n._vnode,o=_e;_e=n,n._vnode=t,i?n.$el=n.__patch__(i,t):(n.$el=n.__patch__(n.$el,t,e,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),_e=o,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){we(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||m(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),we(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(ln),function(t){Je(t.prototype),t.prototype.$nextTick=function(t){return Qt(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,i=n.render,o=n._parentVnode;o&&(e.$scopedSlots=o.data.scopedSlots||r),e.$vnode=o;try{t=i.call(e._renderProxy,e.$createElement)}catch(n){Bt(n,e,"render"),t=e._vnode}return t instanceof ft||(t=pt()),t.parent=o,t}}(ln);var vn=[String,RegExp,Array],gn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:vn,exclude:vn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)hn(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){pn(t,(function(t){return dn(e,t)}))})),this.$watch("exclude",(function(e){pn(t,(function(t){return!dn(e,t)}))}))},render:function(){var t=this.$slots.default,e=de(t),n=e&&e.componentOptions;if(n){var r=fn(n),i=this.include,o=this.exclude;if(i&&(!r||!dn(i,r))||o&&r&&dn(o,r))return e;var a=this.cache,s=this.keys,c=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,m(s,c),s.push(c)):(a[c]=e,s.push(c),this.max&&s.length>parseInt(this.max)&&hn(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return D}};Object.defineProperty(t,"config",e),t.util={warn:ot,extend:$,mergeOptions:It,defineReactive:St},t.set=At,t.delete=Ot,t.nextTick=Qt,t.options=Object.create(null),L.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,$(t.options.components,gn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=O(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=It(this.options,t),this}}(t),un(t),function(t){L.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&u(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}(t)}(ln),Object.defineProperty(ln.prototype,"$isServer",{get:tt}),Object.defineProperty(ln.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(ln,"FunctionalRenderContext",{value:Ze}),ln.version="2.5.16";var mn=v("style,class"),bn=v("input,textarea,option,select,progress"),_n=v("contenteditable,draggable,spellcheck"),yn=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),xn="http://www.w3.org/1999/xlink",wn=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Cn=function(t){return wn(t)?t.slice(6,t.length):""},kn=function(t){return null==t||!1===t};function Sn(t){for(var e=t.data,n=t,r=t;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=An(r.data,e));for(;o(n=n.parent);)n&&n.data&&(e=An(e,n.data));return function(t,e){if(o(t)||o(e))return On(t,$n(e));return""}(e.staticClass,e.class)}function An(t,e){return{staticClass:On(t.staticClass,e.staticClass),class:o(t.class)?[t.class,e.class]:e.class}}function On(t,e){return t?e?t+" "+e:t:e||""}function $n(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,i=t.length;r<i;r++)o(e=$n(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):c(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Mn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},En=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),jn=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Tn=function(t){return En(t)||jn(t)};var Fn=Object.create(null);var Pn=v("text,number,password,search,email,tel,url");var In=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(t,e){return document.createElementNS(Mn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Ln={create:function(t,e){Rn(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Rn(t,!0),Rn(e))},destroy:function(t){Rn(t,!0)}};function Rn(t,e){var n=t.data.ref;if(o(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?m(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var Dn=new ft("",{},[]),Nn=["create","activate","update","remove","destroy"];function Hn(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&o(t.data)===o(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=o(n=t.data)&&o(n=n.attrs)&&n.type,i=o(n=e.data)&&o(n=n.attrs)&&n.type;return r===i||Pn(r)&&Pn(i)}(t,e)||a(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&i(e.asyncFactory.error))}function Bn(t,e,n){var r,i,a={};for(r=e;r<=n;++r)o(i=t[r].key)&&(a[i]=r);return a}var zn={create:Un,update:Un,destroy:function(t){Un(t,Dn)}};function Un(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,i,o=t===Dn,a=e===Dn,s=Vn(t.data.directives,t.context),c=Vn(e.data.directives,e.context),l=[],u=[];for(n in c)r=s[n],i=c[n],r?(i.oldValue=r.value,qn(i,"update",e,t),i.def&&i.def.componentUpdated&&u.push(i)):(qn(i,"bind",e,t),i.def&&i.def.inserted&&l.push(i));if(l.length){var f=function(){for(var n=0;n<l.length;n++)qn(l[n],"inserted",e,t)};o?ae(e,"insert",f):f()}u.length&&ae(e,"postpatch",(function(){for(var n=0;n<u.length;n++)qn(u[n],"componentUpdated",e,t)}));if(!o)for(n in s)c[n]||qn(s[n],"unbind",t,t,a)}(t,e)}var Gn=Object.create(null);function Vn(t,e){var n,r,i=Object.create(null);if(!t)return i;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=Gn),i[Wn(r)]=r,r.def=Lt(e.$options,"directives",r.name);return i}function Wn(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function qn(t,e,n,r,i){var o=t.def&&t.def[e];if(o)try{o(n.elm,t,n,r,i)}catch(r){Bt(r,n.context,"directive "+t.name+" "+e+" hook")}}var Xn=[Ln,zn];function Yn(t,e){var n=e.componentOptions;if(!(o(n)&&!1===n.Ctor.options.inheritAttrs||i(t.data.attrs)&&i(e.data.attrs))){var r,a,s=e.elm,c=t.data.attrs||{},l=e.data.attrs||{};for(r in o(l.__ob__)&&(l=e.data.attrs=$({},l)),l)a=l[r],c[r]!==a&&Kn(s,r,a);for(r in(q||Y)&&l.value!==c.value&&Kn(s,"value",l.value),c)i(l[r])&&(wn(r)?s.removeAttributeNS(xn,Cn(r)):_n(r)||s.removeAttribute(r))}}function Kn(t,e,n){t.tagName.indexOf("-")>-1?Jn(t,e,n):yn(e)?kn(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):_n(e)?t.setAttribute(e,kn(n)||"false"===n?"false":"true"):wn(e)?kn(n)?t.removeAttributeNS(xn,Cn(e)):t.setAttributeNS(xn,e,n):Jn(t,e,n)}function Jn(t,e,n){if(kn(n))t.removeAttribute(e);else{if(q&&!X&&"TEXTAREA"===t.tagName&&"placeholder"===e&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var Zn={create:Yn,update:Yn};function Qn(t,e){var n=e.elm,r=e.data,a=t.data;if(!(i(r.staticClass)&&i(r.class)&&(i(a)||i(a.staticClass)&&i(a.class)))){var s=Sn(e),c=n._transitionClasses;o(c)&&(s=On(s,$n(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var tr,er={create:Qn,update:Qn};function nr(t,e,n,r,i){var o;e=(o=e)._withTask||(o._withTask=function(){Yt=!0;var t=o.apply(null,arguments);return Yt=!1,t}),n&&(e=function(t,e,n){var r=tr;return function i(){var o=t.apply(null,arguments);null!==o&&rr(e,i,n,r)}}(e,t,r)),tr.addEventListener(t,e,Z?{capture:r,passive:i}:r)}function rr(t,e,n,r){(r||tr).removeEventListener(t,e._withTask||e,n)}function ir(t,e){if(!i(t.data.on)||!i(e.data.on)){var n=e.data.on||{},r=t.data.on||{};tr=e.elm,function(t){if(o(t.__r)){var e=q?"change":"input";t[e]=[].concat(t.__r,t[e]||[]),delete t.__r}o(t.__c)&&(t.change=[].concat(t.__c,t.change||[]),delete t.__c)}(n),oe(n,r,nr,rr,e.context),tr=void 0}}var or={create:ir,update:ir};function ar(t,e){if(!i(t.data.domProps)||!i(e.data.domProps)){var n,r,a=e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n in o(c.__ob__)&&(c=e.data.domProps=$({},c)),s)i(c[n])&&(a[n]="");for(n in c){if(r=c[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n){a._value=r;var l=i(r)?"":String(r);sr(a,l)&&(a.value=l)}else a[n]=r}}}function sr(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(o(r)){if(r.lazy)return!1;if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var cr={create:ar,update:ar},lr=y((function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach((function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function ur(t){var e=fr(t.style);return t.staticStyle?$(t.staticStyle,e):e}function fr(t){return Array.isArray(t)?M(t):"string"==typeof t?lr(t):t}var dr,pr=/^--/,hr=/\s*!important$/,vr=function(t,e,n){if(pr.test(e))t.style.setProperty(e,n);else if(hr.test(n))t.style.setProperty(e,n.replace(hr,""),"important");else{var r=mr(e);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)t.style[r]=n[i];else t.style[r]=n}},gr=["Webkit","Moz","ms"],mr=y((function(t){if(dr=dr||document.createElement("div").style,"filter"!==(t=w(t))&&t in dr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<gr.length;n++){var r=gr[n]+e;if(r in dr)return r}}));function br(t,e){var n=e.data,r=t.data;if(!(i(n.staticStyle)&&i(n.style)&&i(r.staticStyle)&&i(r.style))){var a,s,c=e.elm,l=r.staticStyle,u=r.normalizedStyle||r.style||{},f=l||u,d=fr(e.data.style)||{};e.data.normalizedStyle=o(d.__ob__)?$({},d):d;var p=function(t,e){var n,r={};if(e)for(var i=t;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=ur(i.data))&&$(r,n);(n=ur(t.data))&&$(r,n);for(var o=t;o=o.parent;)o.data&&(n=ur(o.data))&&$(r,n);return r}(e,!0);for(s in f)i(p[s])&&vr(c,s,"");for(s in p)(a=p[s])!==f[s]&&vr(c,s,null==a?"":a)}}var _r={create:br,update:br};function yr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function xr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function wr(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&$(e,Cr(t.name||"v")),$(e,t),e}return"string"==typeof t?Cr(t):void 0}}var Cr=y((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),kr=U&&!X,Sr="transition",Ar="transitionend",Or="animation",$r="animationend";kr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Sr="WebkitTransition",Ar="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Or="WebkitAnimation",$r="webkitAnimationEnd"));var Mr=U?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Er(t){Mr((function(){Mr(t)}))}function jr(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),yr(t,e))}function Tr(t,e){t._transitionClasses&&m(t._transitionClasses,e),xr(t,e)}function Fr(t,e,n){var r=Ir(t,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s="transition"===i?Ar:$r,c=0,l=function(){t.removeEventListener(s,u),n()},u=function(e){e.target===t&&++c>=a&&l()};setTimeout((function(){c<a&&l()}),o+1),t.addEventListener(s,u)}var Pr=/\b(transform|all)(,|$)/;function Ir(t,e){var n,r=window.getComputedStyle(t),i=r[Sr+"Delay"].split(", "),o=r[Sr+"Duration"].split(", "),a=Lr(i,o),s=r[Or+"Delay"].split(", "),c=r[Or+"Duration"].split(", "),l=Lr(s,c),u=0,f=0;return"transition"===e?a>0&&(n="transition",u=a,f=o.length):"animation"===e?l>0&&(n="animation",u=l,f=c.length):f=(n=(u=Math.max(a,l))>0?a>l?"transition":"animation":null)?"transition"===n?o.length:c.length:0,{type:n,timeout:u,propCount:f,hasTransform:"transition"===n&&Pr.test(r[Sr+"Property"])}}function Lr(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return Rr(e)+Rr(t[n])})))}function Rr(t){return 1e3*Number(t.slice(0,-1))}function Dr(t,e){var n=t.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=wr(t.data.transition);if(!i(r)&&!o(n._enterCb)&&1===n.nodeType){for(var a=r.css,s=r.type,l=r.enterClass,u=r.enterToClass,f=r.enterActiveClass,d=r.appearClass,p=r.appearToClass,v=r.appearActiveClass,g=r.beforeEnter,m=r.enter,b=r.afterEnter,_=r.enterCancelled,y=r.beforeAppear,x=r.appear,w=r.afterAppear,C=r.appearCancelled,k=r.duration,S=_e,A=_e.$vnode;A&&A.parent;)S=(A=A.parent).context;var O=!S._isMounted||!t.isRootInsert;if(!O||x||""===x){var $=O&&d?d:l,M=O&&v?v:f,E=O&&p?p:u,j=O&&y||g,T=O&&"function"==typeof x?x:m,F=O&&w||b,P=O&&C||_,L=h(c(k)?k.enter:k);0;var R=!1!==a&&!X,D=Br(T),N=n._enterCb=I((function(){R&&(Tr(n,E),Tr(n,M)),N.cancelled?(R&&Tr(n,$),P&&P(n)):F&&F(n),n._enterCb=null}));t.data.show||ae(t,"insert",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),T&&T(n,N)})),j&&j(n),R&&(jr(n,$),jr(n,M),Er((function(){Tr(n,$),N.cancelled||(jr(n,E),D||(Hr(L)?setTimeout(N,L):Fr(n,s,N)))}))),t.data.show&&(e&&e(),T&&T(n,N)),R||D||N()}}}function Nr(t,e){var n=t.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=wr(t.data.transition);if(i(r)||1!==n.nodeType)return e();if(!o(n._leaveCb)){var a=r.css,s=r.type,l=r.leaveClass,u=r.leaveToClass,f=r.leaveActiveClass,d=r.beforeLeave,p=r.leave,v=r.afterLeave,g=r.leaveCancelled,m=r.delayLeave,b=r.duration,_=!1!==a&&!X,y=Br(p),x=h(c(b)?b.leave:b);0;var w=n._leaveCb=I((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),_&&(Tr(n,u),Tr(n,f)),w.cancelled?(_&&Tr(n,l),g&&g(n)):(e(),v&&v(n)),n._leaveCb=null}));m?m(C):C()}function C(){w.cancelled||(t.data.show||((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),d&&d(n),_&&(jr(n,l),jr(n,f),Er((function(){Tr(n,l),w.cancelled||(jr(n,u),y||(Hr(x)?setTimeout(w,x):Fr(n,s,w)))}))),p&&p(n,w),_||y||w())}}function Hr(t){return"number"==typeof t&&!isNaN(t)}function Br(t){if(i(t))return!1;var e=t.fns;return o(e)?Br(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function zr(t,e){!0!==e.data.show&&Dr(e)}var Ur=function(t){var e,n,r={},c=t.modules,l=t.nodeOps;for(e=0;e<Nn.length;++e)for(r[Nn[e]]=[],n=0;n<c.length;++n)o(c[n][Nn[e]])&&r[Nn[e]].push(c[n][Nn[e]]);function u(t){var e=l.parentNode(t);o(e)&&l.removeChild(e,t)}function f(t,e,n,i,s,c,u){if(o(t.elm)&&o(c)&&(t=c[u]=vt(t)),t.isRootInsert=!s,!function(t,e,n,i){var s=t.data;if(o(s)){var c=o(t.componentInstance)&&s.keepAlive;if(o(s=s.hook)&&o(s=s.init)&&s(t,!1,n,i),o(t.componentInstance))return d(t,e),a(c)&&function(t,e,n,i){var a,s=t;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(a=s.data)&&o(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](Dn,s);e.push(s);break}p(n,t.elm,i)}(t,e,n,i),!0}}(t,e,n,i)){var f=t.data,v=t.children,g=t.tag;o(g)?(t.elm=t.ns?l.createElementNS(t.ns,g):l.createElement(g,t),b(t),h(t,v,e),o(f)&&m(t,e),p(n,t.elm,i)):a(t.isComment)?(t.elm=l.createComment(t.text),p(n,t.elm,i)):(t.elm=l.createTextNode(t.text),p(n,t.elm,i))}}function d(t,e){o(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,g(t)?(m(t,e),b(t)):(Rn(t),e.push(t))}function p(t,e,n){o(t)&&(o(n)?n.parentNode===t&&l.insertBefore(t,e,n):l.appendChild(t,e))}function h(t,e,n){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)f(e[r],n,t.elm,null,!0,e,r)}else s(t.text)&&l.appendChild(t.elm,l.createTextNode(String(t.text)))}function g(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return o(t.tag)}function m(t,n){for(var i=0;i<r.create.length;++i)r.create[i](Dn,t);o(e=t.data.hook)&&(o(e.create)&&e.create(Dn,t),o(e.insert)&&n.push(t))}function b(t){var e;if(o(e=t.fnScopeId))l.setStyleScope(t.elm,e);else for(var n=t;n;)o(e=n.context)&&o(e=e.$options._scopeId)&&l.setStyleScope(t.elm,e),n=n.parent;o(e=_e)&&e!==t.context&&e!==t.fnContext&&o(e=e.$options._scopeId)&&l.setStyleScope(t.elm,e)}function _(t,e,n,r,i,o){for(;r<=i;++r)f(n[r],o,t,e,!1,n,r)}function y(t){var e,n,i=t.data;if(o(i))for(o(e=i.hook)&&o(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(o(e=t.children))for(n=0;n<t.children.length;++n)y(t.children[n])}function x(t,e,n,r){for(;n<=r;++n){var i=e[n];o(i)&&(o(i.tag)?(w(i),y(i)):u(i.elm))}}function w(t,e){if(o(e)||o(t.data)){var n,i=r.remove.length+1;for(o(e)?e.listeners+=i:e=function(t,e){function n(){0==--n.listeners&&u(t)}return n.listeners=e,n}(t.elm,i),o(n=t.componentInstance)&&o(n=n._vnode)&&o(n.data)&&w(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);o(n=t.data.hook)&&o(n=n.remove)?n(t,e):e()}else u(t.elm)}function C(t,e,n,r){for(var i=n;i<r;i++){var a=e[i];if(o(a)&&Hn(t,a))return i}}function k(t,e,n,s){if(t!==e){var c=e.elm=t.elm;if(a(t.isAsyncPlaceholder))o(e.asyncFactory.resolved)?O(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(a(e.isStatic)&&a(t.isStatic)&&e.key===t.key&&(a(e.isCloned)||a(e.isOnce)))e.componentInstance=t.componentInstance;else{var u,d=e.data;o(d)&&o(u=d.hook)&&o(u=u.prepatch)&&u(t,e);var p=t.children,h=e.children;if(o(d)&&g(e)){for(u=0;u<r.update.length;++u)r.update[u](t,e);o(u=d.hook)&&o(u=u.update)&&u(t,e)}i(e.text)?o(p)&&o(h)?p!==h&&function(t,e,n,r,a){var s,c,u,d=0,p=0,h=e.length-1,v=e[0],g=e[h],m=n.length-1,b=n[0],y=n[m],w=!a;for(0;d<=h&&p<=m;)i(v)?v=e[++d]:i(g)?g=e[--h]:Hn(v,b)?(k(v,b,r),v=e[++d],b=n[++p]):Hn(g,y)?(k(g,y,r),g=e[--h],y=n[--m]):Hn(v,y)?(k(v,y,r),w&&l.insertBefore(t,v.elm,l.nextSibling(g.elm)),v=e[++d],y=n[--m]):Hn(g,b)?(k(g,b,r),w&&l.insertBefore(t,g.elm,v.elm),g=e[--h],b=n[++p]):(i(s)&&(s=Bn(e,d,h)),i(c=o(b.key)?s[b.key]:C(b,e,d,h))?f(b,r,t,v.elm,!1,n,p):Hn(u=e[c],b)?(k(u,b,r),e[c]=void 0,w&&l.insertBefore(t,u.elm,v.elm)):f(b,r,t,v.elm,!1,n,p),b=n[++p]);d>h?_(t,i(n[m+1])?null:n[m+1].elm,n,p,m,r):p>m&&x(0,e,d,h)}(c,p,h,n,s):o(h)?(o(t.text)&&l.setTextContent(c,""),_(c,null,h,0,h.length-1,n)):o(p)?x(0,p,0,p.length-1):o(t.text)&&l.setTextContent(c,""):t.text!==e.text&&l.setTextContent(c,e.text),o(d)&&o(u=d.hook)&&o(u=u.postpatch)&&u(t,e)}}}function S(t,e,n){if(a(n)&&o(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var A=v("attrs,class,staticClass,staticStyle,key");function O(t,e,n,r){var i,s=e.tag,c=e.data,l=e.children;if(r=r||c&&c.pre,e.elm=t,a(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(c)&&(o(i=c.hook)&&o(i=i.init)&&i(e,!0),o(i=e.componentInstance)))return d(e,n),!0;if(o(s)){if(o(l))if(t.hasChildNodes())if(o(i=c)&&o(i=i.domProps)&&o(i=i.innerHTML)){if(i!==t.innerHTML)return!1}else{for(var u=!0,f=t.firstChild,p=0;p<l.length;p++){if(!f||!O(f,l[p],n,r)){u=!1;break}f=f.nextSibling}if(!u||f)return!1}else h(e,l,n);if(o(c)){var v=!1;for(var g in c)if(!A(g)){v=!0,m(e,n);break}!v&&c.class&&ee(c.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,s,c,u){if(!i(e)){var d,p=!1,h=[];if(i(t))p=!0,f(e,h,c,u);else{var v=o(t.nodeType);if(!v&&Hn(t,e))k(t,e,h,s);else{if(v){if(1===t.nodeType&&t.hasAttribute("data-server-rendered")&&(t.removeAttribute("data-server-rendered"),n=!0),a(n)&&O(t,e,h))return S(e,h,!0),t;d=t,t=new ft(l.tagName(d).toLowerCase(),{},[],void 0,d)}var m=t.elm,b=l.parentNode(m);if(f(e,h,m._leaveCb?null:b,l.nextSibling(m)),o(e.parent))for(var _=e.parent,w=g(e);_;){for(var C=0;C<r.destroy.length;++C)r.destroy[C](_);if(_.elm=e.elm,w){for(var A=0;A<r.create.length;++A)r.create[A](Dn,_);var $=_.data.hook.insert;if($.merged)for(var M=1;M<$.fns.length;M++)$.fns[M]()}else Rn(_);_=_.parent}o(b)?x(0,[t],0,0):o(t.tag)&&y(t)}}return S(e,h,p),e.elm}o(t)&&y(t)}}({nodeOps:In,modules:[Zn,er,or,cr,_r,U?{create:zr,activate:zr,remove:function(t,e){!0!==t.data.show?Nr(t,e):e()}}:{}].concat(Xn)});X&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&Jr(t,"input")}));var Gr={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ae(n,"postpatch",(function(){Gr.componentUpdated(t,e,n)})):Vr(t,e,n.context),t._vOptions=[].map.call(t.options,Xr)):("textarea"===n.tag||Pn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",Yr),t.addEventListener("compositionend",Kr),t.addEventListener("change",Kr),X&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Vr(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,Xr);if(i.some((function(t,e){return!F(t,r[e])})))(t.multiple?e.value.some((function(t){return qr(t,i)})):e.value!==e.oldValue&&qr(e.value,i))&&Jr(t,"change")}}};function Vr(t,e,n){Wr(t,e,n),(q||Y)&&setTimeout((function(){Wr(t,e,n)}),0)}function Wr(t,e,n){var r=e.value,i=t.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],i)o=P(r,Xr(a))>-1,a.selected!==o&&(a.selected=o);else if(F(Xr(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));i||(t.selectedIndex=-1)}}function qr(t,e){return e.every((function(e){return!F(e,t)}))}function Xr(t){return"_value"in t?t._value:t.value}function Yr(t){t.target.composing=!0}function Kr(t){t.target.composing&&(t.target.composing=!1,Jr(t.target,"input"))}function Jr(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Zr(t){return!t.componentInstance||t.data&&t.data.transition?t:Zr(t.componentInstance._vnode)}var Qr={model:Gr,show:{bind:function(t,e,n){var r=e.value,i=(n=Zr(n)).data&&n.data.transition,o=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,Dr(n,(function(){t.style.display=o}))):t.style.display=r?o:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=Zr(n)).data&&n.data.transition?(n.data.show=!0,r?Dr(n,(function(){t.style.display=t.__vOriginalDisplay})):Nr(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}}},ti={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ei(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ei(de(e.children)):t}function ni(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var o in i)e[w(o)]=i[o];return e}function ri(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var ii={name:"transition",props:ti,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter((function(t){return t.tag||fe(t)}))).length){0;var r=this.mode;0;var i=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return i;var o=ei(i);if(!o)return i;if(this._leaving)return ri(t,i);var a="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?a+"comment":a+o.tag:s(o.key)?0===String(o.key).indexOf(a)?o.key:a+o.key:o.key;var c=(o.data||(o.data={})).transition=ni(this),l=this._vnode,u=ei(l);if(o.data.directives&&o.data.directives.some((function(t){return"show"===t.name}))&&(o.data.show=!0),u&&u.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(o,u)&&!fe(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var f=u.data.transition=$({},c);if("out-in"===r)return this._leaving=!0,ae(f,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),ri(t,i);if("in-out"===r){if(fe(o))return l;var d,p=function(){d()};ae(c,"afterEnter",p),ae(c,"enterCancelled",p),ae(f,"delayLeave",(function(t){d=t}))}}return i}}},oi=$({tag:String,moveClass:String},ti);function ai(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function si(t){t.data.newPos=t.elm.getBoundingClientRect()}function ci(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var o=t.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}delete oi.mode;var li={Transition:ii,TransitionGroup:{props:oi,render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=ni(this),s=0;s<i.length;s++){var c=i[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))o.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var l=[],u=[],f=0;f<r.length;f++){var d=r[f];d.data.transition=a,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?l.push(d):u.push(d)}this.kept=t(e,null,l),this.removed=u}return t(e,null,o)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(ai),t.forEach(si),t.forEach(ci),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;jr(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Ar,n._moveCb=function t(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Ar,t),n._moveCb=null,Tr(n,e))})}})))},methods:{hasMove:function(t,e){if(!kr)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){xr(n,t)})),yr(n,e),n.style.display="none",this.$el.appendChild(n);var r=Ir(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};ln.config.mustUseProp=function(t,e,n){return"value"===n&&bn(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},ln.config.isReservedTag=Tn,ln.config.isReservedAttr=mn,ln.config.getTagNamespace=function(t){return jn(t)?"svg":"math"===t?"math":void 0},ln.config.isUnknownElement=function(t){if(!U)return!0;if(Tn(t))return!1;if(t=t.toLowerCase(),null!=Fn[t])return Fn[t];var e=document.createElement(t);return t.indexOf("-")>-1?Fn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Fn[t]=/HTMLUnknownElement/.test(e.toString())},$(ln.options.directives,Qr),$(ln.options.components,li),ln.prototype.__patch__=U?Ur:E,ln.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=pt),we(t,"beforeMount"),r=function(){t._update(t._render(),n)},new je(t,r,E,null,!0),n=!1,null==t.$vnode&&(t._isMounted=!0,we(t,"mounted")),t}(this,t=t&&U?function(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}(t):void 0,e)},U&&setTimeout((function(){D.devtools&&et&&et.emit("init",ln)}),0),e.default=ln}.call(this,n(27),n(41).setImmediate)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.coordToPixel=function(t,e,n){return t+e*n},e.pixelToCoord=function(t,e){return{x:t%e,y:Math.floor(t/e)}}},function(t,e,n){"use strict";var r=a(n(38)),i=a(n(44)),o=a(n(48));function a(t){return t&&t.__esModule?t:{default:t}}n(64),new r.default({el:"#app",store:i.default,render:function(t){return t(o.default)}})},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(42),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(27))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,a,s,c=1,l={},u=!1,f=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){h(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){h(t.data)},r=function(t){o.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){h(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(h,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&h(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),d.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return l[c]=i,r(c),c++},d.clearImmediate=p}function p(t){delete l[t]}function h(t){if(u)setTimeout(h,0,t);else{var e=l[t];if(e){u=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{p(t),u=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(27),n(43))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,l=[],u=!1,f=-1;function d(){u&&c&&(u=!1,c.length?l=c.concat(l):f=-1,l.length&&p())}function p(){if(!u){var t=s(d);u=!0;for(var e=l.length;e;){for(c=l,l=[];++f<e;)c&&c[f].run();f=-1,e=l.length}c=null,u=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function v(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new h(t,e)),1!==l.length||u||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=c(n(38)),i=c(n(2)),o=c(n(45)),a=c(n(46)),s=c(n(47));function c(t){return t&&t.__esModule?t:{default:t}}r.default.use(i.default);var l=new i.default.Store({strict:!1,modules:{canvas:a.default,heatmap:o.default,sand:s.default}});e.default=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i={color0:"#3288bd",color1:"#99d594",color2:"#fee08b",color3:"#d53e4f"},o={updateColor:function(t,e){var n=e.step,r=e.color;return t[n]=r},resetColors:function(t){return Object.keys(i).forEach((function(e){return t[e]=i[e]}))}};e.default={namespaced:!0,state:function(){return r({},i)},mutations:o}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=250,o=800,a=325,s=5,c=15,l={width:a,height:a,resolution:5},u={setWidth:function(t,e){return t.width=parseInt(e,10)},setHeight:function(t,e){return t.height=parseInt(e,10)},setResolution:function(t,e){return t.resolution=parseInt(e)},resetDimensions:function(t){return Object.keys(l).forEach((function(e){return t[e]=l[e]}))}},f={cols:function(t){return Math.floor(t.width/t.resolution)},rows:function(t){return Math.floor(t.height/t.resolution)},minWidth:function(t){var e=i;return Math.floor(e/t.resolution)%2==0&&(e+=t.resolution),e},maxWidth:function(t){var e=o;return Math.floor(e/t.resolution)%2==0&&(e+=t.resolution),e},minHeight:function(t){var e=i;return Math.floor(e/t.resolution)%2==0&&(e+=t.resolution),e},maxHeight:function(t){var e=o;return Math.floor(e/t.resolution)%2==0&&(e+=t.resolution),e},minResolution:function(t){return s},maxResolution:function(t){return c}};e.default={namespaced:!0,state:function(){return r({},l)},mutations:u,getters:f}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i={baseSand:0,startingSand:1e3},o={setBaseSand:function(t,e){return t.baseSand=parseInt(e,10)},setStartingSand:function(t,e){return t.startingSand=parseInt(e,10)},resetSand:function(t){return Object.keys(i).forEach((function(e){t[e]=i[e]}))},setSand:function(t,e){return t.sand=e},updateSand:function(t,e){var n=e.idx,r=e.amount;return t.sand.splice(n,1,r)}};e.default={namespaced:!0,state:function(){return r({},i,{sand:[]})},mutations:o,getters:{sandTotal:function(t){return t.sand.reduce((function(t,e){return t+e}),0)}}}},function(t,e,n){"use strict";n.r(e);var r=n(29),i=n(4);for(var o in i)"default"!==o&&function(t){n.d(e,t,(function(){return i[t]}))}(o);n(62);var a=n(0),s=Object(a.a)(i.default,r.a,r.b,!1,null,"426338b8",null);e.default=s.exports},function(t,e,n){"use strict";n.r(e);var r=n(34),i=n(6);for(var o in i)"default"!==o&&function(t){n.d(e,t,(function(){return i[t]}))}(o);var a=n(0),s=Object(a.a)(i.default,r.a,r.b,!1,null,null,null);e.default=s.exports},function(t,e,n){"use strict";n.r(e);var r=n(31),i=n(8);for(var o in i)"default"!==o&&function(t){n.d(e,t,(function(){return i[t]}))}(o);var a=n(0),s=Object(a.a)(i.default,r.a,r.b,!1,null,null,null);e.default=s.exports},function(t,e,n){"use strict";n.r(e);var r=n(10);for(var i in r)"default"!==i&&function(t){n.d(e,t,(function(){return r[t]}))}(i);var o=n(0),a=Object(o.a)(r.default,void 0,void 0,!1,null,null,null);e.default=a.exports},function(t,e,n){"use strict";n.r(e);var r=n(30),i=n(12);for(var o in i)"default"!==o&&function(t){n.d(e,t,(function(){return i[t]}))}(o);var a=n(0),s=Object(a.a)(i.default,r.a,r.b,!1,null,null,null);e.default=s.exports},function(t,e,n){"use strict";n.r(e);var r=n(32),i=n(16);for(var o in i)"default"!==o&&function(t){n.d(e,t,(function(){return i[t]}))}(o);var a=n(0),s=Object(a.a)(i.default,r.a,r.b,!1,null,null,null);e.default=s.exports},function(t,e,n){"use strict";n.r(e);var r=n(36),i=n(18);for(var o in i)"default"!==o&&function(t){n.d(e,t,(function(){return i[t]}))}(o);n(56);var a=n(0),s=Object(a.a)(i.default,r.a,r.b,!1,null,"531a026a",null);e.default=s.exports},function(t,e,n){t.exports=function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=22)}([function(t,e){function n(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r);return[n].concat(r.sources.map((function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"}))).concat([i]).join("\n")}return[n].join("\n")}t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=n(e,t);return e[2]?"@media "+e[2]+"{"+r+"}":r})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){function r(t){for(var e=0;e<t.length;e++){var n=t[e],r=u[n.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](n.parts[i]);for(;i<n.parts.length;i++)r.parts.push(o(n.parts[i]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var a=[];for(i=0;i<n.parts.length;i++)a.push(o(n.parts[i]));u[n.id]={id:n.id,refs:1,parts:a}}}}function i(){var t=document.createElement("style");return t.type="text/css",f.appendChild(t),t}function o(t){var e,n,r=document.querySelector('style[data-vue-ssr-id~="'+t.id+'"]');if(r){if(h)return v;r.parentNode.removeChild(r)}if(g){var o=p++;r=d||(d=i()),e=a.bind(null,r,o,!1),n=a.bind(null,r,o,!0)}else r=i(),e=s.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap)return;e(t=r)}else n()}}function a(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=m(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function s(t,e){var n=e.css,r=e.media,i=e.sourceMap;if(r&&t.setAttribute("media",r),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var c="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!c)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var l=n(26),u={},f=c&&(document.head||document.getElementsByTagName("head")[0]),d=null,p=0,h=!1,v=function(){},g="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());t.exports=function(t,e,n){h=n;var i=l(t,e);return r(i),function(e){for(var n=[],o=0;o<i.length;o++){var a=i[o];(s=u[a.id]).refs--,n.push(s)}for(e?r(i=l(t,e)):i=[],o=0;o<n.length;o++){var s;if(0===(s=n[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete u[s.id]}}}};var m=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e){t.exports=function(t,e,n,r,i,o){var a,s=t=t||{},c=typeof t.default;"object"!==c&&"function"!==c||(a=t,s=t.default);var l,u="function"==typeof s?s.options:s;if(e&&(u.render=e.render,u.staticRenderFns=e.staticRenderFns,u._compiled=!0),n&&(u.functional=!0),i&&(u._scopeId=i),o?(l=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),r&&r.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(o)},u._ssrRegister=l):r&&(l=r),l){var f=u.functional,d=f?u.render:u.beforeCreate;f?(u._injectStyles=l,u.render=function(t,e){return l.call(e),d(t,e)}):u.beforeCreate=d?[].concat(d,l):[l]}return{esModule:a,exports:s,options:u}}},function(t,e,n){"use strict";function r(t,e){var n,r=t&&t.a;!(n=t&&t.hsl?(0,i.default)(t.hsl):t&&t.hex&&t.hex.length>0?(0,i.default)(t.hex):(0,i.default)(t))||void 0!==n._a&&null!==n._a||n.setAlpha(r||1);var o=n.toHsl(),a=n.toHsv();return 0===o.s&&(a.h=o.h=t.h||t.hsl&&t.hsl.h||e||0),{hsl:o,hex:n.toHexString().toUpperCase(),rgba:n.toRgb(),hsv:a,oldHue:t.h||e||o.h,source:t.source,a:t.a||n.getAlpha()}}Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){return t&&t.__esModule?t:{default:t}}(n(27));e.default={props:["value"],data:function(){return{val:r(this.value)}},computed:{colors:{get:function(){return this.val},set:function(t){this.val=t,this.$emit("input",t)}}},watch:{value:function(t){this.val=r(t)}},methods:{colorChange:function(t,e){this.oldHue=this.colors.hsl.h,this.colors=r(t,e||this.oldHue)},isValidHex:function(t){return(0,i.default)(t).isValid()},simpleCheckForValidColor:function(t){for(var e=["r","g","b","a","h","s","l","v"],n=0,r=0,i=0;i<e.length;i++){var o=e[i];t[o]&&(n++,isNaN(t[o])||r++)}if(n===r)return t}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(10),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(30),s=!1,c=function(t){s||n(28)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/common/EditableInput.vue",e.default=l.exports},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(14),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(45),s=!1,c=function(t){s||n(43)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/common/Hue.vue",e.default=l.exports},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(17),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(59),s=!1,c=function(t){s||n(55)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/common/Saturation.vue",e.default=l.exports},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(18),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(65),s=!1,c=function(t){s||n(60)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/common/Alpha.vue",e.default=l.exports},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(19),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(64),s=!1,c=function(t){s||n(62)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/common/Checkboard.vue",e.default=l.exports},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(3)),o=r(n(4)),a=["#4D4D4D","#999999","#FFFFFF","#F44E3B","#FE9200","#FCDC00","#DBDF00","#A4DD00","#68CCCA","#73D8FF","#AEA1FF","#FDA1FF","#333333","#808080","#CCCCCC","#D33115","#E27300","#FCC400","#B0BC00","#68BC00","#16A5A5","#009CE0","#7B64FF","#FA28FF","#000000","#666666","#B3B3B3","#9F0500","#C45100","#FB9E00","#808900","#194D33","#0C797D","#0062B1","#653294","#AB149E"];e.default={name:"Compact",mixins:[i.default],props:{palette:{type:Array,default:function(){return a}}},components:{"ed-in":o.default},computed:{pick:function(){return this.colors.hex}},methods:{handlerClick:function(t){this.colorChange({hex:t,source:"hex"})}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"editableInput",props:{label:String,desc:String,value:[String,Number],max:Number,min:Number,arrowOffset:{type:Number,default:1}},computed:{val:{get:function(){return this.value},set:function(t){if(!(void 0!==this.max&&+t>this.max))return t;this.$refs.input.value=this.max}}},methods:{update:function(t){this.handleChange(t.target.value)},handleChange:function(t){var e={};e[this.label]=t,(void 0===e.hex&&void 0===e["#"]||t.length>5)&&this.$emit("change",e)},handleBlur:function(t){console.log(t)},handleKeyDown:function(t){var e=this.val,n=Number(e);if(n){var r=this.arrowOffset||1;38===t.keyCode&&(e=n+r,this.handleChange(e),t.preventDefault()),40===t.keyCode&&(e=n-r,this.handleChange(e),t.preventDefault())}},handleDrag:function(t){console.log(t)},handleMouseDown:function(t){console.log(t)}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(3)),i=["#FFFFFF","#F2F2F2","#E6E6E6","#D9D9D9","#CCCCCC","#BFBFBF","#B3B3B3","#A6A6A6","#999999","#8C8C8C","#808080","#737373","#666666","#595959","#4D4D4D","#404040","#333333","#262626","#0D0D0D","#000000"];e.default={name:"Grayscale",mixins:[r.default],props:{palette:{type:Array,default:function(){return i}}},components:{},computed:{pick:function(){return this.colors.hex}},methods:{handlerClick:function(t){this.colorChange({hex:t,source:"hex"})}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(4)),o=r(n(3));e.default={name:"Material",mixins:[o.default],components:{"ed-in":i.default},methods:{onChange:function(t){t&&(t.hex?this.isValidHex(t.hex)&&this.colorChange({hex:t.hex,source:"hex"}):(t.r||t.g||t.b)&&this.colorChange({r:t.r||this.colors.rgba.r,g:t.g||this.colors.rgba.g,b:t.b||this.colors.rgba.b,a:t.a||this.colors.rgba.a,source:"rgba"}))}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(3)),o=r(n(5));e.default={name:"Slider",mixins:[i.default],props:{direction:String},components:{hue:o.default},computed:{activeOffset:function(){return Math.round(100*this.colors.hsl.s)/100==.5?Math.round(100*this.colors.hsl.l)/100:0}},data:function(){return{swatches:[".80",".65",".50",".35",".20"]}},methods:{hueChange:function(t){this.colorChange(t)},handleSwClick:function(t,e){this.colorChange({h:this.colors.hsl.h,s:.5,l:e,source:"hsl"})}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"Hue",props:{value:Object,direction:{type:String,default:"horizontal"}},data:function(){return{oldHue:0,pullDirection:""}},computed:{colors:function(){var t=this.value.hsl.h;return 0!==t&&t-this.oldHue>0&&(this.pullDirection="right"),0!==t&&t-this.oldHue<0&&(this.pullDirection="left"),this.oldHue=t,this.value},directionClass:function(){return{"vc-hue--horizontal":"horizontal"===this.direction,"vc-hue--vertical":"vertical"===this.direction}},pointerTop:function(){return"vertical"===this.direction?0===this.colors.hsl.h&&"right"===this.pullDirection?0:-100*this.colors.hsl.h/360+100+"%":0},pointerLeft:function(){return"vertical"===this.direction?0:0===this.colors.hsl.h&&"right"===this.pullDirection?"100%":100*this.colors.hsl.h/360+"%"}},methods:{handleChange:function(t,e){!e&&t.preventDefault();var n,r=this.$refs.container,i=r.clientWidth,o=r.clientHeight,a=r.getBoundingClientRect().left+window.pageXOffset,s=r.getBoundingClientRect().top+window.pageYOffset,c=(t.pageX||(t.touches?t.touches[0].pageX:0))-a,l=(t.pageY||(t.touches?t.touches[0].pageY:0))-s;"vertical"===this.direction?(n=l<0?360:l>o?0:360*(-100*l/o+100)/100,this.colors.hsl.h!==n&&this.$emit("change",{h:n,s:this.colors.hsl.s,l:this.colors.hsl.l,a:this.colors.hsl.a,source:"hsl"})):(n=c<0?0:c>i?360:100*c/i*360/100,this.colors.hsl.h!==n&&this.$emit("change",{h:n,s:this.colors.hsl.s,l:this.colors.hsl.l,a:this.colors.hsl.a,source:"hsl"}))},handleMouseDown:function(t){this.handleChange(t,!0),window.addEventListener("mousemove",this.handleChange),window.addEventListener("mouseup",this.handleMouseUp)},handleMouseUp:function(t){this.unbindEventListeners()},unbindEventListeners:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(50)),o=r(n(3)),a=["red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","brown","blueGrey","black"],s=["900","700","500","300","100"],c=function(){var t=[];return a.forEach((function(e){var n=[];"black"===e.toLowerCase()||"white"===e.toLowerCase()?n=n.concat(["#000000","#FFFFFF"]):s.forEach((function(t){var r=i.default[e][t];n.push(r.toUpperCase())})),t.push(n)})),t}();e.default={name:"Swatches",mixins:[o.default],props:{palette:{type:Array,default:function(){return c}}},computed:{pick:function(){return this.colors.hex}},methods:{equal:function(t){return t.toLowerCase()===this.colors.hex.toLowerCase()},handlerClick:function(t){this.colorChange({hex:t,source:"hex"})}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(3)),o=r(n(4)),a=r(n(6)),s=r(n(5)),c=r(n(7));e.default={name:"Photoshop",mixins:[i.default],props:{head:{type:String,default:"Color Picker"},disableFields:{type:Boolean,default:!1}},components:{saturation:a.default,hue:s.default,alpha:c.default,"ed-in":o.default},data:function(){return{currentColor:"#FFF"}},computed:{hsv:function(){var t=this.colors.hsv;return{h:t.h.toFixed(),s:(100*t.s).toFixed(),v:(100*t.v).toFixed()}},hex:function(){var t=this.colors.hex;return t&&t.replace("#","")}},created:function(){this.currentColor=this.colors.hex},methods:{childChange:function(t){this.colorChange(t)},inputChange:function(t){t&&(t["#"]?this.isValidHex(t["#"])&&this.colorChange({hex:t["#"],source:"hex"}):t.r||t.g||t.b||t.a?this.colorChange({r:t.r||this.colors.rgba.r,g:t.g||this.colors.rgba.g,b:t.b||this.colors.rgba.b,a:t.a||this.colors.rgba.a,source:"rgba"}):(t.h||t.s||t.v)&&this.colorChange({h:t.h||this.colors.hsv.h,s:t.s/100||this.colors.hsv.s,v:t.v/100||this.colors.hsv.v,source:"hsv"}))},clickCurrentColor:function(){this.colorChange({hex:this.currentColor,source:"hex"})},handleAccept:function(){this.$emit("ok")},handleCancel:function(){this.$emit("cancel")}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(57));e.default={name:"Saturation",props:{value:Object},computed:{colors:function(){return this.value},bgColor:function(){return"hsl("+this.colors.hsv.h+", 100%, 50%)"},pointerTop:function(){return-100*this.colors.hsv.v+1+100+"%"},pointerLeft:function(){return 100*this.colors.hsv.s+"%"}},methods:{throttle:(0,r.default)((function(t,e){t(e)}),20,{leading:!0,trailing:!1}),handleChange:function(t,e){!e&&t.preventDefault();var n=this.$refs.container,r=n.clientWidth,i=n.clientHeight,o=n.getBoundingClientRect().left+window.pageXOffset,a=n.getBoundingClientRect().top+window.pageYOffset,s=(t.pageX||(t.touches?t.touches[0].pageX:0))-o,c=(t.pageY||(t.touches?t.touches[0].pageY:0))-a;s<0?s=0:s>r?s=r:c<0?c=0:c>i&&(c=i);var l=s/r,u=-c/i+1;u=(u=u>0?u:0)>1?1:u,this.throttle(this.onChange,{h:this.colors.hsv.h,s:l,v:u,a:this.colors.hsv.a,source:"hsva"})},onChange:function(t){this.$emit("change",t)},handleMouseDown:function(t){window.addEventListener("mousemove",this.handleChange),window.addEventListener("mouseup",this.handleChange),window.addEventListener("mouseup",this.handleMouseUp)},handleMouseUp:function(t){this.unbindEventListeners()},unbindEventListeners:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(8));e.default={name:"Alpha",props:{value:Object,onChange:Function},components:{checkboard:r.default},computed:{colors:function(){return this.value},gradientColor:function(){var t=this.colors.rgba,e=[t.r,t.g,t.b].join(",");return"linear-gradient(to right, rgba("+e+", 0) 0%, rgba("+e+", 1) 100%)"}},methods:{handleChange:function(t,e){!e&&t.preventDefault();var n,r=this.$refs.container,i=r.clientWidth,o=r.getBoundingClientRect().left+window.pageXOffset,a=(t.pageX||(t.touches?t.touches[0].pageX:0))-o;n=a<0?0:a>i?1:Math.round(100*a/i)/100,this.colors.a!==n&&this.$emit("change",{h:this.colors.hsl.h,s:this.colors.hsl.s,l:this.colors.hsl.l,a:n,source:"rgba"})},handleMouseDown:function(t){this.handleChange(t,!0),window.addEventListener("mousemove",this.handleChange),window.addEventListener("mouseup",this.handleMouseUp)},handleMouseUp:function(){this.unbindEventListeners()},unbindEventListeners:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}}}},function(t,e,n){"use strict";function r(t,e,n){var r=t+","+e+","+n;if(i[r])return i[r];var o=function(t,e,n){if("undefined"==typeof document)return null;var r=document.createElement("canvas");r.width=r.height=2*n;var i=r.getContext("2d");return i?(i.fillStyle=t,i.fillRect(0,0,r.width,r.height),i.fillStyle=e,i.fillRect(0,0,n,n),i.translate(n,n),i.fillRect(0,0,n,n),r.toDataURL()):null}(t,e,n);return i[r]=o,o}Object.defineProperty(e,"__esModule",{value:!0});var i={};e.default={name:"Checkboard",props:{size:{type:[Number,String],default:8},white:{type:String,default:"#fff"},grey:{type:String,default:"#e6e6e6"}},computed:{bgStyle:function(){return{"background-image":"url("+r(this.white,this.grey,this.size)+")"}}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(3)),o=r(n(4)),a=r(n(6)),s=r(n(5)),c=r(n(7)),l=r(n(8)),u=["#D0021B","#F5A623","#F8E71C","#8B572A","#7ED321","#417505","#BD10E0","#9013FE","#4A90E2","#50E3C2","#B8E986","#000000","#4A4A4A","#9B9B9B","#FFFFFF"];e.default={name:"Sketch",mixins:[i.default],components:{saturation:a.default,hue:s.default,alpha:c.default,"ed-in":o.default,checkboard:l.default},props:{presetColors:{type:Array,default:function(){return u}},disableAlpha:{type:Boolean,default:!1},disableFields:{type:Boolean,default:!1}},computed:{hex:function(){return this.colors.hex.replace("#","")},activeColor:function(){var t=this.colors.rgba;return"rgba("+[t.r,t.g,t.b,t.a].join(",")+")"}},methods:{handlePreset:function(t){this.colorChange({hex:t,source:"hex"})},childChange:function(t){this.colorChange(t)},inputChange:function(t){t&&(t.hex?this.isValidHex(t.hex)&&this.colorChange({hex:t.hex,source:"hex"}):(t.r||t.g||t.b||t.a)&&this.colorChange({r:t.r||this.colors.rgba.r,g:t.g||this.colors.rgba.g,b:t.b||this.colors.rgba.b,a:t.a||this.colors.rgba.a,source:"rgba"}))}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(3)),o=r(n(4)),a=r(n(6)),s=r(n(5)),c=r(n(7)),l=r(n(8));e.default={name:"Chrome",mixins:[i.default],props:{disableAlpha:{type:Boolean,default:!1},disableFields:{type:Boolean,default:!1}},components:{saturation:a.default,hue:s.default,alpha:c.default,"ed-in":o.default,checkboard:l.default},data:function(){return{fields:["hex","rgba","hsla"],fieldsIndex:0,highlight:!1}},computed:{hsl:function(){var t=this.colors.hsl,e=t.h,n=t.s,r=t.l;return{h:e.toFixed(),s:(100*n).toFixed()+"%",l:(100*r).toFixed()+"%"}},activeColor:function(){var t=this.colors.rgba;return"rgba("+[t.r,t.g,t.b,t.a].join(",")+")"}},watch:{colors:function(t){t.a<1&&0===this.fieldsIndex&&(this.fieldsIndex=1)}},methods:{handlePreset:function(t){this.colorChange({hex:t,source:"hex"})},childChange:function(t){this.colorChange(t)},inputChange:function(t){if(t)if(t.hex)this.isValidHex(t.hex)&&this.colorChange({hex:t.hex,source:"hex"});else if(t.r||t.g||t.b||t.a)this.colorChange({r:t.r||this.colors.rgba.r,g:t.g||this.colors.rgba.g,b:t.b||this.colors.rgba.b,a:t.a||this.colors.rgba.a,source:"rgba"});else if(t.h||t.s||t.l){var e=t.s?t.s.replace("%","")/100:this.colors.hsl.s,n=t.l?t.l.replace("%","")/100:this.colors.hsl.l;this.colorChange({h:t.h||this.colors.hsl.h,s:e,l:n,source:"hsl"})}},toggleViews:function(){this.fieldsIndex>=2?this.fieldsIndex=this.colors.a<1?1:0:this.fieldsIndex++},showHighlight:function(){this.highlight=!0},hideHighlight:function(){this.highlight=!1}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var i=r(n(23)),o=r(n(32)),a=r(n(36)),s=r(n(40)),c=r(n(47)),l=r(n(52)),u=r(n(67)),f=r(n(71)),d=r(n(7)),p=r(n(8)),h=r(n(4)),v=r(n(5)),g=r(n(6)),m=r(n(3)),b={version:"2.4.6",Compact:i.default,Grayscale:o.default,Material:a.default,Slider:s.default,Swatches:c.default,Photoshop:l.default,Sketch:u.default,Chrome:f.default,Alpha:d.default,Checkboard:p.default,EditableInput:h.default,Hue:v.default,Saturation:g.default,ColorMixin:m.default};t.exports=b},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(9),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(31),s=!1,c=function(t){s||n(24)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/Compact.vue",e.default=l.exports},function(t,e,n){var r=n(25);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("cee7b64a",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-compact {\n  padding-top: 5px;\n  padding-left: 5px;\n  width: 240px;\n  border-radius: 2px;\n  box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\n  background-color: #fff;\n}\n.vc-compact-colors {\n  overflow: hidden;\n  padding: 0;\n  margin: 0;\n}\n.vc-compact-color-item {\n  list-style: none;\n  width: 15px;\n  height: 15px;\n  float: left;\n  margin-right: 5px;\n  margin-bottom: 5px;\n  position: relative;\n  cursor: pointer;\n}\n.vc-compact-color-item--white {\n  box-shadow: inset 0 0 0 1px #ddd;\n}\n.vc-compact-color-item--white .vc-compact-dot {\n  background: #000;\n}\n.vc-compact-dot {\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  bottom: 5px;\n  left: 5px;\n  border-radius: 50%;\n  opacity: 1;\n  background: #fff;\n}\n",""])},function(t,e){t.exports=function(t,e){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=o[0],s={id:t+":"+i,css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}},function(t,e,n){var r;!function(i){function o(t,e){if(e=e||{},(t=t||"")instanceof o)return t;if(!(this instanceof o))return new o(t,e);var n=function(t){var e={r:0,g:0,b:0},n=1,r=null,i=null,o=null,a=!1,s=!1;return"string"==typeof t&&(t=function(t){t=t.replace(F,"").replace(P,"").toLowerCase();var e,n=!1;if(H[t])t=H[t],n=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};return(e=z.rgb.exec(t))?{r:e[1],g:e[2],b:e[3]}:(e=z.rgba.exec(t))?{r:e[1],g:e[2],b:e[3],a:e[4]}:(e=z.hsl.exec(t))?{h:e[1],s:e[2],l:e[3]}:(e=z.hsla.exec(t))?{h:e[1],s:e[2],l:e[3],a:e[4]}:(e=z.hsv.exec(t))?{h:e[1],s:e[2],v:e[3]}:(e=z.hsva.exec(t))?{h:e[1],s:e[2],v:e[3],a:e[4]}:(e=z.hex8.exec(t))?{r:O(e[1]),g:O(e[2]),b:O(e[3]),a:j(e[4]),format:n?"name":"hex8"}:(e=z.hex6.exec(t))?{r:O(e[1]),g:O(e[2]),b:O(e[3]),format:n?"name":"hex"}:(e=z.hex4.exec(t))?{r:O(e[1]+""+e[1]),g:O(e[2]+""+e[2]),b:O(e[3]+""+e[3]),a:j(e[4]+""+e[4]),format:n?"name":"hex8"}:!!(e=z.hex3.exec(t))&&{r:O(e[1]+""+e[1]),g:O(e[2]+""+e[2]),b:O(e[3]+""+e[3]),format:n?"name":"hex"}}(t)),"object"==typeof t&&(T(t.r)&&T(t.g)&&T(t.b)?(e=function(t,e,n){return{r:255*S(t,255),g:255*S(e,255),b:255*S(n,255)}}(t.r,t.g,t.b),a=!0,s="%"===String(t.r).substr(-1)?"prgb":"rgb"):T(t.h)&&T(t.s)&&T(t.v)?(r=M(t.s),i=M(t.v),e=c(t.h,r,i),a=!0,s="hsv"):T(t.h)&&T(t.s)&&T(t.l)&&(r=M(t.s),o=M(t.l),e=function(t,e,n){function r(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}var i,o,a;if(t=S(t,360),e=S(e,100),n=S(n,100),0===e)i=o=a=n;else{var s=n<.5?n*(1+e):n+e-n*e,c=2*n-s;i=r(c,s,t+1/3),o=r(c,s,t),a=r(c,s,t-1/3)}return{r:255*i,g:255*o,b:255*a}}(t.h,r,o),a=!0,s="hsl"),t.hasOwnProperty("a")&&(n=t.a)),n=k(n),{ok:a,format:t.format||s,r:R(255,D(e.r,0)),g:R(255,D(e.g,0)),b:R(255,D(e.b,0)),a:n}}(t);this._originalInput=t,this._r=n.r,this._g=n.g,this._b=n.b,this._a=n.a,this._roundA=L(100*this._a)/100,this._format=e.format||n.format,this._gradientType=e.gradientType,this._r<1&&(this._r=L(this._r)),this._g<1&&(this._g=L(this._g)),this._b<1&&(this._b=L(this._b)),this._ok=n.ok,this._tc_id=I++}function a(t,e,n){t=S(t,255),e=S(e,255),n=S(n,255);var r,i,o=D(t,e,n),a=R(t,e,n),s=(o+a)/2;if(o==a)r=i=0;else{var c=o-a;switch(i=s>.5?c/(2-o-a):c/(o+a),o){case t:r=(e-n)/c+(e<n?6:0);break;case e:r=(n-t)/c+2;break;case n:r=(t-e)/c+4}r/=6}return{h:r,s:i,l:s}}function s(t,e,n){t=S(t,255),e=S(e,255),n=S(n,255);var r,i,o=D(t,e,n),a=R(t,e,n),s=o,c=o-a;if(i=0===o?0:c/o,o==a)r=0;else{switch(o){case t:r=(e-n)/c+(e<n?6:0);break;case e:r=(n-t)/c+2;break;case n:r=(t-e)/c+4}r/=6}return{h:r,s:i,v:s}}function c(t,e,n){t=6*S(t,360),e=S(e,100),n=S(n,100);var r=i.floor(t),o=t-r,a=n*(1-e),s=n*(1-o*e),c=n*(1-(1-o)*e),l=r%6;return{r:255*[n,s,a,a,c,n][l],g:255*[c,n,n,s,a,a][l],b:255*[a,a,c,n,n,s][l]}}function l(t,e,n,r){var i=[$(L(t).toString(16)),$(L(e).toString(16)),$(L(n).toString(16))];return r&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function u(t,e,n,r){return[$(E(r)),$(L(t).toString(16)),$(L(e).toString(16)),$(L(n).toString(16))].join("")}function f(t,e){e=0===e?0:e||10;var n=o(t).toHsl();return n.s-=e/100,n.s=A(n.s),o(n)}function d(t,e){e=0===e?0:e||10;var n=o(t).toHsl();return n.s+=e/100,n.s=A(n.s),o(n)}function p(t){return o(t).desaturate(100)}function h(t,e){e=0===e?0:e||10;var n=o(t).toHsl();return n.l+=e/100,n.l=A(n.l),o(n)}function v(t,e){e=0===e?0:e||10;var n=o(t).toRgb();return n.r=D(0,R(255,n.r-L(-e/100*255))),n.g=D(0,R(255,n.g-L(-e/100*255))),n.b=D(0,R(255,n.b-L(-e/100*255))),o(n)}function g(t,e){e=0===e?0:e||10;var n=o(t).toHsl();return n.l-=e/100,n.l=A(n.l),o(n)}function m(t,e){var n=o(t).toHsl(),r=(n.h+e)%360;return n.h=r<0?360+r:r,o(n)}function b(t){var e=o(t).toHsl();return e.h=(e.h+180)%360,o(e)}function _(t){var e=o(t).toHsl(),n=e.h;return[o(t),o({h:(n+120)%360,s:e.s,l:e.l}),o({h:(n+240)%360,s:e.s,l:e.l})]}function y(t){var e=o(t).toHsl(),n=e.h;return[o(t),o({h:(n+90)%360,s:e.s,l:e.l}),o({h:(n+180)%360,s:e.s,l:e.l}),o({h:(n+270)%360,s:e.s,l:e.l})]}function x(t){var e=o(t).toHsl(),n=e.h;return[o(t),o({h:(n+72)%360,s:e.s,l:e.l}),o({h:(n+216)%360,s:e.s,l:e.l})]}function w(t,e,n){e=e||6,n=n||30;var r=o(t).toHsl(),i=360/n,a=[o(t)];for(r.h=(r.h-(i*e>>1)+720)%360;--e;)r.h=(r.h+i)%360,a.push(o(r));return a}function C(t,e){e=e||6;for(var n=o(t).toHsv(),r=n.h,i=n.s,a=n.v,s=[],c=1/e;e--;)s.push(o({h:r,s:i,v:a})),a=(a+c)%1;return s}function k(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function S(t,e){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var n=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=R(e,D(0,parseFloat(t))),n&&(t=parseInt(t*e,10)/100),i.abs(t-e)<1e-6?1:t%e/parseFloat(e)}function A(t){return R(1,D(0,t))}function O(t){return parseInt(t,16)}function $(t){return 1==t.length?"0"+t:""+t}function M(t){return t<=1&&(t=100*t+"%"),t}function E(t){return i.round(255*parseFloat(t)).toString(16)}function j(t){return O(t)/255}function T(t){return!!z.CSS_UNIT.exec(t)}var F=/^\s+/,P=/\s+$/,I=0,L=i.round,R=i.min,D=i.max,N=i.random;o.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,e,n,r=this.toRgb();return t=r.r/255,e=r.g/255,n=r.b/255,.2126*(t<=.03928?t/12.92:i.pow((t+.055)/1.055,2.4))+.7152*(e<=.03928?e/12.92:i.pow((e+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:i.pow((n+.055)/1.055,2.4))},setAlpha:function(t){return this._a=k(t),this._roundA=L(100*this._a)/100,this},toHsv:function(){var t=s(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=s(this._r,this._g,this._b),e=L(360*t.h),n=L(100*t.s),r=L(100*t.v);return 1==this._a?"hsv("+e+", "+n+"%, "+r+"%)":"hsva("+e+", "+n+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var t=a(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=a(this._r,this._g,this._b),e=L(360*t.h),n=L(100*t.s),r=L(100*t.l);return 1==this._a?"hsl("+e+", "+n+"%, "+r+"%)":"hsla("+e+", "+n+"%, "+r+"%, "+this._roundA+")"},toHex:function(t){return l(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,e,n,r,i){var o=[$(L(t).toString(16)),$(L(e).toString(16)),$(L(n).toString(16)),$(E(r))];return i&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)&&o[3].charAt(0)==o[3].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0):o.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:L(this._r),g:L(this._g),b:L(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+L(this._r)+", "+L(this._g)+", "+L(this._b)+")":"rgba("+L(this._r)+", "+L(this._g)+", "+L(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:L(100*S(this._r,255))+"%",g:L(100*S(this._g,255))+"%",b:L(100*S(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+L(100*S(this._r,255))+"%, "+L(100*S(this._g,255))+"%, "+L(100*S(this._b,255))+"%)":"rgba("+L(100*S(this._r,255))+"%, "+L(100*S(this._g,255))+"%, "+L(100*S(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(B[l(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var e="#"+u(this._r,this._g,this._b,this._a),n=e,r=this._gradientType?"GradientType = 1, ":"";if(t){var i=o(t);n="#"+u(i._r,i._g,i._b,i._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+e+",endColorstr="+n+")"},toString:function(t){var e=!!t;t=t||this._format;var n=!1,r=this._a<1&&this._a>=0;return e||!r||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(n=this.toRgbString()),"prgb"===t&&(n=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(n=this.toHexString()),"hex3"===t&&(n=this.toHexString(!0)),"hex4"===t&&(n=this.toHex8String(!0)),"hex8"===t&&(n=this.toHex8String()),"name"===t&&(n=this.toName()),"hsl"===t&&(n=this.toHslString()),"hsv"===t&&(n=this.toHsvString()),n||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return o(this.toString())},_applyModification:function(t,e){var n=t.apply(null,[this].concat([].slice.call(e)));return this._r=n._r,this._g=n._g,this._b=n._b,this.setAlpha(n._a),this},lighten:function(){return this._applyModification(h,arguments)},brighten:function(){return this._applyModification(v,arguments)},darken:function(){return this._applyModification(g,arguments)},desaturate:function(){return this._applyModification(f,arguments)},saturate:function(){return this._applyModification(d,arguments)},greyscale:function(){return this._applyModification(p,arguments)},spin:function(){return this._applyModification(m,arguments)},_applyCombination:function(t,e){return t.apply(null,[this].concat([].slice.call(e)))},analogous:function(){return this._applyCombination(w,arguments)},complement:function(){return this._applyCombination(b,arguments)},monochromatic:function(){return this._applyCombination(C,arguments)},splitcomplement:function(){return this._applyCombination(x,arguments)},triad:function(){return this._applyCombination(_,arguments)},tetrad:function(){return this._applyCombination(y,arguments)}},o.fromRatio=function(t,e){if("object"==typeof t){var n={};for(var r in t)t.hasOwnProperty(r)&&(n[r]="a"===r?t[r]:M(t[r]));t=n}return o(t,e)},o.equals=function(t,e){return!(!t||!e)&&o(t).toRgbString()==o(e).toRgbString()},o.random=function(){return o.fromRatio({r:N(),g:N(),b:N()})},o.mix=function(t,e,n){n=0===n?0:n||50;var r=o(t).toRgb(),i=o(e).toRgb(),a=n/100;return o({r:(i.r-r.r)*a+r.r,g:(i.g-r.g)*a+r.g,b:(i.b-r.b)*a+r.b,a:(i.a-r.a)*a+r.a})},o.readability=function(t,e){var n=o(t),r=o(e);return(i.max(n.getLuminance(),r.getLuminance())+.05)/(i.min(n.getLuminance(),r.getLuminance())+.05)},o.isReadable=function(t,e,n){var r,i,a=o.readability(t,e);switch(i=!1,(r=function(t){var e,n;return"AA"!==(e=((t=t||{level:"AA",size:"small"}).level||"AA").toUpperCase())&&"AAA"!==e&&(e="AA"),"small"!==(n=(t.size||"small").toLowerCase())&&"large"!==n&&(n="small"),{level:e,size:n}}(n)).level+r.size){case"AAsmall":case"AAAlarge":i=a>=4.5;break;case"AAlarge":i=a>=3;break;case"AAAsmall":i=a>=7}return i},o.mostReadable=function(t,e,n){var r,i,a,s,c=null,l=0;i=(n=n||{}).includeFallbackColors,a=n.level,s=n.size;for(var u=0;u<e.length;u++)(r=o.readability(t,e[u]))>l&&(l=r,c=o(e[u]));return o.isReadable(t,c,{level:a,size:s})||!i?c:(n.includeFallbackColors=!1,o.mostReadable(t,["#fff","#000"],n))};var H=o.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},B=o.hexNames=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[t[n]]=n);return e}(H),z=function(){var t="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)",e="[\\s|\\(]+("+t+")[,|\\s]+("+t+")[,|\\s]+("+t+")\\s*\\)?",n="[\\s|\\(]+("+t+")[,|\\s]+("+t+")[,|\\s]+("+t+")[,|\\s]+("+t+")\\s*\\)?";return{CSS_UNIT:new RegExp(t),rgb:new RegExp("rgb"+e),rgba:new RegExp("rgba"+n),hsl:new RegExp("hsl"+e),hsla:new RegExp("hsla"+n),hsv:new RegExp("hsv"+e),hsva:new RegExp("hsva"+n),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/}}();void 0!==t&&t.exports?t.exports=o:void 0!==(r=function(){return o}.call(e,n,e,t))&&(t.exports=r)}(Math)},function(t,e,n){var r=n(29);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("d0d513f4",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-editable-input {\n  position: relative;\n}\n.vc-input__input {\n  padding: 0;\n  border: 0;\n  outline: none;\n}\n.vc-input__label {\n  text-transform: capitalize;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-editable-input"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.val,expression:"val"}],ref:"input",staticClass:"vc-input__input",attrs:{"aria-label":t.value},domProps:{value:t.val},on:{keydown:t.handleKeyDown,input:[function(e){e.target.composing||(t.val=e.target.value)},t.update]}}),t._v(" "),n("span",{staticClass:"vc-input__label"},[t._v(t._s(t.label))]),t._v(" "),n("span",{staticClass:"vc-input__desc"},[t._v(t._s(t.desc))])])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-compact"},[n("ul",{staticClass:"vc-compact-colors"},t._l(t.palette,(function(e){return n("li",{key:e,staticClass:"vc-compact-color-item",class:{"vc-compact-color-item--white":"#FFFFFF"===e},style:{background:e},on:{click:function(n){t.handlerClick(e)}}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e===t.pick,expression:"c === pick"}],staticClass:"vc-compact-dot"})])})))])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(11),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(35),s=!1,c=function(t){s||n(33)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/Grayscale.vue",e.default=l.exports},function(t,e,n){var r=n(34);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("52769f95",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-grayscale {\n  width: 125px;\n  border-radius: 2px;\n  box-shadow: 0 2px 15px rgba(0,0,0,.12), 0 2px 10px rgba(0,0,0,.16);\n  background-color: #fff;\n}\n.vc-grayscale-colors {\n  border-radius: 2px;\n  overflow: hidden;\n  padding: 0;\n  margin: 0;\n}\n.vc-grayscale-color-item {\n  list-style: none;\n  width: 25px;\n  height: 25px;\n  float: left;\n  position: relative;\n  cursor: pointer;\n}\n.vc-grayscale-color-item--white .vc-grayscale-dot {\n  background: #000;\n}\n.vc-grayscale-dot {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 6px;\n  height: 6px;\n  margin: -3px 0 0 -2px;\n  border-radius: 50%;\n  opacity: 1;\n  background: #fff;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-grayscale"},[n("ul",{staticClass:"vc-grayscale-colors"},t._l(t.palette,(function(e){return n("li",{key:e,staticClass:"vc-grayscale-color-item",class:{"vc-grayscale-color-item--white":"#FFFFFF"==e},style:{background:e},on:{click:function(n){t.handlerClick(e)}}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e===t.pick,expression:"c === pick"}],staticClass:"vc-grayscale-dot"})])})))])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(12),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(39),s=!1,c=function(t){s||n(37)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/Material.vue",e.default=l.exports},function(t,e,n){var r=n(38);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("2712b48c",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,'\n.vc-material {\n  width: 98px;\n  height: 98px;\n  padding: 16px;\n  font-family: "Roboto";\n  position: relative;\n  border-radius: 2px;\n  box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\n  background-color: #fff;\n}\n.vc-material .vc-input__input {\n  width: 100%;\n  margin-top: 12px;\n  font-size: 15px;\n  color: #333;\n  height: 30px;\n}\n.vc-material .vc-input__label {\n  position: absolute;\n  top: 0;\n  left: 0;\n  font-size: 11px;\n  color: #999;\n  text-transform: capitalize;\n}\n.vc-material-hex {\n  border-bottom-width: 2px;\n  border-bottom-style: solid;\n}\n.vc-material-split {\n  display: flex;\n  margin-right: -10px;\n  padding-top: 11px;\n}\n.vc-material-third {\n  flex: 1;\n  padding-right: 10px;\n}\n',""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-material"},[n("ed-in",{staticClass:"vc-material-hex",style:{borderColor:t.colors.hex},attrs:{label:"hex"},on:{change:t.onChange},model:{value:t.colors.hex,callback:function(e){t.$set(t.colors,"hex",e)},expression:"colors.hex"}}),t._v(" "),n("div",{staticClass:"vc-material-split"},[n("div",{staticClass:"vc-material-third"},[n("ed-in",{attrs:{label:"r"},on:{change:t.onChange},model:{value:t.colors.rgba.r,callback:function(e){t.$set(t.colors.rgba,"r",e)},expression:"colors.rgba.r"}})],1),t._v(" "),n("div",{staticClass:"vc-material-third"},[n("ed-in",{attrs:{label:"g"},on:{change:t.onChange},model:{value:t.colors.rgba.g,callback:function(e){t.$set(t.colors.rgba,"g",e)},expression:"colors.rgba.g"}})],1),t._v(" "),n("div",{staticClass:"vc-material-third"},[n("ed-in",{attrs:{label:"b"},on:{change:t.onChange},model:{value:t.colors.rgba.b,callback:function(e){t.$set(t.colors.rgba,"b",e)},expression:"colors.rgba.b"}})],1)])],1)};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(13),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(46),s=!1,c=function(t){s||n(41)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/Slider.vue",e.default=l.exports},function(t,e,n){var r=n(42);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("598b9964",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-slider {\n  position: relative;\n  width: 410px;\n}\n.vc-slider-hue-warp {\n  height: 12px;\n  position: relative;\n}\n.vc-slider-hue-warp .vc-hue-picker {\n  width: 14px;\n  height: 14px;\n  border-radius: 6px;\n  transform: translate(-7px, -2px);\n  background-color: rgb(248, 248, 248);\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.37);\n}\n.vc-slider-swatches {\n  display: flex;\n  margin-top: 20px;\n}\n.vc-slider-swatch {\n  margin-right: 1px;\n  flex: 1;\n  width: 20%;\n}\n.vc-slider-swatch:first-child {\n  margin-right: 1px;\n}\n.vc-slider-swatch:first-child .vc-slider-swatch-picker {\n  border-radius: 2px 0px 0px 2px;\n}\n.vc-slider-swatch:last-child {\n  margin-right: 0;\n}\n.vc-slider-swatch:last-child .vc-slider-swatch-picker {\n  border-radius: 0px 2px 2px 0px;\n}\n.vc-slider-swatch-picker {\n  cursor: pointer;\n  height: 12px;\n}\n.vc-slider-swatch-picker--active {\n  transform: scaleY(1.8);\n  border-radius: 3.6px/2px;\n}\n",""])},function(t,e,n){var r=n(44);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("af546530",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-hue {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  border-radius: 2px;\n}\n.vc-hue--horizontal {\n  background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n}\n.vc-hue--vertical {\n  background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n}\n.vc-hue-container {\n  cursor: pointer;\n  margin: 0 2px;\n  position: relative;\n  height: 100%;\n}\n.vc-hue-pointer {\n  z-index: 2;\n  position: absolute;\n}\n.vc-hue-picker {\n  cursor: pointer;\n  margin-top: 1px;\n  width: 4px;\n  border-radius: 1px;\n  height: 8px;\n  box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n  background: #fff;\n  transform: translateX(-2px) ;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:["vc-hue",t.directionClass]},[n("div",{ref:"container",staticClass:"vc-hue-container",on:{mousedown:t.handleMouseDown,touchmove:t.handleChange,touchstart:t.handleChange}},[n("div",{staticClass:"vc-hue-pointer",style:{top:t.pointerTop,left:t.pointerLeft}},[n("div",{staticClass:"vc-hue-picker"})])])])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-slider"},[n("div",{staticClass:"vc-slider-hue-warp"},[n("hue",{on:{change:t.hueChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),n("div",{staticClass:"vc-slider-swatches"},t._l(t.swatches,(function(e,r){return n("div",{staticClass:"vc-slider-swatch",attrs:{"data-index":r},on:{click:function(n){t.handleSwClick(r,e)}}},[n("div",{staticClass:"vc-slider-swatch-picker",class:{"vc-slider-swatch-picker--active":e==t.activeOffset},style:{background:"hsl("+t.colors.hsl.h+", 50%, "+100*e+"%)"}})])})))])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(15),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(51),s=!1,c=function(t){s||n(48)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/Swatches.vue",e.default=l.exports},function(t,e,n){var r=n(49);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("445d3d64",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-swatches {\n  width: 320px;\n  height: 240px;\n  overflow-y: scroll;\n  background-color: #fff;\n  box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\n}\n.vc-swatches-box {\n  padding: 16px 0 6px 16px;\n  overflow: hidden;\n}\n.vc-swatches-color-group {\n  padding-bottom: 10px;\n  width: 40px;\n  float: left;\n  margin-right: 10px;\n}\n.vc-swatches-color-it {\n  box-sizing: border-box;\n  width: 40px;\n  height: 24px;\n  cursor: pointer;\n  background: #880e4f;\n  margin-bottom: 1px;\n  overflow: hidden;\n  -ms-border-radius: 2px 2px 0 0;\n  -moz-border-radius: 2px 2px 0 0;\n  -o-border-radius: 2px 2px 0 0;\n  -webkit-border-radius: 2px 2px 0 0;\n  border-radius: 2px 2px 0 0;\n}\n.vc-swatches-color--white {\n  border: 1px solid #DDD;\n}\n.vc-swatches-pick {\n  fill: rgb(255, 255, 255);\n  margin-left: 8px;\n  display: block;\n}\n.vc-swatches-color--white .vc-swatches-pick {\n  fill: rgb(51, 51, 51);\n}\n",""])},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n.d(e,"red",(function(){return r})),n.d(e,"pink",(function(){return i})),n.d(e,"purple",(function(){return o})),n.d(e,"deepPurple",(function(){return a})),n.d(e,"indigo",(function(){return s})),n.d(e,"blue",(function(){return c})),n.d(e,"lightBlue",(function(){return l})),n.d(e,"cyan",(function(){return u})),n.d(e,"teal",(function(){return f})),n.d(e,"green",(function(){return d})),n.d(e,"lightGreen",(function(){return p})),n.d(e,"lime",(function(){return h})),n.d(e,"yellow",(function(){return v})),n.d(e,"amber",(function(){return g})),n.d(e,"orange",(function(){return m})),n.d(e,"deepOrange",(function(){return b})),n.d(e,"brown",(function(){return _})),n.d(e,"grey",(function(){return y})),n.d(e,"blueGrey",(function(){return x})),n.d(e,"darkText",(function(){return w})),n.d(e,"lightText",(function(){return C})),n.d(e,"darkIcons",(function(){return k})),n.d(e,"lightIcons",(function(){return S})),n.d(e,"white",(function(){return A})),n.d(e,"black",(function(){return O}));var r={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",a100:"#ff8a80",a200:"#ff5252",a400:"#ff1744",a700:"#d50000"},i={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",a100:"#ff80ab",a200:"#ff4081",a400:"#f50057",a700:"#c51162"},o={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",a100:"#ea80fc",a200:"#e040fb",a400:"#d500f9",a700:"#aa00ff"},a={50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",a100:"#b388ff",a200:"#7c4dff",a400:"#651fff",a700:"#6200ea"},s={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",a100:"#8c9eff",a200:"#536dfe",a400:"#3d5afe",a700:"#304ffe"},c={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",a100:"#82b1ff",a200:"#448aff",a400:"#2979ff",a700:"#2962ff"},l={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",a100:"#80d8ff",a200:"#40c4ff",a400:"#00b0ff",a700:"#0091ea"},u={50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",a100:"#84ffff",a200:"#18ffff",a400:"#00e5ff",a700:"#00b8d4"},f={50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",a100:"#a7ffeb",a200:"#64ffda",a400:"#1de9b6",a700:"#00bfa5"},d={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",a100:"#b9f6ca",a200:"#69f0ae",a400:"#00e676",a700:"#00c853"},p={50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",a100:"#ccff90",a200:"#b2ff59",a400:"#76ff03",a700:"#64dd17"},h={50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",a100:"#f4ff81",a200:"#eeff41",a400:"#c6ff00",a700:"#aeea00"},v={50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",a100:"#ffff8d",a200:"#ffff00",a400:"#ffea00",a700:"#ffd600"},g={50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",a100:"#ffe57f",a200:"#ffd740",a400:"#ffc400",a700:"#ffab00"},m={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",a100:"#ffd180",a200:"#ffab40",a400:"#ff9100",a700:"#ff6d00"},b={50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",a100:"#ff9e80",a200:"#ff6e40",a400:"#ff3d00",a700:"#dd2c00"},_={50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723"},y={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121"},x={50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238"},w={primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",dividers:"rgba(0, 0, 0, 0.12)"},C={primary:"rgba(255, 255, 255, 1)",secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",dividers:"rgba(255, 255, 255, 0.12)"},k={active:"rgba(0, 0, 0, 0.54)",inactive:"rgba(0, 0, 0, 0.38)"},S={active:"rgba(255, 255, 255, 1)",inactive:"rgba(255, 255, 255, 0.5)"},A="#ffffff",O="#000000";e.default={red:r,pink:i,purple:o,deepPurple:a,indigo:s,blue:c,lightBlue:l,cyan:u,teal:f,green:d,lightGreen:p,lime:h,yellow:v,amber:g,orange:m,deepOrange:b,brown:_,grey:y,blueGrey:x,darkText:w,lightText:C,darkIcons:k,lightIcons:S,white:A,black:O}},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-swatches",attrs:{"data-pick":t.pick}},[n("div",{staticClass:"vc-swatches-box"},t._l(t.palette,(function(e,r){return n("div",{key:r,staticClass:"vc-swatches-color-group"},t._l(e,(function(e){return n("div",{key:e,class:["vc-swatches-color-it",{"vc-swatches-color--white":"#FFFFFF"===e}],style:{background:e},attrs:{"data-color":e},on:{click:function(n){t.handlerClick(e)}}},[n("div",{directives:[{name:"show",rawName:"v-show",value:t.equal(e),expression:"equal(c)"}],staticClass:"vc-swatches-pick"},[n("svg",{staticStyle:{width:"24px",height:"24px"},attrs:{viewBox:"0 0 24 24"}},[n("path",{attrs:{d:"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"}})])])])})))})))])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(16),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(66),s=!1,c=function(t){s||n(53)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/Photoshop.vue",e.default=l.exports},function(t,e,n){var r=n(54);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("bdf43978",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,'\n.vc-photoshop {\n  background: #DCDCDC;\n  border-radius: 4px;\n  box-shadow: 0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15);\n  box-sizing: initial;\n  width: 513px;\n  font-family: Roboto;\n}\n.vc-photoshop__disable-fields {\n  width: 390px;\n}\n.vc-ps-head {\n  background-image: linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%);\n  border-bottom: 1px solid #B1B1B1;\n  box-shadow: inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02);\n  height: 23px;\n  line-height: 24px;\n  border-radius: 4px 4px 0 0;\n  font-size: 13px;\n  color: #4D4D4D;\n  text-align: center;\n}\n.vc-ps-body {\n  padding: 15px;\n  display: flex;\n}\n.vc-ps-saturation-wrap {\n  width: 256px;\n  height: 256px;\n  position: relative;\n  border: 2px solid #B3B3B3;\n  border-bottom: 2px solid #F0F0F0;\n  overflow: hidden;\n}\n.vc-ps-saturation-wrap .vc-saturation-circle {\n  width: 12px;\n  height: 12px;\n}\n.vc-ps-hue-wrap {\n  position: relative;\n  height: 256px;\n  width: 19px;\n  margin-left: 10px;\n  border: 2px solid #B3B3B3;\n  border-bottom: 2px solid #F0F0F0;\n}\n.vc-ps-hue-pointer {\n  position: relative;\n}\n.vc-ps-hue-pointer--left,\n.vc-ps-hue-pointer--right {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 5px 0 5px 8px;\n  border-color: transparent transparent transparent #555;\n}\n.vc-ps-hue-pointer--left:after,\n.vc-ps-hue-pointer--right:after {\n  content: "";\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 4px 0 4px 6px;\n  border-color: transparent transparent transparent #fff;\n  position: absolute;\n  top: 1px;\n  left: 1px;\n  transform: translate(-8px, -5px);\n}\n.vc-ps-hue-pointer--left {\n  transform: translate(-13px, -4px);\n}\n.vc-ps-hue-pointer--right {\n  transform: translate(20px, -4px) rotate(180deg);\n}\n.vc-ps-controls {\n  width: 180px;\n  margin-left: 10px;\n  display: flex;\n}\n.vc-ps-controls__disable-fields {\n  width: auto;\n}\n.vc-ps-actions {\n  margin-left: 20px;\n  flex: 1;\n}\n.vc-ps-ac-btn {\n  cursor: pointer;\n  background-image: linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%);\n  border: 1px solid #878787;\n  border-radius: 2px;\n  height: 20px;\n  box-shadow: 0 1px 0 0 #EAEAEA;\n  font-size: 14px;\n  color: #000;\n  line-height: 20px;\n  text-align: center;\n  margin-bottom: 10px;\n}\n.vc-ps-previews {\n  width: 60px;\n}\n.vc-ps-previews__swatches {\n  border: 1px solid #B3B3B3;\n  border-bottom: 1px solid #F0F0F0;\n  margin-bottom: 2px;\n  margin-top: 1px;\n}\n.vc-ps-previews__pr-color {\n  height: 34px;\n  box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000;\n}\n.vc-ps-previews__label {\n  font-size: 14px;\n  color: #000;\n  text-align: center;\n}\n.vc-ps-fields {\n  padding-top: 5px;\n  padding-bottom: 9px;\n  width: 80px;\n  position: relative;\n}\n.vc-ps-fields .vc-input__input {\n  margin-left: 40%;\n  width: 40%;\n  height: 18px;\n  border: 1px solid #888888;\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC;\n  margin-bottom: 5px;\n  font-size: 13px;\n  padding-left: 3px;\n  margin-right: 10px;\n}\n.vc-ps-fields .vc-input__label, .vc-ps-fields .vc-input__desc {\n  top: 0;\n  text-transform: uppercase;\n  font-size: 13px;\n  height: 18px;\n  line-height: 22px;\n  position: absolute;\n}\n.vc-ps-fields .vc-input__label {\n  left: 0;\n  width: 34px;\n}\n.vc-ps-fields .vc-input__desc {\n  right: 0;\n  width: 0;\n}\n.vc-ps-fields__divider {\n  height: 5px;\n}\n.vc-ps-fields__hex .vc-input__input {\n  margin-left: 20%;\n  width: 80%;\n  height: 18px;\n  border: 1px solid #888888;\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC;\n  margin-bottom: 6px;\n  font-size: 13px;\n  padding-left: 3px;\n}\n.vc-ps-fields__hex .vc-input__label {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 14px;\n  text-transform: uppercase;\n  font-size: 13px;\n  height: 18px;\n  line-height: 22px;\n}\n',""])},function(t,e,n){var r=n(56);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("4b2ac592",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-saturation,\n.vc-saturation--white,\n.vc-saturation--black {\n  cursor: pointer;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n.vc-saturation--white {\n  background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n}\n.vc-saturation--black {\n  background: linear-gradient(to top, #000, rgba(0,0,0,0));\n}\n.vc-saturation-pointer {\n  cursor: pointer;\n  position: absolute;\n}\n.vc-saturation-circle {\n  cursor: head;\n  width: 4px;\n  height: 4px;\n  box-shadow: 0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3), 0 0 1px 2px rgba(0,0,0,.4);\n  border-radius: 50%;\n  transform: translate(-2px, -2px);\n}\n",""])},function(t,e,n){(function(e){function n(t,e,n){function a(e){var n=d,r=p;return d=p=void 0,x=e,v=t.apply(r,n)}function s(t){return x=t,g=setTimeout(l,e),w?a(t):v}function c(t){var n=t-y;return void 0===y||n>=e||n<0||C&&t-x>=h}function l(){var t=_();if(c(t))return u(t);g=setTimeout(l,function(t){var n=e-(t-y);return C?b(n,h-(t-x)):n}(t))}function u(t){return g=void 0,k&&d?a(t):(d=p=void 0,v)}function f(){var t=_(),n=c(t);if(d=arguments,p=this,y=t,n){if(void 0===g)return s(y);if(C)return g=setTimeout(l,e),a(y)}return void 0===g&&(g=setTimeout(l,e)),v}var d,p,h,v,g,y,x=0,w=!1,C=!1,k=!0;if("function"!=typeof t)throw new TypeError(o);return e=i(e)||0,r(n)&&(w=!!n.leading,h=(C="maxWait"in n)?m(i(n.maxWait)||0,e):h,k="trailing"in n?!!n.trailing:k),f.cancel=function(){void 0!==g&&clearTimeout(g),x=0,d=y=p=g=void 0},f.flush=function(){return void 0===g?v:u(_())},f}function r(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function i(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&g.call(t)==s}(t))return a;if(r(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=r(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(c,"");var n=u.test(t);return n||f.test(t)?d(t.slice(2),n?2:8):l.test(t)?a:+t}var o="Expected a function",a=NaN,s="[object Symbol]",c=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,f=/^0o[0-7]+$/i,d=parseInt,p="object"==typeof e&&e&&e.Object===Object&&e,h="object"==typeof self&&self&&self.Object===Object&&self,v=p||h||Function("return this")(),g=Object.prototype.toString,m=Math.max,b=Math.min,_=function(){return v.Date.now()};t.exports=function(t,e,i){var a=!0,s=!0;if("function"!=typeof t)throw new TypeError(o);return r(i)&&(a="leading"in i?!!i.leading:a,s="trailing"in i?!!i.trailing:s),n(t,e,{leading:a,maxWait:e,trailing:s})}}).call(e,n(58))},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{ref:"container",staticClass:"vc-saturation",style:{background:t.bgColor},on:{mousedown:t.handleMouseDown,touchmove:t.handleChange,touchstart:t.handleChange}},[n("div",{staticClass:"vc-saturation--white"}),t._v(" "),n("div",{staticClass:"vc-saturation--black"}),t._v(" "),n("div",{staticClass:"vc-saturation-pointer",style:{top:t.pointerTop,left:t.pointerLeft}},[n("div",{staticClass:"vc-saturation-circle"})])])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){var r=n(61);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("04f8680c",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-alpha {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n}\n.vc-alpha-checkboard-wrap {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  overflow: hidden;\n}\n.vc-alpha-gradient {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n}\n.vc-alpha-container {\n  cursor: pointer;\n  position: relative;\n  z-index: 2;\n  height: 100%;\n  margin: 0 3px;\n}\n.vc-alpha-pointer {\n  z-index: 2;\n  position: absolute;\n}\n.vc-alpha-picker {\n  cursor: pointer;\n  width: 4px;\n  border-radius: 1px;\n  height: 8px;\n  box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n  background: #fff;\n  margin-top: 1px;\n  transform: translateX(-2px);\n}\n",""])},function(t,e,n){var r=n(63);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("004624a2",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-checkerboard {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  background-size: contain;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{staticClass:"vc-checkerboard",style:t.bgStyle})};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"vc-alpha"},[n("div",{staticClass:"vc-alpha-checkboard-wrap"},[n("checkboard")],1),t._v(" "),n("div",{staticClass:"vc-alpha-gradient",style:{background:t.gradientColor}}),t._v(" "),n("div",{ref:"container",staticClass:"vc-alpha-container",on:{mousedown:t.handleMouseDown,touchmove:t.handleChange,touchstart:t.handleChange}},[n("div",{staticClass:"vc-alpha-pointer",style:{left:100*t.colors.a+"%"}},[n("div",{staticClass:"vc-alpha-picker"})])])])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:["vc-photoshop",t.disableFields?"vc-photoshop__disable-fields":""]},[n("div",{staticClass:"vc-ps-head"},[t._v(t._s(t.head))]),t._v(" "),n("div",{staticClass:"vc-ps-body"},[n("div",{staticClass:"vc-ps-saturation-wrap"},[n("saturation",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),n("div",{staticClass:"vc-ps-hue-wrap"},[n("hue",{attrs:{direction:"vertical"},on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}},[n("div",{staticClass:"vc-ps-hue-pointer"},[n("i",{staticClass:"vc-ps-hue-pointer--left"}),n("i",{staticClass:"vc-ps-hue-pointer--right"})])])],1),t._v(" "),n("div",{class:["vc-ps-controls",t.disableFields?"vc-ps-controls__disable-fields":""]},[n("div",{staticClass:"vc-ps-previews"},[n("div",{staticClass:"vc-ps-previews__label"},[t._v("new")]),t._v(" "),n("div",{staticClass:"vc-ps-previews__swatches"},[n("div",{staticClass:"vc-ps-previews__pr-color",style:{background:t.colors.hex}}),t._v(" "),n("div",{staticClass:"vc-ps-previews__pr-color",style:{background:t.currentColor},on:{click:t.clickCurrentColor}})]),t._v(" "),n("div",{staticClass:"vc-ps-previews__label"},[t._v("current")])]),t._v(" "),t.disableFields?t._e():n("div",{staticClass:"vc-ps-actions"},[n("div",{staticClass:"vc-ps-ac-btn",on:{click:t.handleAccept}},[t._v("OK")]),t._v(" "),n("div",{staticClass:"vc-ps-ac-btn",on:{click:t.handleCancel}},[t._v("Cancel")]),t._v(" "),n("div",{staticClass:"vc-ps-fields"},[n("ed-in",{attrs:{label:"h",desc:"°",value:t.hsv.h},on:{change:t.inputChange}}),t._v(" "),n("ed-in",{attrs:{label:"s",desc:"%",value:t.hsv.s,max:100},on:{change:t.inputChange}}),t._v(" "),n("ed-in",{attrs:{label:"v",desc:"%",value:t.hsv.v,max:100},on:{change:t.inputChange}}),t._v(" "),n("div",{staticClass:"vc-ps-fields__divider"}),t._v(" "),n("ed-in",{attrs:{label:"r",value:t.colors.rgba.r},on:{change:t.inputChange}}),t._v(" "),n("ed-in",{attrs:{label:"g",value:t.colors.rgba.g},on:{change:t.inputChange}}),t._v(" "),n("ed-in",{attrs:{label:"b",value:t.colors.rgba.b},on:{change:t.inputChange}}),t._v(" "),n("div",{staticClass:"vc-ps-fields__divider"}),t._v(" "),n("ed-in",{staticClass:"vc-ps-fields__hex",attrs:{label:"#",value:t.hex},on:{change:t.inputChange}})],1)])])])])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(20),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(70),s=!1,c=function(t){s||n(68)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/Sketch.vue",e.default=l.exports},function(t,e,n){var r=n(69);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("e7574c18",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-sketch {\n  position: relative;\n  width: 200px;\n  padding: 10px 10px 0;\n  box-sizing: initial;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: 0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15);\n}\n.vc-sketch-saturation-wrap {\n  width: 100%;\n  padding-bottom: 75%;\n  position: relative;\n  overflow: hidden;\n}\n.vc-sketch-controls {\n  display: flex;\n}\n.vc-sketch-sliders {\n  padding: 4px 0;\n  flex: 1;\n}\n.vc-sketch-sliders .vc-hue,\n.vc-sketch-sliders .vc-alpha-gradient {\n  border-radius: 2px;\n}\n.vc-sketch-hue-wrap {\n  position: relative;\n  height: 10px;\n}\n.vc-sketch-alpha-wrap {\n  position: relative;\n  height: 10px;\n  margin-top: 4px;\n  overflow: hidden;\n}\n.vc-sketch-color-wrap {\n  width: 24px;\n  height: 24px;\n  position: relative;\n  margin-top: 4px;\n  margin-left: 4px;\n  border-radius: 3px;\n}\n.vc-sketch-active-color {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-radius: 2px;\n  box-shadow: inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25);\n  z-index: 2;\n}\n.vc-sketch-color-wrap .vc-checkerboard {\n  background-size: auto;\n}\n.vc-sketch-field {\n  display: flex;\n  padding-top: 4px;\n}\n.vc-sketch-field .vc-input__input {\n  width: 80%;\n  padding: 4px 10% 3px;\n  border: none;\n  box-shadow: inset 0 0 0 1px #ccc;\n  font-size: 11px;\n}\n.vc-sketch-field .vc-input__label {\n  display: block;\n  text-align: center;\n  font-size: 11px;\n  color: #222;\n  padding-top: 3px;\n  padding-bottom: 4px;\n  text-transform: capitalize;\n}\n.vc-sketch-field--single {\n  flex: 1;\n  padding-left: 6px;\n}\n.vc-sketch-field--double {\n  flex: 2;\n}\n.vc-sketch-presets {\n  margin-right: -10px;\n  margin-left: -10px;\n  padding-left: 10px;\n  padding-top: 10px;\n  border-top: 1px solid #eee;\n}\n.vc-sketch-presets-color {\n  border-radius: 3px;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n  margin: 0 10px 10px 0;\n  vertical-align: top;\n  cursor: pointer;\n  width: 16px;\n  height: 16px;\n  box-shadow: inset 0 0 0 1px rgba(0,0,0,.15);\n}\n.vc-sketch__disable-alpha .vc-sketch-color-wrap {\n  height: 10px;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:["vc-sketch",t.disableAlpha?"vc-sketch__disable-alpha":""]},[n("div",{staticClass:"vc-sketch-saturation-wrap"},[n("saturation",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),n("div",{staticClass:"vc-sketch-controls"},[n("div",{staticClass:"vc-sketch-sliders"},[n("div",{staticClass:"vc-sketch-hue-wrap"},[n("hue",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-sketch-alpha-wrap"},[n("alpha",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1)]),t._v(" "),n("div",{staticClass:"vc-sketch-color-wrap"},[n("div",{staticClass:"vc-sketch-active-color",style:{background:t.activeColor}}),t._v(" "),n("checkboard")],1)]),t._v(" "),t.disableFields?t._e():n("div",{staticClass:"vc-sketch-field"},[n("div",{staticClass:"vc-sketch-field--double"},[n("ed-in",{attrs:{label:"hex",value:t.hex},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-sketch-field--single"},[n("ed-in",{attrs:{label:"r",value:t.colors.rgba.r},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-sketch-field--single"},[n("ed-in",{attrs:{label:"g",value:t.colors.rgba.g},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-sketch-field--single"},[n("ed-in",{attrs:{label:"b",value:t.colors.rgba.b},on:{change:t.inputChange}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-sketch-field--single"},[n("ed-in",{attrs:{label:"a",value:t.colors.a,"arrow-offset":.01,max:1},on:{change:t.inputChange}})],1)]),t._v(" "),n("div",{staticClass:"vc-sketch-presets"},t._l(t.presetColors,(function(e){return n("div",{key:e,staticClass:"vc-sketch-presets-color",style:{background:e},on:{click:function(n){t.handlePreset(e)}}})})))])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(21),i=n.n(r);for(var o in r)"default"!==o&&function(t){n.d(e,t,(function(){return r[t]}))}(o);var a=n(74),s=!1,c=function(t){s||n(72)},l=n(2)(i.a,a.a,!1,c,null,null);l.options.__file="src/components/Chrome.vue",e.default=l.exports},function(t,e,n){var r=n(73);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals),n(1)("2a2435f8",r,!1)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"\n.vc-chrome {\n  background: #fff;\n  border-radius: 2px;\n  box-shadow: 0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3);\n  box-sizing: initial;\n  width: 225px;\n  font-family: Menlo;\n  background-color: #fff;\n}\n.vc-chrome-controls {\n  display: flex;\n}\n.vc-chrome-color-wrap {\n  position: relative;\n  width: 36px;\n}\n.vc-chrome-active-color {\n  position: relative;\n  width: 30px;\n  height: 30px;\n  border-radius: 15px;\n  overflow: hidden;\n  z-index: 1;\n}\n.vc-chrome-color-wrap .vc-checkerboard {\n  width: 30px;\n  height: 30px;\n  border-radius: 15px;\n  background-size: auto;\n}\n.vc-chrome-sliders {\n  flex: 1;\n}\n.vc-chrome-fields-wrap {\n  display: flex;\n  padding-top: 16px;\n}\n.vc-chrome-fields {\n  display: flex;\n  margin-left: -6px;\n  flex: 1;\n}\n.vc-chrome-field {\n  padding-left: 6px;\n  width: 100%;\n}\n.vc-chrome-toggle-btn {\n  width: 32px;\n  text-align: right;\n  position: relative;\n}\n.vc-chrome-toggle-icon {\n  margin-right: -4px;\n  margin-top: 12px;\n  cursor: pointer;\n  position: relative;\n  z-index: 2;\n}\n.vc-chrome-toggle-icon-highlight {\n  position: absolute;\n  width: 24px;\n  height: 28px;\n  background: #eee;\n  border-radius: 4px;\n  top: 10px;\n  left: 12px;\n}\n.vc-chrome-hue-wrap {\n  position: relative;\n  height: 10px;\n  margin-bottom: 8px;\n}\n.vc-chrome-alpha-wrap {\n  position: relative;\n  height: 10px;\n}\n.vc-chrome-hue-wrap .vc-hue {\n  border-radius: 2px;\n}\n.vc-chrome-alpha-wrap .vc-alpha-gradient {\n  border-radius: 2px;\n}\n.vc-chrome-hue-wrap .vc-hue-picker, .vc-chrome-alpha-wrap .vc-alpha-picker {\n  width: 12px;\n  height: 12px;\n  border-radius: 6px;\n  transform: translate(-6px, -2px);\n  background-color: rgb(248, 248, 248);\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.37);\n}\n.vc-chrome-body {\n  padding: 16px 16px 12px;\n  background-color: #fff;\n}\n.vc-chrome-saturation-wrap {\n  width: 100%;\n  padding-bottom: 55%;\n  position: relative;\n  border-radius: 2px 2px 0 0;\n  overflow: hidden;\n}\n.vc-chrome-saturation-wrap .vc-saturation-circle {\n  width: 12px;\n  height: 12px;\n}\n.vc-chrome-fields .vc-input__input {\n  font-size: 11px;\n  color: #333;\n  width: 100%;\n  border-radius: 2px;\n  border: none;\n  box-shadow: inset 0 0 0 1px #dadada;\n  height: 21px;\n  text-align: center;\n}\n.vc-chrome-fields .vc-input__label {\n  text-transform: uppercase;\n  font-size: 11px;\n  line-height: 11px;\n  color: #969696;\n  text-align: center;\n  display: block;\n  margin-top: 12px;\n}\n.vc-chrome__disable-alpha .vc-chrome-active-color {\n  width: 18px;\n  height: 18px;\n}\n.vc-chrome__disable-alpha .vc-chrome-color-wrap {\n  width: 30px;\n}\n.vc-chrome__disable-alpha .vc-chrome-hue-wrap {\n  margin-top: 4px;\n  margin-bottom: 4px;\n}\n",""])},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:["vc-chrome",t.disableAlpha?"vc-chrome__disable-alpha":""]},[n("div",{staticClass:"vc-chrome-saturation-wrap"},[n("saturation",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-body"},[n("div",{staticClass:"vc-chrome-controls"},[n("div",{staticClass:"vc-chrome-color-wrap"},[n("div",{staticClass:"vc-chrome-active-color",style:{background:t.activeColor}}),t._v(" "),t.disableAlpha?t._e():n("checkboard")],1),t._v(" "),n("div",{staticClass:"vc-chrome-sliders"},[n("div",{staticClass:"vc-chrome-hue-wrap"},[n("hue",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-chrome-alpha-wrap"},[n("alpha",{on:{change:t.childChange},model:{value:t.colors,callback:function(e){t.colors=e},expression:"colors"}})],1)])]),t._v(" "),t.disableFields?t._e():n("div",{staticClass:"vc-chrome-fields-wrap"},[n("div",{directives:[{name:"show",rawName:"v-show",value:0===t.fieldsIndex,expression:"fieldsIndex === 0"}],staticClass:"vc-chrome-fields"},[n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"hex",value:t.colors.hex},on:{change:t.inputChange}})],1)]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:1===t.fieldsIndex,expression:"fieldsIndex === 1"}],staticClass:"vc-chrome-fields"},[n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"r",value:t.colors.rgba.r},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"g",value:t.colors.rgba.g},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"b",value:t.colors.rgba.b},on:{change:t.inputChange}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"a",value:t.colors.a,"arrow-offset":.01,max:1},on:{change:t.inputChange}})],1)]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:2===t.fieldsIndex,expression:"fieldsIndex === 2"}],staticClass:"vc-chrome-fields"},[n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"h",value:t.hsl.h},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"s",value:t.hsl.s},on:{change:t.inputChange}})],1),t._v(" "),n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"l",value:t.hsl.l},on:{change:t.inputChange}})],1),t._v(" "),t.disableAlpha?t._e():n("div",{staticClass:"vc-chrome-field"},[n("ed-in",{attrs:{label:"a",value:t.colors.a,"arrow-offset":.01,max:1},on:{change:t.inputChange}})],1)]),t._v(" "),n("div",{staticClass:"vc-chrome-toggle-btn",on:{click:t.toggleViews}},[n("div",{staticClass:"vc-chrome-toggle-icon"},[n("svg",{staticStyle:{width:"24px",height:"24px"},attrs:{viewBox:"0 0 24 24"},on:{mouseover:t.showHighlight,mouseenter:t.showHighlight,mouseout:t.hideHighlight}},[n("path",{attrs:{fill:"#333",d:"M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"}})])]),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:t.highlight,expression:"highlight"}],staticClass:"vc-chrome-toggle-icon-highlight"})])])])])};r._withStripped=!0;var i={render:r,staticRenderFns:[]};e.a=i}])},function(t,e,n){"use strict";var r=n(20);n.n(r).a},function(t,e,n){(t.exports=n(1)(!1)).push([t.i,"\n.btn-color-picker .text[data-v-531a026a]{\n    display: inline-block;\n    min-width: 60px;\n}\n.btn-color-picker .swatch[data-v-531a026a]{\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    border-radius: 8px;\n    border: 1px solid grey;\n}\n.popup[data-v-531a026a]{\n  position: fixed;\n  z-index: 100;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.popup-inner[data-v-531a026a]{\n    position: absolute;\n    z-index: 100;\n}\n",""])},function(t,e,n){"use strict";n.r(e);var r=n(33),i=n(21);for(var o in i)"default"!==o&&function(t){n.d(e,t,(function(){return i[t]}))}(o);var a=n(0),s=Object(a.a)(i.default,r.a,r.b,!1,null,null,null);e.default=s.exports},function(t,e,n){"use strict";n.r(e);var r=n(35),i=n(23);for(var o in i)"default"!==o&&function(t){n.d(e,t,(function(){return i[t]}))}(o);n(60);var a=n(0),s=Object(a.a)(i.default,r.a,r.b,!1,null,"729e4cd7",null);e.default=s.exports},function(t,e,n){"use strict";var r=n(25);n.n(r).a},function(t,e,n){(t.exports=n(1)(!1)).push([t.i,"\n.hamburger[data-v-729e4cd7] {\n    width: 28px;\n    height: 18px;\n}\n.hamburger .horizontal-bar[data-v-729e4cd7]{\n    width: 75%;\n    height: 2px;\n    background-color: #222;\n    margin: 4px auto;\n    transition: opacity 0.1s, transform 0.25s;\n}\n.hamburger.active .horizontal-bar[data-v-729e4cd7]:first-child {\n    transform: rotate(-45deg) translate(-4px, 4px);\n}\n.hamburger.active .horizontal-bar[data-v-729e4cd7]:nth-child(even) {\n    opacity: 0;\n}\n.hamburger.active .horizontal-bar[data-v-729e4cd7]:last-child {\n    transform: rotate(45deg) translate(-4px, -4px);\n}\n",""])},function(t,e,n){"use strict";var r=n(26);n.n(r).a},function(t,e,n){(t.exports=n(1)(!1)).push([t.i,"\n.hamburger-menu[data-v-426338b8] {\n    margin: 12px auto;\n}\n",""])},function(t,e,n){var r=n(65);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(3).default)("2ff03b56",r,!0,{})},function(t,e,n){(e=t.exports=n(1)(!1)).i(n(66),""),e.i(n(67),""),e.i(n(68),""),e.i(n(69),""),e.i(n(70),""),e.push([t.i,":root{\n    --brand-primary-hue: 53;\n    --brand-primary-saturation: 90%;\n    --brand-primary-lightness: 49%;\n    --brand-primary: hsl(var(--brand-primary-hue), var(--brand-primary-saturation), var(--brand-primary-lightness));\n\n    --brand-secondary-hue: 251;\n    --brand-secondary-saturation: 5%;\n    --brand-secondary-lightness: 60%;\n    --brand-secondary: hsl(var(--brand-secondary-hue), var(--brand-secondary-saturation), var(--brand-secondary-lightness));\n\n    --brand-tertiary-hue: 0;\n    --brand-tertiary-saturation: 0%;\n    --brand-tertiary-lightness: 13%;\n    --brand-tertiary: hsl(var(--brand-tertiary-hue), var(--brand-tertiary-saturation), var(--brand-tertiary-lightness));\n\n    --text-color-hue: 0;\n    --text-color-saturation: 0%;\n    --text-color-lightness: 93%;\n    --text-color: hsl(var(--text-color-hue), var(--text-color-saturation), var(--text-color-lightness));\n}\n\nbody {\n    background-color: var(--brand-tertiary);\n    font-family: 'Inconsolata', monospace;\n    color: var(--text-color);\n    overflow-y: scroll;\n    overflow-x: auto;\n    margin: 0;\n}\n\n.inline-container {\n    display: inline-block;\n}\n\n@media screen and (min-width: 640px) {\n    body {\n        background-color: var(--brand-secondary);\n    }\n}\n",""])},function(t,e,n){(t.exports=n(1)(!1)).push([t.i,".btn {\n    --btn-bg: hsl(var(--brand-secondary-hue), var(--brand-secondary-saturation), 80%);\n    --btn-bg-hover: var(--brand-secondary);\n    --btn-bg-focus: var(--btn-bg-hover);\n    --btn-fg: var(--brand-tertiary);\n    --btn-fg-hover: var(--brand-primary);\n    --btn-fg-focus: var(--brand-primary);\n    --btn-border: 1px solid var(--brand-secondary);\n    --btn-border-focus: 1px solid var(--brand-primary);\n    --btn-padding: 4px 8px;\n    --btn-margin: 1px 2px;\n    box-sizing: border-box;\n    padding: var(--btn-padding);\n    margin: var(--btn-margin);\n    text-decoration: none;\n    color: var(--btn-fg);\n    background-color: var(--btn-bg);\n    border: var(--btn-border);\n    border-radius: 4px;\n    transition: background-color 0.15s ease-in-out,\n                color 0.15s ease-in-out,\n                border-color 0.15s ease-in-out;\n    user-select: none;\n    cursor: pointer;\n    outline: none;\n}\n\n .btn:hover{\n    background-color: var(--btn-bg-hover);\n    color: var(--btn-fg-hover);\n}\n\n.btn:active, .btn:focus{\n    background-color: var(--btn-bg-focus);\n    color: var(--btn-fg-focus);\n    border: var(--btn-border-focus);\n}\n",""])},function(t,e,n){(t.exports=n(1)(!1)).push([t.i,"fieldset.control-group{\n    --fieldset-bg: hsl(var(--brand-secondary-hue), var(--brand-secondary-saturation), 70%);\n    --fieldset-border: 1px solid var(--brand-primary);\n    --fieldset-margin: 18px auto;\n\n    background-color: var(--fieldset-bg);\n    color: var(--brand-tertiary);\n    border: var(--fieldset-border);\n    border-radius: 2px;\n    margin: var(--fieldset-margin)\n}\n\nfieldset.control-group legend{\n    color: var(--text-color);\n    text-shadow: 0 0 2px var(--brand-tertiary);\n    font-weight: 600;\n}\n",""])},function(t,e,n){(t.exports=n(1)(!1)).push([t.i,"#container{\n    --container-padding: 24px;\n    --container-margin-md: 18px;\n    --controls-width-md: 250px;\n\n    display: grid;\n    grid-template-areas: 'header'\n                         'controls'\n                         'content';\n    grid-template-columns: 100%;\n    grid-template-rows: 2.5em auto 1fr;\n    grid-gap: 2vh 4vw;\n    background-color: var(--brand-tertiary);\n    transition: margin 0.25s ease;\n    padding: var(--container-padding);\n    min-height: calc(100vh - (var(--container-margin-md)*2) - (var(--container-padding)*2));\n}\n\n#header{\n    grid-area: header;\n    transition: none;\n}\n\n#controls{\n    transition: none;\n    grid-area: controls;\n    z-index: 2;\n}\n\n#content{\n    transition: none;\n    grid-area: content;\n    z-index: 1;\n    max-width: calc(90vw - var(--container-padding));\n    height: 100%;\n    margin: 0 auto;\n    box-sizing: border-box;\n    padding: 0 0 12px 0;\n    overflow-x: auto;\n}\n\n@media screen and (min-width: 640px) {\n    #container{\n        grid-template-areas: 'header header'\n                             'controls content';\n        grid-template-columns: var(--controls-width-md) 1fr;\n        margin: var(--container-margin-md);\n        box-shadow: 5px 5px 5px 0px hsl(var(--brand-tertiary-hue), var(--brand-tertiary-saturation), 6%);\n    }\n\n    #content{\n        max-width: calc(100vw - var(--controls-width-md));\n        padding: 0;\n        margin: 0;\n    }\n}\n",""])},function(t,e,n){(t.exports=n(1)(!1)).push([t.i,".display-sm {\n    display: block;\n}\n\n.display-md {\n    display: none;\n}\n\n@media screen and (min-width: 640px) {\n    .display-sm {\n        display: none;\n    }\n\n    .display-md {\n        display: block;\n    }\n}\n",""])},function(t,e,n){(t.exports=n(1)(!1)).push([t.i,"h1, h2, h3, h4, h5, h6 {\n    margin: 0.25em 0;\n}\n",""])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZXgvZGlzdC92dWV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvTWFpbkFwcC52dWU/YWVkYSIsIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvTWFpbkFwcC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQnV0dG9uVG9nZ2xlLnZ1ZT84ODU1Iiwid2VicGFjazovLy9zcmMvanMvY29tcG9uZW50cy9CdXR0b25Ub2dnbGUudnVlIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NhbnZhc1Jvb3QudnVlP2VhMmQiLCJ3ZWJwYWNrOi8vL3NyYy9qcy9jb21wb25lbnRzL0NhbnZhc1Jvb3QudnVlIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NhbnZhc0dyaWRIZWF0TWFwLnZ1ZT9kMGViIiwid2VicGFjazovLy9zcmMvanMvY29tcG9uZW50cy9DYW52YXNHcmlkSGVhdE1hcC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwU2FuZC52dWU/MzcyMyIsIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwU2FuZC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwLnZ1ZT9lYTdhIiwid2VicGFjazovLy9zcmMvanMvY29tcG9uZW50cy9Db250cm9sR3JvdXAudnVlIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cEhlYXRtYXAudnVlPzk1NmEiLCJ3ZWJwYWNrOi8vL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cEhlYXRtYXAudnVlIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZT8yN2ZhIiwid2VicGFjazovLy9zcmMvanMvY29tcG9uZW50cy9CdXR0b25Db2xvclBpY2tlci52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQnV0dG9uQ29sb3JQaWNrZXIudnVlP2ZlZTUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwQ2FudmFzLnZ1ZT9kNGVmIiwid2VicGFjazovLy9zcmMvanMvY29tcG9uZW50cy9Db250cm9sR3JvdXBDYW52YXMudnVlIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL01lbnVDb2xsYXBzaWJsZS52dWU/ZTM4OCIsIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvTWVudUNvbGxhcHNpYmxlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9NZW51Q29sbGFwc2libGUudnVlPzUzNDEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvTWFpbkFwcC52dWU/NjM0NiIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvTWFpbkFwcC52dWU/MWMzOSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9NYWluQXBwLnZ1ZT8xMGM1Iiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cFNhbmQudnVlPzJkZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwU2FuZC52dWU/MjFmNSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9DYW52YXNSb290LnZ1ZT9hNzVhIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NhbnZhc1Jvb3QudnVlP2MyN2QiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwSGVhdG1hcC52dWU/OTJjOCIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9Db250cm9sR3JvdXBIZWF0bWFwLnZ1ZT9jYWZjIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cENhbnZhcy52dWU/ZGMxOCIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9Db250cm9sR3JvdXBDYW52YXMudnVlPzExZDciLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQnV0dG9uVG9nZ2xlLnZ1ZT80OGExIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0J1dHRvblRvZ2dsZS52dWU/NDU5NCIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9NZW51Q29sbGFwc2libGUudnVlP2RkOWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvTWVudUNvbGxhcHNpYmxlLnZ1ZT81YTY0Iiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZT81NmI0Iiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZT8zZjQ5Iiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NvbnRyb2xHcm91cC52dWU/ZmY1YiIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9Db250cm9sR3JvdXAudnVlP2NlZjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbGl0aWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdG9yZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3N0b3Jlcy9oZWF0bWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdG9yZXMvY2FudmFzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdG9yZXMvc2FuZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9NYWluQXBwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9CdXR0b25Ub2dnbGUudnVlIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NhbnZhc1Jvb3QudnVlIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL0NhbnZhc0dyaWRIZWF0TWFwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9Db250cm9sR3JvdXBTYW5kLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9Db250cm9sR3JvdXBIZWF0bWFwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9CdXR0b25Db2xvclBpY2tlci52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1jb2xvci9kaXN0L3Z1ZS1jb2xvci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQnV0dG9uQ29sb3JQaWNrZXIudnVlP2ZjNmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQnV0dG9uQ29sb3JQaWNrZXIudnVlPzRhMTgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwQ2FudmFzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9NZW51Q29sbGFwc2libGUudnVlIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL01lbnVDb2xsYXBzaWJsZS52dWU/NDY4NyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9NZW51Q29sbGFwc2libGUudnVlPzM2YjIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvTWFpbkFwcC52dWU/MzgzMiIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9NYWluQXBwLnZ1ZT8yNDkzIiwid2VicGFjazovLy8uL3NyYy9jc3MvYXBwLmNzcz9hYjFkIiwid2VicGFjazovLy8uL3NyYy9jc3MvYXBwLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL2J1dHRvbnMuY3NzIiwid2VicGFjazovLy8uL3NyYy9jc3MvZm9ybXMuY3NzIiwid2VicGFjazovLy8uL3NyYy9jc3MvZ3JpZC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9yZXNwb25zaXZlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3R5cG9ncmFwaHkuY3NzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibm9ybWFsaXplQ29tcG9uZW50Iiwic2NyaXB0RXhwb3J0cyIsInJlbmRlciIsInN0YXRpY1JlbmRlckZucyIsImZ1bmN0aW9uYWxUZW1wbGF0ZSIsImluamVjdFN0eWxlcyIsInNjb3BlSWQiLCJtb2R1bGVJZGVudGlmaWVyIiwic2hhZG93TW9kZSIsImhvb2siLCJvcHRpb25zIiwiX2NvbXBpbGVkIiwiZnVuY3Rpb25hbCIsIl9zY29wZUlkIiwiY29udGV4dCIsInRoaXMiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsImFkZCIsIl9zc3JSZWdpc3RlciIsIiRyb290IiwiJG9wdGlvbnMiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwiaCIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiY29uY2F0IiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJqb2luIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiaWQiLCJwdXNoIiwiZGV2dG9vbEhvb2siLCJ3aW5kb3ciLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZm9yRWFjaFZhbHVlIiwib2JqIiwiZm4iLCJrZXlzIiwiZm9yRWFjaCIsIk1vZHVsZSIsInJhd01vZHVsZSIsInJ1bnRpbWUiLCJfY2hpbGRyZW4iLCJfcmF3TW9kdWxlIiwicmF3U3RhdGUiLCJzdGF0ZSIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwibmFtZXNwYWNlZCIsImNvbmZpZ3VyYWJsZSIsImFkZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJnZXRDaGlsZCIsInVwZGF0ZSIsImFjdGlvbnMiLCJtdXRhdGlvbnMiLCJnZXR0ZXJzIiwiZm9yRWFjaENoaWxkIiwiZm9yRWFjaEdldHRlciIsImZvckVhY2hBY3Rpb24iLCJmb3JFYWNoTXV0YXRpb24iLCJkZWZpbmVQcm9wZXJ0aWVzIiwiTW9kdWxlQ29sbGVjdGlvbiIsInJhd1Jvb3RNb2R1bGUiLCJyZWdpc3RlciIsInBhdGgiLCJyZWR1Y2UiLCJyb290IiwiZ2V0TmFtZXNwYWNlIiwibmFtZXNwYWNlIiwidGFyZ2V0TW9kdWxlIiwibmV3TW9kdWxlIiwidGhpcyQxIiwic2xpY2UiLCJyYXdDaGlsZE1vZHVsZSIsInVucmVnaXN0ZXIiLCJWdWUiLCJTdG9yZSIsImluc3RhbGwiLCJwbHVnaW5zIiwic3RyaWN0IiwiX2NvbW1pdHRpbmciLCJfYWN0aW9ucyIsIl9hY3Rpb25TdWJzY3JpYmVycyIsIl9tdXRhdGlvbnMiLCJfd3JhcHBlZEdldHRlcnMiLCJfbW9kdWxlcyIsIl9tb2R1bGVzTmFtZXNwYWNlTWFwIiwiX3N1YnNjcmliZXJzIiwiX3dhdGNoZXJWTSIsInN0b3JlIiwiZGlzcGF0Y2giLCJjb21taXQiLCJ0eXBlIiwicGF5bG9hZCIsImluc3RhbGxNb2R1bGUiLCJyZXNldFN0b3JlVk0iLCJwbHVnaW4iLCJjb25maWciLCJkZXZ0b29scyIsIl9kZXZ0b29sSG9vayIsImVtaXQiLCJvbiIsInRhcmdldFN0YXRlIiwicmVwbGFjZVN0YXRlIiwic3Vic2NyaWJlIiwibXV0YXRpb24iLCJkZXZ0b29sUGx1Z2luIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiZ2VuZXJpY1N1YnNjcmliZSIsInN1YnMiLCJpbmRleE9mIiwic3BsaWNlIiwicmVzZXRTdG9yZSIsImhvdCIsIm9sZFZtIiwiX3ZtIiwid3JhcHBlZEdldHRlcnMiLCJjb21wdXRlZCIsInNpbGVudCIsImRhdGEiLCIkJHN0YXRlIiwiJHdhdGNoIiwiX2RhdGEiLCJkZWVwIiwic3luYyIsImVuYWJsZVN0cmljdE1vZGUiLCJfd2l0aENvbW1pdCIsIm5leHRUaWNrIiwiJGRlc3Ryb3kiLCJyb290U3RhdGUiLCJpc1Jvb3QiLCJwYXJlbnRTdGF0ZSIsImdldE5lc3RlZFN0YXRlIiwibW9kdWxlTmFtZSIsInNldCIsImxvY2FsIiwibm9OYW1lc3BhY2UiLCJfdHlwZSIsIl9wYXlsb2FkIiwiX29wdGlvbnMiLCJhcmdzIiwidW5pZnlPYmplY3RTdHlsZSIsImdldHRlcnNQcm94eSIsInNwbGl0UG9zIiwibG9jYWxUeXBlIiwibWFrZUxvY2FsR2V0dGVycyIsIm1ha2VMb2NhbENvbnRleHQiLCJoYW5kbGVyIiwicmVnaXN0ZXJNdXRhdGlvbiIsImFjdGlvbiIsImNiIiwidmFsIiwicmVzIiwicm9vdEdldHRlcnMiLCJ0aGVuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjYXRjaCIsImVyciIsInJlZ2lzdGVyQWN0aW9uIiwicmF3R2V0dGVyIiwicmVnaXN0ZXJHZXR0ZXIiLCJjaGlsZCIsIl9WdWUiLCJOdW1iZXIiLCJ2ZXJzaW9uIiwic3BsaXQiLCJtaXhpbiIsInZ1ZXhJbml0IiwiX2luaXQiLCJpbml0IiwiJHN0b3JlIiwiYXBwbHlNaXhpbiIsInYiLCJyZWYiLCJlbnRyeSIsInN1YiIsImFsbCIsInN1YnNjcmliZUFjdGlvbiIsIndhdGNoIiwicmVnaXN0ZXJNb2R1bGUiLCJwcmVzZXJ2ZVN0YXRlIiwidW5yZWdpc3Rlck1vZHVsZSIsImRlbGV0ZSIsImhvdFVwZGF0ZSIsIm5ld09wdGlvbnMiLCJjb21taXR0aW5nIiwibWFwU3RhdGUiLCJub3JtYWxpemVOYW1lc3BhY2UiLCJzdGF0ZXMiLCJub3JtYWxpemVNYXAiLCJnZXRNb2R1bGVCeU5hbWVzcGFjZSIsInZ1ZXgiLCJtYXBNdXRhdGlvbnMiLCJsZW4iLCJhcmd1bWVudHMiLCJhcHBseSIsIm1hcEdldHRlcnMiLCJtYXBBY3Rpb25zIiwiY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMiLCJBcnJheSIsImlzQXJyYXkiLCJjaGFyQXQiLCJoZWxwZXIiLCJpbmRleF9lc20iLCJsaXN0VG9TdHlsZXMiLCJwYXJlbnRJZCIsInN0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInBhcnRzIiwiaGFzRG9jdW1lbnQiLCJkb2N1bWVudCIsIkRFQlVHIiwiRXJyb3IiLCJzdHlsZXNJbkRvbSIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNpbmdsZXRvbkVsZW1lbnQiLCJzaW5nbGV0b25Db3VudGVyIiwiaXNQcm9kdWN0aW9uIiwibm9vcCIsImlzT2xkSUUiLCJuYXZpZ2F0b3IiLCJ0ZXN0IiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJhZGRTdHlsZXNDbGllbnQiLCJfaXNQcm9kdWN0aW9uIiwiYWRkU3R5bGVzVG9Eb20iLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsImFkZFN0eWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwicmVtb3ZlIiwicXVlcnlTZWxlY3RvciIsInBhcmVudE5vZGUiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImFwcGx5VG9UYWciLCJuZXdPYmoiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwiaW5zZXJ0QmVmb3JlIiwic2V0QXR0cmlidXRlIiwic3NySWQiLCJmaXJzdENoaWxkIiwiY29tcG9uZW50cyIsIkJ1dHRvblRvZ2dsZSIsIkNhbnZhc1Jvb3QiLCJDYW52YXNHcmlkSGVhdE1hcCIsIkNvbnRyb2xHcm91cFNhbmQiLCJDb250cm9sR3JvdXBIZWF0bWFwIiwiQ29udHJvbEdyb3VwQ2FudmFzIiwiTWVudUNvbGxhcHNpYmxlIiwiaW50ZXJhY3RpbmciLCJpbnRlcmFjdGluZ1giLCJpbnRlcmFjdGluZ1kiLCJpbnRlcmFjdGluZ0Ftb3VudCIsImRvTG9vcCIsInRpbWVvdXQiLCJtZXRob2RzIiwiY29uc3RyYWluQ2FudmFzIiwic2V0SW50ZXJhY3RpbmciLCJhbW91bnQiLCJ1cGRhdGVJbnRlcmFjdGluZyIsIngiLCJNYXRoIiwicm91bmQiLCJyZXNvbHV0aW9uIiwiY29scyIsInkiLCJyb3dzIiwiY2xlYXIiLCJzYW5kIiwiZmlsbCIsImJhc2VTYW5kIiwic2V0U2FuZCIsInJlc2V0IiwidXBkYXRlU2FuZCIsImlkeCIsIm1pZGRsZSIsInN0YXJ0aW5nU2FuZCIsIm9wdGltaXNlQ2FudmFzIiwib25SZXNpemUiLCIkX3NldFVwIiwiYWRkRXZlbnRMaXN0ZW5lciIsIiRfdXBkYXRlIiwiJF90b3BwbGUiLCJncmFpbnMiLCJuZXh0U2FuZCIsInNpYmxpbmdJZHgiLCIkX2xvb3AiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJwYXJzZUludCIsIm9sZFZhbHVlIiwid2lkdGgiLCJoZWlnaHQiLCJtb3VudGVkIiwiJG5leHRUaWNrIiwiYmVmb3JlRGVzdHJveSIsInByb3BzIiwic3RhcnRBY3RpdmUiLCJkZWZhdWx0IiwiYWN0aXZlSWNvbiIsIlN0cmluZyIsImluYWN0aXZlSWNvbiIsImFjdGl2ZVRleHQiLCJpbmFjdGl2ZVRleHQiLCJhY3RpdmUiLCJpY29uIiwidGV4dCIsInRvZ2dsZSIsIiRlbWl0IiwiQ29udHJvbEdyb3VwIiwibGVnZW5kIiwicmVxdWlyZWQiLCJjYW5SZXNldCIsIkJ1dHRvbkNvbG9yUGlja2VyIiwicG9wdXBUaXRsZSIsIm9wZW4iLCJjb2xvciIsIlBob3Rvc2hvcCIsImNhbmNlbCIsImNob29zZSIsIiRyZWZzIiwiYnV0dG9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsInRvcCIsImNsaWVudEhlaWdodCIsImxvY2FscyIsImciLCJGdW5jdGlvbiIsImUiLCJjb21wb25lbnQiLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsImF0dHJzIiwiX20iLCJfdiIsIiRldmVudCIsInN0YXRpY0NsYXNzIiwicHJldmVudERlZmF1bHQiLCJkb21Qcm9wcyIsIl9zIiwiX2siLCJrZXlDb2RlIiwiY29sb3IwIiwiY29sb3IxIiwiY29sb3IyIiwiY29sb3IzIiwicmVzZXRTYW5kIiwic2FuZFRvdGFsIiwic2V0QmFzZVNhbmQiLCJ0YXJnZXQiLCJzZXRTdGFydGluZ1NhbmQiLCJfdCIsInJlc2V0Q29sb3JzIiwidXBkYXRlQ29sb3IiLCJzdGVwIiwicmVzZXREaW1lbnNpb25zIiwibWluUmVzb2x1dGlvbiIsIm1heFJlc29sdXRpb24iLCJzZXRSZXNvbHV0aW9uIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsInNldFdpZHRoIiwibWluSGVpZ2h0IiwibWF4SGVpZ2h0Iiwic2V0SGVpZ2h0IiwiX2UiLCJjbGFzcyIsImRpcmVjdGl2ZXMiLCJyYXdOYW1lIiwiZXhwcmVzc2lvbiIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiaGV4IiwiZW1wdHlPYmplY3QiLCJmcmVlemUiLCJpc1VuZGVmIiwiaXNEZWYiLCJpc1RydWUiLCJpc1ByaW1pdGl2ZSIsImlzT2JqZWN0IiwiX3RvU3RyaW5nIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJwYXJzZUZsb2F0IiwiZmxvb3IiLCJpc0Zpbml0ZSIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJhcnIiLCJoYXNPd24iLCJjYWNoZWQiLCJjYWNoZSIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsInJlcGxhY2UiLCJfIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJjdHgiLCJib3VuZEZuIiwiYSIsIl9sZW5ndGgiLCJ0b0FycmF5Iiwic3RhcnQiLCJyZXQiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJiIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJrZXlzQSIsImtleXNCIiwibG9vc2VJbmRleE9mIiwib25jZSIsImNhbGxlZCIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwicHJvZHVjdGlvblRpcCIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiX2xpZmVjeWNsZUhvb2tzIiwiZGVmIiwid3JpdGFibGUiLCJiYWlsUkUiLCJfaXNTZXJ2ZXIiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJuYXRpdmVXYXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJpc1NlcnZlclJlbmRlcmluZyIsInVuZGVmaW5lZCIsImdsb2JhbCIsImVudiIsIlZVRV9FTlYiLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJTZXQiLCJoYXMiLCJ3YXJuIiwidWlkIiwiRGVwIiwiYWRkU3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5IiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwiX3RhcmdldCIsInBvcFRhcmdldCIsInBvcCIsIlZOb2RlIiwidGFnIiwiY2hpbGRyZW4iLCJlbG0iLCJjb21wb25lbnRPcHRpb25zIiwiYXN5bmNGYWN0b3J5IiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwibWV0aG9kIiwib3JpZ2luYWwiLCJpbnNlcnRlZCIsInJlc3VsdCIsIm9iIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJzcmMiLCJfX3Byb3RvX18iLCJvYnNlcnZlIiwiYXNSb290RGF0YSIsImlzRXh0ZW5zaWJsZSIsIl9pc1Z1ZSIsImRlZmluZVJlYWN0aXZlIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNldHRlciIsImNoaWxkT2IiLCJkZXBlbmRBcnJheSIsIm5ld1ZhbCIsIm1heCIsImRlbCIsIml0ZW1zIiwic3RyYXRzIiwibWVyZ2VEYXRhIiwiZnJvbSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsInZtIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJtZXJnZUFzc2V0cyIsImtleSQxIiwiaW5qZWN0IiwicHJvdmlkZSIsImRlZmF1bHRTdHJhdCIsIm1lcmdlT3B0aW9ucyIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZUluamVjdCIsImRpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZXh0ZW5kc0Zyb20iLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcHNEYXRhIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiX3Byb3BzIiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsIm1hdGNoIiwiaXNTYW1lVHlwZSIsImV4cGVjdGVkVHlwZXMiLCJoYW5kbGVFcnJvciIsImluZm8iLCJjdXIiLCIkcGFyZW50IiwiaG9va3MiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJsb2dFcnJvciIsImNvbnNvbGUiLCJlcnJvciIsIm1pY3JvVGltZXJGdW5jIiwibWFjcm9UaW1lckZ1bmMiLCJjYWxsYmFja3MiLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJ1c2VNYWNyb1Rhc2siLCJzZXRJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsInNldFRpbWVvdXQiLCJjaGFubmVsIiwicG9ydCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIl9yZXNvbHZlIiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJwYXNzaXZlIiwib25jZSQkMSIsImNhcHR1cmUiLCJjcmVhdGVGbkludm9rZXIiLCJmbnMiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbGRPbiIsInJlbW92ZSQkMSIsIm9sZCIsImV2ZW50IiwicGFyYW1zIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiY2hlY2tQcm9wIiwiaGFzaCIsImFsdEtleSIsInByZXNlcnZlIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwibmVzdGVkSW5kZXgiLCJsYXN0SW5kZXgiLCJsYXN0IiwiaXNUZXh0Tm9kZSIsInNoaWZ0IiwiX2lzVkxpc3QiLCJlbnN1cmVDdG9yIiwiY29tcCIsImJhc2UiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiJG9uY2UiLCIkb24iLCJyZW1vdmUkMSIsIiRvZmYiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJvbGRMaXN0ZW5lcnMiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJhY3RpdmVJbnN0YW5jZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGlyZWN0IiwiX2RpcmVjdEluYWN0aXZlIiwiJGNoaWxkcmVuIiwiY2FsbEhvb2siLCJoYW5kbGVycyIsIl9oYXNIb29rRXZlbnQiLCJxdWV1ZSIsImFjdGl2YXRlZENoaWxkcmVuIiwid2FpdGluZyIsImZsdXNoaW5nIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJzb3J0IiwicnVuIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJfd2F0Y2hlciIsIl9pc01vdW50ZWQiLCJjYWxsVXBkYXRlZEhvb2tzIiwidWlkJDEiLCJXYXRjaGVyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsIl93YXRjaGVycyIsInVzZXIiLCJsYXp5IiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsInNlZ21lbnRzIiwicGFyc2VQYXRoIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJxdWV1ZVdhdGNoZXIiLCJldmFsdWF0ZSIsInRlYXJkb3duIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJwcm94eSIsInNvdXJjZUtleSIsImluaXRTdGF0ZSIsInByb3BzT3B0aW9ucyIsIl9wcm9wS2V5cyIsImxvb3AiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsImdldERhdGEiLCJjaGFyQ29kZUF0IiwiaW5pdERhdGEiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwiaW5pdENvbXB1dGVkIiwiY3JlYXRlV2F0Y2hlciIsImluaXRXYXRjaCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVuZGVyTGlzdCIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsInNsb3ROb2RlcyIsIiRzbG90cyIsIl9yZW5kZXJlZCIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInRyZWUiLCJtYXJrU3RhdGljIiwiX3JlbmRlclByb3h5IiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJvdXJzIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX2wiLCJfcSIsIl9pIiwiX2YiLCJfYiIsIl91IiwiX2ciLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJjbG9uZSIsIm1lcmdlUHJvcHMiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaHlkcmF0aW5nIiwicGFyZW50RWxtIiwicmVmRWxtIiwiX2lzRGVzdHJveWVkIiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsIl9pc0NvbXBvbmVudCIsIl9wYXJlbnRWbm9kZSIsIl9wYXJlbnRFbG0iLCJfcmVmRWxtIiwiaW5saW5lVGVtcGxhdGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJwYXJlbnRWbm9kZSIsInJlbmRlckNoaWxkcmVuIiwiaGFzQ2hpbGRyZW4iLCJfcmVuZGVyQ2hpbGRyZW4iLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcGFyZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJpbnNlcnQiLCJkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJfYmFzZSIsImNpZCIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsImNvbnRleHRzIiwiZm9yY2VSZW5kZXIiLCJyZWplY3QiLCJyZWFzb24iLCJkZWxheSIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJjYWxsYmFjayIsInRyYW5zZm9ybU1vZGVsIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsInJlbmRlckNvbnRleHQiLCJ2bm9kZXMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibmF0aXZlT24iLCJhYnN0cmFjdCIsImluc3RhbGxDb21wb25lbnRIb29rcyIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiaXMiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsImFwcGx5TlMiLCJmb3JjZSIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiX2NyZWF0ZUVsZW1lbnQiLCJ1aWQkMyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJleHRlbmRlZCIsImV4dGVuZE9wdGlvbnMiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwiZGVkdXBlIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiY29uc3RydWN0b3IiLCJDb21wIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsInVzZSIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicGF0dGVybiIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwiY2FjaGVkJCQxIiwiX3VpZCIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJpbml0TGlmZWN5Y2xlIiwiX2V2ZW50cyIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwiaW5pdFByb3ZpZGUiLCJlbCIsImluaXRNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRzZXQiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwic3RhdGVNaXhpbiIsImhvb2tSRSIsImNicyIsImkkMSIsImV2ZW50c01peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJsaWZlY3ljbGVNaXhpbiIsIl9yZW5kZXIiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsIlJlZ0V4cCIsImJ1aWx0SW5Db21wb25lbnRzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwiY29uZmlnRGVmIiwidXRpbCIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsInVuc2hpZnQiLCJpbml0VXNlIiwiaW5pdE1peGluJDEiLCJkZWZpbml0aW9uIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiaW5pdEdsb2JhbEFQSSIsImFjY2VwdFZhbHVlIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImlzRmFsc3lBdHRyVmFsdWUiLCJnZW5DbGFzc0ZvclZub2RlIiwiY2hpbGROb2RlIiwibWVyZ2VDbGFzc0RhdGEiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwidGFnTmFtZSIsIm11bHRpcGxlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlQ29tbWVudCIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJzZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50Iiwic2V0U3R5bGVTY29wZSIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiZGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJiYXNlU2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwidGFyZ2V0JDEiLCJrbGFzcyIsImFkZCQxIiwiX3dpdGhUYXNrIiwib25jZUhhbmRsZXIiLCJyZW1vdmUkMiIsImNyZWF0ZU9uY2VIYW5kbGVyIiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwiZXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJudW1iZXIiLCJ0cmltIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJlbXB0eVN0eWxlIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJleHBlY3RlZFR5cGUiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwiZW5kIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiX2xlYXZlQ2IiLCJjYW5jZWxsZWQiLCJ0cmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJub2RlVHlwZSIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwiaW5uZXJOb2RlIiwiYWN0aXZhdGUiLCJyZWFjdGl2YXRlQ29tcG9uZW50Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwicmVmJCQxIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJwcmUiLCJoYXNDaGlsZE5vZGVzIiwiaW5uZXJIVE1MIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJvbGRFbG0iLCJwYXJlbnRFbG0kMSIsInBhdGNoYWJsZSIsImkkMiIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwiZGlyZWN0aXZlIiwiYmluZGluZyIsIl92T3B0aW9ucyIsInNldFNlbGVjdGVkIiwiZ2V0VmFsdWUiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uRW5kIiwicHJldk9wdGlvbnMiLCJjdXJPcHRpb25zIiwic29tZSIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsInNlbGVjdGVkIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxvY2F0ZU5vZGUiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInVuYmluZCIsInRyYW5zaXRpb25Qcm9wcyIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJyYXdDaGlsZCIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJjYWxsUGVuZGluZ0NicyIsIl9tb3ZlQ2IiLCJyZWNvcmRQb3NpdGlvbiIsIm5ld1BvcyIsImFwcGx5VHJhbnNsYXRpb24iLCJvbGRQb3MiLCJwb3MiLCJkeCIsImR5IiwibW92ZWQiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJUcmFuc2l0aW9uR3JvdXAiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwia2VwdCIsInJlbW92ZWQiLCJjJDEiLCJiZWZvcmVVcGRhdGUiLCJ1cGRhdGVkIiwiaGFzTW92ZSIsIl9yZWZsb3ciLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZU5vZGUiLCJhdHRyIiwiSFRNTFVua25vd25FbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJtb3VudENvbXBvbmVudCIsInF1ZXJ5IiwiY29vcmRUb1BpeGVsIiwicGl4ZWxUb0Nvb3JkIiwicGl4ZWwiLCJNYWluQXBwIiwic2VsZiIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzY29wZSIsImNsZWFyVGltZW91dCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImNsb3NlIiwidW5yZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsImh0bWwiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsImdldFByb3RvdHlwZU9mIiwicHJvY2VzcyIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyYW5kb20iLCJhdHRhY2hFdmVudCIsInRhc2siLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIlZ1ZXgiLCJjYW52YXMiLCJoZWF0bWFwIiwiSU5JVElBTF9TVEFURSIsIkRJTUVOU0lPTlMiLCJSRVNPTFVUSU9OIiwiYWNjIiwidSIsImYiLCJlc01vZHVsZSIsImhzbCIsIl9hIiwic2V0QWxwaGEiLCJ0b0hzbCIsInRvSHN2IiwidG9IZXhTdHJpbmciLCJyZ2JhIiwidG9SZ2IiLCJoc3YiLCJvbGRIdWUiLCJnZXRBbHBoYSIsImNvbG9ycyIsImNvbG9yQ2hhbmdlIiwiaXNWYWxpZEhleCIsImlzVmFsaWQiLCJzaW1wbGVDaGVja0ZvclZhbGlkQ29sb3IiLCJfX2ZpbGUiLCJwYWxldHRlIiwicGljayIsImhhbmRsZXJDbGljayIsImxhYmVsIiwiZGVzYyIsIm1pbiIsImFycm93T2Zmc2V0IiwiaW5wdXQiLCJoYW5kbGVDaGFuZ2UiLCJoYW5kbGVCbHVyIiwibG9nIiwiaGFuZGxlS2V5RG93biIsImhhbmRsZURyYWciLCJoYW5kbGVNb3VzZURvd24iLCJvbkNoYW5nZSIsImRpcmVjdGlvbiIsImh1ZSIsImFjdGl2ZU9mZnNldCIsInN3YXRjaGVzIiwiaHVlQ2hhbmdlIiwiaGFuZGxlU3dDbGljayIsInB1bGxEaXJlY3Rpb24iLCJkaXJlY3Rpb25DbGFzcyIsInBvaW50ZXJUb3AiLCJwb2ludGVyTGVmdCIsImNvbnRhaW5lciIsImNsaWVudFdpZHRoIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsInBhZ2VYIiwidG91Y2hlcyIsInBhZ2VZIiwiaGFuZGxlTW91c2VVcCIsInVuYmluZEV2ZW50TGlzdGVuZXJzIiwiZXF1YWwiLCJkaXNhYmxlRmllbGRzIiwic2F0dXJhdGlvbiIsImFscGhhIiwiY3VycmVudENvbG9yIiwidG9GaXhlZCIsImNoaWxkQ2hhbmdlIiwiaW5wdXRDaGFuZ2UiLCJjbGlja0N1cnJlbnRDb2xvciIsImhhbmRsZUFjY2VwdCIsImhhbmRsZUNhbmNlbCIsImJnQ29sb3IiLCJ0aHJvdHRsZSIsImxlYWRpbmciLCJ0cmFpbGluZyIsImNoZWNrYm9hcmQiLCJncmFkaWVudENvbG9yIiwiZ2V0Q29udGV4dCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwidHJhbnNsYXRlIiwidG9EYXRhVVJMIiwic2l6ZSIsIndoaXRlIiwiZ3JleSIsImJnU3R5bGUiLCJwcmVzZXRDb2xvcnMiLCJkaXNhYmxlQWxwaGEiLCJhY3RpdmVDb2xvciIsImhhbmRsZVByZXNldCIsImZpZWxkcyIsImZpZWxkc0luZGV4IiwiaGlnaGxpZ2h0IiwidG9nZ2xlVmlld3MiLCJzaG93SGlnaGxpZ2h0IiwiaGlkZUhpZ2hsaWdodCIsInciLCJGIiwiUyIsIkUiLCJEIiwiTyIsIkNvbXBhY3QiLCJHcmF5c2NhbGUiLCJNYXRlcmlhbCIsIlNsaWRlciIsIlN3YXRjaGVzIiwiU2tldGNoIiwiQ2hyb21lIiwiQWxwaGEiLCJDaGVja2JvYXJkIiwiRWRpdGFibGVJbnB1dCIsIkh1ZSIsIlNhdHVyYXRpb24iLCJDb2xvck1peGluIiwiSSIsIlQiLCJXIiwiZm9ybWF0IiwiSyIsInJnYiIsImV4ZWMiLCJoc2xhIiwiaHN2YSIsImhleDgiLCJQIiwiaGV4NiIsImhleDQiLCJoZXgzIiwiJCIsInoiLCJzdWJzdHIiLCJMIiwiTSIsIm9rIiwiViIsIlgiLCJfb3JpZ2luYWxJbnB1dCIsIl9yIiwiX3JvdW5kQSIsInEiLCJfZm9ybWF0IiwiX2dyYWRpZW50VHlwZSIsImdyYWRpZW50VHlwZSIsIl9vayIsIl90Y19pZCIsIlUiLCJCIiwiSCIsImRlc2F0dXJhdGUiLCJDIiwiayIsIkEiLCJSIiwiYWJzIiwiQ1NTX1VOSVQiLCJHIiwiaXNEYXJrIiwiZ2V0QnJpZ2h0bmVzcyIsImlzTGlnaHQiLCJnZXRPcmlnaW5hbElucHV0IiwiZ2V0Rm9ybWF0IiwiZ2V0THVtaW5hbmNlIiwicG93IiwidG9Ic3ZTdHJpbmciLCJ0b0hzbFN0cmluZyIsInRvSGV4IiwidG9IZXg4IiwidG9IZXg4U3RyaW5nIiwidG9SZ2JTdHJpbmciLCJ0b1BlcmNlbnRhZ2VSZ2IiLCJ0b1BlcmNlbnRhZ2VSZ2JTdHJpbmciLCJ0b05hbWUiLCJZIiwidG9GaWx0ZXIiLCJfYXBwbHlNb2RpZmljYXRpb24iLCJsaWdodGVuIiwiYnJpZ2h0ZW4iLCJkYXJrZW4iLCJzYXR1cmF0ZSIsImdyZXlzY2FsZSIsInNwaW4iLCJfYXBwbHlDb21iaW5hdGlvbiIsImFuYWxvZ291cyIsImNvbXBsZW1lbnQiLCJtb25vY2hyb21hdGljIiwic3BsaXRjb21wbGVtZW50IiwidHJpYWQiLCJ0ZXRyYWQiLCJmcm9tUmF0aW8iLCJlcXVhbHMiLCJtaXgiLCJyZWFkYWJpbGl0eSIsImlzUmVhZGFibGUiLCJsZXZlbCIsIk4iLCJtb3N0UmVhZGFibGUiLCJpbmNsdWRlRmFsbGJhY2tDb2xvcnMiLCJuYW1lcyIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiYnVybnRzaWVubmEiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJoZXhOYW1lcyIsImtleWRvd24iLCJfd2l0aFN0cmlwcGVkIiwiYmFja2dyb3VuZCIsImNsaWNrIiwiYm9yZGVyQ29sb3IiLCJtb3VzZWRvd24iLCJ0b3VjaG1vdmUiLCJ0b3VjaHN0YXJ0IiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJhMTAwIiwiYTIwMCIsImE0MDAiLCJhNzAwIiwicHJpbWFyeSIsInNlY29uZGFyeSIsImRpc2FibGVkIiwiZGl2aWRlcnMiLCJpbmFjdGl2ZSIsImRlZXBQdXJwbGUiLCJsaWdodEJsdWUiLCJsaWdodEdyZWVuIiwiYW1iZXIiLCJkZWVwT3JhbmdlIiwiYmx1ZUdyZXkiLCJkYXJrVGV4dCIsImxpZ2h0VGV4dCIsImRhcmtJY29ucyIsImxpZ2h0SWNvbnMiLCJ2aWV3Qm94IiwiVHlwZUVycm9yIiwibWF4V2FpdCIsImZsdXNoIiwidmFsdWVPZiIsIk5hTiIsIkRhdGUiLCJub3ciLCJldmFsIiwibW91c2VvdmVyIiwibW91c2VlbnRlciIsIm1vdXNlb3V0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZ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VUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssV0FBV3p5RCxFQUFFLENBQUM0eEQsR0FBRyxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFdBQVdueEQsRUFBRSxDQUFDc3dELEdBQUcsVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXN3lELEVBQUUsQ0FBQ2d5RCxHQUFHLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssV0FBV2p6RCxFQUFFLENBQUNveUQsR0FBRyxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFdBQVcxVyxFQUFFLENBQUM2VixHQUFHLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssV0FBVzV5RCxFQUFFLENBQUMreEQsR0FBRyxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFdBQVd0dkQsRUFBRSxDQUFDeXVELEdBQUcsVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXelcsRUFBRSxDQUFDNFYsR0FBRyxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFdBQVdweEQsRUFBRSxDQUFDdXdELEdBQUcsVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXM2tELEVBQUUsQ0FBQzhqRCxHQUFHLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssV0FBVzM1QyxFQUFFLENBQUM4NEMsR0FBRyxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFdBQVcvekMsRUFBRSxDQUFDa3pDLEdBQUcsVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxXQUFXNzlDLEVBQUUsQ0FBQ2c5QyxHQUFHLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLEtBQUssVUFBVUMsS0FBSyxVQUFVQyxLQUFLLFVBQVVDLEtBQUssV0FBVzl5RCxFQUFFLENBQUNpeUQsR0FBRyxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxXQUFXMzBDLEVBQUUsQ0FBQ2swQyxHQUFHLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFdBQVc1USxFQUFFLENBQUNtUSxHQUFHLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFVBQVVDLElBQUksVUFBVUMsSUFBSSxVQUFVQyxJQUFJLFdBQVd0TixFQUFFLENBQUMyTixRQUFRLHNCQUFzQkMsVUFBVSxz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SzVFMEYsS0FBSyxDQUFDekYsRUFBT0MsRUFBSSxzT0FBdU8sTSxpQkNMdFBELEVBQU9ELFFBQVUsRUFBUSxFQUFSLEVBQXlELElBSzVFMEYsS0FBSyxDQUFDekYsRUFBT0MsRUFBSSx1REFBd0QiLCJmaWxlIjoibWFpbi40NTA4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQwKTtcbiIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIvKipcbiAqIHZ1ZXggdjMuMC4xXG4gKiAoYykgMjAxNyBFdmFuIFlvdVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbnZhciBhcHBseU1peGluID0gZnVuY3Rpb24gKFZ1ZSkge1xuICB2YXIgdmVyc2lvbiA9IE51bWJlcihWdWUudmVyc2lvbi5zcGxpdCgnLicpWzBdKTtcblxuICBpZiAodmVyc2lvbiA+PSAyKSB7XG4gICAgVnVlLm1peGluKHsgYmVmb3JlQ3JlYXRlOiB2dWV4SW5pdCB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBvdmVycmlkZSBpbml0IGFuZCBpbmplY3QgdnVleCBpbml0IHByb2NlZHVyZVxuICAgIC8vIGZvciAxLnggYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgdmFyIF9pbml0ID0gVnVlLnByb3RvdHlwZS5faW5pdDtcbiAgICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBvcHRpb25zLmluaXQgPSBvcHRpb25zLmluaXRcbiAgICAgICAgPyBbdnVleEluaXRdLmNvbmNhdChvcHRpb25zLmluaXQpXG4gICAgICAgIDogdnVleEluaXQ7XG4gICAgICBfaW5pdC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVnVleCBpbml0IGhvb2ssIGluamVjdGVkIGludG8gZWFjaCBpbnN0YW5jZXMgaW5pdCBob29rcyBsaXN0LlxuICAgKi9cblxuICBmdW5jdGlvbiB2dWV4SW5pdCAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuICAgIC8vIHN0b3JlIGluamVjdGlvblxuICAgIGlmIChvcHRpb25zLnN0b3JlKSB7XG4gICAgICB0aGlzLiRzdG9yZSA9IHR5cGVvZiBvcHRpb25zLnN0b3JlID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gb3B0aW9ucy5zdG9yZSgpXG4gICAgICAgIDogb3B0aW9ucy5zdG9yZTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LiRzdG9yZSkge1xuICAgICAgdGhpcy4kc3RvcmUgPSBvcHRpb25zLnBhcmVudC4kc3RvcmU7XG4gICAgfVxuICB9XG59O1xuXG52YXIgZGV2dG9vbEhvb2sgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuZnVuY3Rpb24gZGV2dG9vbFBsdWdpbiAoc3RvcmUpIHtcbiAgaWYgKCFkZXZ0b29sSG9vaykgeyByZXR1cm4gfVxuXG4gIHN0b3JlLl9kZXZ0b29sSG9vayA9IGRldnRvb2xIb29rO1xuXG4gIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6aW5pdCcsIHN0b3JlKTtcblxuICBkZXZ0b29sSG9vay5vbigndnVleDp0cmF2ZWwtdG8tc3RhdGUnLCBmdW5jdGlvbiAodGFyZ2V0U3RhdGUpIHtcbiAgICBzdG9yZS5yZXBsYWNlU3RhdGUodGFyZ2V0U3RhdGUpO1xuICB9KTtcblxuICBzdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24gKG11dGF0aW9uLCBzdGF0ZSkge1xuICAgIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6bXV0YXRpb24nLCBtdXRhdGlvbiwgc3RhdGUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGl0ZW0gdGhhdCBwYXNzIHRoZSB0ZXN0XG4gKiBieSBzZWNvbmQgYXJndW1lbnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmXG4gKiBAcmV0dXJuIHsqfVxuICovXG4vKipcbiAqIERlZXAgY29weSB0aGUgZ2l2ZW4gb2JqZWN0IGNvbnNpZGVyaW5nIGNpcmN1bGFyIHN0cnVjdHVyZS5cbiAqIFRoaXMgZnVuY3Rpb24gY2FjaGVzIGFsbCBuZXN0ZWQgb2JqZWN0cyBhbmQgaXRzIGNvcGllcy5cbiAqIElmIGl0IGRldGVjdHMgY2lyY3VsYXIgc3RydWN0dXJlLCB1c2UgY2FjaGVkIGNvcHkgdG8gYXZvaWQgaW5maW5pdGUgbG9vcC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBjYWNoZVxuICogQHJldHVybiB7Kn1cbiAqL1xuXG5cbi8qKlxuICogZm9yRWFjaCBmb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hWYWx1ZSAob2JqLCBmbikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4ob2JqW2tleV0sIGtleSk7IH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1zZykge1xuICBpZiAoIWNvbmRpdGlvbikgeyB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZXhdIFwiICsgbXNnKSkgfVxufVxuXG52YXIgTW9kdWxlID0gZnVuY3Rpb24gTW9kdWxlIChyYXdNb2R1bGUsIHJ1bnRpbWUpIHtcbiAgdGhpcy5ydW50aW1lID0gcnVudGltZTtcbiAgdGhpcy5fY2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9yYXdNb2R1bGUgPSByYXdNb2R1bGU7XG4gIHZhciByYXdTdGF0ZSA9IHJhd01vZHVsZS5zdGF0ZTtcbiAgdGhpcy5zdGF0ZSA9ICh0eXBlb2YgcmF3U3RhdGUgPT09ICdmdW5jdGlvbicgPyByYXdTdGF0ZSgpIDogcmF3U3RhdGUpIHx8IHt9O1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBuYW1lc3BhY2VkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLm5hbWVzcGFjZWQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISF0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZFxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIGFkZENoaWxkIChrZXksIG1vZHVsZSkge1xuICB0aGlzLl9jaGlsZHJlbltrZXldID0gbW9kdWxlO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkIChrZXkpIHtcbiAgZGVsZXRlIHRoaXMuX2NoaWxkcmVuW2tleV07XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmdldENoaWxkID0gZnVuY3Rpb24gZ2V0Q2hpbGQgKGtleSkge1xuICByZXR1cm4gdGhpcy5fY2hpbGRyZW5ba2V5XVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKHJhd01vZHVsZSkge1xuICB0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZCA9IHJhd01vZHVsZS5uYW1lc3BhY2VkO1xuICBpZiAocmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucyA9IHJhd01vZHVsZS5hY3Rpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucyA9IHJhd01vZHVsZS5tdXRhdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmdldHRlcnMgPSByYXdNb2R1bGUuZ2V0dGVycztcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiBmb3JFYWNoQ2hpbGQgKGZuKSB7XG4gIGZvckVhY2hWYWx1ZSh0aGlzLl9jaGlsZHJlbiwgZm4pO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoR2V0dGVyID0gZnVuY3Rpb24gZm9yRWFjaEdldHRlciAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEFjdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hBY3Rpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hNdXRhdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hNdXRhdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucywgZm4pO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTW9kdWxlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEgKTtcblxudmFyIE1vZHVsZUNvbGxlY3Rpb24gPSBmdW5jdGlvbiBNb2R1bGVDb2xsZWN0aW9uIChyYXdSb290TW9kdWxlKSB7XG4gIC8vIHJlZ2lzdGVyIHJvb3QgbW9kdWxlIChWdWV4LlN0b3JlIG9wdGlvbnMpXG4gIHRoaXMucmVnaXN0ZXIoW10sIHJhd1Jvb3RNb2R1bGUsIGZhbHNlKTtcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAocGF0aCkge1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKG1vZHVsZSwga2V5KSB7XG4gICAgcmV0dXJuIG1vZHVsZS5nZXRDaGlsZChrZXkpXG4gIH0sIHRoaXMucm9vdClcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldE5hbWVzcGFjZSA9IGZ1bmN0aW9uIGdldE5hbWVzcGFjZSAocGF0aCkge1xuICB2YXIgbW9kdWxlID0gdGhpcy5yb290O1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwga2V5KSB7XG4gICAgbW9kdWxlID0gbW9kdWxlLmdldENoaWxkKGtleSk7XG4gICAgcmV0dXJuIG5hbWVzcGFjZSArIChtb2R1bGUubmFtZXNwYWNlZCA/IGtleSArICcvJyA6ICcnKVxuICB9LCAnJylcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSQxIChyYXdSb290TW9kdWxlKSB7XG4gIHVwZGF0ZShbXSwgdGhpcy5yb290LCByYXdSb290TW9kdWxlKTtcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIgKHBhdGgsIHJhd01vZHVsZSwgcnVudGltZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgIGlmICggcnVudGltZSA9PT0gdm9pZCAwICkgcnVudGltZSA9IHRydWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRSYXdNb2R1bGUocGF0aCwgcmF3TW9kdWxlKTtcbiAgfVxuXG4gIHZhciBuZXdNb2R1bGUgPSBuZXcgTW9kdWxlKHJhd01vZHVsZSwgcnVudGltZSk7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgIHRoaXMucm9vdCA9IG5ld01vZHVsZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIHBhcmVudC5hZGRDaGlsZChwYXRoW3BhdGgubGVuZ3RoIC0gMV0sIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyByZWdpc3RlciBuZXN0ZWQgbW9kdWxlc1xuICBpZiAocmF3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3JFYWNoVmFsdWUocmF3TW9kdWxlLm1vZHVsZXMsIGZ1bmN0aW9uIChyYXdDaGlsZE1vZHVsZSwga2V5KSB7XG4gICAgICB0aGlzJDEucmVnaXN0ZXIocGF0aC5jb25jYXQoa2V5KSwgcmF3Q2hpbGRNb2R1bGUsIHJ1bnRpbWUpO1xuICAgIH0pO1xuICB9XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51bnJlZ2lzdGVyID0gZnVuY3Rpb24gdW5yZWdpc3RlciAocGF0aCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICB2YXIga2V5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICBpZiAoIXBhcmVudC5nZXRDaGlsZChrZXkpLnJ1bnRpbWUpIHsgcmV0dXJuIH1cblxuICBwYXJlbnQucmVtb3ZlQ2hpbGQoa2V5KTtcbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZSAocGF0aCwgdGFyZ2V0TW9kdWxlLCBuZXdNb2R1bGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRSYXdNb2R1bGUocGF0aCwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSB0YXJnZXQgbW9kdWxlXG4gIHRhcmdldE1vZHVsZS51cGRhdGUobmV3TW9kdWxlKTtcblxuICAvLyB1cGRhdGUgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKG5ld01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG5ld01vZHVsZS5tb2R1bGVzKSB7XG4gICAgICBpZiAoIXRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgXCJbdnVleF0gdHJ5aW5nIHRvIGFkZCBhIG5ldyBtb2R1bGUgJ1wiICsga2V5ICsgXCInIG9uIGhvdCByZWxvYWRpbmcsIFwiICtcbiAgICAgICAgICAgICdtYW51YWwgcmVsb2FkIGlzIG5lZWRlZCdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKFxuICAgICAgICBwYXRoLmNvbmNhdChrZXkpLFxuICAgICAgICB0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSxcbiAgICAgICAgbmV3TW9kdWxlLm1vZHVsZXNba2V5XVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGZ1bmN0aW9uQXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uJ1xufTtcblxudmFyIG9iamVjdEFzc2VydCA9IHtcbiAgYXNzZXJ0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS5oYW5kbGVyID09PSAnZnVuY3Rpb24nKTsgfSxcbiAgZXhwZWN0ZWQ6ICdmdW5jdGlvbiBvciBvYmplY3Qgd2l0aCBcImhhbmRsZXJcIiBmdW5jdGlvbidcbn07XG5cbnZhciBhc3NlcnRUeXBlcyA9IHtcbiAgZ2V0dGVyczogZnVuY3Rpb25Bc3NlcnQsXG4gIG11dGF0aW9uczogZnVuY3Rpb25Bc3NlcnQsXG4gIGFjdGlvbnM6IG9iamVjdEFzc2VydFxufTtcblxuZnVuY3Rpb24gYXNzZXJ0UmF3TW9kdWxlIChwYXRoLCByYXdNb2R1bGUpIHtcbiAgT2JqZWN0LmtleXMoYXNzZXJ0VHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghcmF3TW9kdWxlW2tleV0pIHsgcmV0dXJuIH1cblxuICAgIHZhciBhc3NlcnRPcHRpb25zID0gYXNzZXJ0VHlwZXNba2V5XTtcblxuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGVba2V5XSwgZnVuY3Rpb24gKHZhbHVlLCB0eXBlKSB7XG4gICAgICBhc3NlcnQoXG4gICAgICAgIGFzc2VydE9wdGlvbnMuYXNzZXJ0KHZhbHVlKSxcbiAgICAgICAgbWFrZUFzc2VydGlvbk1lc3NhZ2UocGF0aCwga2V5LCB0eXBlLCB2YWx1ZSwgYXNzZXJ0T3B0aW9ucy5leHBlY3RlZClcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYWtlQXNzZXJ0aW9uTWVzc2FnZSAocGF0aCwga2V5LCB0eXBlLCB2YWx1ZSwgZXhwZWN0ZWQpIHtcbiAgdmFyIGJ1ZiA9IGtleSArIFwiIHNob3VsZCBiZSBcIiArIGV4cGVjdGVkICsgXCIgYnV0IFxcXCJcIiArIGtleSArIFwiLlwiICsgdHlwZSArIFwiXFxcIlwiO1xuICBpZiAocGF0aC5sZW5ndGggPiAwKSB7XG4gICAgYnVmICs9IFwiIGluIG1vZHVsZSBcXFwiXCIgKyAocGF0aC5qb2luKCcuJykpICsgXCJcXFwiXCI7XG4gIH1cbiAgYnVmICs9IFwiIGlzIFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbHVlKSkgKyBcIi5cIjtcbiAgcmV0dXJuIGJ1ZlxufVxuXG52YXIgVnVlOyAvLyBiaW5kIG9uIGluc3RhbGxcblxudmFyIFN0b3JlID0gZnVuY3Rpb24gU3RvcmUgKG9wdGlvbnMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEF1dG8gaW5zdGFsbCBpZiBpdCBpcyBub3QgZG9uZSB5ZXQgYW5kIGB3aW5kb3dgIGhhcyBgVnVlYC5cbiAgLy8gVG8gYWxsb3cgdXNlcnMgdG8gYXZvaWQgYXV0by1pbnN0YWxsYXRpb24gaW4gc29tZSBjYXNlcyxcbiAgLy8gdGhpcyBjb2RlIHNob3VsZCBiZSBwbGFjZWQgaGVyZS4gU2VlICM3MzFcbiAgaWYgKCFWdWUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZ1ZSkge1xuICAgIGluc3RhbGwod2luZG93LlZ1ZSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChWdWUsIFwibXVzdCBjYWxsIFZ1ZS51c2UoVnVleCkgYmVmb3JlIGNyZWF0aW5nIGEgc3RvcmUgaW5zdGFuY2UuXCIpO1xuICAgIGFzc2VydCh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcsIFwidnVleCByZXF1aXJlcyBhIFByb21pc2UgcG9seWZpbGwgaW4gdGhpcyBicm93c2VyLlwiKTtcbiAgICBhc3NlcnQodGhpcyBpbnN0YW5jZW9mIFN0b3JlLCBcIlN0b3JlIG11c3QgYmUgY2FsbGVkIHdpdGggdGhlIG5ldyBvcGVyYXRvci5cIik7XG4gIH1cblxuICB2YXIgcGx1Z2lucyA9IG9wdGlvbnMucGx1Z2luczsgaWYgKCBwbHVnaW5zID09PSB2b2lkIDAgKSBwbHVnaW5zID0gW107XG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDsgaWYgKCBzdHJpY3QgPT09IHZvaWQgMCApIHN0cmljdCA9IGZhbHNlO1xuXG4gIHZhciBzdGF0ZSA9IG9wdGlvbnMuc3RhdGU7IGlmICggc3RhdGUgPT09IHZvaWQgMCApIHN0YXRlID0ge307XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzdGF0ZSA9IHN0YXRlKCkgfHwge307XG4gIH1cblxuICAvLyBzdG9yZSBpbnRlcm5hbCBzdGF0ZVxuICB0aGlzLl9jb21taXR0aW5nID0gZmFsc2U7XG4gIHRoaXMuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX21vZHVsZXMgPSBuZXcgTW9kdWxlQ29sbGVjdGlvbihvcHRpb25zKTtcbiAgdGhpcy5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG4gIHRoaXMuX3dhdGNoZXJWTSA9IG5ldyBWdWUoKTtcblxuICAvLyBiaW5kIGNvbW1pdCBhbmQgZGlzcGF0Y2ggdG8gc2VsZlxuICB2YXIgc3RvcmUgPSB0aGlzO1xuICB2YXIgcmVmID0gdGhpcztcbiAgdmFyIGRpc3BhdGNoID0gcmVmLmRpc3BhdGNoO1xuICB2YXIgY29tbWl0ID0gcmVmLmNvbW1pdDtcbiAgdGhpcy5kaXNwYXRjaCA9IGZ1bmN0aW9uIGJvdW5kRGlzcGF0Y2ggKHR5cGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2guY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZClcbiAgfTtcbiAgdGhpcy5jb21taXQgPSBmdW5jdGlvbiBib3VuZENvbW1pdCAodHlwZSwgcGF5bG9hZCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21taXQuY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZCwgb3B0aW9ucylcbiAgfTtcblxuICAvLyBzdHJpY3QgbW9kZVxuICB0aGlzLnN0cmljdCA9IHN0cmljdDtcblxuICAvLyBpbml0IHJvb3QgbW9kdWxlLlxuICAvLyB0aGlzIGFsc28gcmVjdXJzaXZlbHkgcmVnaXN0ZXJzIGFsbCBzdWItbW9kdWxlc1xuICAvLyBhbmQgY29sbGVjdHMgYWxsIG1vZHVsZSBnZXR0ZXJzIGluc2lkZSB0aGlzLl93cmFwcGVkR2V0dGVyc1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHN0YXRlLCBbXSwgdGhpcy5fbW9kdWxlcy5yb290KTtcblxuICAvLyBpbml0aWFsaXplIHRoZSBzdG9yZSB2bSwgd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIHRoZSByZWFjdGl2aXR5XG4gIC8vIChhbHNvIHJlZ2lzdGVycyBfd3JhcHBlZEdldHRlcnMgYXMgY29tcHV0ZWQgcHJvcGVydGllcylcbiAgcmVzZXRTdG9yZVZNKHRoaXMsIHN0YXRlKTtcblxuICAvLyBhcHBseSBwbHVnaW5zXG4gIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7IHJldHVybiBwbHVnaW4odGhpcyQxKTsgfSk7XG5cbiAgaWYgKFZ1ZS5jb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29sUGx1Z2luKHRoaXMpO1xuICB9XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBzdGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuc3RhdGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fdm0uX2RhdGEuJCRzdGF0ZVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnN0YXRlLnNldCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KGZhbHNlLCBcIlVzZSBzdG9yZS5yZXBsYWNlU3RhdGUoKSB0byBleHBsaWNpdCByZXBsYWNlIHN0b3JlIHN0YXRlLlwiKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uIGNvbW1pdCAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBjb21taXRcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuICAgIHZhciBvcHRpb25zID0gcmVmLm9wdGlvbnM7XG5cbiAgdmFyIG11dGF0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX211dGF0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIG11dGF0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICBlbnRyeS5mb3JFYWNoKGZ1bmN0aW9uIGNvbW1pdEl0ZXJhdG9yIChoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVyKHBheWxvYWQpO1xuICAgIH0pO1xuICB9KTtcbiAgdGhpcy5fc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIobXV0YXRpb24sIHRoaXMkMS5zdGF0ZSk7IH0pO1xuXG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgb3B0aW9ucyAmJiBvcHRpb25zLnNpbGVudFxuICApIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcIlt2dWV4XSBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUgKyBcIi4gU2lsZW50IG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLiBcIiArXG4gICAgICAnVXNlIHRoZSBmaWx0ZXIgZnVuY3Rpb25hbGl0eSBpbiB0aGUgdnVlLWRldnRvb2xzJ1xuICAgICk7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoIChfdHlwZSwgX3BheWxvYWQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjaGVjayBvYmplY3Qtc3R5bGUgZGlzcGF0Y2hcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkKTtcbiAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgIHZhciBwYXlsb2FkID0gcmVmLnBheWxvYWQ7XG5cbiAgdmFyIGFjdGlvbiA9IHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCB9O1xuICB2YXIgZW50cnkgPSB0aGlzLl9hY3Rpb25zW3R5cGVdO1xuICBpZiAoIWVudHJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gYWN0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViKGFjdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG5cbiAgcmV0dXJuIGVudHJ5Lmxlbmd0aCA+IDFcbiAgICA/IFByb21pc2UuYWxsKGVudHJ5Lm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlcihwYXlsb2FkKTsgfSkpXG4gICAgOiBlbnRyeVswXShwYXlsb2FkKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSAoZm4pIHtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoZm4sIHRoaXMuX3N1YnNjcmliZXJzKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZUFjdGlvbiA9IGZ1bmN0aW9uIHN1YnNjcmliZUFjdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoZm4sIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzKVxufTtcblxuU3RvcmUucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24gd2F0Y2ggKGdldHRlciwgY2IsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydCh0eXBlb2YgZ2V0dGVyID09PSAnZnVuY3Rpb24nLCBcInN0b3JlLndhdGNoIG9ubHkgYWNjZXB0cyBhIGZ1bmN0aW9uLlwiKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fd2F0Y2hlclZNLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBnZXR0ZXIodGhpcyQxLnN0YXRlLCB0aGlzJDEuZ2V0dGVycyk7IH0sIGNiLCBvcHRpb25zKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZSAoc3RhdGUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzJDEuX3ZtLl9kYXRhLiQkc3RhdGUgPSBzdGF0ZTtcbiAgfSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbiByZWdpc3Rlck1vZHVsZSAocGF0aCwgcmF3TW9kdWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgeyBwYXRoID0gW3BhdGhdOyB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShwYXRoKSwgXCJtb2R1bGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIEFycmF5LlwiKTtcbiAgICBhc3NlcnQocGF0aC5sZW5ndGggPiAwLCAnY2Fubm90IHJlZ2lzdGVyIHRoZSByb290IG1vZHVsZSBieSB1c2luZyByZWdpc3Rlck1vZHVsZS4nKTtcbiAgfVxuXG4gIHRoaXMuX21vZHVsZXMucmVnaXN0ZXIocGF0aCwgcmF3TW9kdWxlKTtcbiAgaW5zdGFsbE1vZHVsZSh0aGlzLCB0aGlzLnN0YXRlLCBwYXRoLCB0aGlzLl9tb2R1bGVzLmdldChwYXRoKSwgb3B0aW9ucy5wcmVzZXJ2ZVN0YXRlKTtcbiAgLy8gcmVzZXQgc3RvcmUgdG8gdXBkYXRlIGdldHRlcnMuLi5cbiAgcmVzZXRTdG9yZVZNKHRoaXMsIHRoaXMuc3RhdGUpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnVucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyTW9kdWxlIChwYXRoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgeyBwYXRoID0gW3BhdGhdOyB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShwYXRoKSwgXCJtb2R1bGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIEFycmF5LlwiKTtcbiAgfVxuXG4gIHRoaXMuX21vZHVsZXMudW5yZWdpc3RlcihwYXRoKTtcbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUodGhpcyQxLnN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgVnVlLmRlbGV0ZShwYXJlbnRTdGF0ZSwgcGF0aFtwYXRoLmxlbmd0aCAtIDFdKTtcbiAgfSk7XG4gIHJlc2V0U3RvcmUodGhpcyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuaG90VXBkYXRlID0gZnVuY3Rpb24gaG90VXBkYXRlIChuZXdPcHRpb25zKSB7XG4gIHRoaXMuX21vZHVsZXMudXBkYXRlKG5ld09wdGlvbnMpO1xuICByZXNldFN0b3JlKHRoaXMsIHRydWUpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLl93aXRoQ29tbWl0ID0gZnVuY3Rpb24gX3dpdGhDb21taXQgKGZuKSB7XG4gIHZhciBjb21taXR0aW5nID0gdGhpcy5fY29tbWl0dGluZztcbiAgdGhpcy5fY29tbWl0dGluZyA9IHRydWU7XG4gIGZuKCk7XG4gIHRoaXMuX2NvbW1pdHRpbmcgPSBjb21taXR0aW5nO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFN0b3JlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbmZ1bmN0aW9uIGdlbmVyaWNTdWJzY3JpYmUgKGZuLCBzdWJzKSB7XG4gIGlmIChzdWJzLmluZGV4T2YoZm4pIDwgMCkge1xuICAgIHN1YnMucHVzaChmbik7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IHN1YnMuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkge1xuICAgICAgc3Vicy5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmUgKHN0b3JlLCBob3QpIHtcbiAgc3RvcmUuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc3RhdGUgPSBzdG9yZS5zdGF0ZTtcbiAgLy8gaW5pdCBhbGwgbW9kdWxlc1xuICBpbnN0YWxsTW9kdWxlKHN0b3JlLCBzdGF0ZSwgW10sIHN0b3JlLl9tb2R1bGVzLnJvb3QsIHRydWUpO1xuICAvLyByZXNldCB2bVxuICByZXNldFN0b3JlVk0oc3RvcmUsIHN0YXRlLCBob3QpO1xufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlVk0gKHN0b3JlLCBzdGF0ZSwgaG90KSB7XG4gIHZhciBvbGRWbSA9IHN0b3JlLl92bTtcblxuICAvLyBiaW5kIHN0b3JlIHB1YmxpYyBnZXR0ZXJzXG4gIHN0b3JlLmdldHRlcnMgPSB7fTtcbiAgdmFyIHdyYXBwZWRHZXR0ZXJzID0gc3RvcmUuX3dyYXBwZWRHZXR0ZXJzO1xuICB2YXIgY29tcHV0ZWQgPSB7fTtcbiAgZm9yRWFjaFZhbHVlKHdyYXBwZWRHZXR0ZXJzLCBmdW5jdGlvbiAoZm4sIGtleSkge1xuICAgIC8vIHVzZSBjb21wdXRlZCB0byBsZXZlcmFnZSBpdHMgbGF6eS1jYWNoaW5nIG1lY2hhbmlzbVxuICAgIGNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmbihzdG9yZSk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0b3JlLmdldHRlcnMsIGtleSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5fdm1ba2V5XTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUgLy8gZm9yIGxvY2FsIGdldHRlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdXNlIGEgVnVlIGluc3RhbmNlIHRvIHN0b3JlIHRoZSBzdGF0ZSB0cmVlXG4gIC8vIHN1cHByZXNzIHdhcm5pbmdzIGp1c3QgaW4gY2FzZSB0aGUgdXNlciBoYXMgYWRkZWRcbiAgLy8gc29tZSBmdW5reSBnbG9iYWwgbWl4aW5zXG4gIHZhciBzaWxlbnQgPSBWdWUuY29uZmlnLnNpbGVudDtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSB0cnVlO1xuICBzdG9yZS5fdm0gPSBuZXcgVnVlKHtcbiAgICBkYXRhOiB7XG4gICAgICAkJHN0YXRlOiBzdGF0ZVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IGNvbXB1dGVkXG4gIH0pO1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHNpbGVudDtcblxuICAvLyBlbmFibGUgc3RyaWN0IG1vZGUgZm9yIG5ldyB2bVxuICBpZiAoc3RvcmUuc3RyaWN0KSB7XG4gICAgZW5hYmxlU3RyaWN0TW9kZShzdG9yZSk7XG4gIH1cblxuICBpZiAob2xkVm0pIHtcbiAgICBpZiAoaG90KSB7XG4gICAgICAvLyBkaXNwYXRjaCBjaGFuZ2VzIGluIGFsbCBzdWJzY3JpYmVkIHdhdGNoZXJzXG4gICAgICAvLyB0byBmb3JjZSBnZXR0ZXIgcmUtZXZhbHVhdGlvbiBmb3IgaG90IHJlbG9hZGluZy5cbiAgICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2xkVm0uX2RhdGEuJCRzdGF0ZSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gICAgVnVlLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9sZFZtLiRkZXN0cm95KCk7IH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGxNb2R1bGUgKHN0b3JlLCByb290U3RhdGUsIHBhdGgsIG1vZHVsZSwgaG90KSB7XG4gIHZhciBpc1Jvb3QgPSAhcGF0aC5sZW5ndGg7XG4gIHZhciBuYW1lc3BhY2UgPSBzdG9yZS5fbW9kdWxlcy5nZXROYW1lc3BhY2UocGF0aCk7XG5cbiAgLy8gcmVnaXN0ZXIgaW4gbmFtZXNwYWNlIG1hcFxuICBpZiAobW9kdWxlLm5hbWVzcGFjZWQpIHtcbiAgICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdID0gbW9kdWxlO1xuICB9XG5cbiAgLy8gc2V0IHN0YXRlXG4gIGlmICghaXNSb290ICYmICFob3QpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZShyb290U3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICB2YXIgbW9kdWxlTmFtZSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICBWdWUuc2V0KHBhcmVudFN0YXRlLCBtb2R1bGVOYW1lLCBtb2R1bGUuc3RhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGxvY2FsID0gbW9kdWxlLmNvbnRleHQgPSBtYWtlTG9jYWxDb250ZXh0KHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpO1xuXG4gIG1vZHVsZS5mb3JFYWNoTXV0YXRpb24oZnVuY3Rpb24gKG11dGF0aW9uLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJNdXRhdGlvbihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIG11dGF0aW9uLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQWN0aW9uKGZ1bmN0aW9uIChhY3Rpb24sIGtleSkge1xuICAgIHZhciB0eXBlID0gYWN0aW9uLnJvb3QgPyBrZXkgOiBuYW1lc3BhY2UgKyBrZXk7XG4gICAgdmFyIGhhbmRsZXIgPSBhY3Rpb24uaGFuZGxlciB8fCBhY3Rpb247XG4gICAgcmVnaXN0ZXJBY3Rpb24oc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hHZXR0ZXIoZnVuY3Rpb24gKGdldHRlciwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyR2V0dGVyKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgZ2V0dGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkLCBrZXkpIHtcbiAgICBpbnN0YWxsTW9kdWxlKHN0b3JlLCByb290U3RhdGUsIHBhdGguY29uY2F0KGtleSksIGNoaWxkLCBob3QpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBtYWtlIGxvY2FsaXplZCBkaXNwYXRjaCwgY29tbWl0LCBnZXR0ZXJzIGFuZCBzdGF0ZVxuICogaWYgdGhlcmUgaXMgbm8gbmFtZXNwYWNlLCBqdXN0IHVzZSByb290IG9uZXNcbiAqL1xuZnVuY3Rpb24gbWFrZUxvY2FsQ29udGV4dCAoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCkge1xuICB2YXIgbm9OYW1lc3BhY2UgPSBuYW1lc3BhY2UgPT09ICcnO1xuXG4gIHZhciBsb2NhbCA9IHtcbiAgICBkaXNwYXRjaDogbm9OYW1lc3BhY2UgPyBzdG9yZS5kaXNwYXRjaCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RvcmUuX2FjdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIGFjdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2godHlwZSwgcGF5bG9hZClcbiAgICB9LFxuXG4gICAgY29tbWl0OiBub05hbWVzcGFjZSA/IHN0b3JlLmNvbW1pdCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RvcmUuX211dGF0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgbXV0YXRpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RvcmUuY29tbWl0KHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxuICAvLyBnZXR0ZXJzIGFuZCBzdGF0ZSBvYmplY3QgbXVzdCBiZSBnb3R0ZW4gbGF6aWx5XG4gIC8vIGJlY2F1c2UgdGhleSB3aWxsIGJlIGNoYW5nZWQgYnkgdm0gdXBkYXRlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGxvY2FsLCB7XG4gICAgZ2V0dGVyczoge1xuICAgICAgZ2V0OiBub05hbWVzcGFjZVxuICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYWtlTG9jYWxHZXR0ZXJzKHN0b3JlLCBuYW1lc3BhY2UpOyB9XG4gICAgfSxcbiAgICBzdGF0ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXROZXN0ZWRTdGF0ZShzdG9yZS5zdGF0ZSwgcGF0aCk7IH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsb2NhbFxufVxuXG5mdW5jdGlvbiBtYWtlTG9jYWxHZXR0ZXJzIChzdG9yZSwgbmFtZXNwYWNlKSB7XG4gIHZhciBnZXR0ZXJzUHJveHkgPSB7fTtcblxuICB2YXIgc3BsaXRQb3MgPSBuYW1lc3BhY2UubGVuZ3RoO1xuICBPYmplY3Qua2V5cyhzdG9yZS5nZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgLy8gc2tpcCBpZiB0aGUgdGFyZ2V0IGdldHRlciBpcyBub3QgbWF0Y2ggdGhpcyBuYW1lc3BhY2VcbiAgICBpZiAodHlwZS5zbGljZSgwLCBzcGxpdFBvcykgIT09IG5hbWVzcGFjZSkgeyByZXR1cm4gfVxuXG4gICAgLy8gZXh0cmFjdCBsb2NhbCBnZXR0ZXIgdHlwZVxuICAgIHZhciBsb2NhbFR5cGUgPSB0eXBlLnNsaWNlKHNwbGl0UG9zKTtcblxuICAgIC8vIEFkZCBhIHBvcnQgdG8gdGhlIGdldHRlcnMgcHJveHkuXG4gICAgLy8gRGVmaW5lIGFzIGdldHRlciBwcm9wZXJ0eSBiZWNhdXNlXG4gICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gZXZhbHVhdGUgdGhlIGdldHRlcnMgaW4gdGhpcyB0aW1lLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzUHJveHksIGxvY2FsVHlwZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzW3R5cGVdOyB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZ2V0dGVyc1Byb3h5XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTXV0YXRpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fbXV0YXRpb25zW3R5cGVdIHx8IChzdG9yZS5fbXV0YXRpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRNdXRhdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICBoYW5kbGVyLmNhbGwoc3RvcmUsIGxvY2FsLnN0YXRlLCBwYXlsb2FkKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQWN0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX2FjdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9hY3Rpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRBY3Rpb25IYW5kbGVyIChwYXlsb2FkLCBjYikge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmNhbGwoc3RvcmUsIHtcbiAgICAgIGRpc3BhdGNoOiBsb2NhbC5kaXNwYXRjaCxcbiAgICAgIGNvbW1pdDogbG9jYWwuY29tbWl0LFxuICAgICAgZ2V0dGVyczogbG9jYWwuZ2V0dGVycyxcbiAgICAgIHN0YXRlOiBsb2NhbC5zdGF0ZSxcbiAgICAgIHJvb3RHZXR0ZXJzOiBzdG9yZS5nZXR0ZXJzLFxuICAgICAgcm9vdFN0YXRlOiBzdG9yZS5zdGF0ZVxuICAgIH0sIHBheWxvYWQsIGNiKTtcbiAgICBpZiAoIWlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUocmVzKTtcbiAgICB9XG4gICAgaWYgKHN0b3JlLl9kZXZ0b29sSG9vaykge1xuICAgICAgcmV0dXJuIHJlcy5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHN0b3JlLl9kZXZ0b29sSG9vay5lbWl0KCd2dWV4OmVycm9yJywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJHZXR0ZXIgKHN0b3JlLCB0eXBlLCByYXdHZXR0ZXIsIGxvY2FsKSB7XG4gIGlmIChzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0pIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIGdldHRlciBrZXk6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0gPSBmdW5jdGlvbiB3cmFwcGVkR2V0dGVyIChzdG9yZSkge1xuICAgIHJldHVybiByYXdHZXR0ZXIoXG4gICAgICBsb2NhbC5zdGF0ZSwgLy8gbG9jYWwgc3RhdGVcbiAgICAgIGxvY2FsLmdldHRlcnMsIC8vIGxvY2FsIGdldHRlcnNcbiAgICAgIHN0b3JlLnN0YXRlLCAvLyByb290IHN0YXRlXG4gICAgICBzdG9yZS5nZXR0ZXJzIC8vIHJvb3QgZ2V0dGVyc1xuICAgIClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlU3RyaWN0TW9kZSAoc3RvcmUpIHtcbiAgc3RvcmUuX3ZtLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhLiQkc3RhdGUgfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBhc3NlcnQoc3RvcmUuX2NvbW1pdHRpbmcsIFwiRG8gbm90IG11dGF0ZSB2dWV4IHN0b3JlIHN0YXRlIG91dHNpZGUgbXV0YXRpb24gaGFuZGxlcnMuXCIpO1xuICAgIH1cbiAgfSwgeyBkZWVwOiB0cnVlLCBzeW5jOiB0cnVlIH0pO1xufVxuXG5mdW5jdGlvbiBnZXROZXN0ZWRTdGF0ZSAoc3RhdGUsIHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgubGVuZ3RoXG4gICAgPyBwYXRoLnJlZHVjZShmdW5jdGlvbiAoc3RhdGUsIGtleSkgeyByZXR1cm4gc3RhdGVba2V5XTsgfSwgc3RhdGUpXG4gICAgOiBzdGF0ZVxufVxuXG5mdW5jdGlvbiB1bmlmeU9iamVjdFN0eWxlICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdCh0eXBlKSAmJiB0eXBlLnR5cGUpIHtcbiAgICBvcHRpb25zID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkID0gdHlwZTtcbiAgICB0eXBlID0gdHlwZS50eXBlO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnLCAoXCJFeHBlY3RzIHN0cmluZyBhcyB0aGUgdHlwZSwgYnV0IGZvdW5kIFwiICsgKHR5cGVvZiB0eXBlKSArIFwiLlwiKSk7XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkLCBvcHRpb25zOiBvcHRpb25zIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbCAoX1Z1ZSkge1xuICBpZiAoVnVlICYmIF9WdWUgPT09IFZ1ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnW3Z1ZXhdIGFscmVhZHkgaW5zdGFsbGVkLiBWdWUudXNlKFZ1ZXgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIFZ1ZSA9IF9WdWU7XG4gIGFwcGx5TWl4aW4oVnVlKTtcbn1cblxudmFyIG1hcFN0YXRlID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIHN0YXRlcykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChzdGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRTdGF0ZSAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLiRzdG9yZS5zdGF0ZTtcbiAgICAgIHZhciBnZXR0ZXJzID0gdGhpcy4kc3RvcmUuZ2V0dGVycztcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwU3RhdGUnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gbW9kdWxlLmNvbnRleHQuc3RhdGU7XG4gICAgICAgIGdldHRlcnMgPSBtb2R1bGUuY29udGV4dC5nZXR0ZXJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuY2FsbCh0aGlzLCBzdGF0ZSwgZ2V0dGVycylcbiAgICAgICAgOiBzdGF0ZVt2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbnZhciBtYXBNdXRhdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgbXV0YXRpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKG11dGF0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZE11dGF0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICB2YXIgY29tbWl0ID0gdGhpcy4kc3RvcmUuY29tbWl0O1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBNdXRhdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbW1pdCA9IG1vZHVsZS5jb250ZXh0LmNvbW1pdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtjb21taXRdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBjb21taXQuYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbnZhciBtYXBHZXR0ZXJzID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGdldHRlcnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAoZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICB2YWwgPSBuYW1lc3BhY2UgKyB2YWw7XG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRHZXR0ZXIgKCkge1xuICAgICAgaWYgKG5hbWVzcGFjZSAmJiAhZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBHZXR0ZXJzJywgbmFtZXNwYWNlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEodmFsIGluIHRoaXMuJHN0b3JlLmdldHRlcnMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gZ2V0dGVyOiBcIiArIHZhbCkpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxudmFyIG1hcEFjdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgYWN0aW9ucykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChhY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkQWN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICB2YXIgZGlzcGF0Y2ggPSB0aGlzLiRzdG9yZS5kaXNwYXRjaDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwQWN0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2ggPSBtb2R1bGUuY29udGV4dC5kaXNwYXRjaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtkaXNwYXRjaF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGRpc3BhdGNoLmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG52YXIgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMgPSBmdW5jdGlvbiAobmFtZXNwYWNlKSB7IHJldHVybiAoe1xuICBtYXBTdGF0ZTogbWFwU3RhdGUuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBHZXR0ZXJzOiBtYXBHZXR0ZXJzLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwTXV0YXRpb25zOiBtYXBNdXRhdGlvbnMuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBBY3Rpb25zOiBtYXBBY3Rpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKVxufSk7IH07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1hcCAobWFwKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1hcClcbiAgICA/IG1hcC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDoga2V5IH0pOyB9KVxuICAgIDogT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDogbWFwW2tleV0gfSk7IH0pXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWVzcGFjZSAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1hcCkge1xuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xuICAgICAgbWFwID0gbmFtZXNwYWNlO1xuICAgICAgbmFtZXNwYWNlID0gJyc7XG4gICAgfSBlbHNlIGlmIChuYW1lc3BhY2UuY2hhckF0KG5hbWVzcGFjZS5sZW5ndGggLSAxKSAhPT0gJy8nKSB7XG4gICAgICBuYW1lc3BhY2UgKz0gJy8nO1xuICAgIH1cbiAgICByZXR1cm4gZm4obmFtZXNwYWNlLCBtYXApXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TW9kdWxlQnlOYW1lc3BhY2UgKHN0b3JlLCBoZWxwZXIsIG5hbWVzcGFjZSkge1xuICB2YXIgbW9kdWxlID0gc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1vZHVsZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIG1vZHVsZSBuYW1lc3BhY2Ugbm90IGZvdW5kIGluIFwiICsgaGVscGVyICsgXCIoKTogXCIgKyBuYW1lc3BhY2UpKTtcbiAgfVxuICByZXR1cm4gbW9kdWxlXG59XG5cbnZhciBpbmRleF9lc20gPSB7XG4gIFN0b3JlOiBTdG9yZSxcbiAgaW5zdGFsbDogaW5zdGFsbCxcbiAgdmVyc2lvbjogJzMuMC4xJyxcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucyxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycyxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucyxcbiAgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnM6IGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzXG59O1xuXG5leHBvcnQgeyBTdG9yZSwgaW5zdGFsbCwgbWFwU3RhdGUsIG1hcE11dGF0aW9ucywgbWFwR2V0dGVycywgbWFwQWN0aW9ucywgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGluZGV4X2VzbTtcbiIsIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG4iLCIvKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4gIE1vZGlmaWVkIGJ5IEV2YW4gWW91IEB5eXg5OTA4MDNcbiovXG5cbmltcG9ydCBsaXN0VG9TdHlsZXMgZnJvbSAnLi9saXN0VG9TdHlsZXMnXG5cbnZhciBoYXNEb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcblxuaWYgKHR5cGVvZiBERUJVRyAhPT0gJ3VuZGVmaW5lZCcgJiYgREVCVUcpIHtcbiAgaWYgKCFoYXNEb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAndnVlLXN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LiAnICtcbiAgICBcIlVzZSB7IHRhcmdldDogJ25vZGUnIH0gaW4geW91ciBXZWJwYWNrIGNvbmZpZyB0byBpbmRpY2F0ZSBhIHNlcnZlci1yZW5kZXJpbmcgZW52aXJvbm1lbnQuXCJcbiAgKSB9XG59XG5cbi8qXG50eXBlIFN0eWxlT2JqZWN0ID0ge1xuICBpZDogbnVtYmVyO1xuICBwYXJ0czogQXJyYXk8U3R5bGVPYmplY3RQYXJ0PlxufVxuXG50eXBlIFN0eWxlT2JqZWN0UGFydCA9IHtcbiAgY3NzOiBzdHJpbmc7XG4gIG1lZGlhOiBzdHJpbmc7XG4gIHNvdXJjZU1hcDogP3N0cmluZ1xufVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0gey8qXG4gIFtpZDogbnVtYmVyXToge1xuICAgIGlkOiBudW1iZXIsXG4gICAgcmVmczogbnVtYmVyLFxuICAgIHBhcnRzOiBBcnJheTwob2JqPzogU3R5bGVPYmplY3RQYXJ0KSA9PiB2b2lkPlxuICB9XG4qL31cblxudmFyIGhlYWQgPSBoYXNEb2N1bWVudCAmJiAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdKVxudmFyIHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsXG52YXIgc2luZ2xldG9uQ291bnRlciA9IDBcbnZhciBpc1Byb2R1Y3Rpb24gPSBmYWxzZVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxudmFyIG9wdGlvbnMgPSBudWxsXG52YXIgc3NySWRLZXkgPSAnZGF0YS12dWUtc3NyLWlkJ1xuXG4vLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbi8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcbnZhciBpc09sZElFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL21zaWUgWzYtOV1cXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTdHlsZXNDbGllbnQgKHBhcmVudElkLCBsaXN0LCBfaXNQcm9kdWN0aW9uLCBfb3B0aW9ucykge1xuICBpc1Byb2R1Y3Rpb24gPSBfaXNQcm9kdWN0aW9uXG5cbiAgb3B0aW9ucyA9IF9vcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbGlzdClcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW11cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgICBkb21TdHlsZS5yZWZzLS1cbiAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKVxuICAgIH1cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBuZXdMaXN0KVxuICAgICAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMgPSBbXVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldXG4gICAgICBpZiAoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZG9tU3R5bGUucGFydHNbal0oKVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcyAvKiBBcnJheTxTdHlsZU9iamVjdD4gKi8pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKytcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSlcbiAgICAgIH1cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgaWYgKGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA+IGl0ZW0ucGFydHMubGVuZ3RoKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA9IGl0ZW0ucGFydHMubGVuZ3RoXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0geyBpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50ICgpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgc3R5bGVFbGVtZW50LnR5cGUgPSAndGV4dC9jc3MnXG4gIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KVxuICByZXR1cm4gc3R5bGVFbGVtZW50XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gIHZhciB1cGRhdGUsIHJlbW92ZVxuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3R5bGVbJyArIHNzcklkS2V5ICsgJ349XCInICsgb2JqLmlkICsgJ1wiXScpXG5cbiAgaWYgKHN0eWxlRWxlbWVudCkge1xuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGFuZCBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gICAgICAvLyBzaW1wbHkgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBub29wXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGJ1dCBpbiBkZXYgbW9kZS5cbiAgICAgIC8vIGZvciBzb21lIHJlYXNvbiBDaHJvbWUgY2FuJ3QgaGFuZGxlIHNvdXJjZSBtYXAgaW4gc2VydmVyLXJlbmRlcmVkXG4gICAgICAvLyBzdHlsZSB0YWdzIC0gc291cmNlIG1hcHMgaW4gPHN0eWxlPiBvbmx5IHdvcmtzIGlmIHRoZSBzdHlsZSB0YWcgaXNcbiAgICAgIC8vIGNyZWF0ZWQgYW5kIGluc2VydGVkIGR5bmFtaWNhbGx5LiBTbyB3ZSByZW1vdmUgdGhlIHNlcnZlciByZW5kZXJlZFxuICAgICAgLy8gc3R5bGVzIGFuZCBpbmplY3QgbmV3IG9uZXMuXG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzT2xkSUUpIHtcbiAgICAvLyB1c2Ugc2luZ2xldG9uIG1vZGUgZm9yIElFOS5cbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrK1xuICAgIHN0eWxlRWxlbWVudCA9IHNpbmdsZXRvbkVsZW1lbnQgfHwgKHNpbmdsZXRvbkVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKSlcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSlcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKVxuICB9IGVsc2Uge1xuICAgIC8vIHVzZSBtdWx0aS1zdHlsZS10YWcgbW9kZSBpbiBhbGwgb3RoZXIgY2FzZXNcbiAgICBzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShvYmopXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcbiAgICAgICAgICBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuICAgICAgICAgIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKVxuICAgIH1cbiAgfVxufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgdGV4dFN0b3JlID0gW11cblxuICByZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudFxuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzc1xuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKVxuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKVxuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXNcbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSlcbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZUVsZW1lbnQsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzc1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWFcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXBcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKVxuICB9XG4gIGlmIChvcHRpb25zLnNzcklkKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShzc3JJZEtleSwgb2JqLmlkKVxuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9qYXZhc2NyaXB0LWRlYnVnZ2luZ1xuICAgIC8vIHRoaXMgbWFrZXMgc291cmNlIG1hcHMgaW5zaWRlIHN0eWxlIHRhZ3Mgd29yayBwcm9wZXJseSBpbiBDaHJvbWVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VVUkw9JyArIHNvdXJjZU1hcC5zb3VyY2VzWzBdICsgJyAqLydcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArICcgKi8nXG4gIH1cblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzXG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpXG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKVxuICB9XG59XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWFpbkFwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NYWluQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+XG5cbiAgICAgICAgPGhlYWRlciBpZD1cImhlYWRlclwiPlxuICAgICAgICAgICAgPGgxPkFiZWxpYW4gU2FuZHBpbGU8L2gxPlxuICAgICAgICA8L2hlYWRlcj5cblxuICAgICAgICA8YXNpZGUgaWQ9XCJjb250cm9sc1wiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uVG9nZ2xlIFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUZXh0PVwiUGxheVwiXG4gICAgICAgICAgICAgICAgICAgIGluYWN0aXZlVGV4dD1cIlBhdXNlXCJcbiAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmVJY29uPVwiJiM5MjA4O1wiXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUljb249XCImIzk2NTQ7XCJcbiAgICAgICAgICAgICAgICAgICAgQHRvZ2dsZT1cImRvTG9vcCA9ICFkb0xvb3BcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIEBjbGljay5wcmV2ZW50PVwicmVzZXRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1odG1sPVwiJyYjODYzNDsnXCI+PC9zcGFuPiBSZXN0YXJ0XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgICAgICA8TWVudUNvbGxhcHNpYmxlIGNsYXNzPVwiZGlzcGxheS1zbSBoYW1idXJnZXItbWVudVwiPlxuICAgICAgICAgICAgICAgIDxDb250cm9sR3JvdXBTYW5kIEBjbGVhcj1cImNsZWFyXCIgLz5cbiAgICAgICAgICAgICAgICA8Q29udHJvbEdyb3VwQ2FudmFzIC8+XG4gICAgICAgICAgICA8L01lbnVDb2xsYXBzaWJsZT5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpc3BsYXktbWRcIj5cbiAgICAgICAgICAgICAgICA8Q29udHJvbEdyb3VwU2FuZCBAY2xlYXI9XCJjbGVhclwiIC8+XG4gICAgICAgICAgICAgICAgPENvbnRyb2xHcm91cEhlYXRtYXAgLz5cbiAgICAgICAgICAgICAgICA8Q29udHJvbEdyb3VwQ2FudmFzIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9hc2lkZT5cblxuICAgICAgICA8c2VjdGlvbiBpZD1cImNvbnRlbnRcIiByZWY9XCJjb250ZW50XCI+XG4gICAgICAgICAgICA8Q2FudmFzUm9vdFxuICAgICAgICAgICAgICAgIDp3aWR0aD1cIndpZHRoXCJcbiAgICAgICAgICAgICAgICA6aGVpZ2h0PVwiaGVpZ2h0XCJcbiAgICAgICAgICAgICAgICBAbW91c2Vkb3duLmxlZnQ9XCJzZXRJbnRlcmFjdGluZygxMCwgJGV2ZW50KVwiXG4gICAgICAgICAgICAgICAgQG1vdXNldXAubGVmdD1cImludGVyYWN0aW5nID0gZmFsc2VcIlxuICAgICAgICAgICAgICAgIEBtb3VzZWxhdmU9XCJpbnRlcmFjdGluZyA9IGZhbHNlXCJcbiAgICAgICAgICAgICAgICBAbW91c2Vtb3ZlPVwidXBkYXRlSW50ZXJhY3RpbmcoJGV2ZW50KVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPENhbnZhc0dyaWRIZWF0TWFwIFxuICAgICAgICAgICAgICAgICAgICA6Z3JpZD1cInNhbmRcIlxuICAgICAgICAgICAgICAgICAgICA6aGVpZ2h0PVwiaGVpZ2h0XCJcbiAgICAgICAgICAgICAgICAgICAgOndpZHRoPVwid2lkdGhcIlxuICAgICAgICAgICAgICAgICAgICA6cmVzb2x1dGlvbj1cInJlc29sdXRpb25cIlxuICAgICAgICAgICAgICAgICAgICA6Y29sb3JTdGVwMD1cImNvbG9yMFwiXG4gICAgICAgICAgICAgICAgICAgIDpjb2xvclN0ZXAxPVwiY29sb3IxXCJcbiAgICAgICAgICAgICAgICAgICAgOmNvbG9yU3RlcDI9XCJjb2xvcjJcIlxuICAgICAgICAgICAgICAgICAgICA6Y29sb3JTdGVwMz1cImNvbG9yM1wiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2FudmFzUm9vdD5cbiAgICAgICA8L3NlY3Rpb24+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEJ1dHRvblRvZ2dsZSBmcm9tIFwiLi9CdXR0b25Ub2dnbGUudnVlXCI7XG5pbXBvcnQgQ2FudmFzUm9vdCBmcm9tIFwiLi9DYW52YXNSb290LnZ1ZVwiO1xuaW1wb3J0IENhbnZhc0dyaWRIZWF0TWFwIGZyb20gXCIuL0NhbnZhc0dyaWRIZWF0TWFwLnZ1ZVwiO1xuaW1wb3J0IENvbnRyb2xHcm91cFNhbmQgZnJvbSBcIi4vQ29udHJvbEdyb3VwU2FuZC52dWVcIjtcbmltcG9ydCBDb250cm9sR3JvdXBIZWF0bWFwIGZyb20gXCIuL0NvbnRyb2xHcm91cEhlYXRtYXAudnVlXCI7XG5pbXBvcnQgQ29udHJvbEdyb3VwQ2FudmFzIGZyb20gXCIuL0NvbnRyb2xHcm91cENhbnZhcy52dWVcIjtcbmltcG9ydCBNZW51Q29sbGFwc2libGUgZnJvbSBcIi4vTWVudUNvbGxhcHNpYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgcGl4ZWxUb0Nvb3JkLCBjb29yZFRvUGl4ZWwgfSBmcm9tIFwiLi4vdXRpbGl0aWVzLmpzXCI7XG5pbXBvcnQgeyBtYXBTdGF0ZSwgbWFwR2V0dGVycywgbWFwTXV0YXRpb25zIH0gZnJvbSBcInZ1ZXhcIjtcblxubGV0IG9uUmVzaXplVGltZXJJZCA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQnV0dG9uVG9nZ2xlLFxuICAgIENhbnZhc1Jvb3QsXG4gICAgQ2FudmFzR3JpZEhlYXRNYXAsXG4gICAgQ29udHJvbEdyb3VwU2FuZCxcbiAgICBDb250cm9sR3JvdXBIZWF0bWFwLFxuICAgIENvbnRyb2xHcm91cENhbnZhcyxcbiAgICBNZW51Q29sbGFwc2libGUsXG4gIH0sXG5cbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW50ZXJhY3Rpbmc6IGZhbHNlLFxuICAgICAgaW50ZXJhY3RpbmdYOiBudWxsLFxuICAgICAgaW50ZXJhY3RpbmdZOiBudWxsLFxuICAgICAgaW50ZXJhY3RpbmdBbW91bnQ6IDEwLFxuICAgICAgZG9Mb29wOiB0cnVlLFxuICAgICAgdGltZW91dDogbnVsbFxuICAgIH07XG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICAuLi5tYXBTdGF0ZShcImhlYXRtYXBcIiwgW1wiY29sb3IwXCIsIFwiY29sb3IxXCIsIFwiY29sb3IyXCIsIFwiY29sb3IzXCJdKSxcbiAgICAuLi5tYXBTdGF0ZShcImNhbnZhc1wiLCBbXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcInJlc29sdXRpb25cIl0pLFxuICAgIC4uLm1hcEdldHRlcnMoXCJjYW52YXNcIiwgW1xuICAgICAgICBcIm1pbldpZHRoXCIsXG4gICAgICAgIFwibWF4V2lkdGhcIixcbiAgICAgICAgXCJtaW5IZWlnaHRcIixcbiAgICAgICAgXCJtYXhIZWlnaHRcIixcbiAgICAgICAgXCJtaW5SZXNvbHV0aW9uXCIsXG4gICAgICAgIFwibWF4UmVzb2x1dGlvblwiLFxuICAgICAgICBcImNvbHNcIixcbiAgICAgICAgXCJyb3dzXCJcbiAgICBdKSxcbiAgICAuLi5tYXBTdGF0ZShcInNhbmRcIiwgW1wiYmFzZVNhbmRcIiwgXCJzdGFydGluZ1NhbmRcIiwgXCJzYW5kXCJdKSxcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC4uLm1hcE11dGF0aW9ucyhcImNhbnZhc1wiLCBbXCJzZXRIZWlnaHRcIiwgXCJzZXRXaWR0aFwiLCBcInNldFJlc29sdXRpb25cIl0pLFxuICAgIC4uLm1hcE11dGF0aW9ucyhcInNhbmRcIiwgW1wic2V0U2FuZFwiLCBcInVwZGF0ZVNhbmRcIl0pLFxuICAgIGNvbnN0cmFpbkNhbnZhcyhncm93KSB7XG4gICAgICAgIGNvbnN0IGFtb3VudCA9IGdyb3cgPyB0aGlzLnJlc29sdXRpb24gOiAtdGhpcy5yZXNvbHV0aW9uO1xuICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgdGhpcy5taW5XaWR0aCxcbiAgICAgICAgICAgIE1hdGgubWluKHRoaXMubWF4V2lkdGgsIHRoaXMud2lkdGggKyBhbW91bnQpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgdGhpcy5taW5IZWlnaHQsXG4gICAgICAgICAgICBNYXRoLm1pbih0aGlzLm1heEhlaWdodCwgdGhpcy5oZWlnaHQgKyBhbW91bnQpXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29scyAlIDIgPT09IDAgfHwgdGhpcy53aWR0aCA+IHRoaXMubWF4V2lkdGggfHwgdGhpcy53aWR0aCA8IHRoaXMubWluSGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnNldFdpZHRoKHdpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJvd3MgJSAyID09PSAwIHx8IHRoaXMuaGVpZ2h0ID4gdGhpcy5tYXhIZWlnaHQgfHwgdGhpcy5oZWlnaHQgPCB0aGlzLm1pbkhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5zZXRIZWlnaHQoaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0SW50ZXJhY3RpbmcoYW1vdW50LCBlKSB7XG4gICAgICAodGhpcy5pbnRlcmFjdGluZyA9IHRydWUpLCB0aGlzLnVwZGF0ZUludGVyYWN0aW5nKGUpO1xuICAgICAgdGhpcy5pbnRlcmFjdGluZ0Ftb3VudCA9IGFtb3VudDtcbiAgICB9LFxuICAgIHVwZGF0ZUludGVyYWN0aW5nKGUpIHtcbiAgICAgIGxldCB4ID0gZS5vZmZzZXRYIHx8IGUubGF5ZXJYO1xuXG4gICAgICBsZXQgeSA9IGUub2Zmc2V0WSB8fCBlLmxheWVyWTtcblxuICAgICAgeCA9IE1hdGgucm91bmQoeCAvIHRoaXMucmVzb2x1dGlvbik7XG5cbiAgICAgIGlmICh4ID4gMCAmJiB4IDwgdGhpcy5jb2xzKSB7XG4gICAgICAgIHRoaXMuaW50ZXJhY3RpbmdYID0geDtcbiAgICAgIH1cblxuICAgICAgeSA9IE1hdGgucm91bmQoeSAvIHRoaXMucmVzb2x1dGlvbik7XG5cbiAgICAgIGlmICh5ID4gMCAmJiB5IDwgdGhpcy5yb3dzKSB7XG4gICAgICAgIHRoaXMuaW50ZXJhY3RpbmdZID0geTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsZWFyKCkge1xuICAgICAgY29uc3Qgc2FuZCA9IG5ldyBBcnJheSh0aGlzLnJvd3MgKiB0aGlzLmNvbHMpO1xuICAgICAgc2FuZC5maWxsKHRoaXMuYmFzZVNhbmQpO1xuICAgICAgdGhpcy5zZXRTYW5kKHNhbmQpO1xuICAgIH0sXG4gICAgcmVzZXQoKSB7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICBsZXQgbWlkZGxlID0gY29vcmRUb1BpeGVsKFxuICAgICAgICBNYXRoLmZsb29yKHRoaXMuY29scyAvIDIpLFxuICAgICAgICBNYXRoLmZsb29yKHRoaXMucm93cyAvIDIpLFxuICAgICAgICB0aGlzLmNvbHNcbiAgICAgICk7XG5cbiAgICAgIHRoaXMudXBkYXRlU2FuZCh7IGlkeDogbWlkZGxlLCBhbW91bnQ6IHRoaXMuc3RhcnRpbmdTYW5kIH0pO1xuICAgIH0sXG4gICAgb3B0aW1pc2VDYW52YXMoKSB7XG4gICAgICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IHRoaXMuJHJlZnMuY29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBjb25zdCBkaW1lbnNpb24gPSBNYXRoLmZsb29yKE1hdGgubWluKHdpZHRoLCBoZWlnaHQpKTtcblxuICAgICAgICBsZXQgcmVzb2x1dGlvbiA9IE1hdGgucm91bmQoMC4wMTI1ICogZGltZW5zaW9uKTtcbiAgICAgICAgcmVzb2x1dGlvbiA9IE1hdGgubWluKHJlc29sdXRpb24sIHRoaXMubWF4UmVzb2x1dGlvbik7XG4gICAgICAgIHJlc29sdXRpb24gPSBNYXRoLm1heChyZXNvbHV0aW9uLCB0aGlzLm1pblJlc29sdXRpb24pO1xuXG4gICAgICAgIHRoaXMuc2V0V2lkdGgoZGltZW5zaW9uKTtcbiAgICAgICAgdGhpcy5zZXRIZWlnaHQoZGltZW5zaW9uKTtcbiAgICAgICAgdGhpcy5zZXRSZXNvbHV0aW9uKHJlc29sdXRpb24pO1xuICAgIH0sXG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChvblJlc2l6ZVRpbWVySWQpO1xuICAgICAgICBvblJlc2l6ZVRpbWVySWQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgdGhpcy5vcHRpbWlzZUNhbnZhcygpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgMTAwXG4gICAgICAgICk7XG4gICAgfSxcbiAgICAkX3NldFVwKCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUpO1xuICAgICAgdGhpcy5vcHRpbWlzZUNhbnZhcygpO1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH0sXG4gICAgJF91cGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5pbnRlcmFjdGluZykge1xuICAgICAgICBjb25zdCBpZHggPSBjb29yZFRvUGl4ZWwoXG4gICAgICAgICAgdGhpcy5pbnRlcmFjdGluZ1gsXG4gICAgICAgICAgdGhpcy5pbnRlcmFjdGluZ1ksXG4gICAgICAgICAgdGhpcy5jb2xzXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVTYW5kKHtcbiAgICAgICAgICBpZHgsXG4gICAgICAgICAgYW1vdW50OiAodGhpcy5zYW5kW2lkeF0gKz0gdGhpcy5pbnRlcmFjdGluZ0Ftb3VudClcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJF90b3BwbGUoKTtcbiAgICB9LFxuICAgICRfdG9wcGxlKCkge1xuICAgICAgbGV0IG5leHRTYW5kID0gQXJyYXkuZnJvbSh0aGlzLnNhbmQpO1xuXG4gICAgICB0aGlzLnNhbmQuZm9yRWFjaCgoZ3JhaW5zLCBpZHgpID0+IHtcbiAgICAgICAgaWYgKGdyYWlucyA+PSA0KSB7XG4gICAgICAgICAgbmV4dFNhbmRbaWR4XSA9IG5leHRTYW5kW2lkeF0gLSA0O1xuXG4gICAgICAgICAgbGV0IHsgeCwgeSB9ID0gcGl4ZWxUb0Nvb3JkKGlkeCwgdGhpcy5jb2xzKTtcblxuICAgICAgICAgIGlmICh4ID4gMCkge1xuICAgICAgICAgICAgbGV0IHNpYmxpbmdJZHggPSBjb29yZFRvUGl4ZWwoeCAtIDEsIHksIHRoaXMuY29scyk7XG5cbiAgICAgICAgICAgIG5leHRTYW5kW3NpYmxpbmdJZHhdID0gbmV4dFNhbmRbc2libGluZ0lkeF0gKyAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh4IDwgdGhpcy5jb2xzIC0gMSkge1xuICAgICAgICAgICAgbGV0IHNpYmxpbmdJZHggPSBjb29yZFRvUGl4ZWwoeCArIDEsIHksIHRoaXMuY29scyk7XG5cbiAgICAgICAgICAgIG5leHRTYW5kW3NpYmxpbmdJZHhdID0gbmV4dFNhbmRbc2libGluZ0lkeF0gKyAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh5ID4gMCkge1xuICAgICAgICAgICAgbGV0IHNpYmxpbmdJZHggPSBjb29yZFRvUGl4ZWwoeCwgeSAtIDEsIHRoaXMuY29scyk7XG5cbiAgICAgICAgICAgIG5leHRTYW5kW3NpYmxpbmdJZHhdID0gbmV4dFNhbmRbc2libGluZ0lkeF0gKyAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh5IDwgdGhpcy5yb3dzIC0gMSkge1xuICAgICAgICAgICAgbGV0IHNpYmxpbmdJZHggPSBjb29yZFRvUGl4ZWwoeCwgeSArIDEsIHRoaXMuY29scyk7XG5cbiAgICAgICAgICAgIG5leHRTYW5kW3NpYmxpbmdJZHhdID0gbmV4dFNhbmRbc2libGluZ0lkeF0gKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2V0U2FuZChuZXh0U2FuZCk7XG4gICAgfSxcbiAgICAkX2xvb3AoKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB0aGlzLiRfdXBkYXRlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZG9Mb29wKSB7XG4gICAgICAgICAgdGhpcy4kX2xvb3AoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIGRvTG9vcCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuJF9sb29wKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNvbHV0aW9uKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgb2xkVmFsdWUgPSBwYXJzZUludChvbGRWYWx1ZSwgMTApO1xuICAgICAgdGhpcy5jb25zdHJhaW5DYW52YXModmFsdWUgPiBvbGRWYWx1ZSk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSxcbiAgICB3aWR0aCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgIG9sZFZhbHVlID0gcGFyc2VJbnQob2xkVmFsdWUsIDEwKTtcbiAgICAgIHRoaXMuY29uc3RyYWluQ2FudmFzKHZhbHVlID4gb2xkVmFsdWUpO1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH0sXG5cbiAgICBoZWlnaHQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICBvbGRWYWx1ZSA9IHBhcnNlSW50KG9sZFZhbHVlLCAxMCk7XG4gICAgICB0aGlzLmNvbnN0cmFpbkNhbnZhcyh2YWx1ZSA+IG9sZFZhbHVlKTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRfc2V0VXAoKTtcblxuICAgICAgdGhpcy4kX2xvb3AoKTtcbiAgICB9KTtcbiAgfSxcbiAgYmVmb3JlRGVzdHJveSgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplKTtcbiAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuICAgIC5oYW1idXJnZXItbWVudSB7XG4gICAgICAgIG1hcmdpbjogMTJweCBhdXRvO1xuICAgIH1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQnV0dG9uVG9nZ2xlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0J1dHRvblRvZ2dsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImlubGluZS1jb250YWluZXJcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIEBjbGljay5wcmV2ZW50PVwidG9nZ2xlXCI+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvblwiXG4gICAgICAgICAgICAgICAgdi1pZj1cImljb25cIlxuICAgICAgICAgICAgICAgIHYtaHRtbD1cImljb25cIlxuICAgICAgICAgICAgPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dFwiPlxuICAgICAgICAgICAgICAgIHt7dGV4dH19XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICBzdGFydEFjdGl2ZToge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBhY3RpdmVJY29uOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9LFxuICAgICAgICBpbmFjdGl2ZUljb246IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2ZVRleHQ6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGluYWN0aXZlVGV4dDoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJydcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5zdGFydEFjdGl2ZSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGljb24oKXsgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmUgPyB0aGlzLmFjdGl2ZUljb24gOiB0aGlzLmluYWN0aXZlSWNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlID8gdGhpcy5hY3RpdmVUZXh0IDogdGhpcy5pbmFjdGl2ZVRleHQ7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgdG9nZ2xlKCkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSAhdGhpcy5hY3RpdmU7XG5cbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3RvZ2dsZScsIHRoaXMuYWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhbnZhc1Jvb3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2FudmFzUm9vdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCI8dGVtcGxhdGU+XG4gICAgPGRpdj5cbiAgICAgICAgPGNhbnZhc1xuICAgICAgICAgICAgY2xhc3M9XCJ2dWUtY2FudmFzXCJcbiAgICAgICAgICAgIHJlZj1cInZ1ZS1jYW52YXNcIlxuICAgICAgICAgICAgOndpZHRoPVwid2lkdGhcIlxuICAgICAgICAgICAgOmhlaWdodD1cImhlaWdodFwiXG4gICAgICAgICAgICBAbW91c2Vkb3duPVwiJGVtaXQoJ21vdXNlZG93bicsICRldmVudClcIlxuICAgICAgICAgICAgQG1vdXNldXA9XCIkZW1pdCgnbW91c2V1cCcsICRldmVudClcIlxuICAgICAgICAgICAgQG1vdXNlbGVhdmU9XCIkZW1pdCgnbW91c2VsZWF2ZScsICRldmVudClcIlxuICAgICAgICAgICAgQG1vdXNlbW92ZT1cIiRlbWl0KCdtb3VzZW1vdmUnLCAkZXZlbnQpXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDxzbG90IC8+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHdpZHRoOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWlnaHQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwcm92aWRlcjoge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJvdmlkZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2F0Y2g6e1xuICAgICAgICAgICAgd2lkdGgodmFsdWUpe1xuICAgICAgICAgICAgICAgIHRoaXMucHJvdmlkZXIud2lkdGggPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWlnaHQodmFsdWUpe1xuICAgICAgICAgICAgICAgIHRoaXMucHJvdmlkZXIuaGVpZ2h0ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50ZWQoKSB7XG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyLmNvbnRleHQgPSB0aGlzLiRyZWZzWyd2dWUtY2FudmFzJ10uZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgfVxuICAgIH1cbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhbnZhc0dyaWRIZWF0TWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhbnZhc0dyaWRIZWF0TWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgcGl4ZWxUb0Nvb3JkLCBjb29yZFRvUGl4ZWwgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnO1xuXG4gICAgZXhwb3J0IGRlZmF1bHQge1xuICAgICAgICBpbmplY3Q6IFsncHJvdmlkZXInXSxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGdyaWQ6e1xuICAgICAgICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2lkdGg6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEwMCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6ICh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkVmFsID0gcGFyc2VJbnQodmFsLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VkVmFsKSAmJiBwYXJzZWRWYWwgPiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWlnaHQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEwMCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6ICh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkVmFsID0gcGFyc2VJbnQodmFsLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VkVmFsKSAmJiBwYXJzZWRWYWwgPiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNvbHV0aW9uOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEsXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiAodmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFZhbCA9IHBhcnNlSW50KHZhbCwgMTApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWlzTmFOKHZhbCkgJiYgdmFsID4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JTdGVwMDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnIzMyODhiZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvclN0ZXAxOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICcjOTlkNTk0J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yU3RlcDI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJyNmZWUwOGInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JTdGVwMzoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnI2ZjOGQ1OSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXB1dGVkOiB7XG4gICAgICAgICAgICByb3dzKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5oZWlnaHQgLyB0aGlzLnJlc29sdXRpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbHMoKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLndpZHRoIC8gdGhpcy5yZXNvbHV0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgICAgY2xlYXIoKXtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLnByb3ZpZGVyLmNvbnRleHQ7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7IHdpZHRoLGhlaWdodCB9ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdhdGNoOiB7XG4gICAgICAgICAgICB3aWR0aCgpe1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWlnaHQoKXtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzb2x1dGlvbigpe1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3ZpZGVyLmNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMucHJvdmlkZXIuY29udGV4dDtcblxuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgICAgICBjb2xzLCBcbiAgICAgICAgICAgICAgICByb3dzLCBcbiAgICAgICAgICAgICAgICByZXNvbHV0aW9uLCBcbiAgICAgICAgICAgICAgICBncmlkLFxuICAgICAgICAgICAgICAgIGNvbG9yU3RlcDAsXG4gICAgICAgICAgICAgICAgY29sb3JTdGVwMSxcbiAgICAgICAgICAgICAgICBjb2xvclN0ZXAyLFxuICAgICAgICAgICAgICAgIGNvbG9yU3RlcDMsXG4gICAgICAgICAgICB9ID0gdGhpcztcblxuICAgICAgICAgICAgZm9yIChsZXQgcGl4ZWwgaW4gZ3JpZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7eCwgeX0gPSBwaXhlbFRvQ29vcmQocGl4ZWwsIGNvbHMpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBncmFpbnMgPSBncmlkW3BpeGVsXTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSBjb2xvclN0ZXAzO1xuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZ3JhaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBjb2xvclN0ZXAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gY29sb3JTdGVwMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IGNvbG9yU3RlcDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiBcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHN0eWxlO1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoeCAqIHJlc29sdXRpb24sIHkgKiByZXNvbHV0aW9uLCByZXNvbHV0aW9uLCByZXNvbHV0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gYHJnYmEoMCwgMCwgMCwgMC4xKWA7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KHggKiByZXNvbHV0aW9uLCB5ICogcmVzb2x1dGlvbiwgcmVzb2x1dGlvbiwgcmVzb2x1dGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db250cm9sR3JvdXBTYW5kLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NvbnRyb2xHcm91cFNhbmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxuICAgIDxDb250cm9sR3JvdXAgbGVnZW5kPVwiU2FuZFwiIEByZXNldD1cInJlc2V0U2FuZFwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdj5Ub3RhbCBTYW5kOiB7eyBzYW5kVG90YWwgfX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIEBjbGljay5wcmV2ZW50PVwiJGVtaXQoJ2NsZWFyJywgJGV2ZW50KVwiPlxuICAgICAgICAgICAgICAgICAgICBDbGVhclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbD5CYXNlIFNhbmQgKHt7IGJhc2VTYW5kIH19KTwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIDp2YWx1ZT1cImJhc2VTYW5kXCIgQGlucHV0PVwic2V0QmFzZVNhbmQoJGV2ZW50LnRhcmdldC52YWx1ZSlcIiBtaW49XCIwXCIgbWF4PVwiNFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+U3RhcnRpbmcgU2FuZCAoe3sgc3RhcnRpbmdTYW5kIH19KTwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIDp2YWx1ZT1cInN0YXJ0aW5nU2FuZFwiIEBpbnB1dD1cInNldFN0YXJ0aW5nU2FuZCgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiIG1pbj1cIjEwMFwiIG1heD1cIjEwMDAwMFwiIHN0ZXA9XCIxMDBcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvQ29udHJvbEdyb3VwPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb250cm9sR3JvdXAgZnJvbSAnLi9Db250cm9sR3JvdXAudnVlJztcbmltcG9ydCB7bWFwU3RhdGUsIG1hcEdldHRlcnMsIG1hcE11dGF0aW9uc30gZnJvbSAndnVleCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIENvbnRyb2xHcm91cCxcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIC4uLm1hcFN0YXRlKFwic2FuZFwiLCBbXCJiYXNlU2FuZFwiLCBcInN0YXJ0aW5nU2FuZFwiLCBcInNhbmRcIl0pLFxuICAgICAgICAuLi5tYXBHZXR0ZXJzKFwic2FuZFwiLCBbXCJzYW5kVG90YWxcIl0pLFxuICAgIH0sXG4gICAgbWV0aG9kczogbWFwTXV0YXRpb25zKFwic2FuZFwiLCBbXG4gICAgICBcInNldEJhc2VTYW5kXCIsXG4gICAgICBcInNldFN0YXJ0aW5nU2FuZFwiLFxuICAgICAgXCJyZXNldFNhbmRcIixcbiAgICAgIFwic2V0U2FuZFwiLFxuICAgICAgXCJ1cGRhdGVTYW5kXCJcbiAgICBdKSxcbn1cbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NvbnRyb2xHcm91cC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db250cm9sR3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxuICAgIDxmaWVsZHNldCBjbGFzcz1cImNvbnRyb2wtZ3JvdXBcIj5cbiAgICAgICAgPGxlZ2VuZD57e2xlZ2VuZH19PC9sZWdlbmQ+XG4gICAgICAgIDxzbG90IC8+XG4gICAgICAgIDxkaXYgdi1pZj1cImNhblJlc2V0XCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuXCIgQGNsaWNrLnByZXZlbnQ9XCIkZW1pdCgncmVzZXQnLCAkZXZlbnQpXCI+XG4gICAgICAgICAgICAgICAgUmVzZXRcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2ZpZWxkc2V0PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBjYW5SZXNldDoge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIH1cbiAgICB9XG59XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db250cm9sR3JvdXBIZWF0bWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NvbnRyb2xHcm91cEhlYXRtYXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxuICAgIDxDb250cm9sR3JvdXAgbGVnZW5kPVwiSGVhdG1hcFwiIEByZXNldD1cInJlc2V0Q29sb3JzXCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGFiZWw+MCBHcmFpbnM8L2xhYmVsPlxuICAgICAgICAgICAgPEJ1dHRvbkNvbG9yUGlja2VyIFxuICAgICAgICAgICAgICAgIDprZXk9XCJgJHtjb2xvcjB9LWNvbG9yMGBcIlxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cImNvbG9yMFwiXG4gICAgICAgICAgICAgICAgcG9wdXBUaXRsZT1cIkNvbG9yIC0gMCBHcmFpbnNcIlxuICAgICAgICAgICAgICAgIEBjaGFuZ2U9XCJ1cGRhdGVDb2xvcih7c3RlcDonY29sb3IwJywgY29sb3I6ICRldmVudH0pXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsPjEgR3JhaW5zPC9sYWJlbD5cbiAgICAgICAgICAgIDxCdXR0b25Db2xvclBpY2tlclxuICAgICAgICAgICAgICAgIDprZXk9XCJgJHtjb2xvcjF9LWNvbG9yMWBcIlxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cImNvbG9yMVwiXG4gICAgICAgICAgICAgICAgcG9wdXBUaXRsZT1cIkNvbG9yIC0gMSBHcmFpbnNcIlxuICAgICAgICAgICAgICAgIEBjaGFuZ2U9XCJ1cGRhdGVDb2xvcih7c3RlcDonY29sb3IxJywgY29sb3I6ICRldmVudH0pXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsPjIgR3JhaW5zPC9sYWJlbD5cbiAgICAgICAgICAgIDxCdXR0b25Db2xvclBpY2tlclxuICAgICAgICAgICAgICAgIDprZXk9XCJgJHtjb2xvcjJ9LWNvbG9yMmBcIlxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cImNvbG9yMlwiXG4gICAgICAgICAgICAgICAgcG9wdXBUaXRsZT1cIkNvbG9yIC0gMiBHcmFpbnNcIlxuICAgICAgICAgICAgICAgIEBjaGFuZ2U9XCJ1cGRhdGVDb2xvcih7c3RlcDonY29sb3IyJywgY29sb3I6ICRldmVudH0pXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsPjMgR3JhaW5zPC9sYWJlbD5cbiAgICAgICAgICAgIDxCdXR0b25Db2xvclBpY2tlclxuICAgICAgICAgICAgICAgIDprZXk9XCJgJHtjb2xvcjN9LWNvbG9yM2BcIlxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cImNvbG9yM1wiXG4gICAgICAgICAgICAgICAgcG9wdXBUaXRsZT1cIkNvbG9yIC0gMyBHcmFpbnNcIlxuICAgICAgICAgICAgICAgIEBjaGFuZ2U9XCJ1cGRhdGVDb2xvcih7c3RlcDonY29sb3IzJywgY29sb3I6ICRldmVudH0pXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvQ29udHJvbEdyb3VwPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBCdXR0b25Db2xvclBpY2tlciBmcm9tIFwiLi9CdXR0b25Db2xvclBpY2tlci52dWVcIjtcbmltcG9ydCBDb250cm9sR3JvdXAgZnJvbSBcIi4vQ29udHJvbEdyb3VwLnZ1ZVwiO1xuaW1wb3J0IHsgbWFwU3RhdGUsIG1hcEdldHRlcnMsIG1hcE11dGF0aW9ucyB9IGZyb20gXCJ2dWV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIEJ1dHRvbkNvbG9yUGlja2VyLFxuICAgIENvbnRyb2xHcm91cFxuICB9LFxuICBjb21wdXRlZDogbWFwU3RhdGUoXCJoZWF0bWFwXCIsIFtcbiAgICAgIFwiY29sb3IwXCIsXG4gICAgICBcImNvbG9yMVwiLFxuICAgICAgXCJjb2xvcjJcIixcbiAgICAgIFwiY29sb3IzXCJcbiAgICBdKSxcbiAgICBtZXRob2RzOiBtYXBNdXRhdGlvbnMoXCJoZWF0bWFwXCIsIFtcInVwZGF0ZUNvbG9yXCIsIFwicmVzZXRDb2xvcnNcIl0pLFxufTtcbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiaW5saW5lLWNvbnRhaW5lclwiPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1jb2xvci1waWNrZXJcIiBAY2xpY2s9XCJvcGVuID0gdHJ1ZVwiIHJlZj1cImJ1dHRvblwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzd2F0Y2hcIiA6c3R5bGU9XCJ7YmFja2dyb3VuZENvbG9yOiB2YWx1ZX1cIi8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHRcIj57e3ZhbHVlfX08L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8ZGl2IHYtc2hvdz1cIm9wZW5cIiBjbGFzcz1cInBvcHVwXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9wdXAtaW5uZXJcIiA6c3R5bGU9XCJ7dG9wOiBgJHt5fXB4YCwgbGVmdDpgJHt4fXB4YH1cIj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8UGhvdG9zaG9wIFxuICAgICAgICAgICAgICAgICAgICA6dmFsdWU9XCJjb2xvclwiXG4gICAgICAgICAgICAgICAgICAgIEBjYW5jZWw9XCJjYW5jZWxcIlxuICAgICAgICAgICAgICAgICAgICBAaW5wdXQ9XCJjb2xvciA9ICRldmVudC5oZXhcIlxuICAgICAgICAgICAgICAgICAgICBAb2s9XCJjaG9vc2VcIlxuICAgICAgICAgICAgICAgICAgICA6aGVhZD1cInBvcHVwVGl0bGVcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgUGhvdG9zaG9wIH0gZnJvbSAndnVlLWNvbG9yJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHBvcHVwVGl0bGU6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3BlbjogZmFsc2UsXG4gICAgICAgICAgICBjb2xvcjogdGhpcy52YWx1ZSxcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIFBob3Rvc2hvcCxcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgY2FuY2VsKCkge1xuICAgICAgICAgICAgdGhpcy5jb2xvciA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hvb3NlKCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLmNvbG9yKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgb3Blbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy54ID0gdGhpcy4kcmVmcy5idXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSB0aGlzLiRyZWZzLmJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB0aGlzLiRyZWZzLmJ1dHRvbi5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuICAuYnRuLWNvbG9yLXBpY2tlciAudGV4dHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIG1pbi13aWR0aDogNjBweDtcbiAgfVxuXG4gIC5idG4tY29sb3ItcGlja2VyIC5zd2F0Y2h7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB3aWR0aDogMTJweDtcbiAgICAgIGhlaWdodDogMTJweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XG4gIH1cblxuICAucG9wdXB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHotaW5kZXg6IDEwMDtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjQpO1xuICB9XG5cbiAgLnBvcHVwLWlubmVye1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgei1pbmRleDogMTAwO1xuICB9XG48L3N0eWxlPlxuIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTUzMWEwMjZhJnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI2NzY3ZGVhMlwiLCBjb250ZW50LCB0cnVlLCB7fSk7IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NvbnRyb2xHcm91cENhbnZhcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db250cm9sR3JvdXBDYW52YXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxuICAgIDxDb250cm9sR3JvdXAgbGVnZW5kPVwiQ2FudmFzXCIgQHJlc2V0PVwicmVzZXREaW1lbnNpb25zXCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbD5SZXNvbHV0aW9uICh7e3Jlc29sdXRpb259fXB4IDxzcGFuIHYtaHRtbD1cIicmIzIxNTsnXCI+PC9zcGFuPiB7e3Jlc29sdXRpb259fXB4KTwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIDp2YWx1ZT1cInJlc29sdXRpb25cIiBAaW5wdXQ9XCJzZXRSZXNvbHV0aW9uKCRldmVudC50YXJnZXQudmFsdWUpXCIgOm1pbj1cIm1pblJlc29sdXRpb25cIiA6bWF4PVwibWF4UmVzb2x1dGlvblwiIHN0ZXA9XCIxXCIvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+V2lkdGggKHt7Y29scyB9fSBDb2xzKTwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIDp2YWx1ZT1cIndpZHRoXCIgQGlucHV0PVwic2V0V2lkdGgoJGV2ZW50LnRhcmdldC52YWx1ZSlcIiA6bWluPVwibWluV2lkdGhcIiA6bWF4PVwibWF4V2lkdGhcIiA6c3RlcD1cInJlc29sdXRpb25cIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+SGVpZ2h0ICh7eyByb3dzIH19IFJvd3MpPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgIDp2YWx1ZT1cImhlaWdodFwiIEBpbnB1dD1cInNldEhlaWdodCgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiIDptaW49XCJtaW5IZWlnaHRcIiA6bWF4PVwibWF4SGVpZ2h0XCIgOnN0ZXA9XCJyZXNvbHV0aW9uXCIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L0NvbnRyb2xHcm91cD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQ29udHJvbEdyb3VwIGZyb20gJy4vQ29udHJvbEdyb3VwLnZ1ZSc7XG5pbXBvcnQge21hcFN0YXRlLCBtYXBHZXR0ZXJzLCBtYXBNdXRhdGlvbnN9IGZyb20gJ3Z1ZXgnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBDb250cm9sR3JvdXAsXG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICAuLi5tYXBTdGF0ZShcImNhbnZhc1wiLCBbXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcInJlc29sdXRpb25cIl0pLFxuICAgICAgICAuLi5tYXBHZXR0ZXJzKFwiY2FudmFzXCIsIFtcbiAgICAgICAgICAgIFwibWluV2lkdGhcIixcbiAgICAgICAgICAgIFwibWF4V2lkdGhcIixcbiAgICAgICAgICAgIFwibWluSGVpZ2h0XCIsXG4gICAgICAgICAgICBcIm1heEhlaWdodFwiLFxuICAgICAgICAgICAgXCJtaW5SZXNvbHV0aW9uXCIsXG4gICAgICAgICAgICBcIm1heFJlc29sdXRpb25cIixcbiAgICAgICAgICAgIFwiY29sc1wiLFxuICAgICAgICAgICAgXCJyb3dzXCJcbiAgICAgICAgXSksXG4gICAgfSxcbiAgICBtZXRob2RzOiBtYXBNdXRhdGlvbnMoXCJjYW52YXNcIiwgW1xuICAgICAgICBcInNldEhlaWdodFwiLFxuICAgICAgICBcInNldFdpZHRoXCIsXG4gICAgICAgIFwic2V0UmVzb2x1dGlvblwiLFxuICAgICAgICBcInJlc2V0RGltZW5zaW9uc1wiXG4gICAgXSksXG59XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NZW51Q29sbGFwc2libGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWVudUNvbGxhcHNpYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuXCIgQGNsaWNrLnByZXZlbnQ9XCJhY3RpdmUgPSAhYWN0aXZlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGFtYnVyZ2VyXCIgOmNsYXNzPVwie2FjdGl2ZX1cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaG9yaXpvbnRhbC1iYXJcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaG9yaXpvbnRhbC1iYXJcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaG9yaXpvbnRhbC1iYXJcIj48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGRpdiB2LXNob3c9XCJhY3RpdmVcIj5cbiAgICAgICAgICAgIDxzbG90IC8+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgICAuaGFtYnVyZ2VyIHtcbiAgICAgICAgd2lkdGg6IDI4cHg7XG4gICAgICAgIGhlaWdodDogMThweDtcbiAgICB9XG5cbiAgICAuaGFtYnVyZ2VyIC5ob3Jpem9udGFsLWJhcntcbiAgICAgICAgd2lkdGg6IDc1JTtcbiAgICAgICAgaGVpZ2h0OiAycHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyMjI7XG4gICAgICAgIG1hcmdpbjogNHB4IGF1dG87XG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4xcywgdHJhbnNmb3JtIDAuMjVzO1xuICAgIH1cblxuICAgIC5oYW1idXJnZXIuYWN0aXZlIC5ob3Jpem9udGFsLWJhcjpmaXJzdC1jaGlsZCB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZykgdHJhbnNsYXRlKC00cHgsIDRweCk7XG4gICAgfVxuXG4gICAgLmhhbWJ1cmdlci5hY3RpdmUgLmhvcml6b250YWwtYmFyOm50aC1jaGlsZChldmVuKSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgLmhhbWJ1cmdlci5hY3RpdmUgLmhvcml6b250YWwtYmFyOmxhc3QtY2hpbGQge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgdHJhbnNsYXRlKC00cHgsIC00cHgpO1xuICAgIH1cbjwvc3R5bGU+XG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWVudUNvbGxhcHNpYmxlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTcyOWU0Y2Q3JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI2ZjVmMGM3MFwiLCBjb250ZW50LCB0cnVlLCB7fSk7IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL01haW5BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NDI2MzM4Yjgmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjQwM2FiY2M2XCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0NvbnRyb2xHcm91cC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmM1OTk2ZDgmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ29udHJvbEdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQ29udHJvbEdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse2F0dHJzOntcImlkXCI6XCJjb250YWluZXJcIn19LFtfdm0uX20oMCksX3ZtLl92KFwiIFwiKSxfYygnYXNpZGUnLHthdHRyczp7XCJpZFwiOlwiY29udHJvbHNcIn19LFtfYygnZGl2JyxbX2MoJ0J1dHRvblRvZ2dsZScse2F0dHJzOntcImFjdGl2ZVRleHRcIjpcIlBsYXlcIixcImluYWN0aXZlVGV4dFwiOlwiUGF1c2VcIixcImluYWN0aXZlSWNvblwiOlwiJiM5MjA4O1wiLFwiYWN0aXZlSWNvblwiOlwiJiM5NjU0O1wifSxvbjp7XCJ0b2dnbGVcIjpmdW5jdGlvbigkZXZlbnQpe192bS5kb0xvb3AgPSAhX3ZtLmRvTG9vcH19fSksX3ZtLl92KFwiIFwiKSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJidG5cIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7cmV0dXJuIF92bS5yZXNldCgkZXZlbnQpfX19LFtfYygnc3Bhbicse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcygnJiM4NjM0OycpfX0pLF92bS5fdihcIiBSZXN0YXJ0XFxuICAgICAgICAgICAgXCIpXSldLDEpLF92bS5fdihcIiBcIiksX2MoJ01lbnVDb2xsYXBzaWJsZScse3N0YXRpY0NsYXNzOlwiZGlzcGxheS1zbSBoYW1idXJnZXItbWVudVwifSxbX2MoJ0NvbnRyb2xHcm91cFNhbmQnLHtvbjp7XCJjbGVhclwiOl92bS5jbGVhcn19KSxfdm0uX3YoXCIgXCIpLF9jKCdDb250cm9sR3JvdXBDYW52YXMnKV0sMSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJkaXNwbGF5LW1kXCJ9LFtfYygnQ29udHJvbEdyb3VwU2FuZCcse29uOntcImNsZWFyXCI6X3ZtLmNsZWFyfX0pLF92bS5fdihcIiBcIiksX2MoJ0NvbnRyb2xHcm91cEhlYXRtYXAnKSxfdm0uX3YoXCIgXCIpLF9jKCdDb250cm9sR3JvdXBDYW52YXMnKV0sMSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3NlY3Rpb24nLHtyZWY6XCJjb250ZW50XCIsYXR0cnM6e1wiaWRcIjpcImNvbnRlbnRcIn19LFtfYygnQ2FudmFzUm9vdCcse2F0dHJzOntcIndpZHRoXCI6X3ZtLndpZHRoLFwiaGVpZ2h0XCI6X3ZtLmhlaWdodH0sb246e1wibW91c2Vkb3duXCI6ZnVuY3Rpb24oJGV2ZW50KXtpZighKCdidXR0b24nIGluICRldmVudCkmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImxlZnRcIiwzNywkZXZlbnQua2V5LFtcIkxlZnRcIixcIkFycm93TGVmdFwiXSkpeyByZXR1cm4gbnVsbDsgfWlmKCdidXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAwKXsgcmV0dXJuIG51bGw7IH1fdm0uc2V0SW50ZXJhY3RpbmcoMTAsICRldmVudCl9LFwibW91c2V1cFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJsZWZ0XCIsMzcsJGV2ZW50LmtleSxbXCJMZWZ0XCIsXCJBcnJvd0xlZnRcIl0pKXsgcmV0dXJuIG51bGw7IH1pZignYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMCl7IHJldHVybiBudWxsOyB9X3ZtLmludGVyYWN0aW5nID0gZmFsc2V9LFwibW91c2VsYXZlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaW50ZXJhY3RpbmcgPSBmYWxzZX0sXCJtb3VzZW1vdmVcIjpmdW5jdGlvbigkZXZlbnQpe192bS51cGRhdGVJbnRlcmFjdGluZygkZXZlbnQpfX19LFtfYygnQ2FudmFzR3JpZEhlYXRNYXAnLHthdHRyczp7XCJncmlkXCI6X3ZtLnNhbmQsXCJoZWlnaHRcIjpfdm0uaGVpZ2h0LFwid2lkdGhcIjpfdm0ud2lkdGgsXCJyZXNvbHV0aW9uXCI6X3ZtLnJlc29sdXRpb24sXCJjb2xvclN0ZXAwXCI6X3ZtLmNvbG9yMCxcImNvbG9yU3RlcDFcIjpfdm0uY29sb3IxLFwiY29sb3JTdGVwMlwiOl92bS5jb2xvcjIsXCJjb2xvclN0ZXAzXCI6X3ZtLmNvbG9yM319KV0sMSldLDEpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2hlYWRlcicse2F0dHJzOntcImlkXCI6XCJoZWFkZXJcIn19LFtfYygnaDEnLFtfdm0uX3YoXCJBYmVsaWFuIFNhbmRwaWxlXCIpXSldKX1dXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWFpbkFwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NDI2MzM4Yjgmc2NvcGVkPXRydWUmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnQ29udHJvbEdyb3VwJyx7YXR0cnM6e1wibGVnZW5kXCI6XCJTYW5kXCJ9LG9uOntcInJlc2V0XCI6X3ZtLnJlc2V0U2FuZH19LFtfYygnZGl2JyxbX2MoJ2RpdicsW192bS5fdihcIlRvdGFsIFNhbmQ6IFwiK192bS5fcyhfdm0uc2FuZFRvdGFsKSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJidG5cIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLiRlbWl0KCdjbGVhcicsICRldmVudCl9fX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICBDbGVhclxcbiAgICAgICAgICAgIFwiKV0pXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnZGl2JyxbX2MoJ2xhYmVsJyxbX3ZtLl92KFwiQmFzZSBTYW5kIChcIitfdm0uX3MoX3ZtLmJhc2VTYW5kKStcIilcIildKV0pLF92bS5fdihcIiBcIiksX2MoJ2RpdicsW19jKCdpbnB1dCcse2F0dHJzOntcInR5cGVcIjpcInJhbmdlXCIsXCJtaW5cIjpcIjBcIixcIm1heFwiOlwiNFwiLFwic3RlcFwiOlwiMVwifSxkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS5iYXNlU2FuZH0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe192bS5zZXRCYXNlU2FuZCgkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2RpdicsW19jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCJTdGFydGluZyBTYW5kIChcIitfdm0uX3MoX3ZtLnN0YXJ0aW5nU2FuZCkrXCIpXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnaW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJyYW5nZVwiLFwibWluXCI6XCIxMDBcIixcIm1heFwiOlwiMTAwMDAwXCIsXCJzdGVwXCI6XCIxMDBcIn0sZG9tUHJvcHM6e1widmFsdWVcIjpfdm0uc3RhcnRpbmdTYW5kfSxvbjp7XCJpbnB1dFwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnNldFN0YXJ0aW5nU2FuZCgkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSldKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db250cm9sR3JvdXBTYW5kLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zZjMzYzIxYyZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLFtfYygnY2FudmFzJyx7cmVmOlwidnVlLWNhbnZhc1wiLHN0YXRpY0NsYXNzOlwidnVlLWNhbnZhc1wiLGF0dHJzOntcIndpZHRoXCI6X3ZtLndpZHRoLFwiaGVpZ2h0XCI6X3ZtLmhlaWdodH0sb246e1wibW91c2Vkb3duXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJGVtaXQoJ21vdXNlZG93bicsICRldmVudCl9LFwibW91c2V1cFwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLiRlbWl0KCdtb3VzZXVwJywgJGV2ZW50KX0sXCJtb3VzZWxlYXZlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJGVtaXQoJ21vdXNlbGVhdmUnLCAkZXZlbnQpfSxcIm1vdXNlbW92ZVwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLiRlbWl0KCdtb3VzZW1vdmUnLCAkZXZlbnQpfX19KSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImRlZmF1bHRcIildLDIpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2FudmFzUm9vdC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OTUxM2E3YzYmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnQ29udHJvbEdyb3VwJyx7YXR0cnM6e1wibGVnZW5kXCI6XCJIZWF0bWFwXCJ9LG9uOntcInJlc2V0XCI6X3ZtLnJlc2V0Q29sb3JzfX0sW19jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCIwIEdyYWluc1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ0J1dHRvbkNvbG9yUGlja2VyJyx7a2V5Oihfdm0uY29sb3IwICsgXCItY29sb3IwXCIpLGF0dHJzOntcInZhbHVlXCI6X3ZtLmNvbG9yMCxcInBvcHVwVGl0bGVcIjpcIkNvbG9yIC0gMCBHcmFpbnNcIn0sb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0udXBkYXRlQ29sb3Ioe3N0ZXA6J2NvbG9yMCcsIGNvbG9yOiAkZXZlbnR9KX19fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ2RpdicsW19jKCdsYWJlbCcsW192bS5fdihcIjEgR3JhaW5zXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnQnV0dG9uQ29sb3JQaWNrZXInLHtrZXk6KF92bS5jb2xvcjEgKyBcIi1jb2xvcjFcIiksYXR0cnM6e1widmFsdWVcIjpfdm0uY29sb3IxLFwicG9wdXBUaXRsZVwiOlwiQ29sb3IgLSAxIEdyYWluc1wifSxvbjp7XCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS51cGRhdGVDb2xvcih7c3RlcDonY29sb3IxJywgY29sb3I6ICRldmVudH0pfX19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2xhYmVsJyxbX3ZtLl92KFwiMiBHcmFpbnNcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdCdXR0b25Db2xvclBpY2tlcicse2tleTooX3ZtLmNvbG9yMiArIFwiLWNvbG9yMlwiKSxhdHRyczp7XCJ2YWx1ZVwiOl92bS5jb2xvcjIsXCJwb3B1cFRpdGxlXCI6XCJDb2xvciAtIDIgR3JhaW5zXCJ9LG9uOntcImNoYW5nZVwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnVwZGF0ZUNvbG9yKHtzdGVwOidjb2xvcjInLCBjb2xvcjogJGV2ZW50fSl9fX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCIzIEdyYWluc1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ0J1dHRvbkNvbG9yUGlja2VyJyx7a2V5Oihfdm0uY29sb3IzICsgXCItY29sb3IzXCIpLGF0dHJzOntcInZhbHVlXCI6X3ZtLmNvbG9yMyxcInBvcHVwVGl0bGVcIjpcIkNvbG9yIC0gMyBHcmFpbnNcIn0sb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0udXBkYXRlQ29sb3Ioe3N0ZXA6J2NvbG9yMycsIGNvbG9yOiAkZXZlbnR9KX19fSldLDEpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db250cm9sR3JvdXBIZWF0bWFwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yODUyNjQxMyZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdDb250cm9sR3JvdXAnLHthdHRyczp7XCJsZWdlbmRcIjpcIkNhbnZhc1wifSxvbjp7XCJyZXNldFwiOl92bS5yZXNldERpbWVuc2lvbnN9fSxbX2MoJ2RpdicsW19jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCJSZXNvbHV0aW9uIChcIitfdm0uX3MoX3ZtLnJlc29sdXRpb24pK1wicHggXCIpLF9jKCdzcGFuJyx7ZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKCcmIzIxNTsnKX19KSxfdm0uX3YoXCIgXCIrX3ZtLl9zKF92bS5yZXNvbHV0aW9uKStcInB4KVwiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2lucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOl92bS5taW5SZXNvbHV0aW9uLFwibWF4XCI6X3ZtLm1heFJlc29sdXRpb24sXCJzdGVwXCI6XCIxXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6X3ZtLnJlc29sdXRpb259LG9uOntcImlucHV0XCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uc2V0UmVzb2x1dGlvbigkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2RpdicsW19jKCdkaXYnLFtfYygnbGFiZWwnLFtfdm0uX3YoXCJXaWR0aCAoXCIrX3ZtLl9zKF92bS5jb2xzKStcIiBDb2xzKVwiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2lucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOl92bS5taW5XaWR0aCxcIm1heFwiOl92bS5tYXhXaWR0aCxcInN0ZXBcIjpfdm0ucmVzb2x1dGlvbn0sZG9tUHJvcHM6e1widmFsdWVcIjpfdm0ud2lkdGh9LG9uOntcImlucHV0XCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uc2V0V2lkdGgoJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnZGl2JyxbX2MoJ2xhYmVsJyxbX3ZtLl92KFwiSGVpZ2h0IChcIitfdm0uX3MoX3ZtLnJvd3MpK1wiIFJvd3MpXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygnaW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJyYW5nZVwiLFwibWluXCI6X3ZtLm1pbkhlaWdodCxcIm1heFwiOl92bS5tYXhIZWlnaHQsXCJzdGVwXCI6X3ZtLnJlc29sdXRpb259LGRvbVByb3BzOntcInZhbHVlXCI6X3ZtLmhlaWdodH0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe192bS5zZXRIZWlnaHQoJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pXSldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29udHJvbEdyb3VwQ2FudmFzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03ZTI5YTk1MCZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImlubGluZS1jb250YWluZXJcIn0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImJ0blwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtyZXR1cm4gX3ZtLnRvZ2dsZSgkZXZlbnQpfX19LFsoX3ZtLmljb24pP19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJpY29uXCIsZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5pY29uKX19KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0XCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICBcIitfdm0uX3MoX3ZtLnRleHQpK1wiXFxuICAgICAgICBcIildKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9CdXR0b25Ub2dnbGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc5ZmM5NGQwJlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2RpdicsW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImJ0blwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0uYWN0aXZlID0gIV92bS5hY3RpdmV9fX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImhhbWJ1cmdlclwiLGNsYXNzOnthY3RpdmU6IF92bS5hY3RpdmV9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaG9yaXpvbnRhbC1iYXJcIn0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaG9yaXpvbnRhbC1iYXJcIn0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaG9yaXpvbnRhbC1iYXJcIn0pXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS5hY3RpdmUpLGV4cHJlc3Npb246XCJhY3RpdmVcIn1dfSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL01lbnVDb2xsYXBzaWJsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzI5ZTRjZDcmc2NvcGVkPXRydWUmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJpbmxpbmUtY29udGFpbmVyXCJ9LFtfYygnYnV0dG9uJyx7cmVmOlwiYnV0dG9uXCIsc3RhdGljQ2xhc3M6XCJidG4gYnRuLWNvbG9yLXBpY2tlclwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub3BlbiA9IHRydWV9fX0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJzd2F0Y2hcIixzdHlsZTooe2JhY2tncm91bmRDb2xvcjogX3ZtLnZhbHVlfSl9KSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS52YWx1ZSkpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS5vcGVuKSxleHByZXNzaW9uOlwib3BlblwifV0sc3RhdGljQ2xhc3M6XCJwb3B1cFwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicG9wdXAtaW5uZXJcIixzdHlsZTooe3RvcDogKF92bS55ICsgXCJweFwiKSwgbGVmdDooX3ZtLnggKyBcInB4XCIpfSl9LFtfYygnUGhvdG9zaG9wJyx7YXR0cnM6e1widmFsdWVcIjpfdm0uY29sb3IsXCJoZWFkXCI6X3ZtLnBvcHVwVGl0bGV9LG9uOntcImNhbmNlbFwiOl92bS5jYW5jZWwsXCJpbnB1dFwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmNvbG9yID0gJGV2ZW50LmhleH0sXCJva1wiOl92bS5jaG9vc2V9fSldLDEpXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0J1dHRvbkNvbG9yUGlja2VyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01MzFhMDI2YSZzY29wZWQ9dHJ1ZSZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdmaWVsZHNldCcse3N0YXRpY0NsYXNzOlwiY29udHJvbC1ncm91cFwifSxbX2MoJ2xlZ2VuZCcsW192bS5fdihfdm0uX3MoX3ZtLmxlZ2VuZCkpXSksX3ZtLl92KFwiIFwiKSxfdm0uX3QoXCJkZWZhdWx0XCIpLF92bS5fdihcIiBcIiksKF92bS5jYW5SZXNldCk/X2MoJ2RpdicsW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImJ0blwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0uJGVtaXQoJ3Jlc2V0JywgJGV2ZW50KX19fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgUmVzZXRcXG4gICAgICAgIFwiKV0pXSk6X3ZtLl9lKCldLDIpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29udHJvbEdyb3VwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yYzU5OTZkOCZcIiIsIi8qIVxuICogVnVlLmpzIHYyLjUuMTZcbiAqIChjKSAyMDE0LTIwMTggRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyB0aGVzZSBoZWxwZXJzIHByb2R1Y2VzIGJldHRlciB2bSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSBlLmcuIFtvYmplY3QgT2JqZWN0XVxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogdHlwZW9mIHZhbCA9PT0gJ29iamVjdCdcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQuLi4gZS5nLlxuICogUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHkgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmUgc2luY2UgbmF0aXZlIGJpbmQgaXNcbiAqIG5vdyBtb3JlIHBlcmZvcm1hbnQgaW4gbW9zdCBicm93c2VycywgYnV0IHJlbW92aW5nIGl0IHdvdWxkIGJlIGJyZWFraW5nIGZvclxuICogY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpbiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3JcbiAqIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKVxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyoqXG4gKiBSZXR1cm4gc2FtZSB2YWx1ZVxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0YXRpYyBrZXlzIHN0cmluZyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cblxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJ1xuXTtcblxuLyogICovXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSlcblxuLyogICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm0gfHwge307XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIHRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIHRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb25seSBvbmVcbi8vIHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkIGF0IGFueSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAoX3RhcmdldCkge1xuICBpZiAoRGVwLnRhcmdldCkgeyB0YXJnZXRTdGFjay5wdXNoKERlcC50YXJnZXQpOyB9XG4gIERlcC50YXJnZXQgPSBfdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2sucG9wKCk7XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIGF1Z21lbnQgPSBoYXNQcm90b1xuICAgICAgPyBwcm90b0F1Z21lbnRcbiAgICAgIDogY29weUF1Z21lbnQ7XG4gICAgYXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgaWYgKCFnZXR0ZXIgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiYgaXNQbGFpbk9iamVjdChmcm9tVmFsKSkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbFxufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdGhlIGh5cGhlbiwgJyArXG4gICAgICAnYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlci4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG4gIHZhciBleHRlbmRzRnJvbSA9IGNoaWxkLmV4dGVuZHM7XG4gIGlmIChleHRlbmRzRnJvbSkge1xuICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLCB2bSk7XG4gIH1cbiAgaWYgKGNoaWxkLm1peGlucykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgfVxuICB9XG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSAmJiBpc09iamVjdCh2YWx1ZSkgJiYgKCdAYmluZGluZycgaW4gdmFsdWUpKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSkgK1xuICAgICAgXCIsIGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAodm0pIHtcbiAgICB2YXIgY3VyID0gdm07XG4gICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE1lc3NhZ2VDaGFubmVsICovXG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIGJvdGggbWljcm90YXNrcyBhbmQgKG1hY3JvKSB0YXNrcy5cbi8vIEluIDwgMi40IHdlIHVzZWQgbWljcm90YXNrcyBldmVyeXdoZXJlLCBidXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zIHdoZXJlXG4vLyBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCkgb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lXG4vLyBldmVudCAoIzY1NjYpLiBIb3dldmVyLCB1c2luZyAobWFjcm8pIHRhc2tzIGV2ZXJ5d2hlcmUgYWxzbyBoYXMgc3VidGxlIHByb2JsZW1zXG4vLyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnQgKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBIZXJlIHdlIHVzZSBtaWNyb3Rhc2sgYnkgZGVmYXVsdCwgYnV0IGV4cG9zZSBhIHdheSB0byBmb3JjZSAobWFjcm8pIHRhc2sgd2hlblxuLy8gbmVlZGVkIChlLmcuIGluIGV2ZW50IGhhbmRsZXJzIGF0dGFjaGVkIGJ5IHYtb24pLlxudmFyIG1pY3JvVGltZXJGdW5jO1xudmFyIG1hY3JvVGltZXJGdW5jO1xudmFyIHVzZU1hY3JvVGFzayA9IGZhbHNlO1xuXG4vLyBEZXRlcm1pbmUgKG1hY3JvKSB0YXNrIGRlZmVyIGltcGxlbWVudGF0aW9uLlxuLy8gVGVjaG5pY2FsbHkgc2V0SW1tZWRpYXRlIHNob3VsZCBiZSB0aGUgaWRlYWwgY2hvaWNlLCBidXQgaXQncyBvbmx5IGF2YWlsYWJsZVxuLy8gaW4gSUUuIFRoZSBvbmx5IHBvbHlmaWxsIHRoYXQgY29uc2lzdGVudGx5IHF1ZXVlcyB0aGUgY2FsbGJhY2sgYWZ0ZXIgYWxsIERPTVxuLy8gZXZlbnRzIHRyaWdnZXJlZCBpbiB0aGUgc2FtZSBsb29wIGlzIGJ5IHVzaW5nIE1lc3NhZ2VDaGFubmVsLlxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTWVzc2FnZUNoYW5uZWwpIHx8XG4gIC8vIFBoYW50b21KU1xuICBNZXNzYWdlQ2hhbm5lbC50b1N0cmluZygpID09PSAnW29iamVjdCBNZXNzYWdlQ2hhbm5lbENvbnN0cnVjdG9yXSdcbikpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgdmFyIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoQ2FsbGJhY2tzO1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwb3J0LnBvc3RNZXNzYWdlKDEpO1xuICB9O1xufSBlbHNlIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgbWFjcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbi8vIERldGVybWluZSBtaWNyb3Rhc2sgZGVmZXIgaW1wbGVtZW50YXRpb24uXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIG1pY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gaW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gZmFsbGJhY2sgdG8gbWFjcm9cbiAgbWljcm9UaW1lckZ1bmMgPSBtYWNyb1RpbWVyRnVuYztcbn1cblxuLyoqXG4gKiBXcmFwIGEgZnVuY3Rpb24gc28gdGhhdCBpZiBhbnkgY29kZSBpbnNpZGUgdHJpZ2dlcnMgc3RhdGUgY2hhbmdlLFxuICogdGhlIGNoYW5nZXMgYXJlIHF1ZXVlZCB1c2luZyBhIChtYWNybykgdGFzayBpbnN0ZWFkIG9mIGEgbWljcm90YXNrLlxuICovXG5mdW5jdGlvbiB3aXRoTWFjcm9UYXNrIChmbikge1xuICByZXR1cm4gZm4uX3dpdGhUYXNrIHx8IChmbi5fd2l0aFRhc2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdXNlTWFjcm9UYXNrID0gdHJ1ZTtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB1c2VNYWNyb1Rhc2sgPSBmYWxzZTtcbiAgICByZXR1cm4gcmVzXG4gIH0pXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgaWYgKHVzZU1hY3JvVGFzaykge1xuICAgICAgbWFjcm9UaW1lckZ1bmMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWljcm9UaW1lckZ1bmMoKTtcbiAgICB9XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHwga2V5LmNoYXJBdCgwKSA9PT0gJ18nO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbG9uZWRbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGZucy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50Lm9uY2UsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY29udGV4dFxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LmNvbnRleHRzKSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3RvcnkuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGV4dHMgPSBmYWN0b3J5LmNvbnRleHRzID0gW2NvbnRleHRdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29udGV4dHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnRleHRzW2ldLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAodHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKHJlcy5jb21wb25lbnQpICYmIHR5cGVvZiByZXMuY29tcG9uZW50LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuLCBvbmNlKSB7XG4gIGlmIChvbmNlKSB7XG4gICAgdGFyZ2V0LiRvbmNlKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzJDEuJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMkMS4kb2ZmKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKGZuKSB7XG4gICAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgICB2YXIgY2I7XG4gICAgICB2YXIgaSQxID0gY2JzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpJDEtLSkge1xuICAgICAgICBjYiA9IGNic1tpJDFdO1xuICAgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICAgIGNicy5zcGxpY2UoaSQxLCAxKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2JzW2ldLmFwcGx5KHZtLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIHZhciBzbG90cyA9IHt9O1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlc1xuKSB7XG4gIHJlcyA9IHJlcyB8fCB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnNbaV0pKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoZm5zW2ldLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbZm5zW2ldLmtleV0gPSBmbnNbaV0uZm47XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgIH1cbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18oXG4gICAgICAgIHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3JlZkVsbVxuICAgICAgKTtcbiAgICAgIC8vIG5vIG5lZWQgZm9yIHRoZSByZWYgbm9kZXMgYWZ0ZXIgaW5pdGlhbCBwYXRjaFxuICAgICAgLy8gdGhpcyBwcmV2ZW50cyBrZWVwaW5nIGEgZGV0YWNoZWQgRE9NIHRyZWUgaW4gbWVtb3J5ICgjNTg1MSlcbiAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRFbG0gPSB2bS4kb3B0aW9ucy5fcmVmRWxtID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIG51bGwsIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW5cbiAgdmFyIGhhc0NoaWxkcmVuID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzIHx8IC8vIGhhcyBuZXcgc2NvcGVkIHNsb3RzXG4gICAgdm0uJHNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAvLyBoYXMgb2xkIHNjb3BlZCBzbG90c1xuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGhhbmRsZXJzW2ldLmNhbGwodm0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHVpZCQxID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQxOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzJDEubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzJDEuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMkMS5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS4kcGFyZW50ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiB1c2VyRGVmO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiB1c2VyRGVmLmdldFxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldFxuICAgICAgPyB1c2VyRGVmLnNldFxuICAgICAgOiBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbiB1bmRlZmluZWQgdmFsdWUgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSBtZXRob2RzW2tleV0gPT0gbnVsbCA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAobmV3RGF0YSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGluamVjdCwga2V5KS5lbnVtZXJhYmxlXG4gICAgICB9KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNEZWYocmV0KSkge1xuICAgIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xvdE5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV07XG4gICAgLy8gd2FybiBkdXBsaWNhdGUgc2xvdCB1c2FnZVxuICAgIGlmIChzbG90Tm9kZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNsb3ROb2Rlcy5fcmVuZGVyZWQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBzbG90IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZm91bmQgaW4gdGhlIHNhbWUgcmVuZGVyIHRyZWUgXCIgK1xuICAgICAgICAgIFwiLSB0aGlzIHdpbGwgbGlrZWx5IGNhdXNlIHJlbmRlciBlcnJvcnMuXCIsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCA9IHRydWU7XG4gICAgfVxuICAgIG5vZGVzID0gc2xvdE5vZGVzIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICB9XG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluS2V5Q29kZSxcbiAgZXZlbnRLZXlOYW1lLFxuICBidWlsdEluS2V5TmFtZVxuKSB7XG4gIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpOyB9O1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBkYXRhLnNjb3BlZFNsb3RzIHx8IGVtcHR5T2JqZWN0O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cblxuXG5cbi8vIFJlZ2lzdGVyIHRoZSBjb21wb25lbnQgaG9vayB0byB3ZWV4IG5hdGl2ZSByZW5kZXIgZW5naW5lLlxuLy8gVGhlIGhvb2sgd2lsbCBiZSB0cmlnZ2VyZWQgYnkgbmF0aXZlLCBub3QgamF2YXNjcmlwdC5cblxuXG4vLyBVcGRhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50IHRvIHdlZXggbmF0aXZlIHJlbmRlciBlbmdpbmUuXG5cbi8qICAqL1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vSGFua3MxMDEwMC93ZWV4LW5hdGl2ZS1kaXJlY3RpdmUvdHJlZS9tYXN0ZXIvY29tcG9uZW50XG5cbi8vIGxpc3RlbmluZyBvbiBuYXRpdmUgY2FsbGJhY2tcblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKFxuICAgIHZub2RlLFxuICAgIGh5ZHJhdGluZyxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtXG4gICkge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZSxcbiAgICAgICAgcGFyZW50RWxtLFxuICAgICAgICByZWZFbG1cbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yLCBjb250ZXh0KTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgLy8gV2VleCBzcGVjaWZpYzogaW52b2tlIHJlY3ljbGUtbGlzdCBvcHRpbWl6ZWQgQHJlbmRlciBmdW5jdGlvbiBmb3JcbiAgLy8gZXh0cmFjdGluZyBjZWxsLXNsb3QgdGVtcGxhdGUuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9IYW5rczEwMTAwL3dlZXgtbmF0aXZlLWRpcmVjdGl2ZS90cmVlL21hc3Rlci9jb21wb25lbnRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQsIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICBwYXJlbnRFbG0sXG4gIHJlZkVsbVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIF9wYXJlbnRFbG06IHBhcmVudEVsbSB8fCBudWxsLFxuICAgIF9yZWZFbG06IHJlZkVsbSB8fCBudWxsXG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICBob29rc1trZXldID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICB9XG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCc7KGRhdGEucHJvcHMgfHwgKGRhdGEucHJvcHMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgaWYgKGlzRGVmKG9uW2V2ZW50XSkpIHtcbiAgICBvbltldmVudF0gPSBbZGF0YS5tb2RlbC5jYWxsYmFja10uY29uY2F0KG9uW2V2ZW50XSk7XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICAvLyByZXNldCBfcmVuZGVyZWQgZmxhZyBvbiBzbG90cyBmb3IgZHVwbGljYXRlIHNsb3QgY2hlY2tcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRzbG90cykge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgdm0uJHNsb3RzW2tleV0uX3JlbmRlcmVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMgfHwgZW1wdHlPYmplY3Q7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgb3B0cy5fcGFyZW50RWxtID0gb3B0aW9ucy5fcGFyZW50RWxtO1xuICBvcHRzLl9yZWZFbG0gPSBvcHRpb25zLl9yZWZFbG07XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgZXh0ZW5kZWQgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBkZWR1cGUobGF0ZXN0W2tleV0sIGV4dGVuZGVkW2tleV0sIHNlYWxlZFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIGRlZHVwZSAobGF0ZXN0LCBleHRlbmRlZCwgc2VhbGVkKSB7XG4gIC8vIGNvbXBhcmUgbGF0ZXN0IGFuZCBzZWFsZWQgdG8gZW5zdXJlIGxpZmVjeWNsZSBob29rcyB3b24ndCBiZSBkdXBsaWNhdGVkXG4gIC8vIGJldHdlZW4gbWVyZ2VzXG4gIGlmIChBcnJheS5pc0FycmF5KGxhdGVzdCkpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgc2VhbGVkID0gQXJyYXkuaXNBcnJheShzZWFsZWQpID8gc2VhbGVkIDogW3NlYWxlZF07XG4gICAgZXh0ZW5kZWQgPSBBcnJheS5pc0FycmF5KGV4dGVuZGVkKSA/IGV4dGVuZGVkIDogW2V4dGVuZGVkXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGVzdC5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gcHVzaCBvcmlnaW5hbCBvcHRpb25zIGFuZCBub3Qgc2VhbGVkIG9wdGlvbnMgdG8gZXhjbHVkZSBkdXBsaWNhdGVkIG9wdGlvbnNcbiAgICAgIGlmIChleHRlbmRlZC5pbmRleE9mKGxhdGVzdFtpXSkgPj0gMCB8fCBzZWFsZWQuaW5kZXhPZihsYXRlc3RbaV0pIDwgMCkge1xuICAgICAgICByZXMucHVzaChsYXRlc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxhdGVzdFxuICB9XG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzJDEuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzJDEuY2FjaGUsIGtleSwgdGhpcyQxLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn1cblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi41LjE2JztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cblxuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cblxudmFyIG5vZGVPcHMgPSBPYmplY3QuZnJlZXplKHtcblx0Y3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuXHRjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcblx0Y3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuXHRjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuXHRpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcblx0cmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuXHRhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG5cdHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG5cdG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcblx0dGFnTmFtZTogdGFnTmFtZSxcblx0c2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuXHRzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmVcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8sIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChyZWYkJDEucGFyZW50Tm9kZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5LCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtJDEgPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSQxLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0kMSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtJDEsIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJyA/ICdmYWxzZScgOiAndHJ1ZScpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuXG5cblxuXG5cblxuXG5cbi8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKVxuXG5cblxuXG5cblxuXG5cbi8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbi8vIGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCBieSBwcm9jZXNzQXR0cnMuXG4vLyBCeSBkZWZhdWx0IGl0IGRvZXMgTk9UIHJlbW92ZSBpdCBmcm9tIHRoZSBtYXAgKGF0dHJzTWFwKSBiZWNhdXNlIHRoZSBtYXAgaXNcbi8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cblxuLyogICovXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICovXG5cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlZ2VuIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB2LW1vZGVsIHZhbHVlIGFzc2lnbm1lbnQgY29kZS5cbiAqL1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoaGFuZGxlciwgZXZlbnQsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIG9uY2UkJDEsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICBoYW5kbGVyID0gd2l0aE1hY3JvVGFzayhoYW5kbGVyKTtcbiAgaWYgKG9uY2UkJDEpIHsgaGFuZGxlciA9IGNyZWF0ZU9uY2VIYW5kbGVyKGhhbmRsZXIsIGV2ZW50LCBjYXB0dXJlKTsgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIuX3dpdGhUYXNrIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmIChpc1VuZGVmKHByb3BzW2tleV0pKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLmxhenkpIHtcbiAgICAgIC8vIGlucHV0cyB3aXRoIGxhenkgc2hvdWxkIG9ubHkgYmUgdXBkYXRlZCB3aGVuIG5vdCBpbiBmb2N1c1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn1cblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZi5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl1cblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufVxuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGEgc2luZ2xlIGVsZW1lbnQvY29tcG9uZW50LlxuLy8gc3VwcG9ydHMgdHJhbnNpdGlvbiBtb2RlIChvdXQtaW4gLyBpbi1vdXQpXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9KTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH0pKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn1cblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgbGlzdCBpdGVtcy5cbi8vIHN1cHBvcnRzIG1vdmUgdHJhbnNpdGlvbnMgdXNpbmcgdGhlIEZMSVAgdGVjaG5pcXVlLlxuXG4vLyBCZWNhdXNlIHRoZSB2ZG9tJ3MgY2hpbGRyZW4gdXBkYXRlIGFsZ29yaXRobSBpcyBcInVuc3RhYmxlXCIgLSBpLmUuXG4vLyBpdCBkb2Vzbid0IGd1YXJhbnRlZSB0aGUgcmVsYXRpdmUgcG9zaXRpb25pbmcgb2YgcmVtb3ZlZCBlbGVtZW50cyxcbi8vIHdlIGZvcmNlIHRyYW5zaXRpb24tZ3JvdXAgdG8gdXBkYXRlIGl0cyBjaGlsZHJlbiBpbnRvIHR3byBwYXNzZXM6XG4vLyBpbiB0aGUgZmlyc3QgcGFzcywgd2UgcmVtb3ZlIGFsbCBub2RlcyB0aGF0IG5lZWQgdG8gYmUgcmVtb3ZlZCxcbi8vIHRyaWdnZXJpbmcgdGhlaXIgbGVhdmluZyB0cmFuc2l0aW9uOyBpbiB0aGUgc2Vjb25kIHBhc3MsIHdlIGluc2VydC9tb3ZlXG4vLyBpbnRvIHRoZSBmaW5hbCBkZXNpcmVkIHN0YXRlLiBUaGlzIHdheSBpbiB0aGUgc2Vjb25kIHBhc3MgcmVtb3ZlZFxuLy8gbm9kZXMgd2lsbCByZW1haW4gd2hlcmUgdGhleSBzaG91bGQgYmUuXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSAoKSB7XG4gICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgIHRoaXMuX19wYXRjaF9fKFxuICAgICAgdGhpcy5fdm5vZGUsXG4gICAgICB0aGlzLmtlcHQsXG4gICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICApO1xuICAgIHRoaXMuX3Zub2RlID0gdGhpcy5rZXB0O1xuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgaXNDaHJvbWVcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsImV4cG9ydCBjb25zdCBjb29yZFRvUGl4ZWwgPSAoeCwgeSwgd2lkdGgpID0+IHggKyAoeSAqIHdpZHRoKTtcblxuZXhwb3J0IGNvbnN0IHBpeGVsVG9Db29yZCA9IChwaXhlbCwgd2lkdGgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwaXhlbCAlIHdpZHRoLFxuICAgICAgICB5OiBNYXRoLmZsb29yKHBpeGVsIC8gd2lkdGgpXG4gICAgfVxufTtcbiIsImltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3Jlcyc7XG5pbXBvcnQgTWFpbkFwcCBmcm9tICcuL2NvbXBvbmVudHMvTWFpbkFwcC52dWUnO1xuaW1wb3J0ICcuLi9jc3MvYXBwLmNzcyc7XG5cbm5ldyBWdWUoe1xuICAgIGVsOiAnI2FwcCcsXG4gICAgc3RvcmUsXG4gICAgcmVuZGVyOiBoID0+IGgoTWFpbkFwcClcbn0pO1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFZ1ZXggZnJvbSAndnVleCc7XG5pbXBvcnQgaGVhdG1hcCBmcm9tICcuL2hlYXRtYXAnO1xuaW1wb3J0IGNhbnZhcyBmcm9tICcuL2NhbnZhcyc7XG5pbXBvcnQgc2FuZCBmcm9tICcuL3NhbmQnO1xuXG5WdWUudXNlKFZ1ZXgpO1xuXG5jb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHtcbiAgICBzdHJpY3Q6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG4gICAgbW9kdWxlczoge1xuICAgICAgICBjYW52YXMsXG4gICAgICAgIGhlYXRtYXAsXG4gICAgICAgIHNhbmRcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3RvcmU7IiwiY29uc3QgSU5JVElBTF9TVEFURSA9IHtcbiAgICBjb2xvcjA6ICcjMzI4OGJkJyxcbiAgICBjb2xvcjE6ICcjOTlkNTk0JyxcbiAgICBjb2xvcjI6ICcjZmVlMDhiJyxcbiAgICBjb2xvcjM6ICcjZDUzZTRmJyxcbn07XG5cbmNvbnN0IHN0YXRlID0gKCkgPT4gKHtcbiAgICAuLi5JTklUSUFMX1NUQVRFLFxufSk7XG5cbmNvbnN0IG11dGF0aW9ucyA9IHtcbiAgICB1cGRhdGVDb2xvcjogKHN0YXRlLCB7c3RlcCwgY29sb3J9KSA9PiBzdGF0ZVtzdGVwXSA9IGNvbG9yLFxuICAgIHJlc2V0Q29sb3JzOiBzdGF0ZSA9PiBPYmplY3Qua2V5cyhJTklUSUFMX1NUQVRFKS5mb3JFYWNoKGtleSA9PiBzdGF0ZVtrZXldID0gSU5JVElBTF9TVEFURVtrZXldKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lc3BhY2VkOiB0cnVlLFxuICAgIHN0YXRlLFxuICAgIG11dGF0aW9ucyxcbn1cbiIsImNvbnN0IERJTUVOU0lPTlMgPSB7XG4gICAgbWluOiAyNTAsXG4gICAgbWF4OiA4MDAsXG4gICAgZGVmYXVsdDogMzI1LFxufTtcblxuY29uc3QgUkVTT0xVVElPTiA9IHtcbiAgICBtaW46IDUsXG4gICAgbWF4OiAxNSxcbiAgICBkZWZhdWx0OiA1LFxufVxuXG5jb25zdCBJTklUSUFMX1NUQVRFID0ge1xuICAgIHdpZHRoOiBESU1FTlNJT05TLmRlZmF1bHQsXG4gICAgaGVpZ2h0OiBESU1FTlNJT05TLmRlZmF1bHQsXG4gICAgcmVzb2x1dGlvbjogUkVTT0xVVElPTi5kZWZhdWx0LFxufTtcblxuY29uc3Qgc3RhdGUgPSAoKSA9PiAoe1xuICAgIC4uLklOSVRJQUxfU1RBVEVcbn0pO1xuXG5jb25zdCBtdXRhdGlvbnMgPSB7XG4gICAgc2V0V2lkdGg6IChzdGF0ZSwgd2lkdGgpID0+IHN0YXRlLndpZHRoID0gcGFyc2VJbnQod2lkdGgsIDEwKSxcbiAgICBzZXRIZWlnaHQ6IChzdGF0ZSwgaGVpZ2h0KSA9PiBzdGF0ZS5oZWlnaHQgPSBwYXJzZUludChoZWlnaHQsIDEwKSxcbiAgICBzZXRSZXNvbHV0aW9uOiAoc3RhdGUsIHJlc29sdXRpb24pID0+IHN0YXRlLnJlc29sdXRpb24gPSBwYXJzZUludChyZXNvbHV0aW9uKSxcbiAgICByZXNldERpbWVuc2lvbnM6IHN0YXRlID0+IE9iamVjdC5rZXlzKElOSVRJQUxfU1RBVEUpLmZvckVhY2goa2V5ID0+IHN0YXRlW2tleV0gPSBJTklUSUFMX1NUQVRFW2tleV0pLFxufTtcblxuY29uc3QgZ2V0dGVycyA9IHtcbiAgICBjb2xzOiBzdGF0ZSA9PiBNYXRoLmZsb29yKHN0YXRlLndpZHRoIC8gc3RhdGUucmVzb2x1dGlvbiksXG4gICAgcm93czogc3RhdGUgPT4gTWF0aC5mbG9vcihzdGF0ZS5oZWlnaHQgLyBzdGF0ZS5yZXNvbHV0aW9uKSxcbiAgICBtaW5XaWR0aDogKHN0YXRlKSA9PiB7XG4gICAgICAgIGxldCBtaW5XaWR0aCA9IERJTUVOU0lPTlMubWluO1xuICAgICAgICBsZXQgbWluQ29scyA9IE1hdGguZmxvb3IobWluV2lkdGggLyBzdGF0ZS5yZXNvbHV0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChtaW5Db2xzICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgbWluV2lkdGggKz0gc3RhdGUucmVzb2x1dGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtaW5XaWR0aDtcbiAgICB9LFxuICAgIG1heFdpZHRoOiAoc3RhdGUpID0+IHtcbiAgICAgICAgbGV0IG1heFdpZHRoID0gRElNRU5TSU9OUy5tYXg7XG4gICAgICAgIGxldCBtYXhDb2xzID0gTWF0aC5mbG9vcihtYXhXaWR0aCAvIHN0YXRlLnJlc29sdXRpb24pO1xuICAgICAgICBcbiAgICAgICAgaWYgKG1heENvbHMgJSAyID09PSAwKSB7XG4gICAgICAgICAgICBtYXhXaWR0aCArPSBzdGF0ZS5yZXNvbHV0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1heFdpZHRoO1xuICAgIH0sXG4gICAgbWluSGVpZ2h0OiAoc3RhdGUpID0+IHtcbiAgICAgICAgbGV0IG1pbkhlaWdodCA9IERJTUVOU0lPTlMubWluO1xuICAgICAgICBsZXQgbWluQ29scyA9IE1hdGguZmxvb3IobWluSGVpZ2h0IC8gc3RhdGUucmVzb2x1dGlvbik7XG4gICAgICAgIFxuICAgICAgICBpZiAobWluQ29scyAlIDIgPT09IDApIHtcbiAgICAgICAgICAgIG1pbkhlaWdodCArPSBzdGF0ZS5yZXNvbHV0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1pbkhlaWdodDtcbiAgICB9LFxuICAgIG1heEhlaWdodDogKHN0YXRlKSA9PiB7XG4gICAgICAgIGxldCBtYXhIZWlnaHQgPSBESU1FTlNJT05TLm1heDtcbiAgICAgICAgbGV0IG1heENvbHMgPSBNYXRoLmZsb29yKG1heEhlaWdodCAvIHN0YXRlLnJlc29sdXRpb24pO1xuICAgICAgICBcbiAgICAgICAgaWYgKG1heENvbHMgJSAyID09PSAwKSB7XG4gICAgICAgICAgICBtYXhIZWlnaHQgKz0gc3RhdGUucmVzb2x1dGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXhIZWlnaHQ7XG4gICAgfSxcbiAgICBtaW5SZXNvbHV0aW9uOiAoc3RhdGUpID0+IFJFU09MVVRJT04ubWluLFxuICAgIG1heFJlc29sdXRpb246IChzdGF0ZSkgPT4gUkVTT0xVVElPTi5tYXgsXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lc3BhY2VkOiB0cnVlLFxuICAgIHN0YXRlLFxuICAgIG11dGF0aW9ucyxcbiAgICBnZXR0ZXJzLFxufVxuIiwiY29uc3QgSU5JVElBTF9TVEFURSA9IHtcbiAgICBiYXNlU2FuZDogMCxcbiAgICBzdGFydGluZ1NhbmQ6IDEwMDAsXG59O1xuXG5jb25zdCBzdGF0ZSA9ICgpID0+ICh7XG4gICAgLi4uSU5JVElBTF9TVEFURSxcbiAgICBzYW5kOiBbXSxcbn0pO1xuXG5jb25zdCBtdXRhdGlvbnMgPSB7XG4gICAgc2V0QmFzZVNhbmQ6IChzdGF0ZSwgYW1vdW50KSA9PiBzdGF0ZS5iYXNlU2FuZCA9IHBhcnNlSW50KGFtb3VudCwgMTApLFxuICAgIHNldFN0YXJ0aW5nU2FuZDogKHN0YXRlLCBhbW91bnQpID0+IHN0YXRlLnN0YXJ0aW5nU2FuZCA9IHBhcnNlSW50KGFtb3VudCwgMTApLFxuICAgIHJlc2V0U2FuZDogc3RhdGUgPT4gT2JqZWN0LmtleXMoSU5JVElBTF9TVEFURSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBzdGF0ZVtrZXldID0gSU5JVElBTF9TVEFURVtrZXldO1xuICAgIH0pLFxuICAgIHNldFNhbmQ6IChzdGF0ZSwgc2FuZCkgPT4gc3RhdGUuc2FuZCA9IHNhbmQsXG4gICAgdXBkYXRlU2FuZDogKHN0YXRlLCB7aWR4LCBhbW91bnR9KSA9PiBzdGF0ZS5zYW5kLnNwbGljZShpZHgsIDEsIGFtb3VudCksXG59O1xuXG5jb25zdCBnZXR0ZXJzID0ge1xuICAgIHNhbmRUb3RhbDogc3RhdGUgPT4gc3RhdGUuc2FuZC5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MgKyB2YWwsIDApLFxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZXNwYWNlZDogdHJ1ZSxcbiAgICBzdGF0ZSxcbiAgICBtdXRhdGlvbnMsXG4gICAgZ2V0dGVycyxcbn1cbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTWFpbkFwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NDI2MzM4Yjgmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTWFpbkFwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL01haW5BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL01haW5BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NDI2MzM4Yjgmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjQyNjMzOGI4XCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9CdXR0b25Ub2dnbGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc5ZmM5NGQwJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0J1dHRvblRvZ2dsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0J1dHRvblRvZ2dsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ2FudmFzUm9vdC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OTUxM2E3YzYmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ2FudmFzUm9vdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0NhbnZhc1Jvb3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnNcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ2FudmFzR3JpZEhlYXRNYXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9DYW52YXNHcmlkSGVhdE1hcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ29udHJvbEdyb3VwU2FuZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9M2YzM2MyMWMmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ29udHJvbEdyb3VwU2FuZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0NvbnRyb2xHcm91cFNhbmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0NvbnRyb2xHcm91cEhlYXRtYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTI4NTI2NDEzJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0NvbnRyb2xHcm91cEhlYXRtYXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Db250cm9sR3JvdXBIZWF0bWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9CdXR0b25Db2xvclBpY2tlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTMxYTAyNmEmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQnV0dG9uQ29sb3JQaWNrZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9CdXR0b25Db2xvclBpY2tlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vQnV0dG9uQ29sb3JQaWNrZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTMxYTAyNmEmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjUzMWEwMjZhXCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5WdWVDb2xvcj10KCk6ZS5WdWVDb2xvcj10KCl9KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChyKXtpZihuW3JdKXJldHVybiBuW3JdLmV4cG9ydHM7dmFyIGE9bltyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChhLmV4cG9ydHMsYSxhLmV4cG9ydHMsdCksYS5sPSEwLGEuZXhwb3J0c312YXIgbj17fTtyZXR1cm4gdC5tPWUsdC5jPW4sdC5kPWZ1bmN0aW9uKGUsbixyKXt0Lm8oZSxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sdC5uPWZ1bmN0aW9uKGUpe3ZhciBuPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQobixcImFcIixuKSxufSx0Lm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHQucD1cIlwiLHQodC5zPTIyKX0oW2Z1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbihlLHQpe3ZhciBuPWVbMV18fFwiXCIsYT1lWzNdO2lmKCFhKXJldHVybiBuO2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBpPXIoYSk7cmV0dXJuW25dLmNvbmNhdChhLnNvdXJjZXMubWFwKGZ1bmN0aW9uKGUpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIithLnNvdXJjZVJvb3QrZStcIiAqL1wifSkpLmNvbmNhdChbaV0pLmpvaW4oXCJcXG5cIil9cmV0dXJuW25dLmpvaW4oXCJcXG5cIil9ZnVuY3Rpb24gcihlKXtyZXR1cm5cIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShlKSkpKStcIiAqL1wifWUuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbih0KXt2YXIgcj1uKHQsZSk7cmV0dXJuIHRbMl0/XCJAbWVkaWEgXCIrdFsyXStcIntcIityK1wifVwiOnJ9KS5qb2luKFwiXCIpfSx0Lmk9ZnVuY3Rpb24oZSxuKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9W1tudWxsLGUsXCJcIl1dKTtmb3IodmFyIHI9e30sYT0wO2E8dGhpcy5sZW5ndGg7YSsrKXt2YXIgaT10aGlzW2FdWzBdO1wibnVtYmVyXCI9PXR5cGVvZiBpJiYocltpXT0hMCl9Zm9yKGE9MDthPGUubGVuZ3RoO2ErKyl7dmFyIG89ZVthXTtcIm51bWJlclwiPT10eXBlb2Ygb1swXSYmcltvWzBdXXx8KG4mJiFvWzJdP29bMl09bjpuJiYob1syXT1cIihcIitvWzJdK1wiKSBhbmQgKFwiK24rXCIpXCIpLHQucHVzaChvKSl9fSx0fX0sZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciBuPWVbdF0scj11W24uaWRdO2lmKHIpe3IucmVmcysrO2Zvcih2YXIgYT0wO2E8ci5wYXJ0cy5sZW5ndGg7YSsrKXIucGFydHNbYV0obi5wYXJ0c1thXSk7Zm9yKDthPG4ucGFydHMubGVuZ3RoO2ErKylyLnBhcnRzLnB1c2goaShuLnBhcnRzW2FdKSk7ci5wYXJ0cy5sZW5ndGg+bi5wYXJ0cy5sZW5ndGgmJihyLnBhcnRzLmxlbmd0aD1uLnBhcnRzLmxlbmd0aCl9ZWxzZXtmb3IodmFyIG89W10sYT0wO2E8bi5wYXJ0cy5sZW5ndGg7YSsrKW8ucHVzaChpKG4ucGFydHNbYV0pKTt1W24uaWRdPXtpZDpuLmlkLHJlZnM6MSxwYXJ0czpvfX19fWZ1bmN0aW9uIGEoKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIGUudHlwZT1cInRleHQvY3NzXCIsZC5hcHBlbmRDaGlsZChlKSxlfWZ1bmN0aW9uIGkoZSl7dmFyIHQsbixyPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlW2RhdGEtdnVlLXNzci1pZH49XCInK2UuaWQrJ1wiXScpO2lmKHIpe2lmKHApcmV0dXJuIHY7ci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHIpfWlmKGcpe3ZhciBpPWYrKztyPWh8fChoPWEoKSksdD1vLmJpbmQobnVsbCxyLGksITEpLG49by5iaW5kKG51bGwscixpLCEwKX1lbHNlIHI9YSgpLHQ9cy5iaW5kKG51bGwsciksbj1mdW5jdGlvbigpe3IucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKX07cmV0dXJuIHQoZSksZnVuY3Rpb24ocil7aWYocil7aWYoci5jc3M9PT1lLmNzcyYmci5tZWRpYT09PWUubWVkaWEmJnIuc291cmNlTWFwPT09ZS5zb3VyY2VNYXApcmV0dXJuO3QoZT1yKX1lbHNlIG4oKX19ZnVuY3Rpb24gbyhlLHQsbixyKXt2YXIgYT1uP1wiXCI6ci5jc3M7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PWIodCxhKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGEpLG89ZS5jaGlsZE5vZGVzO29bdF0mJmUucmVtb3ZlQ2hpbGQob1t0XSksby5sZW5ndGg/ZS5pbnNlcnRCZWZvcmUoaSxvW3RdKTplLmFwcGVuZENoaWxkKGkpfX1mdW5jdGlvbiBzKGUsdCl7dmFyIG49dC5jc3Mscj10Lm1lZGlhLGE9dC5zb3VyY2VNYXA7aWYociYmZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLHIpLGEmJihuKz1cIlxcbi8qIyBzb3VyY2VVUkw9XCIrYS5zb3VyY2VzWzBdK1wiICovXCIsbis9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGEpKSkpK1wiICovXCIpLGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD1uO2Vsc2V7Zm9yKDtlLmZpcnN0Q2hpbGQ7KWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKTtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKX19dmFyIGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50O2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBERUJVRyYmREVCVUcmJiFjKXRocm93IG5ldyBFcnJvcihcInZ1ZS1zdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudC4gVXNlIHsgdGFyZ2V0OiAnbm9kZScgfSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnIHRvIGluZGljYXRlIGEgc2VydmVyLXJlbmRlcmluZyBlbnZpcm9ubWVudC5cIik7dmFyIGw9bigyNiksdT17fSxkPWMmJihkb2N1bWVudC5oZWFkfHxkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0pLGg9bnVsbCxmPTAscD0hMSx2PWZ1bmN0aW9uKCl7fSxnPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJi9tc2llIFs2LTldXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtwPW47dmFyIGE9bChlLHQpO3JldHVybiByKGEpLGZ1bmN0aW9uKHQpe2Zvcih2YXIgbj1bXSxpPTA7aTxhLmxlbmd0aDtpKyspe3ZhciBvPWFbaV0scz11W28uaWRdO3MucmVmcy0tLG4ucHVzaChzKX10PyhhPWwoZSx0KSxyKGEpKTphPVtdO2Zvcih2YXIgaT0wO2k8bi5sZW5ndGg7aSsrKXt2YXIgcz1uW2ldO2lmKDA9PT1zLnJlZnMpe2Zvcih2YXIgYz0wO2M8cy5wYXJ0cy5sZW5ndGg7YysrKXMucGFydHNbY10oKTtkZWxldGUgdVtzLmlkXX19fX07dmFyIGI9ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gZnVuY3Rpb24odCxuKXtyZXR1cm4gZVt0XT1uLGUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9fSgpfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixyLGEsaSl7dmFyIG8scz1lPWV8fHt9LGM9dHlwZW9mIGUuZGVmYXVsdDtcIm9iamVjdFwiIT09YyYmXCJmdW5jdGlvblwiIT09Y3x8KG89ZSxzPWUuZGVmYXVsdCk7dmFyIGw9XCJmdW5jdGlvblwiPT10eXBlb2Ygcz9zLm9wdGlvbnM6czt0JiYobC5yZW5kZXI9dC5yZW5kZXIsbC5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsbC5fY29tcGlsZWQ9ITApLG4mJihsLmZ1bmN0aW9uYWw9ITApLGEmJihsLl9zY29wZUlkPWEpO3ZhciB1O2lmKGk/KHU9ZnVuY3Rpb24oZSl7ZT1lfHx0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dHx8dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LiR2bm9kZSYmdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQsZXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fChlPV9fVlVFX1NTUl9DT05URVhUX18pLHImJnIuY2FsbCh0aGlzLGUpLGUmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQoaSl9LGwuX3NzclJlZ2lzdGVyPXUpOnImJih1PXIpLHUpe3ZhciBkPWwuZnVuY3Rpb25hbCxoPWQ/bC5yZW5kZXI6bC5iZWZvcmVDcmVhdGU7ZD8obC5faW5qZWN0U3R5bGVzPXUsbC5yZW5kZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdS5jYWxsKHQpLGgoZSx0KX0pOmwuYmVmb3JlQ3JlYXRlPWg/W10uY29uY2F0KGgsdSk6W3VdfXJldHVybntlc01vZHVsZTpvLGV4cG9ydHM6cyxvcHRpb25zOmx9fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSx0KXt2YXIgbixyPWUmJmUuYTshKG49ZSYmZS5oc2w/KDAsaS5kZWZhdWx0KShlLmhzbCk6ZSYmZS5oZXgmJmUuaGV4Lmxlbmd0aD4wPygwLGkuZGVmYXVsdCkoZS5oZXgpOigwLGkuZGVmYXVsdCkoZSkpfHx2b2lkIDAhPT1uLl9hJiZudWxsIT09bi5fYXx8bi5zZXRBbHBoYShyfHwxKTt2YXIgYT1uLnRvSHNsKCksbz1uLnRvSHN2KCk7cmV0dXJuIDA9PT1hLnMmJihvLmg9YS5oPWUuaHx8ZS5oc2wmJmUuaHNsLmh8fHR8fDApLHtoc2w6YSxoZXg6bi50b0hleFN0cmluZygpLnRvVXBwZXJDYXNlKCkscmdiYTpuLnRvUmdiKCksaHN2Om8sb2xkSHVlOmUuaHx8dHx8YS5oLHNvdXJjZTplLnNvdXJjZSxhOmUuYXx8bi5nZXRBbHBoYSgpfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1uKDI3KSxpPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0oYSk7dC5kZWZhdWx0PXtwcm9wczpbXCJ2YWx1ZVwiXSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3ZhbDpyKHRoaXMudmFsdWUpfX0sY29tcHV0ZWQ6e2NvbG9yczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy52YWw9ZSx0aGlzLiRlbWl0KFwiaW5wdXRcIixlKX19fSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy52YWw9cihlKX19LG1ldGhvZHM6e2NvbG9yQ2hhbmdlOmZ1bmN0aW9uKGUsdCl7dGhpcy5vbGRIdWU9dGhpcy5jb2xvcnMuaHNsLmgsdGhpcy5jb2xvcnM9cihlLHR8fHRoaXMub2xkSHVlKX0saXNWYWxpZEhleDpmdW5jdGlvbihlKXtyZXR1cm4oMCxpLmRlZmF1bHQpKGUpLmlzVmFsaWQoKX0sc2ltcGxlQ2hlY2tGb3JWYWxpZENvbG9yOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXCJyXCIsXCJnXCIsXCJiXCIsXCJhXCIsXCJoXCIsXCJzXCIsXCJsXCIsXCJ2XCJdLG49MCxyPTAsYT0wO2E8dC5sZW5ndGg7YSsrKXt2YXIgaT10W2FdO2VbaV0mJihuKyssaXNOYU4oZVtpXSl8fHIrKyl9aWYobj09PXIpcmV0dXJuIGV9fX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oMjgpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW4oMTApLGk9bi5uKGEpO2Zvcih2YXIgbyBpbiBhKVwiZGVmYXVsdFwiIT09byYmZnVuY3Rpb24oZSl7bi5kKHQsZSxmdW5jdGlvbigpe3JldHVybiBhW2VdfSl9KG8pO3ZhciBzPW4oMzApLGM9ITEsbD1uKDIpLHU9cixkPWwoaS5hLHMuYSwhMSx1LG51bGwsbnVsbCk7ZC5vcHRpb25zLl9fZmlsZT1cInNyYy9jb21wb25lbnRzL2NvbW1vbi9FZGl0YWJsZUlucHV0LnZ1ZVwiLHQuZGVmYXVsdD1kLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oNDMpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW4oMTQpLGk9bi5uKGEpO2Zvcih2YXIgbyBpbiBhKVwiZGVmYXVsdFwiIT09byYmZnVuY3Rpb24oZSl7bi5kKHQsZSxmdW5jdGlvbigpe3JldHVybiBhW2VdfSl9KG8pO3ZhciBzPW4oNDUpLGM9ITEsbD1uKDIpLHU9cixkPWwoaS5hLHMuYSwhMSx1LG51bGwsbnVsbCk7ZC5vcHRpb25zLl9fZmlsZT1cInNyYy9jb21wb25lbnRzL2NvbW1vbi9IdWUudnVlXCIsdC5kZWZhdWx0PWQuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y3x8big1NSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9bigxNyksaT1uLm4oYSk7Zm9yKHZhciBvIGluIGEpXCJkZWZhdWx0XCIhPT1vJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGFbZV19KX0obyk7dmFyIHM9big1OSksYz0hMSxsPW4oMiksdT1yLGQ9bChpLmEscy5hLCExLHUsbnVsbCxudWxsKTtkLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvY29tbW9uL1NhdHVyYXRpb24udnVlXCIsdC5kZWZhdWx0PWQuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y3x8big2MCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9bigxOCksaT1uLm4oYSk7Zm9yKHZhciBvIGluIGEpXCJkZWZhdWx0XCIhPT1vJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGFbZV19KX0obyk7dmFyIHM9big2NSksYz0hMSxsPW4oMiksdT1yLGQ9bChpLmEscy5hLCExLHUsbnVsbCxudWxsKTtkLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvY29tbW9uL0FscGhhLnZ1ZVwiLHQuZGVmYXVsdD1kLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oNjIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW4oMTkpLGk9bi5uKGEpO2Zvcih2YXIgbyBpbiBhKVwiZGVmYXVsdFwiIT09byYmZnVuY3Rpb24oZSl7bi5kKHQsZSxmdW5jdGlvbigpe3JldHVybiBhW2VdfSl9KG8pO3ZhciBzPW4oNjQpLGM9ITEsbD1uKDIpLHU9cixkPWwoaS5hLHMuYSwhMSx1LG51bGwsbnVsbCk7ZC5vcHRpb25zLl9fZmlsZT1cInNyYy9jb21wb25lbnRzL2NvbW1vbi9DaGVja2JvYXJkLnZ1ZVwiLHQuZGVmYXVsdD1kLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1uKDMpLGk9cihhKSxvPW4oNCkscz1yKG8pLGM9W1wiIzRENEQ0RFwiLFwiIzk5OTk5OVwiLFwiI0ZGRkZGRlwiLFwiI0Y0NEUzQlwiLFwiI0ZFOTIwMFwiLFwiI0ZDREMwMFwiLFwiI0RCREYwMFwiLFwiI0E0REQwMFwiLFwiIzY4Q0NDQVwiLFwiIzczRDhGRlwiLFwiI0FFQTFGRlwiLFwiI0ZEQTFGRlwiLFwiIzMzMzMzM1wiLFwiIzgwODA4MFwiLFwiI0NDQ0NDQ1wiLFwiI0QzMzExNVwiLFwiI0UyNzMwMFwiLFwiI0ZDQzQwMFwiLFwiI0IwQkMwMFwiLFwiIzY4QkMwMFwiLFwiIzE2QTVBNVwiLFwiIzAwOUNFMFwiLFwiIzdCNjRGRlwiLFwiI0ZBMjhGRlwiLFwiIzAwMDAwMFwiLFwiIzY2NjY2NlwiLFwiI0IzQjNCM1wiLFwiIzlGMDUwMFwiLFwiI0M0NTEwMFwiLFwiI0ZCOUUwMFwiLFwiIzgwODkwMFwiLFwiIzE5NEQzM1wiLFwiIzBDNzk3RFwiLFwiIzAwNjJCMVwiLFwiIzY1MzI5NFwiLFwiI0FCMTQ5RVwiXTt0LmRlZmF1bHQ9e25hbWU6XCJDb21wYWN0XCIsbWl4aW5zOltpLmRlZmF1bHRdLHByb3BzOntwYWxldHRlOnt0eXBlOkFycmF5LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gY319fSxjb21wb25lbnRzOntcImVkLWluXCI6cy5kZWZhdWx0fSxjb21wdXRlZDp7cGljazpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbG9ycy5oZXh9fSxtZXRob2RzOntoYW5kbGVyQ2xpY2s6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvckNoYW5nZSh7aGV4OmUsc291cmNlOlwiaGV4XCJ9KX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD17bmFtZTpcImVkaXRhYmxlSW5wdXRcIixwcm9wczp7bGFiZWw6U3RyaW5nLGRlc2M6U3RyaW5nLHZhbHVlOltTdHJpbmcsTnVtYmVyXSxtYXg6TnVtYmVyLG1pbjpOdW1iZXIsYXJyb3dPZmZzZXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MX19LGNvbXB1dGVkOnt2YWw6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfSxzZXQ6ZnVuY3Rpb24oZSl7aWYoISh2b2lkIDAhPT10aGlzLm1heCYmK2U+dGhpcy5tYXgpKXJldHVybiBlO3RoaXMuJHJlZnMuaW5wdXQudmFsdWU9dGhpcy5tYXh9fX0sbWV0aG9kczp7dXBkYXRlOmZ1bmN0aW9uKGUpe3RoaXMuaGFuZGxlQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKX0saGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGUpe3ZhciB0PXt9O3RbdGhpcy5sYWJlbF09ZSx2b2lkIDA9PT10LmhleCYmdm9pZCAwPT09dFtcIiNcIl0/dGhpcy4kZW1pdChcImNoYW5nZVwiLHQpOmUubGVuZ3RoPjUmJnRoaXMuJGVtaXQoXCJjaGFuZ2VcIix0KX0saGFuZGxlQmx1cjpmdW5jdGlvbihlKXtjb25zb2xlLmxvZyhlKX0saGFuZGxlS2V5RG93bjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLnZhbCxuPU51bWJlcih0KTtpZihuKXt2YXIgcj10aGlzLmFycm93T2Zmc2V0fHwxOzM4PT09ZS5rZXlDb2RlJiYodD1uK3IsdGhpcy5oYW5kbGVDaGFuZ2UodCksZS5wcmV2ZW50RGVmYXVsdCgpKSw0MD09PWUua2V5Q29kZSYmKHQ9bi1yLHRoaXMuaGFuZGxlQ2hhbmdlKHQpLGUucHJldmVudERlZmF1bHQoKSl9fSxoYW5kbGVEcmFnOmZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKGUpfSxoYW5kbGVNb3VzZURvd246ZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coZSl9fX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1uKDMpLGE9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShyKSxpPVtcIiNGRkZGRkZcIixcIiNGMkYyRjJcIixcIiNFNkU2RTZcIixcIiNEOUQ5RDlcIixcIiNDQ0NDQ0NcIixcIiNCRkJGQkZcIixcIiNCM0IzQjNcIixcIiNBNkE2QTZcIixcIiM5OTk5OTlcIixcIiM4QzhDOENcIixcIiM4MDgwODBcIixcIiM3MzczNzNcIixcIiM2NjY2NjZcIixcIiM1OTU5NTlcIixcIiM0RDRENERcIixcIiM0MDQwNDBcIixcIiMzMzMzMzNcIixcIiMyNjI2MjZcIixcIiMwRDBEMERcIixcIiMwMDAwMDBcIl07dC5kZWZhdWx0PXtuYW1lOlwiR3JheXNjYWxlXCIsbWl4aW5zOlthLmRlZmF1bHRdLHByb3BzOntwYWxldHRlOnt0eXBlOkFycmF5LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX19fSxjb21wb25lbnRzOnt9LGNvbXB1dGVkOntwaWNrOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29sb3JzLmhleH19LG1ldGhvZHM6e2hhbmRsZXJDbGljazpmdW5jdGlvbihlKXt0aGlzLmNvbG9yQ2hhbmdlKHtoZXg6ZSxzb3VyY2U6XCJoZXhcIn0pfX19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9big0KSxpPXIoYSksbz1uKDMpLHM9cihvKTt0LmRlZmF1bHQ9e25hbWU6XCJNYXRlcmlhbFwiLG1peGluczpbcy5kZWZhdWx0XSxjb21wb25lbnRzOntcImVkLWluXCI6aS5kZWZhdWx0fSxtZXRob2RzOntvbkNoYW5nZTpmdW5jdGlvbihlKXtlJiYoZS5oZXg/dGhpcy5pc1ZhbGlkSGV4KGUuaGV4KSYmdGhpcy5jb2xvckNoYW5nZSh7aGV4OmUuaGV4LHNvdXJjZTpcImhleFwifSk6KGUucnx8ZS5nfHxlLmIpJiZ0aGlzLmNvbG9yQ2hhbmdlKHtyOmUucnx8dGhpcy5jb2xvcnMucmdiYS5yLGc6ZS5nfHx0aGlzLmNvbG9ycy5yZ2JhLmcsYjplLmJ8fHRoaXMuY29sb3JzLnJnYmEuYixhOmUuYXx8dGhpcy5jb2xvcnMucmdiYS5hLHNvdXJjZTpcInJnYmFcIn0pKX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW4oMyksaT1yKGEpLG89big1KSxzPXIobyk7dC5kZWZhdWx0PXtuYW1lOlwiU2xpZGVyXCIsbWl4aW5zOltpLmRlZmF1bHRdLHByb3BzOntkaXJlY3Rpb246U3RyaW5nfSxjb21wb25lbnRzOntodWU6cy5kZWZhdWx0fSxjb21wdXRlZDp7YWN0aXZlT2Zmc2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgucm91bmQoMTAwKnRoaXMuY29sb3JzLmhzbC5zKS8xMDA9PS41P01hdGgucm91bmQoMTAwKnRoaXMuY29sb3JzLmhzbC5sKS8xMDA6MH19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57c3dhdGNoZXM6W1wiLjgwXCIsXCIuNjVcIixcIi41MFwiLFwiLjM1XCIsXCIuMjBcIl19fSxtZXRob2RzOntodWVDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvckNoYW5nZShlKX0saGFuZGxlU3dDbGljazpmdW5jdGlvbihlLHQpe3RoaXMuY29sb3JDaGFuZ2Uoe2g6dGhpcy5jb2xvcnMuaHNsLmgsczouNSxsOnQsc291cmNlOlwiaHNsXCJ9KX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD17bmFtZTpcIkh1ZVwiLHByb3BzOnt2YWx1ZTpPYmplY3QsZGlyZWN0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiaG9yaXpvbnRhbFwifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntvbGRIdWU6MCxwdWxsRGlyZWN0aW9uOlwiXCJ9fSxjb21wdXRlZDp7Y29sb3JzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy52YWx1ZS5oc2wuaDtyZXR1cm4gMCE9PWUmJmUtdGhpcy5vbGRIdWU+MCYmKHRoaXMucHVsbERpcmVjdGlvbj1cInJpZ2h0XCIpLDAhPT1lJiZlLXRoaXMub2xkSHVlPDAmJih0aGlzLnB1bGxEaXJlY3Rpb249XCJsZWZ0XCIpLHRoaXMub2xkSHVlPWUsdGhpcy52YWx1ZX0sZGlyZWN0aW9uQ2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm57XCJ2Yy1odWUtLWhvcml6b250YWxcIjpcImhvcml6b250YWxcIj09PXRoaXMuZGlyZWN0aW9uLFwidmMtaHVlLS12ZXJ0aWNhbFwiOlwidmVydGljYWxcIj09PXRoaXMuZGlyZWN0aW9ufX0scG9pbnRlclRvcDpmdW5jdGlvbigpe3JldHVyblwidmVydGljYWxcIj09PXRoaXMuZGlyZWN0aW9uPzA9PT10aGlzLmNvbG9ycy5oc2wuaCYmXCJyaWdodFwiPT09dGhpcy5wdWxsRGlyZWN0aW9uPzA6LTEwMCp0aGlzLmNvbG9ycy5oc2wuaC8zNjArMTAwK1wiJVwiOjB9LHBvaW50ZXJMZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuXCJ2ZXJ0aWNhbFwiPT09dGhpcy5kaXJlY3Rpb24/MDowPT09dGhpcy5jb2xvcnMuaHNsLmgmJlwicmlnaHRcIj09PXRoaXMucHVsbERpcmVjdGlvbj9cIjEwMCVcIjoxMDAqdGhpcy5jb2xvcnMuaHNsLmgvMzYwK1wiJVwifX0sbWV0aG9kczp7aGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGUsdCl7IXQmJmUucHJldmVudERlZmF1bHQoKTt2YXIgbixyLGE9dGhpcy4kcmVmcy5jb250YWluZXIsaT1hLmNsaWVudFdpZHRoLG89YS5jbGllbnRIZWlnaHQscz1hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQrd2luZG93LnBhZ2VYT2Zmc2V0LGM9YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3Ard2luZG93LnBhZ2VZT2Zmc2V0LGw9ZS5wYWdlWHx8KGUudG91Y2hlcz9lLnRvdWNoZXNbMF0ucGFnZVg6MCksdT1lLnBhZ2VZfHwoZS50b3VjaGVzP2UudG91Y2hlc1swXS5wYWdlWTowKSxkPWwtcyxoPXUtYztcInZlcnRpY2FsXCI9PT10aGlzLmRpcmVjdGlvbj8oaDwwP249MzYwOmg+bz9uPTA6KHI9LTEwMCpoL28rMTAwLG49MzYwKnIvMTAwKSx0aGlzLmNvbG9ycy5oc2wuaCE9PW4mJnRoaXMuJGVtaXQoXCJjaGFuZ2VcIix7aDpuLHM6dGhpcy5jb2xvcnMuaHNsLnMsbDp0aGlzLmNvbG9ycy5oc2wubCxhOnRoaXMuY29sb3JzLmhzbC5hLHNvdXJjZTpcImhzbFwifSkpOihkPDA/bj0wOmQ+aT9uPTM2MDoocj0xMDAqZC9pLG49MzYwKnIvMTAwKSx0aGlzLmNvbG9ycy5oc2wuaCE9PW4mJnRoaXMuJGVtaXQoXCJjaGFuZ2VcIix7aDpuLHM6dGhpcy5jb2xvcnMuaHNsLnMsbDp0aGlzLmNvbG9ycy5oc2wubCxhOnRoaXMuY29sb3JzLmhzbC5hLHNvdXJjZTpcImhzbFwifSkpfSxoYW5kbGVNb3VzZURvd246ZnVuY3Rpb24oZSl7dGhpcy5oYW5kbGVDaGFuZ2UoZSwhMCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIix0aGlzLmhhbmRsZUNoYW5nZSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVNb3VzZVVwKX0saGFuZGxlTW91c2VVcDpmdW5jdGlvbihlKXt0aGlzLnVuYmluZEV2ZW50TGlzdGVuZXJzKCl9LHVuYmluZEV2ZW50TGlzdGVuZXJzOmZ1bmN0aW9uKCl7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIix0aGlzLmhhbmRsZUNoYW5nZSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVNb3VzZVVwKX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW4oNTApLGk9cihhKSxvPW4oMykscz1yKG8pLGM9W1wicmVkXCIsXCJwaW5rXCIsXCJwdXJwbGVcIixcImRlZXBQdXJwbGVcIixcImluZGlnb1wiLFwiYmx1ZVwiLFwibGlnaHRCbHVlXCIsXCJjeWFuXCIsXCJ0ZWFsXCIsXCJncmVlblwiLFwibGlnaHRHcmVlblwiLFwibGltZVwiLFwieWVsbG93XCIsXCJhbWJlclwiLFwib3JhbmdlXCIsXCJkZWVwT3JhbmdlXCIsXCJicm93blwiLFwiYmx1ZUdyZXlcIixcImJsYWNrXCJdLGw9W1wiOTAwXCIsXCI3MDBcIixcIjUwMFwiLFwiMzAwXCIsXCIxMDBcIl0sdT1mdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiBjLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG49W107XCJibGFja1wiPT09dC50b0xvd2VyQ2FzZSgpfHxcIndoaXRlXCI9PT10LnRvTG93ZXJDYXNlKCk/bj1uLmNvbmNhdChbXCIjMDAwMDAwXCIsXCIjRkZGRkZGXCJdKTpsLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHI9aS5kZWZhdWx0W3RdW2VdO24ucHVzaChyLnRvVXBwZXJDYXNlKCkpfSksZS5wdXNoKG4pfSksZX0oKTt0LmRlZmF1bHQ9e25hbWU6XCJTd2F0Y2hlc1wiLG1peGluczpbcy5kZWZhdWx0XSxwcm9wczp7cGFsZXR0ZTp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9fX0sY29tcHV0ZWQ6e3BpY2s6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb2xvcnMuaGV4fX0sbWV0aG9kczp7ZXF1YWw6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9Mb3dlckNhc2UoKT09PXRoaXMuY29sb3JzLmhleC50b0xvd2VyQ2FzZSgpfSxoYW5kbGVyQ2xpY2s6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvckNoYW5nZSh7aGV4OmUsc291cmNlOlwiaGV4XCJ9KX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW4oMyksaT1yKGEpLG89big0KSxzPXIobyksYz1uKDYpLGw9cihjKSx1PW4oNSksZD1yKHUpLGg9big3KSxmPXIoaCk7dC5kZWZhdWx0PXtuYW1lOlwiUGhvdG9zaG9wXCIsbWl4aW5zOltpLmRlZmF1bHRdLHByb3BzOntoZWFkOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiQ29sb3IgUGlja2VyXCJ9LGRpc2FibGVGaWVsZHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sY29tcG9uZW50czp7c2F0dXJhdGlvbjpsLmRlZmF1bHQsaHVlOmQuZGVmYXVsdCxhbHBoYTpmLmRlZmF1bHQsXCJlZC1pblwiOnMuZGVmYXVsdH0sZGF0YTpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Q29sb3I6XCIjRkZGXCJ9fSxjb21wdXRlZDp7aHN2OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jb2xvcnMuaHN2O3JldHVybntoOmUuaC50b0ZpeGVkKCksczooMTAwKmUucykudG9GaXhlZCgpLHY6KDEwMCplLnYpLnRvRml4ZWQoKX19LGhleDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY29sb3JzLmhleDtyZXR1cm4gZSYmZS5yZXBsYWNlKFwiI1wiLFwiXCIpfX0sY3JlYXRlZDpmdW5jdGlvbigpe3RoaXMuY3VycmVudENvbG9yPXRoaXMuY29sb3JzLmhleH0sbWV0aG9kczp7Y2hpbGRDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvckNoYW5nZShlKX0saW5wdXRDaGFuZ2U6ZnVuY3Rpb24oZSl7ZSYmKGVbXCIjXCJdP3RoaXMuaXNWYWxpZEhleChlW1wiI1wiXSkmJnRoaXMuY29sb3JDaGFuZ2Uoe2hleDplW1wiI1wiXSxzb3VyY2U6XCJoZXhcIn0pOmUucnx8ZS5nfHxlLmJ8fGUuYT90aGlzLmNvbG9yQ2hhbmdlKHtyOmUucnx8dGhpcy5jb2xvcnMucmdiYS5yLGc6ZS5nfHx0aGlzLmNvbG9ycy5yZ2JhLmcsYjplLmJ8fHRoaXMuY29sb3JzLnJnYmEuYixhOmUuYXx8dGhpcy5jb2xvcnMucmdiYS5hLHNvdXJjZTpcInJnYmFcIn0pOihlLmh8fGUuc3x8ZS52KSYmdGhpcy5jb2xvckNoYW5nZSh7aDplLmh8fHRoaXMuY29sb3JzLmhzdi5oLHM6ZS5zLzEwMHx8dGhpcy5jb2xvcnMuaHN2LnMsdjplLnYvMTAwfHx0aGlzLmNvbG9ycy5oc3Yudixzb3VyY2U6XCJoc3ZcIn0pKX0sY2xpY2tDdXJyZW50Q29sb3I6ZnVuY3Rpb24oKXt0aGlzLmNvbG9yQ2hhbmdlKHtoZXg6dGhpcy5jdXJyZW50Q29sb3Isc291cmNlOlwiaGV4XCJ9KX0saGFuZGxlQWNjZXB0OmZ1bmN0aW9uKCl7dGhpcy4kZW1pdChcIm9rXCIpfSxoYW5kbGVDYW5jZWw6ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KFwiY2FuY2VsXCIpfX19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHI9big1NyksYT1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KHIpO3QuZGVmYXVsdD17bmFtZTpcIlNhdHVyYXRpb25cIixwcm9wczp7dmFsdWU6T2JqZWN0fSxjb21wdXRlZDp7Y29sb3JzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWV9LGJnQ29sb3I6ZnVuY3Rpb24oKXtyZXR1cm5cImhzbChcIit0aGlzLmNvbG9ycy5oc3YuaCtcIiwgMTAwJSwgNTAlKVwifSxwb2ludGVyVG9wOmZ1bmN0aW9uKCl7cmV0dXJuLTEwMCp0aGlzLmNvbG9ycy5oc3YudisxKzEwMCtcIiVcIn0scG9pbnRlckxlZnQ6ZnVuY3Rpb24oKXtyZXR1cm4gMTAwKnRoaXMuY29sb3JzLmhzdi5zK1wiJVwifX0sbWV0aG9kczp7dGhyb3R0bGU6KDAsYS5kZWZhdWx0KShmdW5jdGlvbihlLHQpe2UodCl9LDIwLHtsZWFkaW5nOiEwLHRyYWlsaW5nOiExfSksaGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGUsdCl7IXQmJmUucHJldmVudERlZmF1bHQoKTt2YXIgbj10aGlzLiRyZWZzLmNvbnRhaW5lcixyPW4uY2xpZW50V2lkdGgsYT1uLmNsaWVudEhlaWdodCxpPW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCt3aW5kb3cucGFnZVhPZmZzZXQsbz1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCt3aW5kb3cucGFnZVlPZmZzZXQscz1lLnBhZ2VYfHwoZS50b3VjaGVzP2UudG91Y2hlc1swXS5wYWdlWDowKSxjPWUucGFnZVl8fChlLnRvdWNoZXM/ZS50b3VjaGVzWzBdLnBhZ2VZOjApLGw9cy1pLHU9Yy1vO2w8MD9sPTA6bD5yP2w9cjp1PDA/dT0wOnU+YSYmKHU9YSk7dmFyIGQ9bC9yLGg9LXUvYSsxO2g9aD4wP2g6MCxoPWg+MT8xOmgsdGhpcy50aHJvdHRsZSh0aGlzLm9uQ2hhbmdlLHtoOnRoaXMuY29sb3JzLmhzdi5oLHM6ZCx2OmgsYTp0aGlzLmNvbG9ycy5oc3YuYSxzb3VyY2U6XCJoc3ZhXCJ9KX0sb25DaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy4kZW1pdChcImNoYW5nZVwiLGUpfSxoYW5kbGVNb3VzZURvd246ZnVuY3Rpb24oZSl7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIix0aGlzLmhhbmRsZUNoYW5nZSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVDaGFuZ2UpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLHRoaXMuaGFuZGxlTW91c2VVcCl9LGhhbmRsZU1vdXNlVXA6ZnVuY3Rpb24oZSl7dGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpfSx1bmJpbmRFdmVudExpc3RlbmVyczpmdW5jdGlvbigpe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsdGhpcy5oYW5kbGVDaGFuZ2UpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLHRoaXMuaGFuZGxlQ2hhbmdlKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApfX19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHI9big4KSxhPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0ocik7dC5kZWZhdWx0PXtuYW1lOlwiQWxwaGFcIixwcm9wczp7dmFsdWU6T2JqZWN0LG9uQ2hhbmdlOkZ1bmN0aW9ufSxjb21wb25lbnRzOntjaGVja2JvYXJkOmEuZGVmYXVsdH0sY29tcHV0ZWQ6e2NvbG9yczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfSxncmFkaWVudENvbG9yOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jb2xvcnMucmdiYSx0PVtlLnIsZS5nLGUuYl0uam9pbihcIixcIik7cmV0dXJuXCJsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoXCIrdCtcIiwgMCkgMCUsIHJnYmEoXCIrdCtcIiwgMSkgMTAwJSlcIn19LG1ldGhvZHM6e2hhbmRsZUNoYW5nZTpmdW5jdGlvbihlLHQpeyF0JiZlLnByZXZlbnREZWZhdWx0KCk7dmFyIG4scj10aGlzLiRyZWZzLmNvbnRhaW5lcixhPXIuY2xpZW50V2lkdGgsaT1yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQrd2luZG93LnBhZ2VYT2Zmc2V0LG89ZS5wYWdlWHx8KGUudG91Y2hlcz9lLnRvdWNoZXNbMF0ucGFnZVg6MCkscz1vLWk7bj1zPDA/MDpzPmE/MTpNYXRoLnJvdW5kKDEwMCpzL2EpLzEwMCx0aGlzLmNvbG9ycy5hIT09biYmdGhpcy4kZW1pdChcImNoYW5nZVwiLHtoOnRoaXMuY29sb3JzLmhzbC5oLHM6dGhpcy5jb2xvcnMuaHNsLnMsbDp0aGlzLmNvbG9ycy5oc2wubCxhOm4sc291cmNlOlwicmdiYVwifSl9LGhhbmRsZU1vdXNlRG93bjpmdW5jdGlvbihlKXt0aGlzLmhhbmRsZUNoYW5nZShlLCEwKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlQ2hhbmdlKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApfSxoYW5kbGVNb3VzZVVwOmZ1bmN0aW9uKCl7dGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpfSx1bmJpbmRFdmVudExpc3RlbmVyczpmdW5jdGlvbigpe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsdGhpcy5oYW5kbGVDaGFuZ2UpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLHRoaXMuaGFuZGxlTW91c2VVcCl9fX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUsdCxuKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZG9jdW1lbnQpcmV0dXJuIG51bGw7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtyLndpZHRoPXIuaGVpZ2h0PTIqbjt2YXIgYT1yLmdldENvbnRleHQoXCIyZFwiKTtyZXR1cm4gYT8oYS5maWxsU3R5bGU9ZSxhLmZpbGxSZWN0KDAsMCxyLndpZHRoLHIuaGVpZ2h0KSxhLmZpbGxTdHlsZT10LGEuZmlsbFJlY3QoMCwwLG4sbiksYS50cmFuc2xhdGUobixuKSxhLmZpbGxSZWN0KDAsMCxuLG4pLHIudG9EYXRhVVJMKCkpOm51bGx9ZnVuY3Rpb24gYShlLHQsbil7dmFyIGE9ZStcIixcIit0K1wiLFwiK247aWYoaVthXSlyZXR1cm4gaVthXTt2YXIgbz1yKGUsdCxuKTtyZXR1cm4gaVthXT1vLG99T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9e307dC5kZWZhdWx0PXtuYW1lOlwiQ2hlY2tib2FyZFwiLHByb3BzOntzaXplOnt0eXBlOltOdW1iZXIsU3RyaW5nXSxkZWZhdWx0Ojh9LHdoaXRlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiI2ZmZlwifSxncmV5Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiI2U2ZTZlNlwifX0sY29tcHV0ZWQ6e2JnU3R5bGU6ZnVuY3Rpb24oKXtyZXR1cm57XCJiYWNrZ3JvdW5kLWltYWdlXCI6XCJ1cmwoXCIrYSh0aGlzLndoaXRlLHRoaXMuZ3JleSx0aGlzLnNpemUpK1wiKVwifX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW4oMyksaT1yKGEpLG89big0KSxzPXIobyksYz1uKDYpLGw9cihjKSx1PW4oNSksZD1yKHUpLGg9big3KSxmPXIoaCkscD1uKDgpLHY9cihwKSxnPVtcIiNEMDAyMUJcIixcIiNGNUE2MjNcIixcIiNGOEU3MUNcIixcIiM4QjU3MkFcIixcIiM3RUQzMjFcIixcIiM0MTc1MDVcIixcIiNCRDEwRTBcIixcIiM5MDEzRkVcIixcIiM0QTkwRTJcIixcIiM1MEUzQzJcIixcIiNCOEU5ODZcIixcIiMwMDAwMDBcIixcIiM0QTRBNEFcIixcIiM5QjlCOUJcIixcIiNGRkZGRkZcIl07dC5kZWZhdWx0PXtuYW1lOlwiU2tldGNoXCIsbWl4aW5zOltpLmRlZmF1bHRdLGNvbXBvbmVudHM6e3NhdHVyYXRpb246bC5kZWZhdWx0LGh1ZTpkLmRlZmF1bHQsYWxwaGE6Zi5kZWZhdWx0LFwiZWQtaW5cIjpzLmRlZmF1bHQsY2hlY2tib2FyZDp2LmRlZmF1bHR9LHByb3BzOntwcmVzZXRDb2xvcnM6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybiBnfX0sZGlzYWJsZUFscGhhOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZGlzYWJsZUZpZWxkczp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxjb21wdXRlZDp7aGV4OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29sb3JzLmhleC5yZXBsYWNlKFwiI1wiLFwiXCIpfSxhY3RpdmVDb2xvcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY29sb3JzLnJnYmE7cmV0dXJuXCJyZ2JhKFwiK1tlLnIsZS5nLGUuYixlLmFdLmpvaW4oXCIsXCIpK1wiKVwifX0sbWV0aG9kczp7aGFuZGxlUHJlc2V0OmZ1bmN0aW9uKGUpe3RoaXMuY29sb3JDaGFuZ2Uoe2hleDplLHNvdXJjZTpcImhleFwifSl9LGNoaWxkQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMuY29sb3JDaGFuZ2UoZSl9LGlucHV0Q2hhbmdlOmZ1bmN0aW9uKGUpe2UmJihlLmhleD90aGlzLmlzVmFsaWRIZXgoZS5oZXgpJiZ0aGlzLmNvbG9yQ2hhbmdlKHtoZXg6ZS5oZXgsc291cmNlOlwiaGV4XCJ9KTooZS5yfHxlLmd8fGUuYnx8ZS5hKSYmdGhpcy5jb2xvckNoYW5nZSh7cjplLnJ8fHRoaXMuY29sb3JzLnJnYmEucixnOmUuZ3x8dGhpcy5jb2xvcnMucmdiYS5nLGI6ZS5ifHx0aGlzLmNvbG9ycy5yZ2JhLmIsYTplLmF8fHRoaXMuY29sb3JzLnJnYmEuYSxzb3VyY2U6XCJyZ2JhXCJ9KSl9fX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1uKDMpLGk9cihhKSxvPW4oNCkscz1yKG8pLGM9big2KSxsPXIoYyksdT1uKDUpLGQ9cih1KSxoPW4oNyksZj1yKGgpLHA9big4KSx2PXIocCk7dC5kZWZhdWx0PXtuYW1lOlwiQ2hyb21lXCIsbWl4aW5zOltpLmRlZmF1bHRdLHByb3BzOntkaXNhYmxlQWxwaGE6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxkaXNhYmxlRmllbGRzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LGNvbXBvbmVudHM6e3NhdHVyYXRpb246bC5kZWZhdWx0LGh1ZTpkLmRlZmF1bHQsYWxwaGE6Zi5kZWZhdWx0LFwiZWQtaW5cIjpzLmRlZmF1bHQsY2hlY2tib2FyZDp2LmRlZmF1bHR9LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57ZmllbGRzOltcImhleFwiLFwicmdiYVwiLFwiaHNsYVwiXSxmaWVsZHNJbmRleDowLGhpZ2hsaWdodDohMX19LGNvbXB1dGVkOntoc2w6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbG9ycy5oc2wsdD1lLmgsbj1lLnMscj1lLmw7cmV0dXJue2g6dC50b0ZpeGVkKCksczooMTAwKm4pLnRvRml4ZWQoKStcIiVcIixsOigxMDAqcikudG9GaXhlZCgpK1wiJVwifX0sYWN0aXZlQ29sb3I6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbG9ycy5yZ2JhO3JldHVyblwicmdiYShcIitbZS5yLGUuZyxlLmIsZS5hXS5qb2luKFwiLFwiKStcIilcIn19LHdhdGNoOntjb2xvcnM6ZnVuY3Rpb24oZSl7ZS5hPDEmJjA9PT10aGlzLmZpZWxkc0luZGV4JiYodGhpcy5maWVsZHNJbmRleD0xKX19LG1ldGhvZHM6e2hhbmRsZVByZXNldDpmdW5jdGlvbihlKXt0aGlzLmNvbG9yQ2hhbmdlKHtoZXg6ZSxzb3VyY2U6XCJoZXhcIn0pfSxjaGlsZENoYW5nZTpmdW5jdGlvbihlKXt0aGlzLmNvbG9yQ2hhbmdlKGUpfSxpbnB1dENoYW5nZTpmdW5jdGlvbihlKXtpZihlKWlmKGUuaGV4KXRoaXMuaXNWYWxpZEhleChlLmhleCkmJnRoaXMuY29sb3JDaGFuZ2Uoe2hleDplLmhleCxzb3VyY2U6XCJoZXhcIn0pO2Vsc2UgaWYoZS5yfHxlLmd8fGUuYnx8ZS5hKXRoaXMuY29sb3JDaGFuZ2Uoe3I6ZS5yfHx0aGlzLmNvbG9ycy5yZ2JhLnIsZzplLmd8fHRoaXMuY29sb3JzLnJnYmEuZyxiOmUuYnx8dGhpcy5jb2xvcnMucmdiYS5iLGE6ZS5hfHx0aGlzLmNvbG9ycy5yZ2JhLmEsc291cmNlOlwicmdiYVwifSk7ZWxzZSBpZihlLmh8fGUuc3x8ZS5sKXt2YXIgdD1lLnM/ZS5zLnJlcGxhY2UoXCIlXCIsXCJcIikvMTAwOnRoaXMuY29sb3JzLmhzbC5zLG49ZS5sP2UubC5yZXBsYWNlKFwiJVwiLFwiXCIpLzEwMDp0aGlzLmNvbG9ycy5oc2wubDt0aGlzLmNvbG9yQ2hhbmdlKHtoOmUuaHx8dGhpcy5jb2xvcnMuaHNsLmgsczp0LGw6bixzb3VyY2U6XCJoc2xcIn0pfX0sdG9nZ2xlVmlld3M6ZnVuY3Rpb24oKXtpZih0aGlzLmZpZWxkc0luZGV4Pj0yKXJldHVybiB2b2lkKHRoaXMuZmllbGRzSW5kZXg9dGhpcy5jb2xvcnMuYTwxPzE6MCk7dGhpcy5maWVsZHNJbmRleCsrfSxzaG93SGlnaGxpZ2h0OmZ1bmN0aW9uKCl7dGhpcy5oaWdobGlnaHQ9ITB9LGhpZGVIaWdobGlnaHQ6ZnVuY3Rpb24oKXt0aGlzLmhpZ2hsaWdodD0hMX19fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBhPW4oMjMpLGk9cihhKSxvPW4oMzIpLHM9cihvKSxjPW4oMzYpLGw9cihjKSx1PW4oNDApLGQ9cih1KSxoPW4oNDcpLGY9cihoKSxwPW4oNTIpLHY9cihwKSxnPW4oNjcpLGI9cihnKSx4PW4oNzEpLG09cih4KSxfPW4oNyksdz1yKF8pLEM9big4KSx5PXIoQyksaz1uKDQpLEY9cihrKSxBPW4oNSksUz1yKEEpLE09big2KSxFPXIoTSksaj1uKDMpLEQ9cihqKSxPPXt2ZXJzaW9uOlwiMi40LjZcIixDb21wYWN0OmkuZGVmYXVsdCxHcmF5c2NhbGU6cy5kZWZhdWx0LE1hdGVyaWFsOmwuZGVmYXVsdCxTbGlkZXI6ZC5kZWZhdWx0LFN3YXRjaGVzOmYuZGVmYXVsdCxQaG90b3Nob3A6di5kZWZhdWx0LFNrZXRjaDpiLmRlZmF1bHQsQ2hyb21lOm0uZGVmYXVsdCxBbHBoYTp3LmRlZmF1bHQsQ2hlY2tib2FyZDp5LmRlZmF1bHQsRWRpdGFibGVJbnB1dDpGLmRlZmF1bHQsSHVlOlMuZGVmYXVsdCxTYXR1cmF0aW9uOkUuZGVmYXVsdCxDb2xvck1peGluOkQuZGVmYXVsdH07ZS5leHBvcnRzPU99LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oMjQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW4oOSksaT1uLm4oYSk7Zm9yKHZhciBvIGluIGEpXCJkZWZhdWx0XCIhPT1vJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGFbZV19KX0obyk7dmFyIHM9bigzMSksYz0hMSxsPW4oMiksdT1yLGQ9bChpLmEscy5hLCExLHUsbnVsbCxudWxsKTtkLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvQ29tcGFjdC52dWVcIix0LmRlZmF1bHQ9ZC5leHBvcnRzfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigyNSk7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbZS5pLHIsXCJcIl1dKSxyLmxvY2FscyYmKGUuZXhwb3J0cz1yLmxvY2Fscyk7bigxKShcImNlZTdiNjRhXCIsciwhMSl9LGZ1bmN0aW9uKGUsdCxuKXt0PWUuZXhwb3J0cz1uKDApKCExKSx0LnB1c2goW2UuaSxcIlxcbi52Yy1jb21wYWN0IHtcXG4gIHBhZGRpbmctdG9wOiA1cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDVweDtcXG4gIHdpZHRoOiAyNDBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDEwcHggcmdiYSgwLDAsMCwuMTIpLCAwIDJweCA1cHggcmdiYSgwLDAsMCwuMTYpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuLnZjLWNvbXBhY3QtY29sb3JzIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4udmMtY29tcGFjdC1jb2xvci1pdGVtIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICB3aWR0aDogMTVweDtcXG4gIGhlaWdodDogMTVweDtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICBtYXJnaW4tYm90dG9tOiA1cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi52Yy1jb21wYWN0LWNvbG9yLWl0ZW0tLXdoaXRlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDFweCAjZGRkO1xcbn1cXG4udmMtY29tcGFjdC1jb2xvci1pdGVtLS13aGl0ZSAudmMtY29tcGFjdC1kb3Qge1xcbiAgYmFja2dyb3VuZDogIzAwMDtcXG59XFxuLnZjLWNvbXBhY3QtZG90IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNXB4O1xcbiAgcmlnaHQ6IDVweDtcXG4gIGJvdHRvbTogNXB4O1xcbiAgbGVmdDogNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgb3BhY2l0eTogMTtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxufVxcblwiLFwiXCJdKX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W10scj17fSxhPTA7YTx0Lmxlbmd0aDthKyspe3ZhciBpPXRbYV0sbz1pWzBdLHM9aVsxXSxjPWlbMl0sbD1pWzNdLHU9e2lkOmUrXCI6XCIrYSxjc3M6cyxtZWRpYTpjLHNvdXJjZU1hcDpsfTtyW29dP3Jbb10ucGFydHMucHVzaCh1KTpuLnB1c2gocltvXT17aWQ6byxwYXJ0czpbdV19KX1yZXR1cm4gbn19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjshZnVuY3Rpb24oYSl7ZnVuY3Rpb24gaShlLHQpe2lmKGU9ZXx8XCJcIix0PXR8fHt9LGUgaW5zdGFuY2VvZiBpKXJldHVybiBlO2lmKCEodGhpcyBpbnN0YW5jZW9mIGkpKXJldHVybiBuZXcgaShlLHQpO3ZhciBuPW8oZSk7dGhpcy5fb3JpZ2luYWxJbnB1dD1lLHRoaXMuX3I9bi5yLHRoaXMuX2c9bi5nLHRoaXMuX2I9bi5iLHRoaXMuX2E9bi5hLHRoaXMuX3JvdW5kQT1xKDEwMCp0aGlzLl9hKS8xMDAsdGhpcy5fZm9ybWF0PXQuZm9ybWF0fHxuLmZvcm1hdCx0aGlzLl9ncmFkaWVudFR5cGU9dC5ncmFkaWVudFR5cGUsdGhpcy5fcjwxJiYodGhpcy5fcj1xKHRoaXMuX3IpKSx0aGlzLl9nPDEmJih0aGlzLl9nPXEodGhpcy5fZykpLHRoaXMuX2I8MSYmKHRoaXMuX2I9cSh0aGlzLl9iKSksdGhpcy5fb2s9bi5vayx0aGlzLl90Y19pZD1VKyt9ZnVuY3Rpb24gbyhlKXt2YXIgdD17cjowLGc6MCxiOjB9LG49MSxyPW51bGwsYT1udWxsLGk9bnVsbCxvPSExLGM9ITE7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPSQoZSkpLFwib2JqZWN0XCI9PXR5cGVvZiBlJiYoeihlLnIpJiZ6KGUuZykmJnooZS5iKT8odD1zKGUucixlLmcsZS5iKSxvPSEwLGM9XCIlXCI9PT1TdHJpbmcoZS5yKS5zdWJzdHIoLTEpP1wicHJnYlwiOlwicmdiXCIpOnooZS5oKSYmeihlLnMpJiZ6KGUudik/KHI9TChlLnMpLGE9TChlLnYpLHQ9ZChlLmgscixhKSxvPSEwLGM9XCJoc3ZcIik6eihlLmgpJiZ6KGUucykmJnooZS5sKSYmKHI9TChlLnMpLGk9TChlLmwpLHQ9bChlLmgscixpKSxvPSEwLGM9XCJoc2xcIiksZS5oYXNPd25Qcm9wZXJ0eShcImFcIikmJihuPWUuYSkpLG49TShuKSx7b2s6byxmb3JtYXQ6ZS5mb3JtYXR8fGMscjpWKDI1NSxYKHQuciwwKSksZzpWKDI1NSxYKHQuZywwKSksYjpWKDI1NSxYKHQuYiwwKSksYTpufX1mdW5jdGlvbiBzKGUsdCxuKXtyZXR1cm57cjoyNTUqRShlLDI1NSksZzoyNTUqRSh0LDI1NSksYjoyNTUqRShuLDI1NSl9fWZ1bmN0aW9uIGMoZSx0LG4pe2U9RShlLDI1NSksdD1FKHQsMjU1KSxuPUUobiwyNTUpO3ZhciByLGEsaT1YKGUsdCxuKSxvPVYoZSx0LG4pLHM9KGkrbykvMjtpZihpPT1vKXI9YT0wO2Vsc2V7dmFyIGM9aS1vO3N3aXRjaChhPXM+LjU/Yy8oMi1pLW8pOmMvKGkrbyksaSl7Y2FzZSBlOnI9KHQtbikvYysodDxuPzY6MCk7YnJlYWs7Y2FzZSB0OnI9KG4tZSkvYysyO2JyZWFrO2Nhc2UgbjpyPShlLXQpL2MrNH1yLz02fXJldHVybntoOnIsczphLGw6c319ZnVuY3Rpb24gbChlLHQsbil7ZnVuY3Rpb24gcihlLHQsbil7cmV0dXJuIG48MCYmKG4rPTEpLG4+MSYmKG4tPTEpLG48MS82P2UrNioodC1lKSpuOm48LjU/dDpuPDIvMz9lKyh0LWUpKigyLzMtbikqNjplfXZhciBhLGksbztpZihlPUUoZSwzNjApLHQ9RSh0LDEwMCksbj1FKG4sMTAwKSwwPT09dClhPWk9bz1uO2Vsc2V7dmFyIHM9bjwuNT9uKigxK3QpOm4rdC1uKnQsYz0yKm4tczthPXIoYyxzLGUrMS8zKSxpPXIoYyxzLGUpLG89cihjLHMsZS0xLzMpfXJldHVybntyOjI1NSphLGc6MjU1KmksYjoyNTUqb319ZnVuY3Rpb24gdShlLHQsbil7ZT1FKGUsMjU1KSx0PUUodCwyNTUpLG49RShuLDI1NSk7dmFyIHIsYSxpPVgoZSx0LG4pLG89VihlLHQsbikscz1pLGM9aS1vO2lmKGE9MD09PWk/MDpjL2ksaT09bylyPTA7ZWxzZXtzd2l0Y2goaSl7Y2FzZSBlOnI9KHQtbikvYysodDxuPzY6MCk7YnJlYWs7Y2FzZSB0OnI9KG4tZSkvYysyO2JyZWFrO2Nhc2UgbjpyPShlLXQpL2MrNH1yLz02fXJldHVybntoOnIsczphLHY6c319ZnVuY3Rpb24gZChlLHQsbil7ZT02KkUoZSwzNjApLHQ9RSh0LDEwMCksbj1FKG4sMTAwKTt2YXIgcj1hLmZsb29yKGUpLGk9ZS1yLG89biooMS10KSxzPW4qKDEtaSp0KSxjPW4qKDEtKDEtaSkqdCksbD1yJTY7cmV0dXJue3I6MjU1KltuLHMsbyxvLGMsbl1bbF0sZzoyNTUqW2MsbixuLHMsbyxvXVtsXSxiOjI1NSpbbyxvLGMsbixuLHNdW2xdfX1mdW5jdGlvbiBoKGUsdCxuLHIpe3ZhciBhPVtCKHEoZSkudG9TdHJpbmcoMTYpKSxCKHEodCkudG9TdHJpbmcoMTYpKSxCKHEobikudG9TdHJpbmcoMTYpKV07cmV0dXJuIHImJmFbMF0uY2hhckF0KDApPT1hWzBdLmNoYXJBdCgxKSYmYVsxXS5jaGFyQXQoMCk9PWFbMV0uY2hhckF0KDEpJiZhWzJdLmNoYXJBdCgwKT09YVsyXS5jaGFyQXQoMSk/YVswXS5jaGFyQXQoMCkrYVsxXS5jaGFyQXQoMCkrYVsyXS5jaGFyQXQoMCk6YS5qb2luKFwiXCIpfWZ1bmN0aW9uIGYoZSx0LG4scixhKXt2YXIgaT1bQihxKGUpLnRvU3RyaW5nKDE2KSksQihxKHQpLnRvU3RyaW5nKDE2KSksQihxKG4pLnRvU3RyaW5nKDE2KSksQihIKHIpKV07cmV0dXJuIGEmJmlbMF0uY2hhckF0KDApPT1pWzBdLmNoYXJBdCgxKSYmaVsxXS5jaGFyQXQoMCk9PWlbMV0uY2hhckF0KDEpJiZpWzJdLmNoYXJBdCgwKT09aVsyXS5jaGFyQXQoMSkmJmlbM10uY2hhckF0KDApPT1pWzNdLmNoYXJBdCgxKT9pWzBdLmNoYXJBdCgwKStpWzFdLmNoYXJBdCgwKStpWzJdLmNoYXJBdCgwKStpWzNdLmNoYXJBdCgwKTppLmpvaW4oXCJcIil9ZnVuY3Rpb24gcChlLHQsbixyKXtyZXR1cm5bQihIKHIpKSxCKHEoZSkudG9TdHJpbmcoMTYpKSxCKHEodCkudG9TdHJpbmcoMTYpKSxCKHEobikudG9TdHJpbmcoMTYpKV0uam9pbihcIlwiKX1mdW5jdGlvbiB2KGUsdCl7dD0wPT09dD8wOnR8fDEwO3ZhciBuPWkoZSkudG9Ic2woKTtyZXR1cm4gbi5zLT10LzEwMCxuLnM9aihuLnMpLGkobil9ZnVuY3Rpb24gZyhlLHQpe3Q9MD09PXQ/MDp0fHwxMDt2YXIgbj1pKGUpLnRvSHNsKCk7cmV0dXJuIG4ucys9dC8xMDAsbi5zPWoobi5zKSxpKG4pfWZ1bmN0aW9uIGIoZSl7cmV0dXJuIGkoZSkuZGVzYXR1cmF0ZSgxMDApfWZ1bmN0aW9uIHgoZSx0KXt0PTA9PT10PzA6dHx8MTA7dmFyIG49aShlKS50b0hzbCgpO3JldHVybiBuLmwrPXQvMTAwLG4ubD1qKG4ubCksaShuKX1mdW5jdGlvbiBtKGUsdCl7dD0wPT09dD8wOnR8fDEwO3ZhciBuPWkoZSkudG9SZ2IoKTtyZXR1cm4gbi5yPVgoMCxWKDI1NSxuLnItcSgtdC8xMDAqMjU1KSkpLG4uZz1YKDAsVigyNTUsbi5nLXEoLXQvMTAwKjI1NSkpKSxuLmI9WCgwLFYoMjU1LG4uYi1xKC10LzEwMCoyNTUpKSksaShuKX1mdW5jdGlvbiBfKGUsdCl7dD0wPT09dD8wOnR8fDEwO3ZhciBuPWkoZSkudG9Ic2woKTtyZXR1cm4gbi5sLT10LzEwMCxuLmw9aihuLmwpLGkobil9ZnVuY3Rpb24gdyhlLHQpe3ZhciBuPWkoZSkudG9Ic2woKSxyPShuLmgrdCklMzYwO3JldHVybiBuLmg9cjwwPzM2MCtyOnIsaShuKX1mdW5jdGlvbiBDKGUpe3ZhciB0PWkoZSkudG9Ic2woKTtyZXR1cm4gdC5oPSh0LmgrMTgwKSUzNjAsaSh0KX1mdW5jdGlvbiB5KGUpe3ZhciB0PWkoZSkudG9Ic2woKSxuPXQuaDtyZXR1cm5baShlKSxpKHtoOihuKzEyMCklMzYwLHM6dC5zLGw6dC5sfSksaSh7aDoobisyNDApJTM2MCxzOnQucyxsOnQubH0pXX1mdW5jdGlvbiBrKGUpe3ZhciB0PWkoZSkudG9Ic2woKSxuPXQuaDtyZXR1cm5baShlKSxpKHtoOihuKzkwKSUzNjAsczp0LnMsbDp0Lmx9KSxpKHtoOihuKzE4MCklMzYwLHM6dC5zLGw6dC5sfSksaSh7aDoobisyNzApJTM2MCxzOnQucyxsOnQubH0pXX1mdW5jdGlvbiBGKGUpe3ZhciB0PWkoZSkudG9Ic2woKSxuPXQuaDtyZXR1cm5baShlKSxpKHtoOihuKzcyKSUzNjAsczp0LnMsbDp0Lmx9KSxpKHtoOihuKzIxNiklMzYwLHM6dC5zLGw6dC5sfSldfWZ1bmN0aW9uIEEoZSx0LG4pe3Q9dHx8NixuPW58fDMwO3ZhciByPWkoZSkudG9Ic2woKSxhPTM2MC9uLG89W2koZSldO2ZvcihyLmg9KHIuaC0oYSp0Pj4xKSs3MjApJTM2MDstLXQ7KXIuaD0oci5oK2EpJTM2MCxvLnB1c2goaShyKSk7cmV0dXJuIG99ZnVuY3Rpb24gUyhlLHQpe3Q9dHx8Njtmb3IodmFyIG49aShlKS50b0hzdigpLHI9bi5oLGE9bi5zLG89bi52LHM9W10sYz0xL3Q7dC0tOylzLnB1c2goaSh7aDpyLHM6YSx2Om99KSksbz0obytjKSUxO3JldHVybiBzfWZ1bmN0aW9uIE0oZSl7cmV0dXJuIGU9cGFyc2VGbG9hdChlKSwoaXNOYU4oZSl8fGU8MHx8ZT4xKSYmKGU9MSksZX1mdW5jdGlvbiBFKGUsdCl7TyhlKSYmKGU9XCIxMDAlXCIpO3ZhciBuPVIoZSk7cmV0dXJuIGU9Vih0LFgoMCxwYXJzZUZsb2F0KGUpKSksbiYmKGU9cGFyc2VJbnQoZSp0LDEwKS8xMDApLGEuYWJzKGUtdCk8MWUtNj8xOmUldC9wYXJzZUZsb2F0KHQpfWZ1bmN0aW9uIGooZSl7cmV0dXJuIFYoMSxYKDAsZSkpfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIHBhcnNlSW50KGUsMTYpfWZ1bmN0aW9uIE8oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJi0xIT1lLmluZGV4T2YoXCIuXCIpJiYxPT09cGFyc2VGbG9hdChlKX1mdW5jdGlvbiBSKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiYtMSE9ZS5pbmRleE9mKFwiJVwiKX1mdW5jdGlvbiBCKGUpe3JldHVybiAxPT1lLmxlbmd0aD9cIjBcIitlOlwiXCIrZX1mdW5jdGlvbiBMKGUpe3JldHVybiBlPD0xJiYoZT0xMDAqZStcIiVcIiksZX1mdW5jdGlvbiBIKGUpe3JldHVybiBhLnJvdW5kKDI1NSpwYXJzZUZsb2F0KGUpKS50b1N0cmluZygxNil9ZnVuY3Rpb24gUChlKXtyZXR1cm4gRChlKS8yNTV9ZnVuY3Rpb24geihlKXtyZXR1cm4hIUsuQ1NTX1VOSVQuZXhlYyhlKX1mdW5jdGlvbiAkKGUpe2U9ZS5yZXBsYWNlKEksXCJcIikucmVwbGFjZShULFwiXCIpLnRvTG93ZXJDYXNlKCk7dmFyIHQ9ITE7aWYoV1tlXSllPVdbZV0sdD0hMDtlbHNlIGlmKFwidHJhbnNwYXJlbnRcIj09ZSlyZXR1cm57cjowLGc6MCxiOjAsYTowLGZvcm1hdDpcIm5hbWVcIn07dmFyIG47cmV0dXJuKG49Sy5yZ2IuZXhlYyhlKSk/e3I6blsxXSxnOm5bMl0sYjpuWzNdfToobj1LLnJnYmEuZXhlYyhlKSk/e3I6blsxXSxnOm5bMl0sYjpuWzNdLGE6bls0XX06KG49Sy5oc2wuZXhlYyhlKSk/e2g6blsxXSxzOm5bMl0sbDpuWzNdfToobj1LLmhzbGEuZXhlYyhlKSk/e2g6blsxXSxzOm5bMl0sbDpuWzNdLGE6bls0XX06KG49Sy5oc3YuZXhlYyhlKSk/e2g6blsxXSxzOm5bMl0sdjpuWzNdfToobj1LLmhzdmEuZXhlYyhlKSk/e2g6blsxXSxzOm5bMl0sdjpuWzNdLGE6bls0XX06KG49Sy5oZXg4LmV4ZWMoZSkpP3tyOkQoblsxXSksZzpEKG5bMl0pLGI6RChuWzNdKSxhOlAobls0XSksZm9ybWF0OnQ/XCJuYW1lXCI6XCJoZXg4XCJ9OihuPUsuaGV4Ni5leGVjKGUpKT97cjpEKG5bMV0pLGc6RChuWzJdKSxiOkQoblszXSksZm9ybWF0OnQ/XCJuYW1lXCI6XCJoZXhcIn06KG49Sy5oZXg0LmV4ZWMoZSkpP3tyOkQoblsxXStcIlwiK25bMV0pLGc6RChuWzJdK1wiXCIrblsyXSksYjpEKG5bM10rXCJcIituWzNdKSxhOlAobls0XStcIlwiK25bNF0pLGZvcm1hdDp0P1wibmFtZVwiOlwiaGV4OFwifTohIShuPUsuaGV4My5leGVjKGUpKSYme3I6RChuWzFdK1wiXCIrblsxXSksZzpEKG5bMl0rXCJcIituWzJdKSxiOkQoblszXStcIlwiK25bM10pLGZvcm1hdDp0P1wibmFtZVwiOlwiaGV4XCJ9fWZ1bmN0aW9uIE4oZSl7dmFyIHQsbjtyZXR1cm4gZT1lfHx7bGV2ZWw6XCJBQVwiLHNpemU6XCJzbWFsbFwifSx0PShlLmxldmVsfHxcIkFBXCIpLnRvVXBwZXJDYXNlKCksbj0oZS5zaXplfHxcInNtYWxsXCIpLnRvTG93ZXJDYXNlKCksXCJBQVwiIT09dCYmXCJBQUFcIiE9PXQmJih0PVwiQUFcIiksXCJzbWFsbFwiIT09biYmXCJsYXJnZVwiIT09biYmKG49XCJzbWFsbFwiKSx7bGV2ZWw6dCxzaXplOm59fXZhciBJPS9eXFxzKy8sVD0vXFxzKyQvLFU9MCxxPWEucm91bmQsVj1hLm1pbixYPWEubWF4LEc9YS5yYW5kb207aS5wcm90b3R5cGU9e2lzRGFyazpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEJyaWdodG5lc3MoKTwxMjh9LGlzTGlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc0RhcmsoKX0saXNWYWxpZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9va30sZ2V0T3JpZ2luYWxJbnB1dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vcmlnaW5hbElucHV0fSxnZXRGb3JtYXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZm9ybWF0fSxnZXRBbHBoYTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hfSxnZXRCcmlnaHRuZXNzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy50b1JnYigpO3JldHVybigyOTkqZS5yKzU4NyplLmcrMTE0KmUuYikvMWUzfSxnZXRMdW1pbmFuY2U6ZnVuY3Rpb24oKXt2YXIgZSx0LG4scixpLG8scz10aGlzLnRvUmdiKCk7cmV0dXJuIGU9cy5yLzI1NSx0PXMuZy8yNTUsbj1zLmIvMjU1LHI9ZTw9LjAzOTI4P2UvMTIuOTI6YS5wb3coKGUrLjA1NSkvMS4wNTUsMi40KSxpPXQ8PS4wMzkyOD90LzEyLjkyOmEucG93KCh0Ky4wNTUpLzEuMDU1LDIuNCksbz1uPD0uMDM5Mjg/bi8xMi45MjphLnBvdygobisuMDU1KS8xLjA1NSwyLjQpLC4yMTI2KnIrLjcxNTIqaSsuMDcyMipvfSxzZXRBbHBoYTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fYT1NKGUpLHRoaXMuX3JvdW5kQT1xKDEwMCp0aGlzLl9hKS8xMDAsdGhpc30sdG9Ic3Y6ZnVuY3Rpb24oKXt2YXIgZT11KHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iKTtyZXR1cm57aDozNjAqZS5oLHM6ZS5zLHY6ZS52LGE6dGhpcy5fYX19LHRvSHN2U3RyaW5nOmZ1bmN0aW9uKCl7dmFyIGU9dSh0aGlzLl9yLHRoaXMuX2csdGhpcy5fYiksdD1xKDM2MCplLmgpLG49cSgxMDAqZS5zKSxyPXEoMTAwKmUudik7cmV0dXJuIDE9PXRoaXMuX2E/XCJoc3YoXCIrdCtcIiwgXCIrbitcIiUsIFwiK3IrXCIlKVwiOlwiaHN2YShcIit0K1wiLCBcIituK1wiJSwgXCIrcitcIiUsIFwiK3RoaXMuX3JvdW5kQStcIilcIn0sdG9Ic2w6ZnVuY3Rpb24oKXt2YXIgZT1jKHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iKTtyZXR1cm57aDozNjAqZS5oLHM6ZS5zLGw6ZS5sLGE6dGhpcy5fYX19LHRvSHNsU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIGU9Yyh0aGlzLl9yLHRoaXMuX2csdGhpcy5fYiksdD1xKDM2MCplLmgpLG49cSgxMDAqZS5zKSxyPXEoMTAwKmUubCk7cmV0dXJuIDE9PXRoaXMuX2E/XCJoc2woXCIrdCtcIiwgXCIrbitcIiUsIFwiK3IrXCIlKVwiOlwiaHNsYShcIit0K1wiLCBcIituK1wiJSwgXCIrcitcIiUsIFwiK3RoaXMuX3JvdW5kQStcIilcIn0sdG9IZXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGgodGhpcy5fcix0aGlzLl9nLHRoaXMuX2IsZSl9LHRvSGV4U3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVyblwiI1wiK3RoaXMudG9IZXgoZSl9LHRvSGV4ODpmdW5jdGlvbihlKXtyZXR1cm4gZih0aGlzLl9yLHRoaXMuX2csdGhpcy5fYix0aGlzLl9hLGUpfSx0b0hleDhTdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuXCIjXCIrdGhpcy50b0hleDgoZSl9LHRvUmdiOmZ1bmN0aW9uKCl7cmV0dXJue3I6cSh0aGlzLl9yKSxnOnEodGhpcy5fZyksYjpxKHRoaXMuX2IpLGE6dGhpcy5fYX19LHRvUmdiU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIDE9PXRoaXMuX2E/XCJyZ2IoXCIrcSh0aGlzLl9yKStcIiwgXCIrcSh0aGlzLl9nKStcIiwgXCIrcSh0aGlzLl9iKStcIilcIjpcInJnYmEoXCIrcSh0aGlzLl9yKStcIiwgXCIrcSh0aGlzLl9nKStcIiwgXCIrcSh0aGlzLl9iKStcIiwgXCIrdGhpcy5fcm91bmRBK1wiKVwifSx0b1BlcmNlbnRhZ2VSZ2I6ZnVuY3Rpb24oKXtyZXR1cm57cjpxKDEwMCpFKHRoaXMuX3IsMjU1KSkrXCIlXCIsZzpxKDEwMCpFKHRoaXMuX2csMjU1KSkrXCIlXCIsYjpxKDEwMCpFKHRoaXMuX2IsMjU1KSkrXCIlXCIsYTp0aGlzLl9hfX0sdG9QZXJjZW50YWdlUmdiU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIDE9PXRoaXMuX2E/XCJyZ2IoXCIrcSgxMDAqRSh0aGlzLl9yLDI1NSkpK1wiJSwgXCIrcSgxMDAqRSh0aGlzLl9nLDI1NSkpK1wiJSwgXCIrcSgxMDAqRSh0aGlzLl9iLDI1NSkpK1wiJSlcIjpcInJnYmEoXCIrcSgxMDAqRSh0aGlzLl9yLDI1NSkpK1wiJSwgXCIrcSgxMDAqRSh0aGlzLl9nLDI1NSkpK1wiJSwgXCIrcSgxMDAqRSh0aGlzLl9iLDI1NSkpK1wiJSwgXCIrdGhpcy5fcm91bmRBK1wiKVwifSx0b05hbWU6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuX2E/XCJ0cmFuc3BhcmVudFwiOiEodGhpcy5fYTwxKSYmKFlbaCh0aGlzLl9yLHRoaXMuX2csdGhpcy5fYiwhMCldfHwhMSl9LHRvRmlsdGVyOmZ1bmN0aW9uKGUpe3ZhciB0PVwiI1wiK3AodGhpcy5fcix0aGlzLl9nLHRoaXMuX2IsdGhpcy5fYSksbj10LHI9dGhpcy5fZ3JhZGllbnRUeXBlP1wiR3JhZGllbnRUeXBlID0gMSwgXCI6XCJcIjtpZihlKXt2YXIgYT1pKGUpO249XCIjXCIrcChhLl9yLGEuX2csYS5fYixhLl9hKX1yZXR1cm5cInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudChcIityK1wic3RhcnRDb2xvcnN0cj1cIit0K1wiLGVuZENvbG9yc3RyPVwiK24rXCIpXCJ9LHRvU3RyaW5nOmZ1bmN0aW9uKGUpe3ZhciB0PSEhZTtlPWV8fHRoaXMuX2Zvcm1hdDt2YXIgbj0hMSxyPXRoaXMuX2E8MSYmdGhpcy5fYT49MDtyZXR1cm4gdHx8IXJ8fFwiaGV4XCIhPT1lJiZcImhleDZcIiE9PWUmJlwiaGV4M1wiIT09ZSYmXCJoZXg0XCIhPT1lJiZcImhleDhcIiE9PWUmJlwibmFtZVwiIT09ZT8oXCJyZ2JcIj09PWUmJihuPXRoaXMudG9SZ2JTdHJpbmcoKSksXCJwcmdiXCI9PT1lJiYobj10aGlzLnRvUGVyY2VudGFnZVJnYlN0cmluZygpKSxcImhleFwiIT09ZSYmXCJoZXg2XCIhPT1lfHwobj10aGlzLnRvSGV4U3RyaW5nKCkpLFwiaGV4M1wiPT09ZSYmKG49dGhpcy50b0hleFN0cmluZyghMCkpLFwiaGV4NFwiPT09ZSYmKG49dGhpcy50b0hleDhTdHJpbmcoITApKSxcImhleDhcIj09PWUmJihuPXRoaXMudG9IZXg4U3RyaW5nKCkpLFwibmFtZVwiPT09ZSYmKG49dGhpcy50b05hbWUoKSksXCJoc2xcIj09PWUmJihuPXRoaXMudG9Ic2xTdHJpbmcoKSksXCJoc3ZcIj09PWUmJihuPXRoaXMudG9Ic3ZTdHJpbmcoKSksbnx8dGhpcy50b0hleFN0cmluZygpKTpcIm5hbWVcIj09PWUmJjA9PT10aGlzLl9hP3RoaXMudG9OYW1lKCk6dGhpcy50b1JnYlN0cmluZygpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBpKHRoaXMudG9TdHJpbmcoKSl9LF9hcHBseU1vZGlmaWNhdGlvbjpmdW5jdGlvbihlLHQpe3ZhciBuPWUuYXBwbHkobnVsbCxbdGhpc10uY29uY2F0KFtdLnNsaWNlLmNhbGwodCkpKTtyZXR1cm4gdGhpcy5fcj1uLl9yLHRoaXMuX2c9bi5fZyx0aGlzLl9iPW4uX2IsdGhpcy5zZXRBbHBoYShuLl9hKSx0aGlzfSxsaWdodGVuOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKHgsYXJndW1lbnRzKX0sYnJpZ2h0ZW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24obSxhcmd1bWVudHMpfSxkYXJrZW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oXyxhcmd1bWVudHMpfSxkZXNhdHVyYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKHYsYXJndW1lbnRzKX0sc2F0dXJhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZyxhcmd1bWVudHMpfSxncmV5c2NhbGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oYixhcmd1bWVudHMpfSxzcGluOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKHcsYXJndW1lbnRzKX0sX2FwcGx5Q29tYmluYXRpb246ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5hcHBseShudWxsLFt0aGlzXS5jb25jYXQoW10uc2xpY2UuY2FsbCh0KSkpfSxhbmFsb2dvdXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihBLGFyZ3VtZW50cyl9LGNvbXBsZW1lbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihDLGFyZ3VtZW50cyl9LG1vbm9jaHJvbWF0aWM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihTLGFyZ3VtZW50cyl9LHNwbGl0Y29tcGxlbWVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKEYsYXJndW1lbnRzKX0sdHJpYWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbih5LGFyZ3VtZW50cyl9LHRldHJhZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKGssYXJndW1lbnRzKX19LGkuZnJvbVJhdGlvPWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpe3ZhciBuPXt9O2Zvcih2YXIgciBpbiBlKWUuaGFzT3duUHJvcGVydHkocikmJihuW3JdPVwiYVwiPT09cj9lW3JdOkwoZVtyXSkpO2U9bn1yZXR1cm4gaShlLHQpfSxpLmVxdWFscz1mdW5jdGlvbihlLHQpe3JldHVybiEoIWV8fCF0KSYmaShlKS50b1JnYlN0cmluZygpPT1pKHQpLnRvUmdiU3RyaW5nKCl9LGkucmFuZG9tPWZ1bmN0aW9uKCl7cmV0dXJuIGkuZnJvbVJhdGlvKHtyOkcoKSxnOkcoKSxiOkcoKX0pfSxpLm1peD1mdW5jdGlvbihlLHQsbil7bj0wPT09bj8wOm58fDUwO3ZhciByPWkoZSkudG9SZ2IoKSxhPWkodCkudG9SZ2IoKSxvPW4vMTAwO3JldHVybiBpKHtyOihhLnItci5yKSpvK3IucixnOihhLmctci5nKSpvK3IuZyxiOihhLmItci5iKSpvK3IuYixhOihhLmEtci5hKSpvK3IuYX0pfSxpLnJlYWRhYmlsaXR5PWZ1bmN0aW9uKGUsdCl7dmFyIG49aShlKSxyPWkodCk7cmV0dXJuKGEubWF4KG4uZ2V0THVtaW5hbmNlKCksci5nZXRMdW1pbmFuY2UoKSkrLjA1KS8oYS5taW4obi5nZXRMdW1pbmFuY2UoKSxyLmdldEx1bWluYW5jZSgpKSsuMDUpfSxpLmlzUmVhZGFibGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGEsbz1pLnJlYWRhYmlsaXR5KGUsdCk7c3dpdGNoKGE9ITEscj1OKG4pLHIubGV2ZWwrci5zaXplKXtjYXNlXCJBQXNtYWxsXCI6Y2FzZVwiQUFBbGFyZ2VcIjphPW8+PTQuNTticmVhaztjYXNlXCJBQWxhcmdlXCI6YT1vPj0zO2JyZWFrO2Nhc2VcIkFBQXNtYWxsXCI6YT1vPj03fXJldHVybiBhfSxpLm1vc3RSZWFkYWJsZT1mdW5jdGlvbihlLHQsbil7dmFyIHIsYSxvLHMsYz1udWxsLGw9MDtuPW58fHt9LGE9bi5pbmNsdWRlRmFsbGJhY2tDb2xvcnMsbz1uLmxldmVsLHM9bi5zaXplO2Zvcih2YXIgdT0wO3U8dC5sZW5ndGg7dSsrKShyPWkucmVhZGFiaWxpdHkoZSx0W3VdKSk+bCYmKGw9cixjPWkodFt1XSkpO3JldHVybiBpLmlzUmVhZGFibGUoZSxjLHtsZXZlbDpvLHNpemU6c30pfHwhYT9jOihuLmluY2x1ZGVGYWxsYmFja0NvbG9ycz0hMSxpLm1vc3RSZWFkYWJsZShlLFtcIiNmZmZcIixcIiMwMDBcIl0sbikpfTt2YXIgVz1pLm5hbWVzPXthbGljZWJsdWU6XCJmMGY4ZmZcIixhbnRpcXVld2hpdGU6XCJmYWViZDdcIixhcXVhOlwiMGZmXCIsYXF1YW1hcmluZTpcIjdmZmZkNFwiLGF6dXJlOlwiZjBmZmZmXCIsYmVpZ2U6XCJmNWY1ZGNcIixiaXNxdWU6XCJmZmU0YzRcIixibGFjazpcIjAwMFwiLGJsYW5jaGVkYWxtb25kOlwiZmZlYmNkXCIsYmx1ZTpcIjAwZlwiLGJsdWV2aW9sZXQ6XCI4YTJiZTJcIixicm93bjpcImE1MmEyYVwiLGJ1cmx5d29vZDpcImRlYjg4N1wiLGJ1cm50c2llbm5hOlwiZWE3ZTVkXCIsY2FkZXRibHVlOlwiNWY5ZWEwXCIsY2hhcnRyZXVzZTpcIjdmZmYwMFwiLGNob2NvbGF0ZTpcImQyNjkxZVwiLGNvcmFsOlwiZmY3ZjUwXCIsY29ybmZsb3dlcmJsdWU6XCI2NDk1ZWRcIixjb3Juc2lsazpcImZmZjhkY1wiLGNyaW1zb246XCJkYzE0M2NcIixjeWFuOlwiMGZmXCIsZGFya2JsdWU6XCIwMDAwOGJcIixkYXJrY3lhbjpcIjAwOGI4YlwiLGRhcmtnb2xkZW5yb2Q6XCJiODg2MGJcIixkYXJrZ3JheTpcImE5YTlhOVwiLGRhcmtncmVlbjpcIjAwNjQwMFwiLGRhcmtncmV5OlwiYTlhOWE5XCIsZGFya2toYWtpOlwiYmRiNzZiXCIsZGFya21hZ2VudGE6XCI4YjAwOGJcIixkYXJrb2xpdmVncmVlbjpcIjU1NmIyZlwiLGRhcmtvcmFuZ2U6XCJmZjhjMDBcIixkYXJrb3JjaGlkOlwiOTkzMmNjXCIsZGFya3JlZDpcIjhiMDAwMFwiLGRhcmtzYWxtb246XCJlOTk2N2FcIixkYXJrc2VhZ3JlZW46XCI4ZmJjOGZcIixkYXJrc2xhdGVibHVlOlwiNDgzZDhiXCIsZGFya3NsYXRlZ3JheTpcIjJmNGY0ZlwiLGRhcmtzbGF0ZWdyZXk6XCIyZjRmNGZcIixkYXJrdHVycXVvaXNlOlwiMDBjZWQxXCIsZGFya3Zpb2xldDpcIjk0MDBkM1wiLGRlZXBwaW5rOlwiZmYxNDkzXCIsZGVlcHNreWJsdWU6XCIwMGJmZmZcIixkaW1ncmF5OlwiNjk2OTY5XCIsZGltZ3JleTpcIjY5Njk2OVwiLGRvZGdlcmJsdWU6XCIxZTkwZmZcIixmaXJlYnJpY2s6XCJiMjIyMjJcIixmbG9yYWx3aGl0ZTpcImZmZmFmMFwiLGZvcmVzdGdyZWVuOlwiMjI4YjIyXCIsZnVjaHNpYTpcImYwZlwiLGdhaW5zYm9ybzpcImRjZGNkY1wiLGdob3N0d2hpdGU6XCJmOGY4ZmZcIixnb2xkOlwiZmZkNzAwXCIsZ29sZGVucm9kOlwiZGFhNTIwXCIsZ3JheTpcIjgwODA4MFwiLGdyZWVuOlwiMDA4MDAwXCIsZ3JlZW55ZWxsb3c6XCJhZGZmMmZcIixncmV5OlwiODA4MDgwXCIsaG9uZXlkZXc6XCJmMGZmZjBcIixob3RwaW5rOlwiZmY2OWI0XCIsaW5kaWFucmVkOlwiY2Q1YzVjXCIsaW5kaWdvOlwiNGIwMDgyXCIsaXZvcnk6XCJmZmZmZjBcIixraGFraTpcImYwZTY4Y1wiLGxhdmVuZGVyOlwiZTZlNmZhXCIsbGF2ZW5kZXJibHVzaDpcImZmZjBmNVwiLGxhd25ncmVlbjpcIjdjZmMwMFwiLGxlbW9uY2hpZmZvbjpcImZmZmFjZFwiLGxpZ2h0Ymx1ZTpcImFkZDhlNlwiLGxpZ2h0Y29yYWw6XCJmMDgwODBcIixsaWdodGN5YW46XCJlMGZmZmZcIixsaWdodGdvbGRlbnJvZHllbGxvdzpcImZhZmFkMlwiLGxpZ2h0Z3JheTpcImQzZDNkM1wiLGxpZ2h0Z3JlZW46XCI5MGVlOTBcIixsaWdodGdyZXk6XCJkM2QzZDNcIixsaWdodHBpbms6XCJmZmI2YzFcIixsaWdodHNhbG1vbjpcImZmYTA3YVwiLGxpZ2h0c2VhZ3JlZW46XCIyMGIyYWFcIixsaWdodHNreWJsdWU6XCI4N2NlZmFcIixsaWdodHNsYXRlZ3JheTpcIjc4OVwiLGxpZ2h0c2xhdGVncmV5OlwiNzg5XCIsbGlnaHRzdGVlbGJsdWU6XCJiMGM0ZGVcIixsaWdodHllbGxvdzpcImZmZmZlMFwiLGxpbWU6XCIwZjBcIixsaW1lZ3JlZW46XCIzMmNkMzJcIixsaW5lbjpcImZhZjBlNlwiLG1hZ2VudGE6XCJmMGZcIixtYXJvb246XCI4MDAwMDBcIixtZWRpdW1hcXVhbWFyaW5lOlwiNjZjZGFhXCIsbWVkaXVtYmx1ZTpcIjAwMDBjZFwiLG1lZGl1bW9yY2hpZDpcImJhNTVkM1wiLG1lZGl1bXB1cnBsZTpcIjkzNzBkYlwiLG1lZGl1bXNlYWdyZWVuOlwiM2NiMzcxXCIsbWVkaXVtc2xhdGVibHVlOlwiN2I2OGVlXCIsbWVkaXVtc3ByaW5nZ3JlZW46XCIwMGZhOWFcIixtZWRpdW10dXJxdW9pc2U6XCI0OGQxY2NcIixtZWRpdW12aW9sZXRyZWQ6XCJjNzE1ODVcIixtaWRuaWdodGJsdWU6XCIxOTE5NzBcIixtaW50Y3JlYW06XCJmNWZmZmFcIixtaXN0eXJvc2U6XCJmZmU0ZTFcIixtb2NjYXNpbjpcImZmZTRiNVwiLG5hdmFqb3doaXRlOlwiZmZkZWFkXCIsbmF2eTpcIjAwMDA4MFwiLG9sZGxhY2U6XCJmZGY1ZTZcIixvbGl2ZTpcIjgwODAwMFwiLG9saXZlZHJhYjpcIjZiOGUyM1wiLG9yYW5nZTpcImZmYTUwMFwiLG9yYW5nZXJlZDpcImZmNDUwMFwiLG9yY2hpZDpcImRhNzBkNlwiLHBhbGVnb2xkZW5yb2Q6XCJlZWU4YWFcIixwYWxlZ3JlZW46XCI5OGZiOThcIixwYWxldHVycXVvaXNlOlwiYWZlZWVlXCIscGFsZXZpb2xldHJlZDpcImRiNzA5M1wiLHBhcGF5YXdoaXA6XCJmZmVmZDVcIixwZWFjaHB1ZmY6XCJmZmRhYjlcIixwZXJ1OlwiY2Q4NTNmXCIscGluazpcImZmYzBjYlwiLHBsdW06XCJkZGEwZGRcIixwb3dkZXJibHVlOlwiYjBlMGU2XCIscHVycGxlOlwiODAwMDgwXCIscmViZWNjYXB1cnBsZTpcIjY2MzM5OVwiLHJlZDpcImYwMFwiLHJvc3licm93bjpcImJjOGY4ZlwiLHJveWFsYmx1ZTpcIjQxNjllMVwiLHNhZGRsZWJyb3duOlwiOGI0NTEzXCIsc2FsbW9uOlwiZmE4MDcyXCIsc2FuZHlicm93bjpcImY0YTQ2MFwiLHNlYWdyZWVuOlwiMmU4YjU3XCIsc2Vhc2hlbGw6XCJmZmY1ZWVcIixzaWVubmE6XCJhMDUyMmRcIixzaWx2ZXI6XCJjMGMwYzBcIixza3libHVlOlwiODdjZWViXCIsc2xhdGVibHVlOlwiNmE1YWNkXCIsc2xhdGVncmF5OlwiNzA4MDkwXCIsc2xhdGVncmV5OlwiNzA4MDkwXCIsc25vdzpcImZmZmFmYVwiLHNwcmluZ2dyZWVuOlwiMDBmZjdmXCIsc3RlZWxibHVlOlwiNDY4MmI0XCIsdGFuOlwiZDJiNDhjXCIsdGVhbDpcIjAwODA4MFwiLHRoaXN0bGU6XCJkOGJmZDhcIix0b21hdG86XCJmZjYzNDdcIix0dXJxdW9pc2U6XCI0MGUwZDBcIix2aW9sZXQ6XCJlZTgyZWVcIix3aGVhdDpcImY1ZGViM1wiLHdoaXRlOlwiZmZmXCIsd2hpdGVzbW9rZTpcImY1ZjVmNVwiLHllbGxvdzpcImZmMFwiLHllbGxvd2dyZWVuOlwiOWFjZDMyXCJ9LFk9aS5oZXhOYW1lcz1mdW5jdGlvbihlKXt2YXIgdD17fTtmb3IodmFyIG4gaW4gZSllLmhhc093blByb3BlcnR5KG4pJiYodFtlW25dXT1uKTtyZXR1cm4gdH0oVyksSz1mdW5jdGlvbigpe3ZhciBlPVwiKD86Wy1cXFxcK10/XFxcXGQqXFxcXC5cXFxcZCslPyl8KD86Wy1cXFxcK10/XFxcXGQrJT8pXCIsdD1cIltcXFxcc3xcXFxcKF0rKFwiK2UrXCIpWyx8XFxcXHNdKyhcIitlK1wiKVssfFxcXFxzXSsoXCIrZStcIilcXFxccypcXFxcKT9cIixuPVwiW1xcXFxzfFxcXFwoXSsoXCIrZStcIilbLHxcXFxcc10rKFwiK2UrXCIpWyx8XFxcXHNdKyhcIitlK1wiKVssfFxcXFxzXSsoXCIrZStcIilcXFxccypcXFxcKT9cIjtyZXR1cm57Q1NTX1VOSVQ6bmV3IFJlZ0V4cChlKSxyZ2I6bmV3IFJlZ0V4cChcInJnYlwiK3QpLHJnYmE6bmV3IFJlZ0V4cChcInJnYmFcIituKSxoc2w6bmV3IFJlZ0V4cChcImhzbFwiK3QpLGhzbGE6bmV3IFJlZ0V4cChcImhzbGFcIituKSxoc3Y6bmV3IFJlZ0V4cChcImhzdlwiK3QpLGhzdmE6bmV3IFJlZ0V4cChcImhzdmFcIituKSxoZXgzOi9eIz8oWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLyxoZXg2Oi9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLyxoZXg0Oi9eIz8oWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8saGV4ODovXiM/KFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KSQvfX0oKTt2b2lkIDAhPT1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWk6dm9pZCAwIT09KHI9ZnVuY3Rpb24oKXtyZXR1cm4gaX0uY2FsbCh0LG4sdCxlKSkmJihlLmV4cG9ydHM9cil9KE1hdGgpfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigyOSk7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbZS5pLHIsXCJcIl1dKSxyLmxvY2FscyYmKGUuZXhwb3J0cz1yLmxvY2Fscyk7bigxKShcImQwZDUxM2Y0XCIsciwhMSl9LGZ1bmN0aW9uKGUsdCxuKXt0PWUuZXhwb3J0cz1uKDApKCExKSx0LnB1c2goW2UuaSxcIlxcbi52Yy1lZGl0YWJsZS1pbnB1dCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi52Yy1pbnB1dF9faW5wdXQge1xcbiAgcGFkZGluZzogMDtcXG4gIGJvcmRlcjogMDtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcbi52Yy1pbnB1dF9fbGFiZWwge1xcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxufVxcblwiLFwiXCJdKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtZWRpdGFibGUtaW5wdXRcIn0sW24oXCJpbnB1dFwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWxcIix2YWx1ZTplLnZhbCxleHByZXNzaW9uOlwidmFsXCJ9XSxyZWY6XCJpbnB1dFwiLHN0YXRpY0NsYXNzOlwidmMtaW5wdXRfX2lucHV0XCIsYXR0cnM6e1wiYXJpYS1sYWJlbFwiOmUudmFsdWV9LGRvbVByb3BzOnt2YWx1ZTplLnZhbH0sb246e2tleWRvd246ZS5oYW5kbGVLZXlEb3duLGlucHV0OltmdW5jdGlvbih0KXt0LnRhcmdldC5jb21wb3Npbmd8fChlLnZhbD10LnRhcmdldC52YWx1ZSl9LGUudXBkYXRlXX19KSxlLl92KFwiIFwiKSxuKFwic3BhblwiLHtzdGF0aWNDbGFzczpcInZjLWlucHV0X19sYWJlbFwifSxbZS5fdihlLl9zKGUubGFiZWwpKV0pLGUuX3YoXCIgXCIpLG4oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidmMtaW5wdXRfX2Rlc2NcIn0sW2UuX3YoZS5fcyhlLmRlc2MpKV0pXSl9LGE9W107ci5fd2l0aFN0cmlwcGVkPSEwO3ZhciBpPXtyZW5kZXI6cixzdGF0aWNSZW5kZXJGbnM6YX07dC5hPWl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNvbXBhY3RcIn0sW24oXCJ1bFwiLHtzdGF0aWNDbGFzczpcInZjLWNvbXBhY3QtY29sb3JzXCJ9LGUuX2woZS5wYWxldHRlLGZ1bmN0aW9uKHQpe3JldHVybiBuKFwibGlcIix7a2V5OnQsc3RhdGljQ2xhc3M6XCJ2Yy1jb21wYWN0LWNvbG9yLWl0ZW1cIixjbGFzczp7XCJ2Yy1jb21wYWN0LWNvbG9yLWl0ZW0tLXdoaXRlXCI6XCIjRkZGRkZGXCI9PT10fSxzdHlsZTp7YmFja2dyb3VuZDp0fSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5oYW5kbGVyQ2xpY2sodCl9fX0sW24oXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOnQ9PT1lLnBpY2ssZXhwcmVzc2lvbjpcImMgPT09IHBpY2tcIn1dLHN0YXRpY0NsYXNzOlwidmMtY29tcGFjdC1kb3RcIn0pXSl9KSldKX0sYT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIGk9e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczphfTt0LmE9aX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y3x8bigzMyl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9bigxMSksaT1uLm4oYSk7Zm9yKHZhciBvIGluIGEpXCJkZWZhdWx0XCIhPT1vJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGFbZV19KX0obyk7dmFyIHM9bigzNSksYz0hMSxsPW4oMiksdT1yLGQ9bChpLmEscy5hLCExLHUsbnVsbCxudWxsKTtkLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvR3JheXNjYWxlLnZ1ZVwiLHQuZGVmYXVsdD1kLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDM0KTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKTtuKDEpKFwiNTI3NjlmOTVcIixyLCExKX0sZnVuY3Rpb24oZSx0LG4pe3Q9ZS5leHBvcnRzPW4oMCkoITEpLHQucHVzaChbZS5pLFwiXFxuLnZjLWdyYXlzY2FsZSB7XFxuICB3aWR0aDogMTI1cHg7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBib3gtc2hhZG93OiAwIDJweCAxNXB4IHJnYmEoMCwwLDAsLjEyKSwgMCAycHggMTBweCByZ2JhKDAsMCwwLC4xNik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG4udmMtZ3JheXNjYWxlLWNvbG9ycyB7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuLnZjLWdyYXlzY2FsZS1jb2xvci1pdGVtIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICB3aWR0aDogMjVweDtcXG4gIGhlaWdodDogMjVweDtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4udmMtZ3JheXNjYWxlLWNvbG9yLWl0ZW0tLXdoaXRlIC52Yy1ncmF5c2NhbGUtZG90IHtcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxufVxcbi52Yy1ncmF5c2NhbGUtZG90IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgd2lkdGg6IDZweDtcXG4gIGhlaWdodDogNnB4O1xcbiAgbWFyZ2luOiAtM3B4IDAgMCAtMnB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgb3BhY2l0eTogMTtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxufVxcblwiLFwiXCJdKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtZ3JheXNjYWxlXCJ9LFtuKFwidWxcIix7c3RhdGljQ2xhc3M6XCJ2Yy1ncmF5c2NhbGUtY29sb3JzXCJ9LGUuX2woZS5wYWxldHRlLGZ1bmN0aW9uKHQpe3JldHVybiBuKFwibGlcIix7a2V5OnQsc3RhdGljQ2xhc3M6XCJ2Yy1ncmF5c2NhbGUtY29sb3ItaXRlbVwiLGNsYXNzOntcInZjLWdyYXlzY2FsZS1jb2xvci1pdGVtLS13aGl0ZVwiOlwiI0ZGRkZGRlwiPT10fSxzdHlsZTp7YmFja2dyb3VuZDp0fSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5oYW5kbGVyQ2xpY2sodCl9fX0sW24oXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOnQ9PT1lLnBpY2ssZXhwcmVzc2lvbjpcImMgPT09IHBpY2tcIn1dLHN0YXRpY0NsYXNzOlwidmMtZ3JheXNjYWxlLWRvdFwifSldKX0pKV0pfSxhPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgaT17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOmF9O3QuYT1pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtjfHxuKDM3KX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1uKDEyKSxpPW4ubihhKTtmb3IodmFyIG8gaW4gYSlcImRlZmF1bHRcIiE9PW8mJmZ1bmN0aW9uKGUpe24uZCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gYVtlXX0pfShvKTt2YXIgcz1uKDM5KSxjPSExLGw9bigyKSx1PXIsZD1sKGkuYSxzLmEsITEsdSxudWxsLG51bGwpO2Qub3B0aW9ucy5fX2ZpbGU9XCJzcmMvY29tcG9uZW50cy9NYXRlcmlhbC52dWVcIix0LmRlZmF1bHQ9ZC5leHBvcnRzfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigzOCk7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbZS5pLHIsXCJcIl1dKSxyLmxvY2FscyYmKGUuZXhwb3J0cz1yLmxvY2Fscyk7bigxKShcIjI3MTJiNDhjXCIsciwhMSl9LGZ1bmN0aW9uKGUsdCxuKXt0PWUuZXhwb3J0cz1uKDApKCExKSx0LnB1c2goW2UuaSwnXFxuLnZjLW1hdGVyaWFsIHtcXG4gIHdpZHRoOiA5OHB4O1xcbiAgaGVpZ2h0OiA5OHB4O1xcbiAgcGFkZGluZzogMTZweDtcXG4gIGZvbnQtZmFtaWx5OiBcIlJvYm90b1wiO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm94LXNoYWRvdzogMCAycHggMTBweCByZ2JhKDAsMCwwLC4xMiksIDAgMnB4IDVweCByZ2JhKDAsMCwwLC4xNik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG4udmMtbWF0ZXJpYWwgLnZjLWlucHV0X19pbnB1dCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi10b3A6IDEycHg7XFxuICBmb250LXNpemU6IDE1cHg7XFxuICBjb2xvcjogIzMzMztcXG4gIGhlaWdodDogMzBweDtcXG59XFxuLnZjLW1hdGVyaWFsIC52Yy1pbnB1dF9fbGFiZWwge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGZvbnQtc2l6ZTogMTFweDtcXG4gIGNvbG9yOiAjOTk5O1xcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxufVxcbi52Yy1tYXRlcmlhbC1oZXgge1xcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMnB4O1xcbiAgYm9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQ7XFxufVxcbi52Yy1tYXRlcmlhbC1zcGxpdCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgbWFyZ2luLXJpZ2h0OiAtMTBweDtcXG4gIHBhZGRpbmctdG9wOiAxMXB4O1xcbn1cXG4udmMtbWF0ZXJpYWwtdGhpcmQge1xcbiAgZmxleDogMTtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxufVxcbicsXCJcIl0pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1tYXRlcmlhbFwifSxbbihcImVkLWluXCIse3N0YXRpY0NsYXNzOlwidmMtbWF0ZXJpYWwtaGV4XCIsc3R5bGU6e2JvcmRlckNvbG9yOmUuY29sb3JzLmhleH0sYXR0cnM6e2xhYmVsOlwiaGV4XCJ9LG9uOntjaGFuZ2U6ZS5vbkNoYW5nZX0sbW9kZWw6e3ZhbHVlOmUuY29sb3JzLmhleCxjYWxsYmFjazpmdW5jdGlvbih0KXtlLiRzZXQoZS5jb2xvcnMsXCJoZXhcIix0KX0sZXhwcmVzc2lvbjpcImNvbG9ycy5oZXhcIn19KSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtbWF0ZXJpYWwtc3BsaXRcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1tYXRlcmlhbC10aGlyZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcInJcIn0sb246e2NoYW5nZTplLm9uQ2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5jb2xvcnMucmdiYS5yLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuJHNldChlLmNvbG9ycy5yZ2JhLFwiclwiLHQpfSxleHByZXNzaW9uOlwiY29sb3JzLnJnYmEuclwifX0pXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtbWF0ZXJpYWwtdGhpcmRcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJnXCJ9LG9uOntjaGFuZ2U6ZS5vbkNoYW5nZX0sbW9kZWw6e3ZhbHVlOmUuY29sb3JzLnJnYmEuZyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLiRzZXQoZS5jb2xvcnMucmdiYSxcImdcIix0KX0sZXhwcmVzc2lvbjpcImNvbG9ycy5yZ2JhLmdcIn19KV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLW1hdGVyaWFsLXRoaXJkXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiYlwifSxvbjp7Y2hhbmdlOmUub25DaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycy5yZ2JhLmIsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS4kc2V0KGUuY29sb3JzLnJnYmEsXCJiXCIsdCl9LGV4cHJlc3Npb246XCJjb2xvcnMucmdiYS5iXCJ9fSldLDEpXSldLDEpfSxhPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgaT17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOmF9O3QuYT1pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtjfHxuKDQxKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1uKDEzKSxpPW4ubihhKTtmb3IodmFyIG8gaW4gYSlcImRlZmF1bHRcIiE9PW8mJmZ1bmN0aW9uKGUpe24uZCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gYVtlXX0pfShvKTt2YXIgcz1uKDQ2KSxjPSExLGw9bigyKSx1PXIsZD1sKGkuYSxzLmEsITEsdSxudWxsLG51bGwpO2Qub3B0aW9ucy5fX2ZpbGU9XCJzcmMvY29tcG9uZW50cy9TbGlkZXIudnVlXCIsdC5kZWZhdWx0PWQuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNDIpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCI1OThiOTk2NFwiLHIsITEpfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksXCJcXG4udmMtc2xpZGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA0MTBweDtcXG59XFxuLnZjLXNsaWRlci1odWUtd2FycCB7XFxuICBoZWlnaHQ6IDEycHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi52Yy1zbGlkZXItaHVlLXdhcnAgLnZjLWh1ZS1waWNrZXIge1xcbiAgd2lkdGg6IDE0cHg7XFxuICBoZWlnaHQ6IDE0cHg7XFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtN3B4LCAtMnB4KTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDgsIDI0OCwgMjQ4KTtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4zNyk7XFxufVxcbi52Yy1zbGlkZXItc3dhdGNoZXMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1hcmdpbi10b3A6IDIwcHg7XFxufVxcbi52Yy1zbGlkZXItc3dhdGNoIHtcXG4gIG1hcmdpbi1yaWdodDogMXB4O1xcbiAgZmxleDogMTtcXG4gIHdpZHRoOiAyMCU7XFxufVxcbi52Yy1zbGlkZXItc3dhdGNoOmZpcnN0LWNoaWxkIHtcXG4gIG1hcmdpbi1yaWdodDogMXB4O1xcbn1cXG4udmMtc2xpZGVyLXN3YXRjaDpmaXJzdC1jaGlsZCAudmMtc2xpZGVyLXN3YXRjaC1waWNrZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4IDBweCAwcHggMnB4O1xcbn1cXG4udmMtc2xpZGVyLXN3YXRjaDpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG59XFxuLnZjLXNsaWRlci1zd2F0Y2g6bGFzdC1jaGlsZCAudmMtc2xpZGVyLXN3YXRjaC1waWNrZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMHB4IDJweCAycHggMHB4O1xcbn1cXG4udmMtc2xpZGVyLXN3YXRjaC1waWNrZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgaGVpZ2h0OiAxMnB4O1xcbn1cXG4udmMtc2xpZGVyLXN3YXRjaC1waWNrZXItLWFjdGl2ZSB7XFxuICB0cmFuc2Zvcm06IHNjYWxlWSgxLjgpO1xcbiAgYm9yZGVyLXJhZGl1czogMy42cHgvMnB4O1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDQ0KTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKTtuKDEpKFwiYWY1NDY1MzBcIixyLCExKX0sZnVuY3Rpb24oZSx0LG4pe3Q9ZS5leHBvcnRzPW4oMCkoITEpLHQucHVzaChbZS5pLFwiXFxuLnZjLWh1ZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBib3R0b206IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxuLnZjLWh1ZS0taG9yaXpvbnRhbCB7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmMDAgMCUsICNmZjAgMTclLCAjMGYwIDMzJSwgIzBmZiA1MCUsICMwMGYgNjclLCAjZjBmIDgzJSwgI2YwMCAxMDAlKTtcXG59XFxuLnZjLWh1ZS0tdmVydGljYWwge1xcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgI2YwMCAwJSwgI2ZmMCAxNyUsICMwZjAgMzMlLCAjMGZmIDUwJSwgIzAwZiA2NyUsICNmMGYgODMlLCAjZjAwIDEwMCUpO1xcbn1cXG4udmMtaHVlLWNvbnRhaW5lciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBtYXJnaW46IDAgMnB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4udmMtaHVlLXBvaW50ZXIge1xcbiAgei1pbmRleDogMjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLnZjLWh1ZS1waWNrZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbWFyZ2luLXRvcDogMXB4O1xcbiAgd2lkdGg6IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDFweDtcXG4gIGhlaWdodDogOHB4O1xcbiAgYm94LXNoYWRvdzogMCAwIDJweCByZ2JhKDAsIDAsIDAsIC42KTtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTJweCkgO1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtjbGFzczpbXCJ2Yy1odWVcIixlLmRpcmVjdGlvbkNsYXNzXX0sW24oXCJkaXZcIix7cmVmOlwiY29udGFpbmVyXCIsc3RhdGljQ2xhc3M6XCJ2Yy1odWUtY29udGFpbmVyXCIsb246e21vdXNlZG93bjplLmhhbmRsZU1vdXNlRG93bix0b3VjaG1vdmU6ZS5oYW5kbGVDaGFuZ2UsdG91Y2hzdGFydDplLmhhbmRsZUNoYW5nZX19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtaHVlLXBvaW50ZXJcIixzdHlsZTp7dG9wOmUucG9pbnRlclRvcCxsZWZ0OmUucG9pbnRlckxlZnR9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWh1ZS1waWNrZXJcIn0pXSldKV0pfSxhPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgaT17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOmF9O3QuYT1pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1zbGlkZXJcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1zbGlkZXItaHVlLXdhcnBcIn0sW24oXCJodWVcIix7b246e2NoYW5nZTplLmh1ZUNoYW5nZX0sbW9kZWw6e3ZhbHVlOmUuY29sb3JzLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuY29sb3JzPXR9LGV4cHJlc3Npb246XCJjb2xvcnNcIn19KV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNsaWRlci1zd2F0Y2hlc1wifSxlLl9sKGUuc3dhdGNoZXMsZnVuY3Rpb24odCxyKXtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNsaWRlci1zd2F0Y2hcIixhdHRyczp7XCJkYXRhLWluZGV4XCI6cn0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuaGFuZGxlU3dDbGljayhyLHQpfX19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2xpZGVyLXN3YXRjaC1waWNrZXJcIixjbGFzczp7XCJ2Yy1zbGlkZXItc3dhdGNoLXBpY2tlci0tYWN0aXZlXCI6dD09ZS5hY3RpdmVPZmZzZXR9LHN0eWxlOntiYWNrZ3JvdW5kOlwiaHNsKFwiK2UuY29sb3JzLmhzbC5oK1wiLCA1MCUsIFwiKzEwMCp0K1wiJSlcIn19KV0pfSkpXSl9LGE9W107ci5fd2l0aFN0cmlwcGVkPSEwO3ZhciBpPXtyZW5kZXI6cixzdGF0aWNSZW5kZXJGbnM6YX07dC5hPWl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2N8fG4oNDgpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW4oMTUpLGk9bi5uKGEpO2Zvcih2YXIgbyBpbiBhKVwiZGVmYXVsdFwiIT09byYmZnVuY3Rpb24oZSl7bi5kKHQsZSxmdW5jdGlvbigpe3JldHVybiBhW2VdfSl9KG8pO3ZhciBzPW4oNTEpLGM9ITEsbD1uKDIpLHU9cixkPWwoaS5hLHMuYSwhMSx1LG51bGwsbnVsbCk7ZC5vcHRpb25zLl9fZmlsZT1cInNyYy9jb21wb25lbnRzL1N3YXRjaGVzLnZ1ZVwiLHQuZGVmYXVsdD1kLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDQ5KTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKTtuKDEpKFwiNDQ1ZDNkNjRcIixyLCExKX0sZnVuY3Rpb24oZSx0LG4pe3Q9ZS5leHBvcnRzPW4oMCkoITEpLHQucHVzaChbZS5pLFwiXFxuLnZjLXN3YXRjaGVzIHtcXG4gIHdpZHRoOiAzMjBweDtcXG4gIGhlaWdodDogMjQwcHg7XFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm94LXNoYWRvdzogMCAycHggMTBweCByZ2JhKDAsMCwwLC4xMiksIDAgMnB4IDVweCByZ2JhKDAsMCwwLC4xNik7XFxufVxcbi52Yy1zd2F0Y2hlcy1ib3gge1xcbiAgcGFkZGluZzogMTZweCAwIDZweCAxNnB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLnZjLXN3YXRjaGVzLWNvbG9yLWdyb3VwIHtcXG4gIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcbiAgd2lkdGg6IDQwcHg7XFxuICBmbG9hdDogbGVmdDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuLnZjLXN3YXRjaGVzLWNvbG9yLWl0IHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogMjRweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQ6ICM4ODBlNGY7XFxuICBtYXJnaW4tYm90dG9tOiAxcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgLW1zLWJvcmRlci1yYWRpdXM6IDJweCAycHggMCAwO1xcbiAgLW1vei1ib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDtcXG4gIC1vLWJvcmRlci1yYWRpdXM6IDJweCAycHggMCAwO1xcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweCAycHggMCAwO1xcbn1cXG4udmMtc3dhdGNoZXMtY29sb3ItLXdoaXRlIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNEREQ7XFxufVxcbi52Yy1zd2F0Y2hlcy1waWNrIHtcXG4gIGZpbGw6IHJnYigyNTUsIDI1NSwgMjU1KTtcXG4gIG1hcmdpbi1sZWZ0OiA4cHg7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuLnZjLXN3YXRjaGVzLWNvbG9yLS13aGl0ZSAudmMtc3dhdGNoZXMtcGljayB7XFxuICBmaWxsOiByZ2IoNTEsIDUxLCA1MSk7XFxufVxcblwiLFwiXCJdKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG4uZCh0LFwicmVkXCIsZnVuY3Rpb24oKXtyZXR1cm4gcn0pLG4uZCh0LFwicGlua1wiLGZ1bmN0aW9uKCl7cmV0dXJuIGF9KSxuLmQodCxcInB1cnBsZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGl9KSxuLmQodCxcImRlZXBQdXJwbGVcIixmdW5jdGlvbigpe3JldHVybiBvfSksbi5kKHQsXCJpbmRpZ29cIixmdW5jdGlvbigpe3JldHVybiBzfSksbi5kKHQsXCJibHVlXCIsZnVuY3Rpb24oKXtyZXR1cm4gY30pLG4uZCh0LFwibGlnaHRCbHVlXCIsZnVuY3Rpb24oKXtyZXR1cm4gbH0pLG4uZCh0LFwiY3lhblwiLGZ1bmN0aW9uKCl7cmV0dXJuIHV9KSxuLmQodCxcInRlYWxcIixmdW5jdGlvbigpe3JldHVybiBkfSksbi5kKHQsXCJncmVlblwiLGZ1bmN0aW9uKCl7cmV0dXJuIGh9KSxuLmQodCxcImxpZ2h0R3JlZW5cIixmdW5jdGlvbigpe3JldHVybiBmfSksbi5kKHQsXCJsaW1lXCIsZnVuY3Rpb24oKXtyZXR1cm4gcH0pLG4uZCh0LFwieWVsbG93XCIsZnVuY3Rpb24oKXtyZXR1cm4gdn0pLG4uZCh0LFwiYW1iZXJcIixmdW5jdGlvbigpe3JldHVybiBnfSksbi5kKHQsXCJvcmFuZ2VcIixmdW5jdGlvbigpe3JldHVybiBifSksbi5kKHQsXCJkZWVwT3JhbmdlXCIsZnVuY3Rpb24oKXtyZXR1cm4geH0pLG4uZCh0LFwiYnJvd25cIixmdW5jdGlvbigpe3JldHVybiBtfSksbi5kKHQsXCJncmV5XCIsZnVuY3Rpb24oKXtyZXR1cm4gX30pLG4uZCh0LFwiYmx1ZUdyZXlcIixmdW5jdGlvbigpe3JldHVybiB3fSksbi5kKHQsXCJkYXJrVGV4dFwiLGZ1bmN0aW9uKCl7cmV0dXJuIEN9KSxuLmQodCxcImxpZ2h0VGV4dFwiLGZ1bmN0aW9uKCl7cmV0dXJuIHl9KSxuLmQodCxcImRhcmtJY29uc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIGt9KSxuLmQodCxcImxpZ2h0SWNvbnNcIixmdW5jdGlvbigpe3JldHVybiBGfSksbi5kKHQsXCJ3aGl0ZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIEF9KSxuLmQodCxcImJsYWNrXCIsZnVuY3Rpb24oKXtyZXR1cm4gU30pO3ZhciByPXs1MDpcIiNmZmViZWVcIiwxMDA6XCIjZmZjZGQyXCIsMjAwOlwiI2VmOWE5YVwiLDMwMDpcIiNlNTczNzNcIiw0MDA6XCIjZWY1MzUwXCIsNTAwOlwiI2Y0NDMzNlwiLDYwMDpcIiNlNTM5MzVcIiw3MDA6XCIjZDMyZjJmXCIsODAwOlwiI2M2MjgyOFwiLDkwMDpcIiNiNzFjMWNcIixhMTAwOlwiI2ZmOGE4MFwiLGEyMDA6XCIjZmY1MjUyXCIsYTQwMDpcIiNmZjE3NDRcIixhNzAwOlwiI2Q1MDAwMFwifSxhPXs1MDpcIiNmY2U0ZWNcIiwxMDA6XCIjZjhiYmQwXCIsMjAwOlwiI2Y0OGZiMVwiLDMwMDpcIiNmMDYyOTJcIiw0MDA6XCIjZWM0MDdhXCIsNTAwOlwiI2U5MWU2M1wiLDYwMDpcIiNkODFiNjBcIiw3MDA6XCIjYzIxODViXCIsODAwOlwiI2FkMTQ1N1wiLDkwMDpcIiM4ODBlNGZcIixhMTAwOlwiI2ZmODBhYlwiLGEyMDA6XCIjZmY0MDgxXCIsYTQwMDpcIiNmNTAwNTdcIixhNzAwOlwiI2M1MTE2MlwifSxpPXs1MDpcIiNmM2U1ZjVcIiwxMDA6XCIjZTFiZWU3XCIsMjAwOlwiI2NlOTNkOFwiLDMwMDpcIiNiYTY4YzhcIiw0MDA6XCIjYWI0N2JjXCIsNTAwOlwiIzljMjdiMFwiLDYwMDpcIiM4ZTI0YWFcIiw3MDA6XCIjN2IxZmEyXCIsODAwOlwiIzZhMWI5YVwiLDkwMDpcIiM0YTE0OGNcIixhMTAwOlwiI2VhODBmY1wiLGEyMDA6XCIjZTA0MGZiXCIsYTQwMDpcIiNkNTAwZjlcIixhNzAwOlwiI2FhMDBmZlwifSxvPXs1MDpcIiNlZGU3ZjZcIiwxMDA6XCIjZDFjNGU5XCIsMjAwOlwiI2IzOWRkYlwiLDMwMDpcIiM5NTc1Y2RcIiw0MDA6XCIjN2U1N2MyXCIsNTAwOlwiIzY3M2FiN1wiLDYwMDpcIiM1ZTM1YjFcIiw3MDA6XCIjNTEyZGE4XCIsODAwOlwiIzQ1MjdhMFwiLDkwMDpcIiMzMTFiOTJcIixhMTAwOlwiI2IzODhmZlwiLGEyMDA6XCIjN2M0ZGZmXCIsYTQwMDpcIiM2NTFmZmZcIixhNzAwOlwiIzYyMDBlYVwifSxzPXs1MDpcIiNlOGVhZjZcIiwxMDA6XCIjYzVjYWU5XCIsMjAwOlwiIzlmYThkYVwiLDMwMDpcIiM3OTg2Y2JcIiw0MDA6XCIjNWM2YmMwXCIsNTAwOlwiIzNmNTFiNVwiLDYwMDpcIiMzOTQ5YWJcIiw3MDA6XCIjMzAzZjlmXCIsODAwOlwiIzI4MzU5M1wiLDkwMDpcIiMxYTIzN2VcIixhMTAwOlwiIzhjOWVmZlwiLGEyMDA6XCIjNTM2ZGZlXCIsYTQwMDpcIiMzZDVhZmVcIixhNzAwOlwiIzMwNGZmZVwifSxjPXs1MDpcIiNlM2YyZmRcIiwxMDA6XCIjYmJkZWZiXCIsMjAwOlwiIzkwY2FmOVwiLDMwMDpcIiM2NGI1ZjZcIiw0MDA6XCIjNDJhNWY1XCIsNTAwOlwiIzIxOTZmM1wiLDYwMDpcIiMxZTg4ZTVcIiw3MDA6XCIjMTk3NmQyXCIsODAwOlwiIzE1NjVjMFwiLDkwMDpcIiMwZDQ3YTFcIixhMTAwOlwiIzgyYjFmZlwiLGEyMDA6XCIjNDQ4YWZmXCIsYTQwMDpcIiMyOTc5ZmZcIixhNzAwOlwiIzI5NjJmZlwifSxsPXs1MDpcIiNlMWY1ZmVcIiwxMDA6XCIjYjNlNWZjXCIsMjAwOlwiIzgxZDRmYVwiLDMwMDpcIiM0ZmMzZjdcIiw0MDA6XCIjMjliNmY2XCIsNTAwOlwiIzAzYTlmNFwiLDYwMDpcIiMwMzliZTVcIiw3MDA6XCIjMDI4OGQxXCIsODAwOlwiIzAyNzdiZFwiLDkwMDpcIiMwMTU3OWJcIixhMTAwOlwiIzgwZDhmZlwiLGEyMDA6XCIjNDBjNGZmXCIsYTQwMDpcIiMwMGIwZmZcIixhNzAwOlwiIzAwOTFlYVwifSx1PXs1MDpcIiNlMGY3ZmFcIiwxMDA6XCIjYjJlYmYyXCIsMjAwOlwiIzgwZGVlYVwiLDMwMDpcIiM0ZGQwZTFcIiw0MDA6XCIjMjZjNmRhXCIsNTAwOlwiIzAwYmNkNFwiLDYwMDpcIiMwMGFjYzFcIiw3MDA6XCIjMDA5N2E3XCIsODAwOlwiIzAwODM4ZlwiLDkwMDpcIiMwMDYwNjRcIixhMTAwOlwiIzg0ZmZmZlwiLGEyMDA6XCIjMThmZmZmXCIsYTQwMDpcIiMwMGU1ZmZcIixhNzAwOlwiIzAwYjhkNFwifSxkPXs1MDpcIiNlMGYyZjFcIiwxMDA6XCIjYjJkZmRiXCIsMjAwOlwiIzgwY2JjNFwiLDMwMDpcIiM0ZGI2YWNcIiw0MDA6XCIjMjZhNjlhXCIsNTAwOlwiIzAwOTY4OFwiLDYwMDpcIiMwMDg5N2JcIiw3MDA6XCIjMDA3OTZiXCIsODAwOlwiIzAwNjk1Y1wiLDkwMDpcIiMwMDRkNDBcIixhMTAwOlwiI2E3ZmZlYlwiLGEyMDA6XCIjNjRmZmRhXCIsYTQwMDpcIiMxZGU5YjZcIixhNzAwOlwiIzAwYmZhNVwifSxoPXs1MDpcIiNlOGY1ZTlcIiwxMDA6XCIjYzhlNmM5XCIsMjAwOlwiI2E1ZDZhN1wiLDMwMDpcIiM4MWM3ODRcIiw0MDA6XCIjNjZiYjZhXCIsNTAwOlwiIzRjYWY1MFwiLDYwMDpcIiM0M2EwNDdcIiw3MDA6XCIjMzg4ZTNjXCIsODAwOlwiIzJlN2QzMlwiLDkwMDpcIiMxYjVlMjBcIixhMTAwOlwiI2I5ZjZjYVwiLGEyMDA6XCIjNjlmMGFlXCIsYTQwMDpcIiMwMGU2NzZcIixhNzAwOlwiIzAwYzg1M1wifSxmPXs1MDpcIiNmMWY4ZTlcIiwxMDA6XCIjZGNlZGM4XCIsMjAwOlwiI2M1ZTFhNVwiLDMwMDpcIiNhZWQ1ODFcIiw0MDA6XCIjOWNjYzY1XCIsNTAwOlwiIzhiYzM0YVwiLDYwMDpcIiM3Y2IzNDJcIiw3MDA6XCIjNjg5ZjM4XCIsODAwOlwiIzU1OGIyZlwiLDkwMDpcIiMzMzY5MWVcIixhMTAwOlwiI2NjZmY5MFwiLGEyMDA6XCIjYjJmZjU5XCIsYTQwMDpcIiM3NmZmMDNcIixhNzAwOlwiIzY0ZGQxN1wifSxwPXs1MDpcIiNmOWZiZTdcIiwxMDA6XCIjZjBmNGMzXCIsMjAwOlwiI2U2ZWU5Y1wiLDMwMDpcIiNkY2U3NzVcIiw0MDA6XCIjZDRlMTU3XCIsNTAwOlwiI2NkZGMzOVwiLDYwMDpcIiNjMGNhMzNcIiw3MDA6XCIjYWZiNDJiXCIsODAwOlwiIzllOWQyNFwiLDkwMDpcIiM4Mjc3MTdcIixhMTAwOlwiI2Y0ZmY4MVwiLGEyMDA6XCIjZWVmZjQxXCIsYTQwMDpcIiNjNmZmMDBcIixhNzAwOlwiI2FlZWEwMFwifSx2PXs1MDpcIiNmZmZkZTdcIiwxMDA6XCIjZmZmOWM0XCIsMjAwOlwiI2ZmZjU5ZFwiLDMwMDpcIiNmZmYxNzZcIiw0MDA6XCIjZmZlZTU4XCIsNTAwOlwiI2ZmZWIzYlwiLDYwMDpcIiNmZGQ4MzVcIiw3MDA6XCIjZmJjMDJkXCIsODAwOlwiI2Y5YTgyNVwiLDkwMDpcIiNmNTdmMTdcIixhMTAwOlwiI2ZmZmY4ZFwiLGEyMDA6XCIjZmZmZjAwXCIsYTQwMDpcIiNmZmVhMDBcIixhNzAwOlwiI2ZmZDYwMFwifSxnPXs1MDpcIiNmZmY4ZTFcIiwxMDA6XCIjZmZlY2IzXCIsMjAwOlwiI2ZmZTA4MlwiLDMwMDpcIiNmZmQ1NGZcIiw0MDA6XCIjZmZjYTI4XCIsNTAwOlwiI2ZmYzEwN1wiLDYwMDpcIiNmZmIzMDBcIiw3MDA6XCIjZmZhMDAwXCIsODAwOlwiI2ZmOGYwMFwiLDkwMDpcIiNmZjZmMDBcIixhMTAwOlwiI2ZmZTU3ZlwiLGEyMDA6XCIjZmZkNzQwXCIsYTQwMDpcIiNmZmM0MDBcIixhNzAwOlwiI2ZmYWIwMFwifSxiPXs1MDpcIiNmZmYzZTBcIiwxMDA6XCIjZmZlMGIyXCIsMjAwOlwiI2ZmY2M4MFwiLDMwMDpcIiNmZmI3NGRcIiw0MDA6XCIjZmZhNzI2XCIsNTAwOlwiI2ZmOTgwMFwiLDYwMDpcIiNmYjhjMDBcIiw3MDA6XCIjZjU3YzAwXCIsODAwOlwiI2VmNmMwMFwiLDkwMDpcIiNlNjUxMDBcIixhMTAwOlwiI2ZmZDE4MFwiLGEyMDA6XCIjZmZhYjQwXCIsYTQwMDpcIiNmZjkxMDBcIixhNzAwOlwiI2ZmNmQwMFwifSx4PXs1MDpcIiNmYmU5ZTdcIiwxMDA6XCIjZmZjY2JjXCIsMjAwOlwiI2ZmYWI5MVwiLDMwMDpcIiNmZjhhNjVcIiw0MDA6XCIjZmY3MDQzXCIsNTAwOlwiI2ZmNTcyMlwiLDYwMDpcIiNmNDUxMWVcIiw3MDA6XCIjZTY0YTE5XCIsODAwOlwiI2Q4NDMxNVwiLDkwMDpcIiNiZjM2MGNcIixhMTAwOlwiI2ZmOWU4MFwiLGEyMDA6XCIjZmY2ZTQwXCIsYTQwMDpcIiNmZjNkMDBcIixhNzAwOlwiI2RkMmMwMFwifSxtPXs1MDpcIiNlZmViZTlcIiwxMDA6XCIjZDdjY2M4XCIsMjAwOlwiI2JjYWFhNFwiLDMwMDpcIiNhMTg4N2ZcIiw0MDA6XCIjOGQ2ZTYzXCIsNTAwOlwiIzc5NTU0OFwiLDYwMDpcIiM2ZDRjNDFcIiw3MDA6XCIjNWQ0MDM3XCIsODAwOlwiIzRlMzQyZVwiLDkwMDpcIiMzZTI3MjNcIn0sXz17NTA6XCIjZmFmYWZhXCIsMTAwOlwiI2Y1ZjVmNVwiLDIwMDpcIiNlZWVlZWVcIiwzMDA6XCIjZTBlMGUwXCIsNDAwOlwiI2JkYmRiZFwiLDUwMDpcIiM5ZTllOWVcIiw2MDA6XCIjNzU3NTc1XCIsNzAwOlwiIzYxNjE2MVwiLDgwMDpcIiM0MjQyNDJcIiw5MDA6XCIjMjEyMTIxXCJ9LHc9ezUwOlwiI2VjZWZmMVwiLDEwMDpcIiNjZmQ4ZGNcIiwyMDA6XCIjYjBiZWM1XCIsMzAwOlwiIzkwYTRhZVwiLDQwMDpcIiM3ODkwOWNcIiw1MDA6XCIjNjA3ZDhiXCIsNjAwOlwiIzU0NmU3YVwiLDcwMDpcIiM0NTVhNjRcIiw4MDA6XCIjMzc0NzRmXCIsOTAwOlwiIzI2MzIzOFwifSxDPXtwcmltYXJ5OlwicmdiYSgwLCAwLCAwLCAwLjg3KVwiLHNlY29uZGFyeTpcInJnYmEoMCwgMCwgMCwgMC41NClcIixkaXNhYmxlZDpcInJnYmEoMCwgMCwgMCwgMC4zOClcIixkaXZpZGVyczpcInJnYmEoMCwgMCwgMCwgMC4xMilcIn0seT17cHJpbWFyeTpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMSlcIixzZWNvbmRhcnk6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNylcIixkaXNhYmxlZDpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KVwiLGRpdmlkZXJzOlwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKVwifSxrPXthY3RpdmU6XCJyZ2JhKDAsIDAsIDAsIDAuNTQpXCIsaW5hY3RpdmU6XCJyZ2JhKDAsIDAsIDAsIDAuMzgpXCJ9LEY9e2FjdGl2ZTpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMSlcIixpbmFjdGl2ZTpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KVwifSxBPVwiI2ZmZmZmZlwiLFM9XCIjMDAwMDAwXCI7dC5kZWZhdWx0PXtyZWQ6cixwaW5rOmEscHVycGxlOmksZGVlcFB1cnBsZTpvLGluZGlnbzpzLGJsdWU6YyxsaWdodEJsdWU6bCxjeWFuOnUsdGVhbDpkLGdyZWVuOmgsbGlnaHRHcmVlbjpmLGxpbWU6cCx5ZWxsb3c6dixhbWJlcjpnLG9yYW5nZTpiLGRlZXBPcmFuZ2U6eCxicm93bjptLGdyZXk6XyxibHVlR3JleTp3LGRhcmtUZXh0OkMsbGlnaHRUZXh0OnksZGFya0ljb25zOmssbGlnaHRJY29uczpGLHdoaXRlOkEsYmxhY2s6U319LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXN3YXRjaGVzXCIsYXR0cnM6e1wiZGF0YS1waWNrXCI6ZS5waWNrfX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1zd2F0Y2hlcy1ib3hcIn0sZS5fbChlLnBhbGV0dGUsZnVuY3Rpb24odCxyKXtyZXR1cm4gbihcImRpdlwiLHtrZXk6cixzdGF0aWNDbGFzczpcInZjLXN3YXRjaGVzLWNvbG9yLWdyb3VwXCJ9LGUuX2wodCxmdW5jdGlvbih0KXtyZXR1cm4gbihcImRpdlwiLHtrZXk6dCxjbGFzczpbXCJ2Yy1zd2F0Y2hlcy1jb2xvci1pdFwiLHtcInZjLXN3YXRjaGVzLWNvbG9yLS13aGl0ZVwiOlwiI0ZGRkZGRlwiPT09dH1dLHN0eWxlOntiYWNrZ3JvdW5kOnR9LGF0dHJzOntcImRhdGEtY29sb3JcIjp0fSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5oYW5kbGVyQ2xpY2sodCl9fX0sW24oXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOmUuZXF1YWwodCksZXhwcmVzc2lvbjpcImVxdWFsKGMpXCJ9XSxzdGF0aWNDbGFzczpcInZjLXN3YXRjaGVzLXBpY2tcIn0sW24oXCJzdmdcIix7c3RhdGljU3R5bGU6e3dpZHRoOlwiMjRweFwiLGhlaWdodDpcIjI0cHhcIn0sYXR0cnM6e3ZpZXdCb3g6XCIwIDAgMjQgMjRcIn19LFtuKFwicGF0aFwiLHthdHRyczp7ZDpcIk0yMSw3TDksMTlMMy41LDEzLjVMNC45MSwxMi4wOUw5LDE2LjE3TDE5LjU5LDUuNTlMMjEsN1pcIn19KV0pXSldKX0pKX0pKV0pfSxhPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgaT17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOmF9O3QuYT1pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtjfHxuKDUzKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1uKDE2KSxpPW4ubihhKTtmb3IodmFyIG8gaW4gYSlcImRlZmF1bHRcIiE9PW8mJmZ1bmN0aW9uKGUpe24uZCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gYVtlXX0pfShvKTt2YXIgcz1uKDY2KSxjPSExLGw9bigyKSx1PXIsZD1sKGkuYSxzLmEsITEsdSxudWxsLG51bGwpO2Qub3B0aW9ucy5fX2ZpbGU9XCJzcmMvY29tcG9uZW50cy9QaG90b3Nob3AudnVlXCIsdC5kZWZhdWx0PWQuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNTQpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCJiZGY0Mzk3OFwiLHIsITEpfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksJ1xcbi52Yy1waG90b3Nob3Age1xcbiAgYmFja2dyb3VuZDogI0RDRENEQztcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDFweCByZ2JhKDAsMCwwLC4yNSksIDAgOHB4IDE2cHggcmdiYSgwLDAsMCwuMTUpO1xcbiAgYm94LXNpemluZzogaW5pdGlhbDtcXG4gIHdpZHRoOiA1MTNweDtcXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG87XFxufVxcbi52Yy1waG90b3Nob3BfX2Rpc2FibGUtZmllbGRzIHtcXG4gIHdpZHRoOiAzOTBweDtcXG59XFxuLnZjLXBzLWhlYWQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KC0xODBkZWcsICNGMEYwRjAgMCUsICNENEQ0RDQgMTAwJSk7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0IxQjFCMTtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDAgMCByZ2JhKDI1NSwyNTUsMjU1LC4yKSwgaW5zZXQgMCAtMXB4IDAgMCByZ2JhKDAsMCwwLC4wMik7XFxuICBoZWlnaHQ6IDIzcHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweCA0cHggMCAwO1xcbiAgZm9udC1zaXplOiAxM3B4O1xcbiAgY29sb3I6ICM0RDRENEQ7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi52Yy1wcy1ib2R5IHtcXG4gIHBhZGRpbmc6IDE1cHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4udmMtcHMtc2F0dXJhdGlvbi13cmFwIHtcXG4gIHdpZHRoOiAyNTZweDtcXG4gIGhlaWdodDogMjU2cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXI6IDJweCBzb2xpZCAjQjNCM0IzO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNGMEYwRjA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4udmMtcHMtc2F0dXJhdGlvbi13cmFwIC52Yy1zYXR1cmF0aW9uLWNpcmNsZSB7XFxuICB3aWR0aDogMTJweDtcXG4gIGhlaWdodDogMTJweDtcXG59XFxuLnZjLXBzLWh1ZS13cmFwIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMjU2cHg7XFxuICB3aWR0aDogMTlweDtcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbiAgYm9yZGVyOiAycHggc29saWQgI0IzQjNCMztcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjRjBGMEYwO1xcbn1cXG4udmMtcHMtaHVlLXBvaW50ZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4udmMtcHMtaHVlLXBvaW50ZXItLWxlZnQsXFxuLnZjLXBzLWh1ZS1wb2ludGVyLS1yaWdodCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICBib3JkZXItd2lkdGg6IDVweCAwIDVweCA4cHg7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICM1NTU7XFxufVxcbi52Yy1wcy1odWUtcG9pbnRlci0tbGVmdDphZnRlcixcXG4udmMtcHMtaHVlLXBvaW50ZXItLXJpZ2h0OmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFwiXCI7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICBib3JkZXItd2lkdGg6IDRweCAwIDRweCA2cHg7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmY7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDFweDtcXG4gIGxlZnQ6IDFweDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC04cHgsIC01cHgpO1xcbn1cXG4udmMtcHMtaHVlLXBvaW50ZXItLWxlZnQge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTEzcHgsIC00cHgpO1xcbn1cXG4udmMtcHMtaHVlLXBvaW50ZXItLXJpZ2h0IHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDIwcHgsIC00cHgpIHJvdGF0ZSgxODBkZWcpO1xcbn1cXG4udmMtcHMtY29udHJvbHMge1xcbiAgd2lkdGg6IDE4MHB4O1xcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4udmMtcHMtY29udHJvbHNfX2Rpc2FibGUtZmllbGRzIHtcXG4gIHdpZHRoOiBhdXRvO1xcbn1cXG4udmMtcHMtYWN0aW9ucyB7XFxuICBtYXJnaW4tbGVmdDogMjBweDtcXG4gIGZsZXg6IDE7XFxufVxcbi52Yy1wcy1hYy1idG4ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KC0xODBkZWcsICNGRkZGRkYgMCUsICNFNkU2RTYgMTAwJSk7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjODc4Nzg3O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgYm94LXNoYWRvdzogMCAxcHggMCAwICNFQUVBRUE7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBjb2xvcjogIzAwMDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuLnZjLXBzLXByZXZpZXdzIHtcXG4gIHdpZHRoOiA2MHB4O1xcbn1cXG4udmMtcHMtcHJldmlld3NfX3N3YXRjaGVzIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNCM0IzQjM7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0YwRjBGMDtcXG4gIG1hcmdpbi1ib3R0b206IDJweDtcXG4gIG1hcmdpbi10b3A6IDFweDtcXG59XFxuLnZjLXBzLXByZXZpZXdzX19wci1jb2xvciB7XFxuICBoZWlnaHQ6IDM0cHg7XFxuICBib3gtc2hhZG93OiBpbnNldCAxcHggMCAwICMwMDAsIGluc2V0IC0xcHggMCAwICMwMDAsIGluc2V0IDAgMXB4IDAgIzAwMDtcXG59XFxuLnZjLXBzLXByZXZpZXdzX19sYWJlbCB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBjb2xvcjogIzAwMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLnZjLXBzLWZpZWxkcyB7XFxuICBwYWRkaW5nLXRvcDogNXB4O1xcbiAgcGFkZGluZy1ib3R0b206IDlweDtcXG4gIHdpZHRoOiA4MHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4udmMtcHMtZmllbGRzIC52Yy1pbnB1dF9faW5wdXQge1xcbiAgbWFyZ2luLWxlZnQ6IDQwJTtcXG4gIHdpZHRoOiA0MCU7XFxuICBoZWlnaHQ6IDE4cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjODg4ODg4O1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAxcHggMXB4IHJnYmEoMCwwLDAsLjEpLCAwIDFweCAwIDAgI0VDRUNFQztcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXG4gIGZvbnQtc2l6ZTogMTNweDtcXG4gIHBhZGRpbmctbGVmdDogM3B4O1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbn1cXG4udmMtcHMtZmllbGRzIC52Yy1pbnB1dF9fbGFiZWwsIC52Yy1wcy1maWVsZHMgLnZjLWlucHV0X19kZXNjIHtcXG4gIHRvcDogMDtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICBmb250LXNpemU6IDEzcHg7XFxuICBoZWlnaHQ6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMjJweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLnZjLXBzLWZpZWxkcyAudmMtaW5wdXRfX2xhYmVsIHtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMzRweDtcXG59XFxuLnZjLXBzLWZpZWxkcyAudmMtaW5wdXRfX2Rlc2Mge1xcbiAgcmlnaHQ6IDA7XFxuICB3aWR0aDogMDtcXG59XFxuLnZjLXBzLWZpZWxkc19fZGl2aWRlciB7XFxuICBoZWlnaHQ6IDVweDtcXG59XFxuLnZjLXBzLWZpZWxkc19faGV4IC52Yy1pbnB1dF9faW5wdXQge1xcbiAgbWFyZ2luLWxlZnQ6IDIwJTtcXG4gIHdpZHRoOiA4MCU7XFxuICBoZWlnaHQ6IDE4cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjODg4ODg4O1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAxcHggMXB4IHJnYmEoMCwwLDAsLjEpLCAwIDFweCAwIDAgI0VDRUNFQztcXG4gIG1hcmdpbi1ib3R0b206IDZweDtcXG4gIGZvbnQtc2l6ZTogMTNweDtcXG4gIHBhZGRpbmctbGVmdDogM3B4O1xcbn1cXG4udmMtcHMtZmllbGRzX19oZXggLnZjLWlucHV0X19sYWJlbCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDE0cHg7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgZm9udC1zaXplOiAxM3B4O1xcbiAgaGVpZ2h0OiAxOHB4O1xcbiAgbGluZS1oZWlnaHQ6IDIycHg7XFxufVxcbicsXCJcIl0pfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9big1Nik7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbZS5pLHIsXCJcIl1dKSxyLmxvY2FscyYmKGUuZXhwb3J0cz1yLmxvY2Fscyk7bigxKShcIjRiMmFjNTkyXCIsciwhMSl9LGZ1bmN0aW9uKGUsdCxuKXt0PWUuZXhwb3J0cz1uKDApKCExKSx0LnB1c2goW2UuaSxcIlxcbi52Yy1zYXR1cmF0aW9uLFxcbi52Yy1zYXR1cmF0aW9uLS13aGl0ZSxcXG4udmMtc2F0dXJhdGlvbi0tYmxhY2sge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbn1cXG4udmMtc2F0dXJhdGlvbi0td2hpdGUge1xcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZmZmLCByZ2JhKDI1NSwyNTUsMjU1LDApKTtcXG59XFxuLnZjLXNhdHVyYXRpb24tLWJsYWNrIHtcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsICMwMDAsIHJnYmEoMCwwLDAsMCkpO1xcbn1cXG4udmMtc2F0dXJhdGlvbi1wb2ludGVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLnZjLXNhdHVyYXRpb24tY2lyY2xlIHtcXG4gIGN1cnNvcjogaGVhZDtcXG4gIHdpZHRoOiA0cHg7XFxuICBoZWlnaHQ6IDRweDtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDEuNXB4ICNmZmYsIGluc2V0IDAgMCAxcHggMXB4IHJnYmEoMCwwLDAsLjMpLCAwIDAgMXB4IDJweCByZ2JhKDAsMCwwLC40KTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0ycHgsIC0ycHgpO1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlLHQsbil7ZnVuY3Rpb24gcih0KXt2YXIgbj12LHI9ZztyZXR1cm4gdj1nPXZvaWQgMCxrPXQseD1lLmFwcGx5KHIsbil9ZnVuY3Rpb24gaShlKXtyZXR1cm4gaz1lLG09c2V0VGltZW91dCh1LHQpLEY/cihlKTp4fWZ1bmN0aW9uIG8oZSl7dmFyIG49ZS1fLHI9ZS1rLGE9dC1uO3JldHVybiBBP0MoYSxiLXIpOmF9ZnVuY3Rpb24gbChlKXt2YXIgbj1lLV8scj1lLWs7cmV0dXJuIHZvaWQgMD09PV98fG4+PXR8fG48MHx8QSYmcj49Yn1mdW5jdGlvbiB1KCl7dmFyIGU9eSgpO2lmKGwoZSkpcmV0dXJuIGQoZSk7bT1zZXRUaW1lb3V0KHUsbyhlKSl9ZnVuY3Rpb24gZChlKXtyZXR1cm4gbT12b2lkIDAsUyYmdj9yKGUpOih2PWc9dm9pZCAwLHgpfWZ1bmN0aW9uIGgoKXt2b2lkIDAhPT1tJiZjbGVhclRpbWVvdXQobSksaz0wLHY9Xz1nPW09dm9pZCAwfWZ1bmN0aW9uIGYoKXtyZXR1cm4gdm9pZCAwPT09bT94OmQoeSgpKX1mdW5jdGlvbiBwKCl7dmFyIGU9eSgpLG49bChlKTtpZih2PWFyZ3VtZW50cyxnPXRoaXMsXz1lLG4pe2lmKHZvaWQgMD09PW0pcmV0dXJuIGkoXyk7aWYoQSlyZXR1cm4gbT1zZXRUaW1lb3V0KHUsdCkscihfKX1yZXR1cm4gdm9pZCAwPT09bSYmKG09c2V0VGltZW91dCh1LHQpKSx4fXZhciB2LGcsYix4LG0sXyxrPTAsRj0hMSxBPSExLFM9ITA7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKGMpO3JldHVybiB0PXModCl8fDAsYShuKSYmKEY9ISFuLmxlYWRpbmcsQT1cIm1heFdhaXRcImluIG4sYj1BP3cocyhuLm1heFdhaXQpfHwwLHQpOmIsUz1cInRyYWlsaW5nXCJpbiBuPyEhbi50cmFpbGluZzpTKSxwLmNhbmNlbD1oLHAuZmx1c2g9ZixwfWZ1bmN0aW9uIHIoZSx0LHIpe3ZhciBpPSEwLG89ITA7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKGMpO3JldHVybiBhKHIpJiYoaT1cImxlYWRpbmdcImluIHI/ISFyLmxlYWRpbmc6aSxvPVwidHJhaWxpbmdcImluIHI/ISFyLnRyYWlsaW5nOm8pLG4oZSx0LHtsZWFkaW5nOmksbWF4V2FpdDp0LHRyYWlsaW5nOm99KX1mdW5jdGlvbiBhKGUpe3ZhciB0PXR5cGVvZiBlO3JldHVybiEhZSYmKFwib2JqZWN0XCI9PXR8fFwiZnVuY3Rpb25cIj09dCl9ZnVuY3Rpb24gaShlKXtyZXR1cm4hIWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlfWZ1bmN0aW9uIG8oZSl7cmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGV8fGkoZSkmJl8uY2FsbChlKT09dX1mdW5jdGlvbiBzKGUpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXJldHVybiBlO2lmKG8oZSkpcmV0dXJuIGw7aWYoYShlKSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZS52YWx1ZU9mP2UudmFsdWVPZigpOmU7ZT1hKHQpP3QrXCJcIjp0fWlmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiAwPT09ZT9lOitlO2U9ZS5yZXBsYWNlKGQsXCJcIik7dmFyIG49Zi50ZXN0KGUpO3JldHVybiBufHxwLnRlc3QoZSk/dihlLnNsaWNlKDIpLG4/Mjo4KTpoLnRlc3QoZSk/bDorZX12YXIgYz1cIkV4cGVjdGVkIGEgZnVuY3Rpb25cIixsPU5hTix1PVwiW29iamVjdCBTeW1ib2xdXCIsZD0vXlxccyt8XFxzKyQvZyxoPS9eWy0rXTB4WzAtOWEtZl0rJC9pLGY9L14wYlswMV0rJC9pLHA9L14wb1swLTddKyQvaSx2PXBhcnNlSW50LGc9XCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJnQuT2JqZWN0PT09T2JqZWN0JiZ0LGI9XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLHg9Z3x8Ynx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLG09T2JqZWN0LnByb3RvdHlwZSxfPW0udG9TdHJpbmcsdz1NYXRoLm1heCxDPU1hdGgubWluLHk9ZnVuY3Rpb24oKXtyZXR1cm4geC5EYXRlLm5vdygpfTtlLmV4cG9ydHM9cn0pLmNhbGwodCxuKDU4KSl9LGZ1bmN0aW9uKGUsdCl7dmFyIG47bj1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXtuPW58fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKXx8KDAsZXZhbCkoXCJ0aGlzXCIpfWNhdGNoKGUpe1wib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJihuPXdpbmRvdyl9ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtyZWY6XCJjb250YWluZXJcIixzdGF0aWNDbGFzczpcInZjLXNhdHVyYXRpb25cIixzdHlsZTp7YmFja2dyb3VuZDplLmJnQ29sb3J9LG9uOnttb3VzZWRvd246ZS5oYW5kbGVNb3VzZURvd24sdG91Y2htb3ZlOmUuaGFuZGxlQ2hhbmdlLHRvdWNoc3RhcnQ6ZS5oYW5kbGVDaGFuZ2V9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNhdHVyYXRpb24tLXdoaXRlXCJ9KSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2F0dXJhdGlvbi0tYmxhY2tcIn0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1zYXR1cmF0aW9uLXBvaW50ZXJcIixzdHlsZTp7dG9wOmUucG9pbnRlclRvcCxsZWZ0OmUucG9pbnRlckxlZnR9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNhdHVyYXRpb24tY2lyY2xlXCJ9KV0pXSl9LGE9W107ci5fd2l0aFN0cmlwcGVkPSEwO3ZhciBpPXtyZW5kZXI6cixzdGF0aWNSZW5kZXJGbnM6YX07dC5hPWl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDYxKTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKTtuKDEpKFwiMDRmODY4MGNcIixyLCExKX0sZnVuY3Rpb24oZSx0LG4pe3Q9ZS5leHBvcnRzPW4oMCkoITEpLHQucHVzaChbZS5pLFwiXFxuLnZjLWFscGhhIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGJvdHRvbTogMHB4O1xcbiAgbGVmdDogMHB4O1xcbn1cXG4udmMtYWxwaGEtY2hlY2tib2FyZC13cmFwIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGJvdHRvbTogMHB4O1xcbiAgbGVmdDogMHB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLnZjLWFscGhhLWdyYWRpZW50IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGJvdHRvbTogMHB4O1xcbiAgbGVmdDogMHB4O1xcbn1cXG4udmMtYWxwaGEtY29udGFpbmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHotaW5kZXg6IDI7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBtYXJnaW46IDAgM3B4O1xcbn1cXG4udmMtYWxwaGEtcG9pbnRlciB7XFxuICB6LWluZGV4OiAyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4udmMtYWxwaGEtcGlja2VyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHdpZHRoOiA0cHg7XFxuICBib3JkZXItcmFkaXVzOiAxcHg7XFxuICBoZWlnaHQ6IDhweDtcXG4gIGJveC1zaGFkb3c6IDAgMCAycHggcmdiYSgwLCAwLCAwLCAuNik7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgbWFyZ2luLXRvcDogMXB4O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0ycHgpO1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDYzKTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKTtuKDEpKFwiMDA0NjI0YTJcIixyLCExKX0sZnVuY3Rpb24oZSx0LG4pe3Q9ZS5leHBvcnRzPW4oMCkoITEpLHQucHVzaChbZS5pLFwiXFxuLnZjLWNoZWNrZXJib2FyZCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICBib3R0b206IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcXG59XFxuXCIsXCJcIl0pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudDtyZXR1cm4oZS5fc2VsZi5fY3x8dCkoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaGVja2VyYm9hcmRcIixzdHlsZTplLmJnU3R5bGV9KX0sYT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIGk9e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczphfTt0LmE9aX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtYWxwaGFcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1hbHBoYS1jaGVja2JvYXJkLXdyYXBcIn0sW24oXCJjaGVja2JvYXJkXCIpXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtYWxwaGEtZ3JhZGllbnRcIixzdHlsZTp7YmFja2dyb3VuZDplLmdyYWRpZW50Q29sb3J9fSksZS5fdihcIiBcIiksbihcImRpdlwiLHtyZWY6XCJjb250YWluZXJcIixzdGF0aWNDbGFzczpcInZjLWFscGhhLWNvbnRhaW5lclwiLG9uOnttb3VzZWRvd246ZS5oYW5kbGVNb3VzZURvd24sdG91Y2htb3ZlOmUuaGFuZGxlQ2hhbmdlLHRvdWNoc3RhcnQ6ZS5oYW5kbGVDaGFuZ2V9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWFscGhhLXBvaW50ZXJcIixzdHlsZTp7bGVmdDoxMDAqZS5jb2xvcnMuYStcIiVcIn19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtYWxwaGEtcGlja2VyXCJ9KV0pXSldKX0sYT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIGk9e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczphfTt0LmE9aX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse2NsYXNzOltcInZjLXBob3Rvc2hvcFwiLGUuZGlzYWJsZUZpZWxkcz9cInZjLXBob3Rvc2hvcF9fZGlzYWJsZS1maWVsZHNcIjpcIlwiXX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1oZWFkXCJ9LFtlLl92KGUuX3MoZS5oZWFkKSldKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtcHMtYm9keVwifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLXNhdHVyYXRpb24td3JhcFwifSxbbihcInNhdHVyYXRpb25cIix7b246e2NoYW5nZTplLmNoaWxkQ2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5jb2xvcnMsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS5jb2xvcnM9dH0sZXhwcmVzc2lvbjpcImNvbG9yc1wifX0pXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtcHMtaHVlLXdyYXBcIn0sW24oXCJodWVcIix7YXR0cnM6e2RpcmVjdGlvbjpcInZlcnRpY2FsXCJ9LG9uOntjaGFuZ2U6ZS5jaGlsZENoYW5nZX0sbW9kZWw6e3ZhbHVlOmUuY29sb3JzLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuY29sb3JzPXR9LGV4cHJlc3Npb246XCJjb2xvcnNcIn19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtcHMtaHVlLXBvaW50ZXJcIn0sW24oXCJpXCIse3N0YXRpY0NsYXNzOlwidmMtcHMtaHVlLXBvaW50ZXItLWxlZnRcIn0pLG4oXCJpXCIse3N0YXRpY0NsYXNzOlwidmMtcHMtaHVlLXBvaW50ZXItLXJpZ2h0XCJ9KV0pXSldLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7Y2xhc3M6W1widmMtcHMtY29udHJvbHNcIixlLmRpc2FibGVGaWVsZHM/XCJ2Yy1wcy1jb250cm9sc19fZGlzYWJsZS1maWVsZHNcIjpcIlwiXX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1wcmV2aWV3c1wifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLXByZXZpZXdzX19sYWJlbFwifSxbZS5fdihcIm5ld1wiKV0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1wcmV2aWV3c19fc3dhdGNoZXNcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1wcmV2aWV3c19fcHItY29sb3JcIixzdHlsZTp7YmFja2dyb3VuZDplLmNvbG9ycy5oZXh9fSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLXByZXZpZXdzX19wci1jb2xvclwiLHN0eWxlOntiYWNrZ3JvdW5kOmUuY3VycmVudENvbG9yfSxvbjp7Y2xpY2s6ZS5jbGlja0N1cnJlbnRDb2xvcn19KV0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1wcmV2aWV3c19fbGFiZWxcIn0sW2UuX3YoXCJjdXJyZW50XCIpXSldKSxlLl92KFwiIFwiKSxlLmRpc2FibGVGaWVsZHM/ZS5fZSgpOm4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1hY3Rpb25zXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtcHMtYWMtYnRuXCIsb246e2NsaWNrOmUuaGFuZGxlQWNjZXB0fX0sW2UuX3YoXCJPS1wiKV0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1hYy1idG5cIixvbjp7Y2xpY2s6ZS5oYW5kbGVDYW5jZWx9fSxbZS5fdihcIkNhbmNlbFwiKV0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1wcy1maWVsZHNcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJoXCIsZGVzYzpcIsKwXCIsdmFsdWU6ZS5oc3YuaH0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pLGUuX3YoXCIgXCIpLG4oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJzXCIsZGVzYzpcIiVcIix2YWx1ZTplLmhzdi5zLG1heDoxMDB9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KSxlLl92KFwiIFwiKSxuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwidlwiLGRlc2M6XCIlXCIsdmFsdWU6ZS5oc3YudixtYXg6MTAwfSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLWZpZWxkc19fZGl2aWRlclwifSksZS5fdihcIiBcIiksbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcInJcIix2YWx1ZTplLmNvbG9ycy5yZ2JhLnJ9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KSxlLl92KFwiIFwiKSxuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiZ1wiLHZhbHVlOmUuY29sb3JzLnJnYmEuZ30sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pLGUuX3YoXCIgXCIpLG4oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJiXCIsdmFsdWU6ZS5jb2xvcnMucmdiYS5ifSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXBzLWZpZWxkc19fZGl2aWRlclwifSksZS5fdihcIiBcIiksbihcImVkLWluXCIse3N0YXRpY0NsYXNzOlwidmMtcHMtZmllbGRzX19oZXhcIixhdHRyczp7bGFiZWw6XCIjXCIsdmFsdWU6ZS5oZXh9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSldKV0pXSldKX0sYT1bXTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIGk9e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczphfTt0LmE9aX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7Y3x8big2OCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9bigyMCksaT1uLm4oYSk7Zm9yKHZhciBvIGluIGEpXCJkZWZhdWx0XCIhPT1vJiZmdW5jdGlvbihlKXtuLmQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIGFbZV19KX0obyk7dmFyIHM9big3MCksYz0hMSxsPW4oMiksdT1yLGQ9bChpLmEscy5hLCExLHUsbnVsbCxudWxsKTtkLm9wdGlvbnMuX19maWxlPVwic3JjL2NvbXBvbmVudHMvU2tldGNoLnZ1ZVwiLHQuZGVmYXVsdD1kLmV4cG9ydHN9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDY5KTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKTtuKDEpKFwiZTc1NzRjMThcIixyLCExKX0sZnVuY3Rpb24oZSx0LG4pe3Q9ZS5leHBvcnRzPW4oMCkoITEpLHQucHVzaChbZS5pLFwiXFxuLnZjLXNrZXRjaCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMjAwcHg7XFxuICBwYWRkaW5nOiAxMHB4IDEwcHggMDtcXG4gIGJveC1zaXppbmc6IGluaXRpYWw7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSwgMCA4cHggMTZweCByZ2JhKDAsMCwwLC4xNSk7XFxufVxcbi52Yy1za2V0Y2gtc2F0dXJhdGlvbi13cmFwIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZy1ib3R0b206IDc1JTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi52Yy1za2V0Y2gtY29udHJvbHMge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLnZjLXNrZXRjaC1zbGlkZXJzIHtcXG4gIHBhZGRpbmc6IDRweCAwO1xcbiAgZmxleDogMTtcXG59XFxuLnZjLXNrZXRjaC1zbGlkZXJzIC52Yy1odWUsXFxuLnZjLXNrZXRjaC1zbGlkZXJzIC52Yy1hbHBoYS1ncmFkaWVudCB7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcbi52Yy1za2V0Y2gtaHVlLXdyYXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiAxMHB4O1xcbn1cXG4udmMtc2tldGNoLWFscGhhLXdyYXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiAxMHB4O1xcbiAgbWFyZ2luLXRvcDogNHB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLnZjLXNrZXRjaC1jb2xvci13cmFwIHtcXG4gIHdpZHRoOiAyNHB4O1xcbiAgaGVpZ2h0OiAyNHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbWFyZ2luLXRvcDogNHB4O1xcbiAgbWFyZ2luLWxlZnQ6IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuLnZjLXNrZXRjaC1hY3RpdmUtY29sb3Ige1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSwgaW5zZXQgMCAwIDRweCByZ2JhKDAsMCwwLC4yNSk7XFxuICB6LWluZGV4OiAyO1xcbn1cXG4udmMtc2tldGNoLWNvbG9yLXdyYXAgLnZjLWNoZWNrZXJib2FyZCB7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGF1dG87XFxufVxcbi52Yy1za2V0Y2gtZmllbGQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmctdG9wOiA0cHg7XFxufVxcbi52Yy1za2V0Y2gtZmllbGQgLnZjLWlucHV0X19pbnB1dCB7XFxuICB3aWR0aDogODAlO1xcbiAgcGFkZGluZzogNHB4IDEwJSAzcHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxcHggI2NjYztcXG4gIGZvbnQtc2l6ZTogMTFweDtcXG59XFxuLnZjLXNrZXRjaC1maWVsZCAudmMtaW5wdXRfX2xhYmVsIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAxMXB4O1xcbiAgY29sb3I6ICMyMjI7XFxuICBwYWRkaW5nLXRvcDogM3B4O1xcbiAgcGFkZGluZy1ib3R0b206IDRweDtcXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcbn1cXG4udmMtc2tldGNoLWZpZWxkLS1zaW5nbGUge1xcbiAgZmxleDogMTtcXG4gIHBhZGRpbmctbGVmdDogNnB4O1xcbn1cXG4udmMtc2tldGNoLWZpZWxkLS1kb3VibGUge1xcbiAgZmxleDogMjtcXG59XFxuLnZjLXNrZXRjaC1wcmVzZXRzIHtcXG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XFxuICBtYXJnaW4tbGVmdDogLTEwcHg7XFxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICBwYWRkaW5nLXRvcDogMTBweDtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWVlO1xcbn1cXG4udmMtc2tldGNoLXByZXNldHMtY29sb3Ige1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbjogMCAxMHB4IDEwcHggMDtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB3aWR0aDogMTZweDtcXG4gIGhlaWdodDogMTZweDtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDFweCByZ2JhKDAsMCwwLC4xNSk7XFxufVxcbi52Yy1za2V0Y2hfX2Rpc2FibGUtYWxwaGEgLnZjLXNrZXRjaC1jb2xvci13cmFwIHtcXG4gIGhlaWdodDogMTBweDtcXG59XFxuXCIsXCJcIl0pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7Y2xhc3M6W1widmMtc2tldGNoXCIsZS5kaXNhYmxlQWxwaGE/XCJ2Yy1za2V0Y2hfX2Rpc2FibGUtYWxwaGFcIjpcIlwiXX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtc2F0dXJhdGlvbi13cmFwXCJ9LFtuKFwic2F0dXJhdGlvblwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtY29udHJvbHNcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtc2xpZGVyc1wifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNrZXRjaC1odWUtd3JhcFwifSxbbihcImh1ZVwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpLGUuX3YoXCIgXCIpLGUuZGlzYWJsZUFscGhhP2UuX2UoKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLWFscGhhLXdyYXBcIn0sW24oXCJhbHBoYVwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpXSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNrZXRjaC1jb2xvci13cmFwXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLWFjdGl2ZS1jb2xvclwiLHN0eWxlOntiYWNrZ3JvdW5kOmUuYWN0aXZlQ29sb3J9fSksZS5fdihcIiBcIiksbihcImNoZWNrYm9hcmRcIildLDEpXSksZS5fdihcIiBcIiksZS5kaXNhYmxlRmllbGRzP2UuX2UoKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLWZpZWxkXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLWZpZWxkLS1kb3VibGVcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJoZXhcIix2YWx1ZTplLmhleH0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLWZpZWxkLS1zaW5nbGVcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJyXCIsdmFsdWU6ZS5jb2xvcnMucmdiYS5yfSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSldLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1za2V0Y2gtZmllbGQtLXNpbmdsZVwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImdcIix2YWx1ZTplLmNvbG9ycy5yZ2JhLmd9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNrZXRjaC1maWVsZC0tc2luZ2xlXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiYlwiLHZhbHVlOmUuY29sb3JzLnJnYmEuYn0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKSxlLl92KFwiIFwiKSxlLmRpc2FibGVBbHBoYT9lLl9lKCk6bihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLXNrZXRjaC1maWVsZC0tc2luZ2xlXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiYVwiLHZhbHVlOmUuY29sb3JzLmEsXCJhcnJvdy1vZmZzZXRcIjouMDEsbWF4OjF9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSldKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtc2tldGNoLXByZXNldHNcIn0sZS5fbChlLnByZXNldENvbG9ycyxmdW5jdGlvbih0KXtyZXR1cm4gbihcImRpdlwiLHtrZXk6dCxzdGF0aWNDbGFzczpcInZjLXNrZXRjaC1wcmVzZXRzLWNvbG9yXCIsc3R5bGU6e2JhY2tncm91bmQ6dH0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuaGFuZGxlUHJlc2V0KHQpfX19KX0pKV0pfSxhPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgaT17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOmF9O3QuYT1pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtjfHxuKDcyKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1uKDIxKSxpPW4ubihhKTtmb3IodmFyIG8gaW4gYSlcImRlZmF1bHRcIiE9PW8mJmZ1bmN0aW9uKGUpe24uZCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gYVtlXX0pfShvKTt2YXIgcz1uKDc0KSxjPSExLGw9bigyKSx1PXIsZD1sKGkuYSxzLmEsITEsdSxudWxsLG51bGwpO2Qub3B0aW9ucy5fX2ZpbGU9XCJzcmMvY29tcG9uZW50cy9DaHJvbWUudnVlXCIsdC5kZWZhdWx0PWQuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNzMpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSksci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpO24oMSkoXCIyYTI0MzVmOFwiLHIsITEpfSxmdW5jdGlvbihlLHQsbil7dD1lLmV4cG9ydHM9bigwKSghMSksdC5wdXNoKFtlLmksXCJcXG4udmMtY2hyb21lIHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBib3gtc2hhZG93OiAwIDAgMnB4IHJnYmEoMCwwLDAsLjMpLCAwIDRweCA4cHggcmdiYSgwLDAsMCwuMyk7XFxuICBib3gtc2l6aW5nOiBpbml0aWFsO1xcbiAgd2lkdGg6IDIyNXB4O1xcbiAgZm9udC1mYW1pbHk6IE1lbmxvO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuLnZjLWNocm9tZS1jb250cm9scyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4udmMtY2hyb21lLWNvbG9yLXdyYXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDM2cHg7XFxufVxcbi52Yy1jaHJvbWUtYWN0aXZlLWNvbG9yIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAzMHB4O1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTVweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB6LWluZGV4OiAxO1xcbn1cXG4udmMtY2hyb21lLWNvbG9yLXdyYXAgLnZjLWNoZWNrZXJib2FyZCB7XFxuICB3aWR0aDogMzBweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGF1dG87XFxufVxcbi52Yy1jaHJvbWUtc2xpZGVycyB7XFxuICBmbGV4OiAxO1xcbn1cXG4udmMtY2hyb21lLWZpZWxkcy13cmFwIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nLXRvcDogMTZweDtcXG59XFxuLnZjLWNocm9tZS1maWVsZHMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1hcmdpbi1sZWZ0OiAtNnB4O1xcbiAgZmxleDogMTtcXG59XFxuLnZjLWNocm9tZS1maWVsZCB7XFxuICBwYWRkaW5nLWxlZnQ6IDZweDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4udmMtY2hyb21lLXRvZ2dsZS1idG4ge1xcbiAgd2lkdGg6IDMycHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnZjLWNocm9tZS10b2dnbGUtaWNvbiB7XFxuICBtYXJnaW4tcmlnaHQ6IC00cHg7XFxuICBtYXJnaW4tdG9wOiAxMnB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgei1pbmRleDogMjtcXG59XFxuLnZjLWNocm9tZS10b2dnbGUtaWNvbi1oaWdobGlnaHQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDI0cHg7XFxuICBoZWlnaHQ6IDI4cHg7XFxuICBiYWNrZ3JvdW5kOiAjZWVlO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgdG9wOiAxMHB4O1xcbiAgbGVmdDogMTJweDtcXG59XFxuLnZjLWNocm9tZS1odWUtd3JhcCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwcHg7XFxuICBtYXJnaW4tYm90dG9tOiA4cHg7XFxufVxcbi52Yy1jaHJvbWUtYWxwaGEtd3JhcCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwcHg7XFxufVxcbi52Yy1jaHJvbWUtaHVlLXdyYXAgLnZjLWh1ZSB7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcbi52Yy1jaHJvbWUtYWxwaGEtd3JhcCAudmMtYWxwaGEtZ3JhZGllbnQge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbn1cXG4udmMtY2hyb21lLWh1ZS13cmFwIC52Yy1odWUtcGlja2VyLCAudmMtY2hyb21lLWFscGhhLXdyYXAgLnZjLWFscGhhLXBpY2tlciB7XFxuICB3aWR0aDogMTJweDtcXG4gIGhlaWdodDogMTJweDtcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC02cHgsIC0ycHgpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0OCwgMjQ4LCAyNDgpO1xcbiAgYm94LXNoYWRvdzogMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KTtcXG59XFxuLnZjLWNocm9tZS1ib2R5IHtcXG4gIHBhZGRpbmc6IDE2cHggMTZweCAxMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuLnZjLWNocm9tZS1zYXR1cmF0aW9uLXdyYXAge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLWJvdHRvbTogNTUlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4IDJweCAwIDA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4udmMtY2hyb21lLXNhdHVyYXRpb24td3JhcCAudmMtc2F0dXJhdGlvbi1jaXJjbGUge1xcbiAgd2lkdGg6IDEycHg7XFxuICBoZWlnaHQ6IDEycHg7XFxufVxcbi52Yy1jaHJvbWUtZmllbGRzIC52Yy1pbnB1dF9faW5wdXQge1xcbiAgZm9udC1zaXplOiAxMXB4O1xcbiAgY29sb3I6ICMzMzM7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDFweCAjZGFkYWRhO1xcbiAgaGVpZ2h0OiAyMXB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4udmMtY2hyb21lLWZpZWxkcyAudmMtaW5wdXRfX2xhYmVsIHtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBsaW5lLWhlaWdodDogMTFweDtcXG4gIGNvbG9yOiAjOTY5Njk2O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXJnaW4tdG9wOiAxMnB4O1xcbn1cXG4udmMtY2hyb21lX19kaXNhYmxlLWFscGhhIC52Yy1jaHJvbWUtYWN0aXZlLWNvbG9yIHtcXG4gIHdpZHRoOiAxOHB4O1xcbiAgaGVpZ2h0OiAxOHB4O1xcbn1cXG4udmMtY2hyb21lX19kaXNhYmxlLWFscGhhIC52Yy1jaHJvbWUtY29sb3Itd3JhcCB7XFxuICB3aWR0aDogMzBweDtcXG59XFxuLnZjLWNocm9tZV9fZGlzYWJsZS1hbHBoYSAudmMtY2hyb21lLWh1ZS13cmFwIHtcXG4gIG1hcmdpbi10b3A6IDRweDtcXG4gIG1hcmdpbi1ib3R0b206IDRweDtcXG59XFxuXCIsXCJcIl0pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7Y2xhc3M6W1widmMtY2hyb21lXCIsZS5kaXNhYmxlQWxwaGE/XCJ2Yy1jaHJvbWVfX2Rpc2FibGUtYWxwaGFcIjpcIlwiXX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtc2F0dXJhdGlvbi13cmFwXCJ9LFtuKFwic2F0dXJhdGlvblwiLHtvbjp7Y2hhbmdlOmUuY2hpbGRDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLmNvbG9ycyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmNvbG9ycz10fSxleHByZXNzaW9uOlwiY29sb3JzXCJ9fSldLDEpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtYm9keVwifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1jb250cm9sc1wifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1jb2xvci13cmFwXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWFjdGl2ZS1jb2xvclwiLHN0eWxlOntiYWNrZ3JvdW5kOmUuYWN0aXZlQ29sb3J9fSksZS5fdihcIiBcIiksZS5kaXNhYmxlQWxwaGE/ZS5fZSgpOm4oXCJjaGVja2JvYXJkXCIpXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLXNsaWRlcnNcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtaHVlLXdyYXBcIn0sW24oXCJodWVcIix7b246e2NoYW5nZTplLmNoaWxkQ2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5jb2xvcnMsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS5jb2xvcnM9dH0sZXhwcmVzc2lvbjpcImNvbG9yc1wifX0pXSwxKSxlLl92KFwiIFwiKSxlLmRpc2FibGVBbHBoYT9lLl9lKCk6bihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1hbHBoYS13cmFwXCJ9LFtuKFwiYWxwaGFcIix7b246e2NoYW5nZTplLmNoaWxkQ2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5jb2xvcnMsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS5jb2xvcnM9dH0sZXhwcmVzc2lvbjpcImNvbG9yc1wifX0pXSwxKV0pXSksZS5fdihcIiBcIiksZS5kaXNhYmxlRmllbGRzP2UuX2UoKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkcy13cmFwXCJ9LFtuKFwiZGl2XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTowPT09ZS5maWVsZHNJbmRleCxleHByZXNzaW9uOlwiZmllbGRzSW5kZXggPT09IDBcIn1dLHN0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkc1wifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1maWVsZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImhleFwiLHZhbHVlOmUuY29sb3JzLmhleH0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKV0pLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOjE9PT1lLmZpZWxkc0luZGV4LGV4cHJlc3Npb246XCJmaWVsZHNJbmRleCA9PT0gMVwifV0sc3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtZmllbGRzXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiclwiLHZhbHVlOmUuY29sb3JzLnJnYmEucn0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiZ1wiLHZhbHVlOmUuY29sb3JzLnJnYmEuZ30sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiYlwiLHZhbHVlOmUuY29sb3JzLnJnYmEuYn0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKSxlLl92KFwiIFwiKSxlLmRpc2FibGVBbHBoYT9lLl9lKCk6bihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1maWVsZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImFcIix2YWx1ZTplLmNvbG9ycy5hLFwiYXJyb3ctb2Zmc2V0XCI6LjAxLG1heDoxfSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSldLDEpXSksZS5fdihcIiBcIiksbihcImRpdlwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6Mj09PWUuZmllbGRzSW5kZXgsZXhwcmVzc2lvbjpcImZpZWxkc0luZGV4ID09PSAyXCJ9XSxzdGF0aWNDbGFzczpcInZjLWNocm9tZS1maWVsZHNcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtZmllbGRcIn0sW24oXCJlZC1pblwiLHthdHRyczp7bGFiZWw6XCJoXCIsdmFsdWU6ZS5oc2wuaH0sb246e2NoYW5nZTplLmlucHV0Q2hhbmdlfX0pXSwxKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwic1wiLHZhbHVlOmUuaHNsLnN9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZjLWNocm9tZS1maWVsZFwifSxbbihcImVkLWluXCIse2F0dHJzOntsYWJlbDpcImxcIix2YWx1ZTplLmhzbC5sfSxvbjp7Y2hhbmdlOmUuaW5wdXRDaGFuZ2V9fSldLDEpLGUuX3YoXCIgXCIpLGUuZGlzYWJsZUFscGhhP2UuX2UoKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLWZpZWxkXCJ9LFtuKFwiZWQtaW5cIix7YXR0cnM6e2xhYmVsOlwiYVwiLHZhbHVlOmUuY29sb3JzLmEsXCJhcnJvdy1vZmZzZXRcIjouMDEsbWF4OjF9LG9uOntjaGFuZ2U6ZS5pbnB1dENoYW5nZX19KV0sMSldKSxlLl92KFwiIFwiKSxuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLXRvZ2dsZS1idG5cIixvbjp7Y2xpY2s6ZS50b2dnbGVWaWV3c319LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidmMtY2hyb21lLXRvZ2dsZS1pY29uXCJ9LFtuKFwic3ZnXCIse3N0YXRpY1N0eWxlOnt3aWR0aDpcIjI0cHhcIixoZWlnaHQ6XCIyNHB4XCJ9LGF0dHJzOnt2aWV3Qm94OlwiMCAwIDI0IDI0XCJ9LG9uOnttb3VzZW92ZXI6ZS5zaG93SGlnaGxpZ2h0LG1vdXNlZW50ZXI6ZS5zaG93SGlnaGxpZ2h0LG1vdXNlb3V0OmUuaGlkZUhpZ2hsaWdodH19LFtuKFwicGF0aFwiLHthdHRyczp7ZmlsbDpcIiMzMzNcIixkOlwiTTEyLDE4LjE3TDguODMsMTVMNy40MiwxNi40MUwxMiwyMUwxNi41OSwxNi40MUwxNS4xNywxNU0xMiw1LjgzTDE1LjE3LDlMMTYuNTgsNy41OUwxMiwzTDcuNDEsNy41OUw4LjgzLDlMMTIsNS44M1pcIn19KV0pXSksZS5fdihcIiBcIiksbihcImRpdlwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6ZS5oaWdobGlnaHQsZXhwcmVzc2lvbjpcImhpZ2hsaWdodFwifV0sc3RhdGljQ2xhc3M6XCJ2Yy1jaHJvbWUtdG9nZ2xlLWljb24taGlnaGxpZ2h0XCJ9KV0pXSldKV0pfSxhPVtdO3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgaT17cmVuZGVyOnIsc3RhdGljUmVuZGVyRm5zOmF9O3QuYT1pfV0pfSk7IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9CdXR0b25Db2xvclBpY2tlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01MzFhMDI2YSZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9CdXR0b25Db2xvclBpY2tlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01MzFhMDI2YSZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLmJ0bi1jb2xvci1waWNrZXIgLnRleHRbZGF0YS12LTUzMWEwMjZhXXtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBtaW4td2lkdGg6IDYwcHg7XFxufVxcbi5idG4tY29sb3ItcGlja2VyIC5zd2F0Y2hbZGF0YS12LTUzMWEwMjZhXXtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICB3aWR0aDogMTJweDtcXG4gICAgaGVpZ2h0OiAxMnB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XFxufVxcbi5wb3B1cFtkYXRhLXYtNTMxYTAyNmFde1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgei1pbmRleDogMTAwO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjQpO1xcbn1cXG4ucG9wdXAtaW5uZXJbZGF0YS12LTUzMWEwMjZhXXtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB6LWluZGV4OiAxMDA7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ29udHJvbEdyb3VwQ2FudmFzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03ZTI5YTk1MCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Db250cm9sR3JvdXBDYW52YXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Db250cm9sR3JvdXBDYW52YXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL01lbnVDb2xsYXBzaWJsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzI5ZTRjZDcmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTWVudUNvbGxhcHNpYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTWVudUNvbGxhcHNpYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9NZW51Q29sbGFwc2libGUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NzI5ZTRjZDcmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjcyOWU0Y2Q3XCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NZW51Q29sbGFwc2libGUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NzI5ZTRjZDcmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWVudUNvbGxhcHNpYmxlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTcyOWU0Y2Q3JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uaGFtYnVyZ2VyW2RhdGEtdi03MjllNGNkN10ge1xcbiAgICB3aWR0aDogMjhweDtcXG4gICAgaGVpZ2h0OiAxOHB4O1xcbn1cXG4uaGFtYnVyZ2VyIC5ob3Jpem9udGFsLWJhcltkYXRhLXYtNzI5ZTRjZDdde1xcbiAgICB3aWR0aDogNzUlO1xcbiAgICBoZWlnaHQ6IDJweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjtcXG4gICAgbWFyZ2luOiA0cHggYXV0bztcXG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjFzLCB0cmFuc2Zvcm0gMC4yNXM7XFxufVxcbi5oYW1idXJnZXIuYWN0aXZlIC5ob3Jpem9udGFsLWJhcltkYXRhLXYtNzI5ZTRjZDddOmZpcnN0LWNoaWxkIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKSB0cmFuc2xhdGUoLTRweCwgNHB4KTtcXG59XFxuLmhhbWJ1cmdlci5hY3RpdmUgLmhvcml6b250YWwtYmFyW2RhdGEtdi03MjllNGNkN106bnRoLWNoaWxkKGV2ZW4pIHtcXG4gICAgb3BhY2l0eTogMDtcXG59XFxuLmhhbWJ1cmdlci5hY3RpdmUgLmhvcml6b250YWwtYmFyW2RhdGEtdi03MjllNGNkN106bGFzdC1jaGlsZCB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKSB0cmFuc2xhdGUoLTRweCwgLTRweCk7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWFpbkFwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00MjYzMzhiOCZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NYWluQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTQyNjMzOGI4JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uaGFtYnVyZ2VyLW1lbnVbZGF0YS12LTQyNjMzOGI4XSB7XFxuICAgIG1hcmdpbjogMTJweCBhdXRvO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9hcHAuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjJmZjAzYjU2XCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcbmV4cG9ydHMuaShyZXF1aXJlKFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2J1dHRvbnMuY3NzXCIpLCBcIlwiKTtcbmV4cG9ydHMuaShyZXF1aXJlKFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Zvcm1zLmNzc1wiKSwgXCJcIik7XG5leHBvcnRzLmkocmVxdWlyZShcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ncmlkLmNzc1wiKSwgXCJcIik7XG5leHBvcnRzLmkocmVxdWlyZShcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9yZXNwb25zaXZlLmNzc1wiKSwgXCJcIik7XG5leHBvcnRzLmkocmVxdWlyZShcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi90eXBvZ3JhcGh5LmNzc1wiKSwgXCJcIik7XG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiOnJvb3R7XFxuICAgIC0tYnJhbmQtcHJpbWFyeS1odWU6IDUzO1xcbiAgICAtLWJyYW5kLXByaW1hcnktc2F0dXJhdGlvbjogOTAlO1xcbiAgICAtLWJyYW5kLXByaW1hcnktbGlnaHRuZXNzOiA0OSU7XFxuICAgIC0tYnJhbmQtcHJpbWFyeTogaHNsKHZhcigtLWJyYW5kLXByaW1hcnktaHVlKSwgdmFyKC0tYnJhbmQtcHJpbWFyeS1zYXR1cmF0aW9uKSwgdmFyKC0tYnJhbmQtcHJpbWFyeS1saWdodG5lc3MpKTtcXG5cXG4gICAgLS1icmFuZC1zZWNvbmRhcnktaHVlOiAyNTE7XFxuICAgIC0tYnJhbmQtc2Vjb25kYXJ5LXNhdHVyYXRpb246IDUlO1xcbiAgICAtLWJyYW5kLXNlY29uZGFyeS1saWdodG5lc3M6IDYwJTtcXG4gICAgLS1icmFuZC1zZWNvbmRhcnk6IGhzbCh2YXIoLS1icmFuZC1zZWNvbmRhcnktaHVlKSwgdmFyKC0tYnJhbmQtc2Vjb25kYXJ5LXNhdHVyYXRpb24pLCB2YXIoLS1icmFuZC1zZWNvbmRhcnktbGlnaHRuZXNzKSk7XFxuXFxuICAgIC0tYnJhbmQtdGVydGlhcnktaHVlOiAwO1xcbiAgICAtLWJyYW5kLXRlcnRpYXJ5LXNhdHVyYXRpb246IDAlO1xcbiAgICAtLWJyYW5kLXRlcnRpYXJ5LWxpZ2h0bmVzczogMTMlO1xcbiAgICAtLWJyYW5kLXRlcnRpYXJ5OiBoc2wodmFyKC0tYnJhbmQtdGVydGlhcnktaHVlKSwgdmFyKC0tYnJhbmQtdGVydGlhcnktc2F0dXJhdGlvbiksIHZhcigtLWJyYW5kLXRlcnRpYXJ5LWxpZ2h0bmVzcykpO1xcblxcbiAgICAtLXRleHQtY29sb3ItaHVlOiAwO1xcbiAgICAtLXRleHQtY29sb3Itc2F0dXJhdGlvbjogMCU7XFxuICAgIC0tdGV4dC1jb2xvci1saWdodG5lc3M6IDkzJTtcXG4gICAgLS10ZXh0LWNvbG9yOiBoc2wodmFyKC0tdGV4dC1jb2xvci1odWUpLCB2YXIoLS10ZXh0LWNvbG9yLXNhdHVyYXRpb24pLCB2YXIoLS10ZXh0LWNvbG9yLWxpZ2h0bmVzcykpO1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYnJhbmQtdGVydGlhcnkpO1xcbiAgICBmb250LWZhbWlseTogJ0luY29uc29sYXRhJywgbW9ub3NwYWNlO1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XFxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcXG4gICAgb3ZlcmZsb3cteDogYXV0bztcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uaW5saW5lLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcXG4gICAgYm9keSB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1icmFuZC1zZWNvbmRhcnkpO1xcbiAgICB9XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmJ0biB7XFxuICAgIC0tYnRuLWJnOiBoc2wodmFyKC0tYnJhbmQtc2Vjb25kYXJ5LWh1ZSksIHZhcigtLWJyYW5kLXNlY29uZGFyeS1zYXR1cmF0aW9uKSwgODAlKTtcXG4gICAgLS1idG4tYmctaG92ZXI6IHZhcigtLWJyYW5kLXNlY29uZGFyeSk7XFxuICAgIC0tYnRuLWJnLWZvY3VzOiB2YXIoLS1idG4tYmctaG92ZXIpO1xcbiAgICAtLWJ0bi1mZzogdmFyKC0tYnJhbmQtdGVydGlhcnkpO1xcbiAgICAtLWJ0bi1mZy1ob3ZlcjogdmFyKC0tYnJhbmQtcHJpbWFyeSk7XFxuICAgIC0tYnRuLWZnLWZvY3VzOiB2YXIoLS1icmFuZC1wcmltYXJ5KTtcXG4gICAgLS1idG4tYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYnJhbmQtc2Vjb25kYXJ5KTtcXG4gICAgLS1idG4tYm9yZGVyLWZvY3VzOiAxcHggc29saWQgdmFyKC0tYnJhbmQtcHJpbWFyeSk7XFxuICAgIC0tYnRuLXBhZGRpbmc6IDRweCA4cHg7XFxuICAgIC0tYnRuLW1hcmdpbjogMXB4IDJweDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZzogdmFyKC0tYnRuLXBhZGRpbmcpO1xcbiAgICBtYXJnaW46IHZhcigtLWJ0bi1tYXJnaW4pO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIGNvbG9yOiB2YXIoLS1idG4tZmcpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1idG4tYmcpO1xcbiAgICBib3JkZXI6IHZhcigtLWJ0bi1ib3JkZXIpO1xcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsXFxuICAgICAgICAgICAgICAgIGNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LFxcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQ7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbiAuYnRuOmhvdmVye1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1idG4tYmctaG92ZXIpO1xcbiAgICBjb2xvcjogdmFyKC0tYnRuLWZnLWhvdmVyKTtcXG59XFxuXFxuLmJ0bjphY3RpdmUsIC5idG46Zm9jdXN7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJ0bi1iZy1mb2N1cyk7XFxuICAgIGNvbG9yOiB2YXIoLS1idG4tZmctZm9jdXMpO1xcbiAgICBib3JkZXI6IHZhcigtLWJ0bi1ib3JkZXItZm9jdXMpO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImZpZWxkc2V0LmNvbnRyb2wtZ3JvdXB7XFxuICAgIC0tZmllbGRzZXQtYmc6IGhzbCh2YXIoLS1icmFuZC1zZWNvbmRhcnktaHVlKSwgdmFyKC0tYnJhbmQtc2Vjb25kYXJ5LXNhdHVyYXRpb24pLCA3MCUpO1xcbiAgICAtLWZpZWxkc2V0LWJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJyYW5kLXByaW1hcnkpO1xcbiAgICAtLWZpZWxkc2V0LW1hcmdpbjogMThweCBhdXRvO1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1maWVsZHNldC1iZyk7XFxuICAgIGNvbG9yOiB2YXIoLS1icmFuZC10ZXJ0aWFyeSk7XFxuICAgIGJvcmRlcjogdmFyKC0tZmllbGRzZXQtYm9yZGVyKTtcXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgICBtYXJnaW46IHZhcigtLWZpZWxkc2V0LW1hcmdpbilcXG59XFxuXFxuZmllbGRzZXQuY29udHJvbC1ncm91cCBsZWdlbmR7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcXG4gICAgdGV4dC1zaGFkb3c6IDAgMCAycHggdmFyKC0tYnJhbmQtdGVydGlhcnkpO1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIiNjb250YWluZXJ7XFxuICAgIC0tY29udGFpbmVyLXBhZGRpbmc6IDI0cHg7XFxuICAgIC0tY29udGFpbmVyLW1hcmdpbi1tZDogMThweDtcXG4gICAgLS1jb250cm9scy13aWR0aC1tZDogMjUwcHg7XFxuXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICdoZWFkZXInXFxuICAgICAgICAgICAgICAgICAgICAgICAgICdjb250cm9scydcXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMi41ZW0gYXV0byAxZnI7XFxuICAgIGdyaWQtZ2FwOiAydmggNHZ3O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1icmFuZC10ZXJ0aWFyeSk7XFxuICAgIHRyYW5zaXRpb246IG1hcmdpbiAwLjI1cyBlYXNlO1xcbiAgICBwYWRkaW5nOiB2YXIoLS1jb250YWluZXItcGFkZGluZyk7XFxuICAgIG1pbi1oZWlnaHQ6IGNhbGMoMTAwdmggLSAodmFyKC0tY29udGFpbmVyLW1hcmdpbi1tZCkqMikgLSAodmFyKC0tY29udGFpbmVyLXBhZGRpbmcpKjIpKTtcXG59XFxuXFxuI2hlYWRlcntcXG4gICAgZ3JpZC1hcmVhOiBoZWFkZXI7XFxuICAgIHRyYW5zaXRpb246IG5vbmU7XFxufVxcblxcbiNjb250cm9sc3tcXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcXG4gICAgZ3JpZC1hcmVhOiBjb250cm9scztcXG4gICAgei1pbmRleDogMjtcXG59XFxuXFxuI2NvbnRlbnR7XFxuICAgIHRyYW5zaXRpb246IG5vbmU7XFxuICAgIGdyaWQtYXJlYTogY29udGVudDtcXG4gICAgei1pbmRleDogMTtcXG4gICAgbWF4LXdpZHRoOiBjYWxjKDkwdncgLSB2YXIoLS1jb250YWluZXItcGFkZGluZykpO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBwYWRkaW5nOiAwIDAgMTJweCAwO1xcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2NDBweCkge1xcbiAgICAjY29udGFpbmVye1xcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogJ2hlYWRlciBoZWFkZXInXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29udHJvbHMgY29udGVudCc7XFxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHZhcigtLWNvbnRyb2xzLXdpZHRoLW1kKSAxZnI7XFxuICAgICAgICBtYXJnaW46IHZhcigtLWNvbnRhaW5lci1tYXJnaW4tbWQpO1xcbiAgICAgICAgYm94LXNoYWRvdzogNXB4IDVweCA1cHggMHB4IGhzbCh2YXIoLS1icmFuZC10ZXJ0aWFyeS1odWUpLCB2YXIoLS1icmFuZC10ZXJ0aWFyeS1zYXR1cmF0aW9uKSwgNiUpO1xcbiAgICB9XFxuXFxuICAgICNjb250ZW50e1xcbiAgICAgICAgbWF4LXdpZHRoOiBjYWxjKDEwMHZ3IC0gdmFyKC0tY29udHJvbHMtd2lkdGgtbWQpKTtcXG4gICAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgICBtYXJnaW46IDA7XFxuICAgIH1cXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZGlzcGxheS1zbSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uZGlzcGxheS1tZCB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MHB4KSB7XFxuICAgIC5kaXNwbGF5LXNtIHtcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIH1cXG5cXG4gICAgLmRpc3BsYXktbWQge1xcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgIH1cXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcXG4gICAgbWFyZ2luOiAwLjI1ZW0gMDtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIl0sInNvdXJjZVJvb3QiOiIifQ==